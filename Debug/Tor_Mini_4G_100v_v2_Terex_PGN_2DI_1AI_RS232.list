
Tor_Mini_4G_100v_v2_Terex_PGN_2DI_1AI_RS232.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000800  08000800  00000800  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017e98  08000990  08000990  00000990  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000010e8  08018828  08018828  00018828  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019910  08019910  000216d8  2**0
                  CONTENTS
  4 .ARM          00000008  08019910  08019910  00019910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019918  08019918  000216d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08019918  08019918  00019918  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801991c  0801991c  0001991c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000016d8  20000000  08019920  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004f48  200016d8  0801aff8  000216d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20006620  0801aff8  00026620  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000216d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00051d70  00000000  00000000  00021708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000077b7  00000000  00000000  00073478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002290  00000000  00000000  0007ac30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001fa8  00000000  00000000  0007cec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00030cb1  00000000  00000000  0007ee68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003692d  00000000  00000000  000afb19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00103926  00000000  00000000  000e6446  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001e9d6c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a318  00000000  00000000  001e9dc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000990 <__do_global_dtors_aux>:
 8000990:	b510      	push	{r4, lr}
 8000992:	4c05      	ldr	r4, [pc, #20]	; (80009a8 <__do_global_dtors_aux+0x18>)
 8000994:	7823      	ldrb	r3, [r4, #0]
 8000996:	b933      	cbnz	r3, 80009a6 <__do_global_dtors_aux+0x16>
 8000998:	4b04      	ldr	r3, [pc, #16]	; (80009ac <__do_global_dtors_aux+0x1c>)
 800099a:	b113      	cbz	r3, 80009a2 <__do_global_dtors_aux+0x12>
 800099c:	4804      	ldr	r0, [pc, #16]	; (80009b0 <__do_global_dtors_aux+0x20>)
 800099e:	f3af 8000 	nop.w
 80009a2:	2301      	movs	r3, #1
 80009a4:	7023      	strb	r3, [r4, #0]
 80009a6:	bd10      	pop	{r4, pc}
 80009a8:	200016d8 	.word	0x200016d8
 80009ac:	00000000 	.word	0x00000000
 80009b0:	08018810 	.word	0x08018810

080009b4 <frame_dummy>:
 80009b4:	b508      	push	{r3, lr}
 80009b6:	4b03      	ldr	r3, [pc, #12]	; (80009c4 <frame_dummy+0x10>)
 80009b8:	b11b      	cbz	r3, 80009c2 <frame_dummy+0xe>
 80009ba:	4903      	ldr	r1, [pc, #12]	; (80009c8 <frame_dummy+0x14>)
 80009bc:	4803      	ldr	r0, [pc, #12]	; (80009cc <frame_dummy+0x18>)
 80009be:	f3af 8000 	nop.w
 80009c2:	bd08      	pop	{r3, pc}
 80009c4:	00000000 	.word	0x00000000
 80009c8:	200016dc 	.word	0x200016dc
 80009cc:	08018810 	.word	0x08018810

080009d0 <strcmp>:
 80009d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80009d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80009d8:	2a01      	cmp	r2, #1
 80009da:	bf28      	it	cs
 80009dc:	429a      	cmpcs	r2, r3
 80009de:	d0f7      	beq.n	80009d0 <strcmp>
 80009e0:	1ad0      	subs	r0, r2, r3
 80009e2:	4770      	bx	lr

080009e4 <strlen>:
 80009e4:	4603      	mov	r3, r0
 80009e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80009ea:	2a00      	cmp	r2, #0
 80009ec:	d1fb      	bne.n	80009e6 <strlen+0x2>
 80009ee:	1a18      	subs	r0, r3, r0
 80009f0:	3801      	subs	r0, #1
 80009f2:	4770      	bx	lr
	...

08000a00 <memchr>:
 8000a00:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000a04:	2a10      	cmp	r2, #16
 8000a06:	db2b      	blt.n	8000a60 <memchr+0x60>
 8000a08:	f010 0f07 	tst.w	r0, #7
 8000a0c:	d008      	beq.n	8000a20 <memchr+0x20>
 8000a0e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000a12:	3a01      	subs	r2, #1
 8000a14:	428b      	cmp	r3, r1
 8000a16:	d02d      	beq.n	8000a74 <memchr+0x74>
 8000a18:	f010 0f07 	tst.w	r0, #7
 8000a1c:	b342      	cbz	r2, 8000a70 <memchr+0x70>
 8000a1e:	d1f6      	bne.n	8000a0e <memchr+0xe>
 8000a20:	b4f0      	push	{r4, r5, r6, r7}
 8000a22:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000a26:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8000a2a:	f022 0407 	bic.w	r4, r2, #7
 8000a2e:	f07f 0700 	mvns.w	r7, #0
 8000a32:	2300      	movs	r3, #0
 8000a34:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000a38:	3c08      	subs	r4, #8
 8000a3a:	ea85 0501 	eor.w	r5, r5, r1
 8000a3e:	ea86 0601 	eor.w	r6, r6, r1
 8000a42:	fa85 f547 	uadd8	r5, r5, r7
 8000a46:	faa3 f587 	sel	r5, r3, r7
 8000a4a:	fa86 f647 	uadd8	r6, r6, r7
 8000a4e:	faa5 f687 	sel	r6, r5, r7
 8000a52:	b98e      	cbnz	r6, 8000a78 <memchr+0x78>
 8000a54:	d1ee      	bne.n	8000a34 <memchr+0x34>
 8000a56:	bcf0      	pop	{r4, r5, r6, r7}
 8000a58:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000a5c:	f002 0207 	and.w	r2, r2, #7
 8000a60:	b132      	cbz	r2, 8000a70 <memchr+0x70>
 8000a62:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000a66:	3a01      	subs	r2, #1
 8000a68:	ea83 0301 	eor.w	r3, r3, r1
 8000a6c:	b113      	cbz	r3, 8000a74 <memchr+0x74>
 8000a6e:	d1f8      	bne.n	8000a62 <memchr+0x62>
 8000a70:	2000      	movs	r0, #0
 8000a72:	4770      	bx	lr
 8000a74:	3801      	subs	r0, #1
 8000a76:	4770      	bx	lr
 8000a78:	2d00      	cmp	r5, #0
 8000a7a:	bf06      	itte	eq
 8000a7c:	4635      	moveq	r5, r6
 8000a7e:	3803      	subeq	r0, #3
 8000a80:	3807      	subne	r0, #7
 8000a82:	f015 0f01 	tst.w	r5, #1
 8000a86:	d107      	bne.n	8000a98 <memchr+0x98>
 8000a88:	3001      	adds	r0, #1
 8000a8a:	f415 7f80 	tst.w	r5, #256	; 0x100
 8000a8e:	bf02      	ittt	eq
 8000a90:	3001      	addeq	r0, #1
 8000a92:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000a96:	3001      	addeq	r0, #1
 8000a98:	bcf0      	pop	{r4, r5, r6, r7}
 8000a9a:	3801      	subs	r0, #1
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_drsub>:
 8000aa0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000aa4:	e002      	b.n	8000aac <__adddf3>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dsub>:
 8000aa8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000aac <__adddf3>:
 8000aac:	b530      	push	{r4, r5, lr}
 8000aae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000ab2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000ab6:	ea94 0f05 	teq	r4, r5
 8000aba:	bf08      	it	eq
 8000abc:	ea90 0f02 	teqeq	r0, r2
 8000ac0:	bf1f      	itttt	ne
 8000ac2:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000ac6:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000aca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000ace:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000ad2:	f000 80e2 	beq.w	8000c9a <__adddf3+0x1ee>
 8000ad6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000ada:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000ade:	bfb8      	it	lt
 8000ae0:	426d      	neglt	r5, r5
 8000ae2:	dd0c      	ble.n	8000afe <__adddf3+0x52>
 8000ae4:	442c      	add	r4, r5
 8000ae6:	ea80 0202 	eor.w	r2, r0, r2
 8000aea:	ea81 0303 	eor.w	r3, r1, r3
 8000aee:	ea82 0000 	eor.w	r0, r2, r0
 8000af2:	ea83 0101 	eor.w	r1, r3, r1
 8000af6:	ea80 0202 	eor.w	r2, r0, r2
 8000afa:	ea81 0303 	eor.w	r3, r1, r3
 8000afe:	2d36      	cmp	r5, #54	; 0x36
 8000b00:	bf88      	it	hi
 8000b02:	bd30      	pophi	{r4, r5, pc}
 8000b04:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b08:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000b0c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000b10:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000b14:	d002      	beq.n	8000b1c <__adddf3+0x70>
 8000b16:	4240      	negs	r0, r0
 8000b18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b1c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000b20:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000b24:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000b28:	d002      	beq.n	8000b30 <__adddf3+0x84>
 8000b2a:	4252      	negs	r2, r2
 8000b2c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b30:	ea94 0f05 	teq	r4, r5
 8000b34:	f000 80a7 	beq.w	8000c86 <__adddf3+0x1da>
 8000b38:	f1a4 0401 	sub.w	r4, r4, #1
 8000b3c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000b40:	db0d      	blt.n	8000b5e <__adddf3+0xb2>
 8000b42:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000b46:	fa22 f205 	lsr.w	r2, r2, r5
 8000b4a:	1880      	adds	r0, r0, r2
 8000b4c:	f141 0100 	adc.w	r1, r1, #0
 8000b50:	fa03 f20e 	lsl.w	r2, r3, lr
 8000b54:	1880      	adds	r0, r0, r2
 8000b56:	fa43 f305 	asr.w	r3, r3, r5
 8000b5a:	4159      	adcs	r1, r3
 8000b5c:	e00e      	b.n	8000b7c <__adddf3+0xd0>
 8000b5e:	f1a5 0520 	sub.w	r5, r5, #32
 8000b62:	f10e 0e20 	add.w	lr, lr, #32
 8000b66:	2a01      	cmp	r2, #1
 8000b68:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000b6c:	bf28      	it	cs
 8000b6e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000b72:	fa43 f305 	asr.w	r3, r3, r5
 8000b76:	18c0      	adds	r0, r0, r3
 8000b78:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000b7c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000b80:	d507      	bpl.n	8000b92 <__adddf3+0xe6>
 8000b82:	f04f 0e00 	mov.w	lr, #0
 8000b86:	f1dc 0c00 	rsbs	ip, ip, #0
 8000b8a:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000b8e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000b92:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000b96:	d31b      	bcc.n	8000bd0 <__adddf3+0x124>
 8000b98:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000b9c:	d30c      	bcc.n	8000bb8 <__adddf3+0x10c>
 8000b9e:	0849      	lsrs	r1, r1, #1
 8000ba0:	ea5f 0030 	movs.w	r0, r0, rrx
 8000ba4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000ba8:	f104 0401 	add.w	r4, r4, #1
 8000bac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000bb0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000bb4:	f080 809a 	bcs.w	8000cec <__adddf3+0x240>
 8000bb8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000bbc:	bf08      	it	eq
 8000bbe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000bc2:	f150 0000 	adcs.w	r0, r0, #0
 8000bc6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000bca:	ea41 0105 	orr.w	r1, r1, r5
 8000bce:	bd30      	pop	{r4, r5, pc}
 8000bd0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000bd4:	4140      	adcs	r0, r0
 8000bd6:	eb41 0101 	adc.w	r1, r1, r1
 8000bda:	3c01      	subs	r4, #1
 8000bdc:	bf28      	it	cs
 8000bde:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000be2:	d2e9      	bcs.n	8000bb8 <__adddf3+0x10c>
 8000be4:	f091 0f00 	teq	r1, #0
 8000be8:	bf04      	itt	eq
 8000bea:	4601      	moveq	r1, r0
 8000bec:	2000      	moveq	r0, #0
 8000bee:	fab1 f381 	clz	r3, r1
 8000bf2:	bf08      	it	eq
 8000bf4:	3320      	addeq	r3, #32
 8000bf6:	f1a3 030b 	sub.w	r3, r3, #11
 8000bfa:	f1b3 0220 	subs.w	r2, r3, #32
 8000bfe:	da0c      	bge.n	8000c1a <__adddf3+0x16e>
 8000c00:	320c      	adds	r2, #12
 8000c02:	dd08      	ble.n	8000c16 <__adddf3+0x16a>
 8000c04:	f102 0c14 	add.w	ip, r2, #20
 8000c08:	f1c2 020c 	rsb	r2, r2, #12
 8000c0c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000c10:	fa21 f102 	lsr.w	r1, r1, r2
 8000c14:	e00c      	b.n	8000c30 <__adddf3+0x184>
 8000c16:	f102 0214 	add.w	r2, r2, #20
 8000c1a:	bfd8      	it	le
 8000c1c:	f1c2 0c20 	rsble	ip, r2, #32
 8000c20:	fa01 f102 	lsl.w	r1, r1, r2
 8000c24:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000c28:	bfdc      	itt	le
 8000c2a:	ea41 010c 	orrle.w	r1, r1, ip
 8000c2e:	4090      	lslle	r0, r2
 8000c30:	1ae4      	subs	r4, r4, r3
 8000c32:	bfa2      	ittt	ge
 8000c34:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000c38:	4329      	orrge	r1, r5
 8000c3a:	bd30      	popge	{r4, r5, pc}
 8000c3c:	ea6f 0404 	mvn.w	r4, r4
 8000c40:	3c1f      	subs	r4, #31
 8000c42:	da1c      	bge.n	8000c7e <__adddf3+0x1d2>
 8000c44:	340c      	adds	r4, #12
 8000c46:	dc0e      	bgt.n	8000c66 <__adddf3+0x1ba>
 8000c48:	f104 0414 	add.w	r4, r4, #20
 8000c4c:	f1c4 0220 	rsb	r2, r4, #32
 8000c50:	fa20 f004 	lsr.w	r0, r0, r4
 8000c54:	fa01 f302 	lsl.w	r3, r1, r2
 8000c58:	ea40 0003 	orr.w	r0, r0, r3
 8000c5c:	fa21 f304 	lsr.w	r3, r1, r4
 8000c60:	ea45 0103 	orr.w	r1, r5, r3
 8000c64:	bd30      	pop	{r4, r5, pc}
 8000c66:	f1c4 040c 	rsb	r4, r4, #12
 8000c6a:	f1c4 0220 	rsb	r2, r4, #32
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	fa01 f304 	lsl.w	r3, r1, r4
 8000c76:	ea40 0003 	orr.w	r0, r0, r3
 8000c7a:	4629      	mov	r1, r5
 8000c7c:	bd30      	pop	{r4, r5, pc}
 8000c7e:	fa21 f004 	lsr.w	r0, r1, r4
 8000c82:	4629      	mov	r1, r5
 8000c84:	bd30      	pop	{r4, r5, pc}
 8000c86:	f094 0f00 	teq	r4, #0
 8000c8a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000c8e:	bf06      	itte	eq
 8000c90:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000c94:	3401      	addeq	r4, #1
 8000c96:	3d01      	subne	r5, #1
 8000c98:	e74e      	b.n	8000b38 <__adddf3+0x8c>
 8000c9a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000c9e:	bf18      	it	ne
 8000ca0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000ca4:	d029      	beq.n	8000cfa <__adddf3+0x24e>
 8000ca6:	ea94 0f05 	teq	r4, r5
 8000caa:	bf08      	it	eq
 8000cac:	ea90 0f02 	teqeq	r0, r2
 8000cb0:	d005      	beq.n	8000cbe <__adddf3+0x212>
 8000cb2:	ea54 0c00 	orrs.w	ip, r4, r0
 8000cb6:	bf04      	itt	eq
 8000cb8:	4619      	moveq	r1, r3
 8000cba:	4610      	moveq	r0, r2
 8000cbc:	bd30      	pop	{r4, r5, pc}
 8000cbe:	ea91 0f03 	teq	r1, r3
 8000cc2:	bf1e      	ittt	ne
 8000cc4:	2100      	movne	r1, #0
 8000cc6:	2000      	movne	r0, #0
 8000cc8:	bd30      	popne	{r4, r5, pc}
 8000cca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000cce:	d105      	bne.n	8000cdc <__adddf3+0x230>
 8000cd0:	0040      	lsls	r0, r0, #1
 8000cd2:	4149      	adcs	r1, r1
 8000cd4:	bf28      	it	cs
 8000cd6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000cda:	bd30      	pop	{r4, r5, pc}
 8000cdc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000ce0:	bf3c      	itt	cc
 8000ce2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000ce6:	bd30      	popcc	{r4, r5, pc}
 8000ce8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000cec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000cf0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000cf4:	f04f 0000 	mov.w	r0, #0
 8000cf8:	bd30      	pop	{r4, r5, pc}
 8000cfa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000cfe:	bf1a      	itte	ne
 8000d00:	4619      	movne	r1, r3
 8000d02:	4610      	movne	r0, r2
 8000d04:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000d08:	bf1c      	itt	ne
 8000d0a:	460b      	movne	r3, r1
 8000d0c:	4602      	movne	r2, r0
 8000d0e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000d12:	bf06      	itte	eq
 8000d14:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000d18:	ea91 0f03 	teqeq	r1, r3
 8000d1c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000d20:	bd30      	pop	{r4, r5, pc}
 8000d22:	bf00      	nop

08000d24 <__aeabi_ui2d>:
 8000d24:	f090 0f00 	teq	r0, #0
 8000d28:	bf04      	itt	eq
 8000d2a:	2100      	moveq	r1, #0
 8000d2c:	4770      	bxeq	lr
 8000d2e:	b530      	push	{r4, r5, lr}
 8000d30:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000d34:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000d38:	f04f 0500 	mov.w	r5, #0
 8000d3c:	f04f 0100 	mov.w	r1, #0
 8000d40:	e750      	b.n	8000be4 <__adddf3+0x138>
 8000d42:	bf00      	nop

08000d44 <__aeabi_i2d>:
 8000d44:	f090 0f00 	teq	r0, #0
 8000d48:	bf04      	itt	eq
 8000d4a:	2100      	moveq	r1, #0
 8000d4c:	4770      	bxeq	lr
 8000d4e:	b530      	push	{r4, r5, lr}
 8000d50:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000d54:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000d58:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000d5c:	bf48      	it	mi
 8000d5e:	4240      	negmi	r0, r0
 8000d60:	f04f 0100 	mov.w	r1, #0
 8000d64:	e73e      	b.n	8000be4 <__adddf3+0x138>
 8000d66:	bf00      	nop

08000d68 <__aeabi_f2d>:
 8000d68:	0042      	lsls	r2, r0, #1
 8000d6a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000d6e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d72:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000d76:	bf1f      	itttt	ne
 8000d78:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000d7c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000d80:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000d84:	4770      	bxne	lr
 8000d86:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000d8a:	bf08      	it	eq
 8000d8c:	4770      	bxeq	lr
 8000d8e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000d92:	bf04      	itt	eq
 8000d94:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000d98:	4770      	bxeq	lr
 8000d9a:	b530      	push	{r4, r5, lr}
 8000d9c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000da0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000da4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000da8:	e71c      	b.n	8000be4 <__adddf3+0x138>
 8000daa:	bf00      	nop

08000dac <__aeabi_ul2d>:
 8000dac:	ea50 0201 	orrs.w	r2, r0, r1
 8000db0:	bf08      	it	eq
 8000db2:	4770      	bxeq	lr
 8000db4:	b530      	push	{r4, r5, lr}
 8000db6:	f04f 0500 	mov.w	r5, #0
 8000dba:	e00a      	b.n	8000dd2 <__aeabi_l2d+0x16>

08000dbc <__aeabi_l2d>:
 8000dbc:	ea50 0201 	orrs.w	r2, r0, r1
 8000dc0:	bf08      	it	eq
 8000dc2:	4770      	bxeq	lr
 8000dc4:	b530      	push	{r4, r5, lr}
 8000dc6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000dca:	d502      	bpl.n	8000dd2 <__aeabi_l2d+0x16>
 8000dcc:	4240      	negs	r0, r0
 8000dce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dd2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000dd6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000dda:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000dde:	f43f aed8 	beq.w	8000b92 <__adddf3+0xe6>
 8000de2:	f04f 0203 	mov.w	r2, #3
 8000de6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000dea:	bf18      	it	ne
 8000dec:	3203      	addne	r2, #3
 8000dee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000df2:	bf18      	it	ne
 8000df4:	3203      	addne	r2, #3
 8000df6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000dfa:	f1c2 0320 	rsb	r3, r2, #32
 8000dfe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000e02:	fa20 f002 	lsr.w	r0, r0, r2
 8000e06:	fa01 fe03 	lsl.w	lr, r1, r3
 8000e0a:	ea40 000e 	orr.w	r0, r0, lr
 8000e0e:	fa21 f102 	lsr.w	r1, r1, r2
 8000e12:	4414      	add	r4, r2
 8000e14:	e6bd      	b.n	8000b92 <__adddf3+0xe6>
 8000e16:	bf00      	nop

08000e18 <__aeabi_dmul>:
 8000e18:	b570      	push	{r4, r5, r6, lr}
 8000e1a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e1e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000e22:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000e26:	bf1d      	ittte	ne
 8000e28:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000e2c:	ea94 0f0c 	teqne	r4, ip
 8000e30:	ea95 0f0c 	teqne	r5, ip
 8000e34:	f000 f8de 	bleq	8000ff4 <__aeabi_dmul+0x1dc>
 8000e38:	442c      	add	r4, r5
 8000e3a:	ea81 0603 	eor.w	r6, r1, r3
 8000e3e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000e42:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000e46:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000e4a:	bf18      	it	ne
 8000e4c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000e50:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000e54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000e58:	d038      	beq.n	8000ecc <__aeabi_dmul+0xb4>
 8000e5a:	fba0 ce02 	umull	ip, lr, r0, r2
 8000e5e:	f04f 0500 	mov.w	r5, #0
 8000e62:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000e66:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000e6a:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000e6e:	f04f 0600 	mov.w	r6, #0
 8000e72:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000e76:	f09c 0f00 	teq	ip, #0
 8000e7a:	bf18      	it	ne
 8000e7c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000e80:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000e84:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000e88:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000e8c:	d204      	bcs.n	8000e98 <__aeabi_dmul+0x80>
 8000e8e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000e92:	416d      	adcs	r5, r5
 8000e94:	eb46 0606 	adc.w	r6, r6, r6
 8000e98:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000e9c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000ea0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000ea4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000ea8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000eac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000eb0:	bf88      	it	hi
 8000eb2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000eb6:	d81e      	bhi.n	8000ef6 <__aeabi_dmul+0xde>
 8000eb8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000ebc:	bf08      	it	eq
 8000ebe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000ec2:	f150 0000 	adcs.w	r0, r0, #0
 8000ec6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000eca:	bd70      	pop	{r4, r5, r6, pc}
 8000ecc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000ed0:	ea46 0101 	orr.w	r1, r6, r1
 8000ed4:	ea40 0002 	orr.w	r0, r0, r2
 8000ed8:	ea81 0103 	eor.w	r1, r1, r3
 8000edc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000ee0:	bfc2      	ittt	gt
 8000ee2:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000ee6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000eea:	bd70      	popgt	{r4, r5, r6, pc}
 8000eec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ef0:	f04f 0e00 	mov.w	lr, #0
 8000ef4:	3c01      	subs	r4, #1
 8000ef6:	f300 80ab 	bgt.w	8001050 <__aeabi_dmul+0x238>
 8000efa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000efe:	bfde      	ittt	le
 8000f00:	2000      	movle	r0, #0
 8000f02:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000f06:	bd70      	pople	{r4, r5, r6, pc}
 8000f08:	f1c4 0400 	rsb	r4, r4, #0
 8000f0c:	3c20      	subs	r4, #32
 8000f0e:	da35      	bge.n	8000f7c <__aeabi_dmul+0x164>
 8000f10:	340c      	adds	r4, #12
 8000f12:	dc1b      	bgt.n	8000f4c <__aeabi_dmul+0x134>
 8000f14:	f104 0414 	add.w	r4, r4, #20
 8000f18:	f1c4 0520 	rsb	r5, r4, #32
 8000f1c:	fa00 f305 	lsl.w	r3, r0, r5
 8000f20:	fa20 f004 	lsr.w	r0, r0, r4
 8000f24:	fa01 f205 	lsl.w	r2, r1, r5
 8000f28:	ea40 0002 	orr.w	r0, r0, r2
 8000f2c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000f30:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000f34:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000f38:	fa21 f604 	lsr.w	r6, r1, r4
 8000f3c:	eb42 0106 	adc.w	r1, r2, r6
 8000f40:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000f44:	bf08      	it	eq
 8000f46:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000f4a:	bd70      	pop	{r4, r5, r6, pc}
 8000f4c:	f1c4 040c 	rsb	r4, r4, #12
 8000f50:	f1c4 0520 	rsb	r5, r4, #32
 8000f54:	fa00 f304 	lsl.w	r3, r0, r4
 8000f58:	fa20 f005 	lsr.w	r0, r0, r5
 8000f5c:	fa01 f204 	lsl.w	r2, r1, r4
 8000f60:	ea40 0002 	orr.w	r0, r0, r2
 8000f64:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000f68:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000f6c:	f141 0100 	adc.w	r1, r1, #0
 8000f70:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000f74:	bf08      	it	eq
 8000f76:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000f7a:	bd70      	pop	{r4, r5, r6, pc}
 8000f7c:	f1c4 0520 	rsb	r5, r4, #32
 8000f80:	fa00 f205 	lsl.w	r2, r0, r5
 8000f84:	ea4e 0e02 	orr.w	lr, lr, r2
 8000f88:	fa20 f304 	lsr.w	r3, r0, r4
 8000f8c:	fa01 f205 	lsl.w	r2, r1, r5
 8000f90:	ea43 0302 	orr.w	r3, r3, r2
 8000f94:	fa21 f004 	lsr.w	r0, r1, r4
 8000f98:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000f9c:	fa21 f204 	lsr.w	r2, r1, r4
 8000fa0:	ea20 0002 	bic.w	r0, r0, r2
 8000fa4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000fa8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000fac:	bf08      	it	eq
 8000fae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000fb2:	bd70      	pop	{r4, r5, r6, pc}
 8000fb4:	f094 0f00 	teq	r4, #0
 8000fb8:	d10f      	bne.n	8000fda <__aeabi_dmul+0x1c2>
 8000fba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000fbe:	0040      	lsls	r0, r0, #1
 8000fc0:	eb41 0101 	adc.w	r1, r1, r1
 8000fc4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000fc8:	bf08      	it	eq
 8000fca:	3c01      	subeq	r4, #1
 8000fcc:	d0f7      	beq.n	8000fbe <__aeabi_dmul+0x1a6>
 8000fce:	ea41 0106 	orr.w	r1, r1, r6
 8000fd2:	f095 0f00 	teq	r5, #0
 8000fd6:	bf18      	it	ne
 8000fd8:	4770      	bxne	lr
 8000fda:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000fde:	0052      	lsls	r2, r2, #1
 8000fe0:	eb43 0303 	adc.w	r3, r3, r3
 8000fe4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000fe8:	bf08      	it	eq
 8000fea:	3d01      	subeq	r5, #1
 8000fec:	d0f7      	beq.n	8000fde <__aeabi_dmul+0x1c6>
 8000fee:	ea43 0306 	orr.w	r3, r3, r6
 8000ff2:	4770      	bx	lr
 8000ff4:	ea94 0f0c 	teq	r4, ip
 8000ff8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000ffc:	bf18      	it	ne
 8000ffe:	ea95 0f0c 	teqne	r5, ip
 8001002:	d00c      	beq.n	800101e <__aeabi_dmul+0x206>
 8001004:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8001008:	bf18      	it	ne
 800100a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800100e:	d1d1      	bne.n	8000fb4 <__aeabi_dmul+0x19c>
 8001010:	ea81 0103 	eor.w	r1, r1, r3
 8001014:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8001018:	f04f 0000 	mov.w	r0, #0
 800101c:	bd70      	pop	{r4, r5, r6, pc}
 800101e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8001022:	bf06      	itte	eq
 8001024:	4610      	moveq	r0, r2
 8001026:	4619      	moveq	r1, r3
 8001028:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800102c:	d019      	beq.n	8001062 <__aeabi_dmul+0x24a>
 800102e:	ea94 0f0c 	teq	r4, ip
 8001032:	d102      	bne.n	800103a <__aeabi_dmul+0x222>
 8001034:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8001038:	d113      	bne.n	8001062 <__aeabi_dmul+0x24a>
 800103a:	ea95 0f0c 	teq	r5, ip
 800103e:	d105      	bne.n	800104c <__aeabi_dmul+0x234>
 8001040:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8001044:	bf1c      	itt	ne
 8001046:	4610      	movne	r0, r2
 8001048:	4619      	movne	r1, r3
 800104a:	d10a      	bne.n	8001062 <__aeabi_dmul+0x24a>
 800104c:	ea81 0103 	eor.w	r1, r1, r3
 8001050:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8001054:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8001058:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800105c:	f04f 0000 	mov.w	r0, #0
 8001060:	bd70      	pop	{r4, r5, r6, pc}
 8001062:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8001066:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800106a:	bd70      	pop	{r4, r5, r6, pc}

0800106c <__aeabi_ddiv>:
 800106c:	b570      	push	{r4, r5, r6, lr}
 800106e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8001072:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8001076:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800107a:	bf1d      	ittte	ne
 800107c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8001080:	ea94 0f0c 	teqne	r4, ip
 8001084:	ea95 0f0c 	teqne	r5, ip
 8001088:	f000 f8a7 	bleq	80011da <__aeabi_ddiv+0x16e>
 800108c:	eba4 0405 	sub.w	r4, r4, r5
 8001090:	ea81 0e03 	eor.w	lr, r1, r3
 8001094:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8001098:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800109c:	f000 8088 	beq.w	80011b0 <__aeabi_ddiv+0x144>
 80010a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80010a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80010a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80010ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80010b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80010b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80010b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80010bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80010c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80010c4:	429d      	cmp	r5, r3
 80010c6:	bf08      	it	eq
 80010c8:	4296      	cmpeq	r6, r2
 80010ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80010ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80010d2:	d202      	bcs.n	80010da <__aeabi_ddiv+0x6e>
 80010d4:	085b      	lsrs	r3, r3, #1
 80010d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80010da:	1ab6      	subs	r6, r6, r2
 80010dc:	eb65 0503 	sbc.w	r5, r5, r3
 80010e0:	085b      	lsrs	r3, r3, #1
 80010e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80010e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80010ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80010ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80010f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80010f6:	bf22      	ittt	cs
 80010f8:	1ab6      	subcs	r6, r6, r2
 80010fa:	4675      	movcs	r5, lr
 80010fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8001100:	085b      	lsrs	r3, r3, #1
 8001102:	ea4f 0232 	mov.w	r2, r2, rrx
 8001106:	ebb6 0e02 	subs.w	lr, r6, r2
 800110a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800110e:	bf22      	ittt	cs
 8001110:	1ab6      	subcs	r6, r6, r2
 8001112:	4675      	movcs	r5, lr
 8001114:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8001118:	085b      	lsrs	r3, r3, #1
 800111a:	ea4f 0232 	mov.w	r2, r2, rrx
 800111e:	ebb6 0e02 	subs.w	lr, r6, r2
 8001122:	eb75 0e03 	sbcs.w	lr, r5, r3
 8001126:	bf22      	ittt	cs
 8001128:	1ab6      	subcs	r6, r6, r2
 800112a:	4675      	movcs	r5, lr
 800112c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001130:	085b      	lsrs	r3, r3, #1
 8001132:	ea4f 0232 	mov.w	r2, r2, rrx
 8001136:	ebb6 0e02 	subs.w	lr, r6, r2
 800113a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800113e:	bf22      	ittt	cs
 8001140:	1ab6      	subcs	r6, r6, r2
 8001142:	4675      	movcs	r5, lr
 8001144:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8001148:	ea55 0e06 	orrs.w	lr, r5, r6
 800114c:	d018      	beq.n	8001180 <__aeabi_ddiv+0x114>
 800114e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8001152:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8001156:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800115a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800115e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8001162:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8001166:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800116a:	d1c0      	bne.n	80010ee <__aeabi_ddiv+0x82>
 800116c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8001170:	d10b      	bne.n	800118a <__aeabi_ddiv+0x11e>
 8001172:	ea41 0100 	orr.w	r1, r1, r0
 8001176:	f04f 0000 	mov.w	r0, #0
 800117a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800117e:	e7b6      	b.n	80010ee <__aeabi_ddiv+0x82>
 8001180:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8001184:	bf04      	itt	eq
 8001186:	4301      	orreq	r1, r0
 8001188:	2000      	moveq	r0, #0
 800118a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800118e:	bf88      	it	hi
 8001190:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8001194:	f63f aeaf 	bhi.w	8000ef6 <__aeabi_dmul+0xde>
 8001198:	ebb5 0c03 	subs.w	ip, r5, r3
 800119c:	bf04      	itt	eq
 800119e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80011a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80011a6:	f150 0000 	adcs.w	r0, r0, #0
 80011aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80011ae:	bd70      	pop	{r4, r5, r6, pc}
 80011b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80011b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80011b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80011bc:	bfc2      	ittt	gt
 80011be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80011c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80011c6:	bd70      	popgt	{r4, r5, r6, pc}
 80011c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80011cc:	f04f 0e00 	mov.w	lr, #0
 80011d0:	3c01      	subs	r4, #1
 80011d2:	e690      	b.n	8000ef6 <__aeabi_dmul+0xde>
 80011d4:	ea45 0e06 	orr.w	lr, r5, r6
 80011d8:	e68d      	b.n	8000ef6 <__aeabi_dmul+0xde>
 80011da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80011de:	ea94 0f0c 	teq	r4, ip
 80011e2:	bf08      	it	eq
 80011e4:	ea95 0f0c 	teqeq	r5, ip
 80011e8:	f43f af3b 	beq.w	8001062 <__aeabi_dmul+0x24a>
 80011ec:	ea94 0f0c 	teq	r4, ip
 80011f0:	d10a      	bne.n	8001208 <__aeabi_ddiv+0x19c>
 80011f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80011f6:	f47f af34 	bne.w	8001062 <__aeabi_dmul+0x24a>
 80011fa:	ea95 0f0c 	teq	r5, ip
 80011fe:	f47f af25 	bne.w	800104c <__aeabi_dmul+0x234>
 8001202:	4610      	mov	r0, r2
 8001204:	4619      	mov	r1, r3
 8001206:	e72c      	b.n	8001062 <__aeabi_dmul+0x24a>
 8001208:	ea95 0f0c 	teq	r5, ip
 800120c:	d106      	bne.n	800121c <__aeabi_ddiv+0x1b0>
 800120e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8001212:	f43f aefd 	beq.w	8001010 <__aeabi_dmul+0x1f8>
 8001216:	4610      	mov	r0, r2
 8001218:	4619      	mov	r1, r3
 800121a:	e722      	b.n	8001062 <__aeabi_dmul+0x24a>
 800121c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8001220:	bf18      	it	ne
 8001222:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8001226:	f47f aec5 	bne.w	8000fb4 <__aeabi_dmul+0x19c>
 800122a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800122e:	f47f af0d 	bne.w	800104c <__aeabi_dmul+0x234>
 8001232:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8001236:	f47f aeeb 	bne.w	8001010 <__aeabi_dmul+0x1f8>
 800123a:	e712      	b.n	8001062 <__aeabi_dmul+0x24a>

0800123c <__gedf2>:
 800123c:	f04f 3cff 	mov.w	ip, #4294967295
 8001240:	e006      	b.n	8001250 <__cmpdf2+0x4>
 8001242:	bf00      	nop

08001244 <__ledf2>:
 8001244:	f04f 0c01 	mov.w	ip, #1
 8001248:	e002      	b.n	8001250 <__cmpdf2+0x4>
 800124a:	bf00      	nop

0800124c <__cmpdf2>:
 800124c:	f04f 0c01 	mov.w	ip, #1
 8001250:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001254:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8001258:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800125c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8001260:	bf18      	it	ne
 8001262:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8001266:	d01b      	beq.n	80012a0 <__cmpdf2+0x54>
 8001268:	b001      	add	sp, #4
 800126a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800126e:	bf0c      	ite	eq
 8001270:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8001274:	ea91 0f03 	teqne	r1, r3
 8001278:	bf02      	ittt	eq
 800127a:	ea90 0f02 	teqeq	r0, r2
 800127e:	2000      	moveq	r0, #0
 8001280:	4770      	bxeq	lr
 8001282:	f110 0f00 	cmn.w	r0, #0
 8001286:	ea91 0f03 	teq	r1, r3
 800128a:	bf58      	it	pl
 800128c:	4299      	cmppl	r1, r3
 800128e:	bf08      	it	eq
 8001290:	4290      	cmpeq	r0, r2
 8001292:	bf2c      	ite	cs
 8001294:	17d8      	asrcs	r0, r3, #31
 8001296:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800129a:	f040 0001 	orr.w	r0, r0, #1
 800129e:	4770      	bx	lr
 80012a0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80012a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80012a8:	d102      	bne.n	80012b0 <__cmpdf2+0x64>
 80012aa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80012ae:	d107      	bne.n	80012c0 <__cmpdf2+0x74>
 80012b0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80012b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80012b8:	d1d6      	bne.n	8001268 <__cmpdf2+0x1c>
 80012ba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80012be:	d0d3      	beq.n	8001268 <__cmpdf2+0x1c>
 80012c0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop

080012c8 <__aeabi_cdrcmple>:
 80012c8:	4684      	mov	ip, r0
 80012ca:	4610      	mov	r0, r2
 80012cc:	4662      	mov	r2, ip
 80012ce:	468c      	mov	ip, r1
 80012d0:	4619      	mov	r1, r3
 80012d2:	4663      	mov	r3, ip
 80012d4:	e000      	b.n	80012d8 <__aeabi_cdcmpeq>
 80012d6:	bf00      	nop

080012d8 <__aeabi_cdcmpeq>:
 80012d8:	b501      	push	{r0, lr}
 80012da:	f7ff ffb7 	bl	800124c <__cmpdf2>
 80012de:	2800      	cmp	r0, #0
 80012e0:	bf48      	it	mi
 80012e2:	f110 0f00 	cmnmi.w	r0, #0
 80012e6:	bd01      	pop	{r0, pc}

080012e8 <__aeabi_dcmpeq>:
 80012e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80012ec:	f7ff fff4 	bl	80012d8 <__aeabi_cdcmpeq>
 80012f0:	bf0c      	ite	eq
 80012f2:	2001      	moveq	r0, #1
 80012f4:	2000      	movne	r0, #0
 80012f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80012fa:	bf00      	nop

080012fc <__aeabi_dcmplt>:
 80012fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001300:	f7ff ffea 	bl	80012d8 <__aeabi_cdcmpeq>
 8001304:	bf34      	ite	cc
 8001306:	2001      	movcc	r0, #1
 8001308:	2000      	movcs	r0, #0
 800130a:	f85d fb08 	ldr.w	pc, [sp], #8
 800130e:	bf00      	nop

08001310 <__aeabi_dcmple>:
 8001310:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001314:	f7ff ffe0 	bl	80012d8 <__aeabi_cdcmpeq>
 8001318:	bf94      	ite	ls
 800131a:	2001      	movls	r0, #1
 800131c:	2000      	movhi	r0, #0
 800131e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001322:	bf00      	nop

08001324 <__aeabi_dcmpge>:
 8001324:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001328:	f7ff ffce 	bl	80012c8 <__aeabi_cdrcmple>
 800132c:	bf94      	ite	ls
 800132e:	2001      	movls	r0, #1
 8001330:	2000      	movhi	r0, #0
 8001332:	f85d fb08 	ldr.w	pc, [sp], #8
 8001336:	bf00      	nop

08001338 <__aeabi_dcmpgt>:
 8001338:	f84d ed08 	str.w	lr, [sp, #-8]!
 800133c:	f7ff ffc4 	bl	80012c8 <__aeabi_cdrcmple>
 8001340:	bf34      	ite	cc
 8001342:	2001      	movcc	r0, #1
 8001344:	2000      	movcs	r0, #0
 8001346:	f85d fb08 	ldr.w	pc, [sp], #8
 800134a:	bf00      	nop

0800134c <__aeabi_dcmpun>:
 800134c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8001350:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8001354:	d102      	bne.n	800135c <__aeabi_dcmpun+0x10>
 8001356:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800135a:	d10a      	bne.n	8001372 <__aeabi_dcmpun+0x26>
 800135c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8001360:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8001364:	d102      	bne.n	800136c <__aeabi_dcmpun+0x20>
 8001366:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800136a:	d102      	bne.n	8001372 <__aeabi_dcmpun+0x26>
 800136c:	f04f 0000 	mov.w	r0, #0
 8001370:	4770      	bx	lr
 8001372:	f04f 0001 	mov.w	r0, #1
 8001376:	4770      	bx	lr

08001378 <__aeabi_d2iz>:
 8001378:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800137c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8001380:	d215      	bcs.n	80013ae <__aeabi_d2iz+0x36>
 8001382:	d511      	bpl.n	80013a8 <__aeabi_d2iz+0x30>
 8001384:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8001388:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800138c:	d912      	bls.n	80013b4 <__aeabi_d2iz+0x3c>
 800138e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8001392:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001396:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800139a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800139e:	fa23 f002 	lsr.w	r0, r3, r2
 80013a2:	bf18      	it	ne
 80013a4:	4240      	negne	r0, r0
 80013a6:	4770      	bx	lr
 80013a8:	f04f 0000 	mov.w	r0, #0
 80013ac:	4770      	bx	lr
 80013ae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80013b2:	d105      	bne.n	80013c0 <__aeabi_d2iz+0x48>
 80013b4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80013b8:	bf08      	it	eq
 80013ba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80013be:	4770      	bx	lr
 80013c0:	f04f 0000 	mov.w	r0, #0
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop

080013c8 <__aeabi_d2uiz>:
 80013c8:	004a      	lsls	r2, r1, #1
 80013ca:	d211      	bcs.n	80013f0 <__aeabi_d2uiz+0x28>
 80013cc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80013d0:	d211      	bcs.n	80013f6 <__aeabi_d2uiz+0x2e>
 80013d2:	d50d      	bpl.n	80013f0 <__aeabi_d2uiz+0x28>
 80013d4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80013d8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80013dc:	d40e      	bmi.n	80013fc <__aeabi_d2uiz+0x34>
 80013de:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80013e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80013e6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80013ea:	fa23 f002 	lsr.w	r0, r3, r2
 80013ee:	4770      	bx	lr
 80013f0:	f04f 0000 	mov.w	r0, #0
 80013f4:	4770      	bx	lr
 80013f6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80013fa:	d102      	bne.n	8001402 <__aeabi_d2uiz+0x3a>
 80013fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001400:	4770      	bx	lr
 8001402:	f04f 0000 	mov.w	r0, #0
 8001406:	4770      	bx	lr

08001408 <__aeabi_d2f>:
 8001408:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800140c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8001410:	bf24      	itt	cs
 8001412:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8001416:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800141a:	d90d      	bls.n	8001438 <__aeabi_d2f+0x30>
 800141c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8001420:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8001424:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8001428:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800142c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8001430:	bf08      	it	eq
 8001432:	f020 0001 	biceq.w	r0, r0, #1
 8001436:	4770      	bx	lr
 8001438:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800143c:	d121      	bne.n	8001482 <__aeabi_d2f+0x7a>
 800143e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8001442:	bfbc      	itt	lt
 8001444:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8001448:	4770      	bxlt	lr
 800144a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800144e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8001452:	f1c2 0218 	rsb	r2, r2, #24
 8001456:	f1c2 0c20 	rsb	ip, r2, #32
 800145a:	fa10 f30c 	lsls.w	r3, r0, ip
 800145e:	fa20 f002 	lsr.w	r0, r0, r2
 8001462:	bf18      	it	ne
 8001464:	f040 0001 	orrne.w	r0, r0, #1
 8001468:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800146c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8001470:	fa03 fc0c 	lsl.w	ip, r3, ip
 8001474:	ea40 000c 	orr.w	r0, r0, ip
 8001478:	fa23 f302 	lsr.w	r3, r3, r2
 800147c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8001480:	e7cc      	b.n	800141c <__aeabi_d2f+0x14>
 8001482:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8001486:	d107      	bne.n	8001498 <__aeabi_d2f+0x90>
 8001488:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800148c:	bf1e      	ittt	ne
 800148e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8001492:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8001496:	4770      	bxne	lr
 8001498:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800149c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80014a0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop

080014a8 <__aeabi_uldivmod>:
 80014a8:	b953      	cbnz	r3, 80014c0 <__aeabi_uldivmod+0x18>
 80014aa:	b94a      	cbnz	r2, 80014c0 <__aeabi_uldivmod+0x18>
 80014ac:	2900      	cmp	r1, #0
 80014ae:	bf08      	it	eq
 80014b0:	2800      	cmpeq	r0, #0
 80014b2:	bf1c      	itt	ne
 80014b4:	f04f 31ff 	movne.w	r1, #4294967295
 80014b8:	f04f 30ff 	movne.w	r0, #4294967295
 80014bc:	f000 b9a4 	b.w	8001808 <__aeabi_idiv0>
 80014c0:	f1ad 0c08 	sub.w	ip, sp, #8
 80014c4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80014c8:	f000 f83c 	bl	8001544 <__udivmoddi4>
 80014cc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80014d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80014d4:	b004      	add	sp, #16
 80014d6:	4770      	bx	lr

080014d8 <__aeabi_d2lz>:
 80014d8:	b538      	push	{r3, r4, r5, lr}
 80014da:	2200      	movs	r2, #0
 80014dc:	2300      	movs	r3, #0
 80014de:	4604      	mov	r4, r0
 80014e0:	460d      	mov	r5, r1
 80014e2:	f7ff ff0b 	bl	80012fc <__aeabi_dcmplt>
 80014e6:	b928      	cbnz	r0, 80014f4 <__aeabi_d2lz+0x1c>
 80014e8:	4620      	mov	r0, r4
 80014ea:	4629      	mov	r1, r5
 80014ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80014f0:	f000 b80a 	b.w	8001508 <__aeabi_d2ulz>
 80014f4:	4620      	mov	r0, r4
 80014f6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 80014fa:	f000 f805 	bl	8001508 <__aeabi_d2ulz>
 80014fe:	4240      	negs	r0, r0
 8001500:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001504:	bd38      	pop	{r3, r4, r5, pc}
 8001506:	bf00      	nop

08001508 <__aeabi_d2ulz>:
 8001508:	b5d0      	push	{r4, r6, r7, lr}
 800150a:	4b0c      	ldr	r3, [pc, #48]	; (800153c <__aeabi_d2ulz+0x34>)
 800150c:	2200      	movs	r2, #0
 800150e:	4606      	mov	r6, r0
 8001510:	460f      	mov	r7, r1
 8001512:	f7ff fc81 	bl	8000e18 <__aeabi_dmul>
 8001516:	f7ff ff57 	bl	80013c8 <__aeabi_d2uiz>
 800151a:	4604      	mov	r4, r0
 800151c:	f7ff fc02 	bl	8000d24 <__aeabi_ui2d>
 8001520:	4b07      	ldr	r3, [pc, #28]	; (8001540 <__aeabi_d2ulz+0x38>)
 8001522:	2200      	movs	r2, #0
 8001524:	f7ff fc78 	bl	8000e18 <__aeabi_dmul>
 8001528:	4602      	mov	r2, r0
 800152a:	460b      	mov	r3, r1
 800152c:	4630      	mov	r0, r6
 800152e:	4639      	mov	r1, r7
 8001530:	f7ff faba 	bl	8000aa8 <__aeabi_dsub>
 8001534:	f7ff ff48 	bl	80013c8 <__aeabi_d2uiz>
 8001538:	4621      	mov	r1, r4
 800153a:	bdd0      	pop	{r4, r6, r7, pc}
 800153c:	3df00000 	.word	0x3df00000
 8001540:	41f00000 	.word	0x41f00000

08001544 <__udivmoddi4>:
 8001544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001548:	9d08      	ldr	r5, [sp, #32]
 800154a:	4604      	mov	r4, r0
 800154c:	468c      	mov	ip, r1
 800154e:	2b00      	cmp	r3, #0
 8001550:	f040 8083 	bne.w	800165a <__udivmoddi4+0x116>
 8001554:	428a      	cmp	r2, r1
 8001556:	4617      	mov	r7, r2
 8001558:	d947      	bls.n	80015ea <__udivmoddi4+0xa6>
 800155a:	fab2 f282 	clz	r2, r2
 800155e:	b142      	cbz	r2, 8001572 <__udivmoddi4+0x2e>
 8001560:	f1c2 0020 	rsb	r0, r2, #32
 8001564:	fa24 f000 	lsr.w	r0, r4, r0
 8001568:	4091      	lsls	r1, r2
 800156a:	4097      	lsls	r7, r2
 800156c:	ea40 0c01 	orr.w	ip, r0, r1
 8001570:	4094      	lsls	r4, r2
 8001572:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8001576:	0c23      	lsrs	r3, r4, #16
 8001578:	fbbc f6f8 	udiv	r6, ip, r8
 800157c:	fa1f fe87 	uxth.w	lr, r7
 8001580:	fb08 c116 	mls	r1, r8, r6, ip
 8001584:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001588:	fb06 f10e 	mul.w	r1, r6, lr
 800158c:	4299      	cmp	r1, r3
 800158e:	d909      	bls.n	80015a4 <__udivmoddi4+0x60>
 8001590:	18fb      	adds	r3, r7, r3
 8001592:	f106 30ff 	add.w	r0, r6, #4294967295
 8001596:	f080 8119 	bcs.w	80017cc <__udivmoddi4+0x288>
 800159a:	4299      	cmp	r1, r3
 800159c:	f240 8116 	bls.w	80017cc <__udivmoddi4+0x288>
 80015a0:	3e02      	subs	r6, #2
 80015a2:	443b      	add	r3, r7
 80015a4:	1a5b      	subs	r3, r3, r1
 80015a6:	b2a4      	uxth	r4, r4
 80015a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80015ac:	fb08 3310 	mls	r3, r8, r0, r3
 80015b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80015b4:	fb00 fe0e 	mul.w	lr, r0, lr
 80015b8:	45a6      	cmp	lr, r4
 80015ba:	d909      	bls.n	80015d0 <__udivmoddi4+0x8c>
 80015bc:	193c      	adds	r4, r7, r4
 80015be:	f100 33ff 	add.w	r3, r0, #4294967295
 80015c2:	f080 8105 	bcs.w	80017d0 <__udivmoddi4+0x28c>
 80015c6:	45a6      	cmp	lr, r4
 80015c8:	f240 8102 	bls.w	80017d0 <__udivmoddi4+0x28c>
 80015cc:	3802      	subs	r0, #2
 80015ce:	443c      	add	r4, r7
 80015d0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80015d4:	eba4 040e 	sub.w	r4, r4, lr
 80015d8:	2600      	movs	r6, #0
 80015da:	b11d      	cbz	r5, 80015e4 <__udivmoddi4+0xa0>
 80015dc:	40d4      	lsrs	r4, r2
 80015de:	2300      	movs	r3, #0
 80015e0:	e9c5 4300 	strd	r4, r3, [r5]
 80015e4:	4631      	mov	r1, r6
 80015e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80015ea:	b902      	cbnz	r2, 80015ee <__udivmoddi4+0xaa>
 80015ec:	deff      	udf	#255	; 0xff
 80015ee:	fab2 f282 	clz	r2, r2
 80015f2:	2a00      	cmp	r2, #0
 80015f4:	d150      	bne.n	8001698 <__udivmoddi4+0x154>
 80015f6:	1bcb      	subs	r3, r1, r7
 80015f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80015fc:	fa1f f887 	uxth.w	r8, r7
 8001600:	2601      	movs	r6, #1
 8001602:	fbb3 fcfe 	udiv	ip, r3, lr
 8001606:	0c21      	lsrs	r1, r4, #16
 8001608:	fb0e 331c 	mls	r3, lr, ip, r3
 800160c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001610:	fb08 f30c 	mul.w	r3, r8, ip
 8001614:	428b      	cmp	r3, r1
 8001616:	d907      	bls.n	8001628 <__udivmoddi4+0xe4>
 8001618:	1879      	adds	r1, r7, r1
 800161a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800161e:	d202      	bcs.n	8001626 <__udivmoddi4+0xe2>
 8001620:	428b      	cmp	r3, r1
 8001622:	f200 80e9 	bhi.w	80017f8 <__udivmoddi4+0x2b4>
 8001626:	4684      	mov	ip, r0
 8001628:	1ac9      	subs	r1, r1, r3
 800162a:	b2a3      	uxth	r3, r4
 800162c:	fbb1 f0fe 	udiv	r0, r1, lr
 8001630:	fb0e 1110 	mls	r1, lr, r0, r1
 8001634:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8001638:	fb08 f800 	mul.w	r8, r8, r0
 800163c:	45a0      	cmp	r8, r4
 800163e:	d907      	bls.n	8001650 <__udivmoddi4+0x10c>
 8001640:	193c      	adds	r4, r7, r4
 8001642:	f100 33ff 	add.w	r3, r0, #4294967295
 8001646:	d202      	bcs.n	800164e <__udivmoddi4+0x10a>
 8001648:	45a0      	cmp	r8, r4
 800164a:	f200 80d9 	bhi.w	8001800 <__udivmoddi4+0x2bc>
 800164e:	4618      	mov	r0, r3
 8001650:	eba4 0408 	sub.w	r4, r4, r8
 8001654:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8001658:	e7bf      	b.n	80015da <__udivmoddi4+0x96>
 800165a:	428b      	cmp	r3, r1
 800165c:	d909      	bls.n	8001672 <__udivmoddi4+0x12e>
 800165e:	2d00      	cmp	r5, #0
 8001660:	f000 80b1 	beq.w	80017c6 <__udivmoddi4+0x282>
 8001664:	2600      	movs	r6, #0
 8001666:	e9c5 0100 	strd	r0, r1, [r5]
 800166a:	4630      	mov	r0, r6
 800166c:	4631      	mov	r1, r6
 800166e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001672:	fab3 f683 	clz	r6, r3
 8001676:	2e00      	cmp	r6, #0
 8001678:	d14a      	bne.n	8001710 <__udivmoddi4+0x1cc>
 800167a:	428b      	cmp	r3, r1
 800167c:	d302      	bcc.n	8001684 <__udivmoddi4+0x140>
 800167e:	4282      	cmp	r2, r0
 8001680:	f200 80b8 	bhi.w	80017f4 <__udivmoddi4+0x2b0>
 8001684:	1a84      	subs	r4, r0, r2
 8001686:	eb61 0103 	sbc.w	r1, r1, r3
 800168a:	2001      	movs	r0, #1
 800168c:	468c      	mov	ip, r1
 800168e:	2d00      	cmp	r5, #0
 8001690:	d0a8      	beq.n	80015e4 <__udivmoddi4+0xa0>
 8001692:	e9c5 4c00 	strd	r4, ip, [r5]
 8001696:	e7a5      	b.n	80015e4 <__udivmoddi4+0xa0>
 8001698:	f1c2 0320 	rsb	r3, r2, #32
 800169c:	fa20 f603 	lsr.w	r6, r0, r3
 80016a0:	4097      	lsls	r7, r2
 80016a2:	fa01 f002 	lsl.w	r0, r1, r2
 80016a6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80016aa:	40d9      	lsrs	r1, r3
 80016ac:	4330      	orrs	r0, r6
 80016ae:	0c03      	lsrs	r3, r0, #16
 80016b0:	fbb1 f6fe 	udiv	r6, r1, lr
 80016b4:	fa1f f887 	uxth.w	r8, r7
 80016b8:	fb0e 1116 	mls	r1, lr, r6, r1
 80016bc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80016c0:	fb06 f108 	mul.w	r1, r6, r8
 80016c4:	4299      	cmp	r1, r3
 80016c6:	fa04 f402 	lsl.w	r4, r4, r2
 80016ca:	d909      	bls.n	80016e0 <__udivmoddi4+0x19c>
 80016cc:	18fb      	adds	r3, r7, r3
 80016ce:	f106 3cff 	add.w	ip, r6, #4294967295
 80016d2:	f080 808d 	bcs.w	80017f0 <__udivmoddi4+0x2ac>
 80016d6:	4299      	cmp	r1, r3
 80016d8:	f240 808a 	bls.w	80017f0 <__udivmoddi4+0x2ac>
 80016dc:	3e02      	subs	r6, #2
 80016de:	443b      	add	r3, r7
 80016e0:	1a5b      	subs	r3, r3, r1
 80016e2:	b281      	uxth	r1, r0
 80016e4:	fbb3 f0fe 	udiv	r0, r3, lr
 80016e8:	fb0e 3310 	mls	r3, lr, r0, r3
 80016ec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80016f0:	fb00 f308 	mul.w	r3, r0, r8
 80016f4:	428b      	cmp	r3, r1
 80016f6:	d907      	bls.n	8001708 <__udivmoddi4+0x1c4>
 80016f8:	1879      	adds	r1, r7, r1
 80016fa:	f100 3cff 	add.w	ip, r0, #4294967295
 80016fe:	d273      	bcs.n	80017e8 <__udivmoddi4+0x2a4>
 8001700:	428b      	cmp	r3, r1
 8001702:	d971      	bls.n	80017e8 <__udivmoddi4+0x2a4>
 8001704:	3802      	subs	r0, #2
 8001706:	4439      	add	r1, r7
 8001708:	1acb      	subs	r3, r1, r3
 800170a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800170e:	e778      	b.n	8001602 <__udivmoddi4+0xbe>
 8001710:	f1c6 0c20 	rsb	ip, r6, #32
 8001714:	fa03 f406 	lsl.w	r4, r3, r6
 8001718:	fa22 f30c 	lsr.w	r3, r2, ip
 800171c:	431c      	orrs	r4, r3
 800171e:	fa20 f70c 	lsr.w	r7, r0, ip
 8001722:	fa01 f306 	lsl.w	r3, r1, r6
 8001726:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800172a:	fa21 f10c 	lsr.w	r1, r1, ip
 800172e:	431f      	orrs	r7, r3
 8001730:	0c3b      	lsrs	r3, r7, #16
 8001732:	fbb1 f9fe 	udiv	r9, r1, lr
 8001736:	fa1f f884 	uxth.w	r8, r4
 800173a:	fb0e 1119 	mls	r1, lr, r9, r1
 800173e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8001742:	fb09 fa08 	mul.w	sl, r9, r8
 8001746:	458a      	cmp	sl, r1
 8001748:	fa02 f206 	lsl.w	r2, r2, r6
 800174c:	fa00 f306 	lsl.w	r3, r0, r6
 8001750:	d908      	bls.n	8001764 <__udivmoddi4+0x220>
 8001752:	1861      	adds	r1, r4, r1
 8001754:	f109 30ff 	add.w	r0, r9, #4294967295
 8001758:	d248      	bcs.n	80017ec <__udivmoddi4+0x2a8>
 800175a:	458a      	cmp	sl, r1
 800175c:	d946      	bls.n	80017ec <__udivmoddi4+0x2a8>
 800175e:	f1a9 0902 	sub.w	r9, r9, #2
 8001762:	4421      	add	r1, r4
 8001764:	eba1 010a 	sub.w	r1, r1, sl
 8001768:	b2bf      	uxth	r7, r7
 800176a:	fbb1 f0fe 	udiv	r0, r1, lr
 800176e:	fb0e 1110 	mls	r1, lr, r0, r1
 8001772:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8001776:	fb00 f808 	mul.w	r8, r0, r8
 800177a:	45b8      	cmp	r8, r7
 800177c:	d907      	bls.n	800178e <__udivmoddi4+0x24a>
 800177e:	19e7      	adds	r7, r4, r7
 8001780:	f100 31ff 	add.w	r1, r0, #4294967295
 8001784:	d22e      	bcs.n	80017e4 <__udivmoddi4+0x2a0>
 8001786:	45b8      	cmp	r8, r7
 8001788:	d92c      	bls.n	80017e4 <__udivmoddi4+0x2a0>
 800178a:	3802      	subs	r0, #2
 800178c:	4427      	add	r7, r4
 800178e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001792:	eba7 0708 	sub.w	r7, r7, r8
 8001796:	fba0 8902 	umull	r8, r9, r0, r2
 800179a:	454f      	cmp	r7, r9
 800179c:	46c6      	mov	lr, r8
 800179e:	4649      	mov	r1, r9
 80017a0:	d31a      	bcc.n	80017d8 <__udivmoddi4+0x294>
 80017a2:	d017      	beq.n	80017d4 <__udivmoddi4+0x290>
 80017a4:	b15d      	cbz	r5, 80017be <__udivmoddi4+0x27a>
 80017a6:	ebb3 020e 	subs.w	r2, r3, lr
 80017aa:	eb67 0701 	sbc.w	r7, r7, r1
 80017ae:	fa07 fc0c 	lsl.w	ip, r7, ip
 80017b2:	40f2      	lsrs	r2, r6
 80017b4:	ea4c 0202 	orr.w	r2, ip, r2
 80017b8:	40f7      	lsrs	r7, r6
 80017ba:	e9c5 2700 	strd	r2, r7, [r5]
 80017be:	2600      	movs	r6, #0
 80017c0:	4631      	mov	r1, r6
 80017c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80017c6:	462e      	mov	r6, r5
 80017c8:	4628      	mov	r0, r5
 80017ca:	e70b      	b.n	80015e4 <__udivmoddi4+0xa0>
 80017cc:	4606      	mov	r6, r0
 80017ce:	e6e9      	b.n	80015a4 <__udivmoddi4+0x60>
 80017d0:	4618      	mov	r0, r3
 80017d2:	e6fd      	b.n	80015d0 <__udivmoddi4+0x8c>
 80017d4:	4543      	cmp	r3, r8
 80017d6:	d2e5      	bcs.n	80017a4 <__udivmoddi4+0x260>
 80017d8:	ebb8 0e02 	subs.w	lr, r8, r2
 80017dc:	eb69 0104 	sbc.w	r1, r9, r4
 80017e0:	3801      	subs	r0, #1
 80017e2:	e7df      	b.n	80017a4 <__udivmoddi4+0x260>
 80017e4:	4608      	mov	r0, r1
 80017e6:	e7d2      	b.n	800178e <__udivmoddi4+0x24a>
 80017e8:	4660      	mov	r0, ip
 80017ea:	e78d      	b.n	8001708 <__udivmoddi4+0x1c4>
 80017ec:	4681      	mov	r9, r0
 80017ee:	e7b9      	b.n	8001764 <__udivmoddi4+0x220>
 80017f0:	4666      	mov	r6, ip
 80017f2:	e775      	b.n	80016e0 <__udivmoddi4+0x19c>
 80017f4:	4630      	mov	r0, r6
 80017f6:	e74a      	b.n	800168e <__udivmoddi4+0x14a>
 80017f8:	f1ac 0c02 	sub.w	ip, ip, #2
 80017fc:	4439      	add	r1, r7
 80017fe:	e713      	b.n	8001628 <__udivmoddi4+0xe4>
 8001800:	3802      	subs	r0, #2
 8001802:	443c      	add	r4, r7
 8001804:	e724      	b.n	8001650 <__udivmoddi4+0x10c>
 8001806:	bf00      	nop

08001808 <__aeabi_idiv0>:
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop

0800180c <EEPROM_CalcCheckSum>:
static uint32_t EEPROM_CalcCheckSum(uint8_t* pu8Data, uint16_t u16Size);
/* Private Functions Declaration End  */

/* Private Functions Definition Start */
static uint32_t EEPROM_CalcCheckSum(uint8_t* pu8Data, uint16_t u16Size)
{
 800180c:	b480      	push	{r7}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	460b      	mov	r3, r1
 8001816:	807b      	strh	r3, [r7, #2]
	uint32_t u32Checksum = 0;
 8001818:	2300      	movs	r3, #0
 800181a:	60fb      	str	r3, [r7, #12]
	uint16_t u16LoopCntr = 0;
 800181c:	2300      	movs	r3, #0
 800181e:	817b      	strh	r3, [r7, #10]
	for(u16LoopCntr =0;u16LoopCntr<(u16Size-4);u16LoopCntr++)
 8001820:	2300      	movs	r3, #0
 8001822:	817b      	strh	r3, [r7, #10]
 8001824:	e00a      	b.n	800183c <EEPROM_CalcCheckSum+0x30>
	{
		u32Checksum += (pu8Data[u16LoopCntr]);
 8001826:	897b      	ldrh	r3, [r7, #10]
 8001828:	687a      	ldr	r2, [r7, #4]
 800182a:	4413      	add	r3, r2
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	461a      	mov	r2, r3
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	4413      	add	r3, r2
 8001834:	60fb      	str	r3, [r7, #12]
	for(u16LoopCntr =0;u16LoopCntr<(u16Size-4);u16LoopCntr++)
 8001836:	897b      	ldrh	r3, [r7, #10]
 8001838:	3301      	adds	r3, #1
 800183a:	817b      	strh	r3, [r7, #10]
 800183c:	897a      	ldrh	r2, [r7, #10]
 800183e:	887b      	ldrh	r3, [r7, #2]
 8001840:	3b04      	subs	r3, #4
 8001842:	429a      	cmp	r2, r3
 8001844:	dbef      	blt.n	8001826 <EEPROM_CalcCheckSum+0x1a>
	}

	//Increment it by one for Ignoring the  All Zeros data
	u32Checksum++;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	3301      	adds	r3, #1
 800184a:	60fb      	str	r3, [r7, #12]
	return u32Checksum;
 800184c:	68fb      	ldr	r3, [r7, #12]
}
 800184e:	4618      	mov	r0, r3
 8001850:	3714      	adds	r7, #20
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
	...

0800185c <EEPROM_RetriveBuffMemData>:

/* Private Functions Definition End */
void EEPROM_RetriveBuffMemData(void)
{
 800185c:	b590      	push	{r4, r7, lr}
 800185e:	b085      	sub	sp, #20
 8001860:	af04      	add	r7, sp, #16
	/*1 read first copy*/
	memset((uint8_t*)&g_stEepromBuffMemAdd,0x00,sizeof(g_stEepromBuffMemAdd));
 8001862:	220c      	movs	r2, #12
 8001864:	2100      	movs	r1, #0
 8001866:	482d      	ldr	r0, [pc, #180]	; (800191c <EEPROM_RetriveBuffMemData+0xc0>)
 8001868:	f012 fc38 	bl	80140dc <memset>
	if(HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDRESS, EEPROM_BUFF_MEM_ADD_DATA_COPY_1_ADD ,I2C_MEMADD_SIZE_16BIT,	(uint8_t *)&g_stEepromBuffMemAdd,sizeof(g_stEepromBuffMemAdd),1000) != HAL_OK)
 800186c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001870:	9302      	str	r3, [sp, #8]
 8001872:	230c      	movs	r3, #12
 8001874:	9301      	str	r3, [sp, #4]
 8001876:	4b29      	ldr	r3, [pc, #164]	; (800191c <EEPROM_RetriveBuffMemData+0xc0>)
 8001878:	9300      	str	r3, [sp, #0]
 800187a:	2302      	movs	r3, #2
 800187c:	2200      	movs	r2, #0
 800187e:	21a0      	movs	r1, #160	; 0xa0
 8001880:	4827      	ldr	r0, [pc, #156]	; (8001920 <EEPROM_RetriveBuffMemData+0xc4>)
 8001882:	f00c fa03 	bl	800dc8c <HAL_I2C_Mem_Read>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d004      	beq.n	8001896 <EEPROM_RetriveBuffMemData+0x3a>
		assertError(enmTORERRORS_MEM_I2C,enmERRORSTATE_ACTIVE);
 800188c:	2101      	movs	r1, #1
 800188e:	2008      	movs	r0, #8
 8001890:	f000 fb3c 	bl	8001f0c <assertError>
 8001894:	e003      	b.n	800189e <EEPROM_RetriveBuffMemData+0x42>
	else
		assertError(enmTORERRORS_MEM_I2C,enmERRORSTATE_NOERROR);
 8001896:	2100      	movs	r1, #0
 8001898:	2008      	movs	r0, #8
 800189a:	f000 fb37 	bl	8001f0c <assertError>

	if(g_stEepromBuffMemAdd.u32CheckSum  != EEPROM_CalcCheckSum((uint8_t*)&g_stEepromBuffMemAdd,sizeof(g_stEepromBuffMemAdd)))
 800189e:	4b1f      	ldr	r3, [pc, #124]	; (800191c <EEPROM_RetriveBuffMemData+0xc0>)
 80018a0:	689c      	ldr	r4, [r3, #8]
 80018a2:	210c      	movs	r1, #12
 80018a4:	481d      	ldr	r0, [pc, #116]	; (800191c <EEPROM_RetriveBuffMemData+0xc0>)
 80018a6:	f7ff ffb1 	bl	800180c <EEPROM_CalcCheckSum>
 80018aa:	4603      	mov	r3, r0
 80018ac:	429c      	cmp	r4, r3
 80018ae:	d031      	beq.n	8001914 <EEPROM_RetriveBuffMemData+0xb8>
	{
		/*2 First copy CRC is not matched Read Second copy*/
		memset((uint8_t*)&g_stEepromBuffMemAdd,0x00,sizeof(g_stEepromBuffMemAdd));
 80018b0:	220c      	movs	r2, #12
 80018b2:	2100      	movs	r1, #0
 80018b4:	4819      	ldr	r0, [pc, #100]	; (800191c <EEPROM_RetriveBuffMemData+0xc0>)
 80018b6:	f012 fc11 	bl	80140dc <memset>
		if(HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDRESS, EEPROM_BUFF_MEM_ADD_DATA_COPY_2_ADD ,I2C_MEMADD_SIZE_16BIT,	(uint8_t *)&g_stEepromBuffMemAdd,sizeof(g_stEepromBuffMemAdd),1000) != HAL_OK)
 80018ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018be:	9302      	str	r3, [sp, #8]
 80018c0:	230c      	movs	r3, #12
 80018c2:	9301      	str	r3, [sp, #4]
 80018c4:	4b15      	ldr	r3, [pc, #84]	; (800191c <EEPROM_RetriveBuffMemData+0xc0>)
 80018c6:	9300      	str	r3, [sp, #0]
 80018c8:	2302      	movs	r3, #2
 80018ca:	2210      	movs	r2, #16
 80018cc:	21a0      	movs	r1, #160	; 0xa0
 80018ce:	4814      	ldr	r0, [pc, #80]	; (8001920 <EEPROM_RetriveBuffMemData+0xc4>)
 80018d0:	f00c f9dc 	bl	800dc8c <HAL_I2C_Mem_Read>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d004      	beq.n	80018e4 <EEPROM_RetriveBuffMemData+0x88>
			assertError(enmTORERRORS_MEM_I2C,enmERRORSTATE_ACTIVE);
 80018da:	2101      	movs	r1, #1
 80018dc:	2008      	movs	r0, #8
 80018de:	f000 fb15 	bl	8001f0c <assertError>
 80018e2:	e003      	b.n	80018ec <EEPROM_RetriveBuffMemData+0x90>
		else
			assertError(enmTORERRORS_MEM_I2C,enmERRORSTATE_NOERROR);
 80018e4:	2100      	movs	r1, #0
 80018e6:	2008      	movs	r0, #8
 80018e8:	f000 fb10 	bl	8001f0c <assertError>

		if(g_stEepromBuffMemAdd.u32CheckSum != EEPROM_CalcCheckSum((uint8_t*)&g_stEepromBuffMemAdd,sizeof(g_stEepromBuffMemAdd)))
 80018ec:	4b0b      	ldr	r3, [pc, #44]	; (800191c <EEPROM_RetriveBuffMemData+0xc0>)
 80018ee:	689c      	ldr	r4, [r3, #8]
 80018f0:	210c      	movs	r1, #12
 80018f2:	480a      	ldr	r0, [pc, #40]	; (800191c <EEPROM_RetriveBuffMemData+0xc0>)
 80018f4:	f7ff ff8a 	bl	800180c <EEPROM_CalcCheckSum>
 80018f8:	4603      	mov	r3, r0
 80018fa:	429c      	cmp	r4, r3
 80018fc:	d00a      	beq.n	8001914 <EEPROM_RetriveBuffMemData+0xb8>
		{
			/*3. If both copy are corrupted the fill default values*/
			memset((uint8_t*)&g_stEepromBuffMemAdd,0x00,sizeof(g_stEepromBuffMemAdd));
 80018fe:	220c      	movs	r2, #12
 8001900:	2100      	movs	r1, #0
 8001902:	4806      	ldr	r0, [pc, #24]	; (800191c <EEPROM_RetriveBuffMemData+0xc0>)
 8001904:	f012 fbea 	bl	80140dc <memset>
			g_stEepromBuffMemAdd.u32BuffFlashReadAddress = 0;
 8001908:	4b04      	ldr	r3, [pc, #16]	; (800191c <EEPROM_RetriveBuffMemData+0xc0>)
 800190a:	2200      	movs	r2, #0
 800190c:	601a      	str	r2, [r3, #0]
			g_stEepromBuffMemAdd.u32BuffFlashWriteAddress  = 0;
 800190e:	4b03      	ldr	r3, [pc, #12]	; (800191c <EEPROM_RetriveBuffMemData+0xc0>)
 8001910:	2200      	movs	r2, #0
 8001912:	605a      	str	r2, [r3, #4]
	}
	else
	{
		//First copy read successfully.
	}
}
 8001914:	bf00      	nop
 8001916:	3704      	adds	r7, #4
 8001918:	46bd      	mov	sp, r7
 800191a:	bd90      	pop	{r4, r7, pc}
 800191c:	200028c0 	.word	0x200028c0
 8001920:	20003dfc 	.word	0x20003dfc

08001924 <EEPROM_WriteBuffMemData>:

void EEPROM_WriteBuffMemData(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af04      	add	r7, sp, #16
	  HAL_IWDG_Refresh(&hiwdg);
 800192a:	4822      	ldr	r0, [pc, #136]	; (80019b4 <EEPROM_WriteBuffMemData+0x90>)
 800192c:	f00d fc9e 	bl	800f26c <HAL_IWDG_Refresh>

	g_stEepromBuffMemAdd.u32CheckSum = EEPROM_CalcCheckSum((uint8_t*)&g_stEepromBuffMemAdd,sizeof(g_stEepromBuffMemAdd));
 8001930:	210c      	movs	r1, #12
 8001932:	4821      	ldr	r0, [pc, #132]	; (80019b8 <EEPROM_WriteBuffMemData+0x94>)
 8001934:	f7ff ff6a 	bl	800180c <EEPROM_CalcCheckSum>
 8001938:	4603      	mov	r3, r0
 800193a:	4a1f      	ldr	r2, [pc, #124]	; (80019b8 <EEPROM_WriteBuffMemData+0x94>)
 800193c:	6093      	str	r3, [r2, #8]
	if(HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDRESS, EEPROM_BUFF_MEM_ADD_DATA_COPY_1_ADD ,I2C_MEMADD_SIZE_16BIT,(uint8_t *)&g_stEepromBuffMemAdd,sizeof(g_stEepromBuffMemAdd),1000) != HAL_OK)
 800193e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001942:	9302      	str	r3, [sp, #8]
 8001944:	230c      	movs	r3, #12
 8001946:	9301      	str	r3, [sp, #4]
 8001948:	4b1b      	ldr	r3, [pc, #108]	; (80019b8 <EEPROM_WriteBuffMemData+0x94>)
 800194a:	9300      	str	r3, [sp, #0]
 800194c:	2302      	movs	r3, #2
 800194e:	2200      	movs	r2, #0
 8001950:	21a0      	movs	r1, #160	; 0xa0
 8001952:	481a      	ldr	r0, [pc, #104]	; (80019bc <EEPROM_WriteBuffMemData+0x98>)
 8001954:	f00c f878 	bl	800da48 <HAL_I2C_Mem_Write>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d004      	beq.n	8001968 <EEPROM_WriteBuffMemData+0x44>
		assertError(enmTORERRORS_MEM_I2C,enmERRORSTATE_ACTIVE);
 800195e:	2101      	movs	r1, #1
 8001960:	2008      	movs	r0, #8
 8001962:	f000 fad3 	bl	8001f0c <assertError>
 8001966:	e003      	b.n	8001970 <EEPROM_WriteBuffMemData+0x4c>
	else
		assertError(enmTORERRORS_MEM_I2C,enmERRORSTATE_NOERROR);
 8001968:	2100      	movs	r1, #0
 800196a:	2008      	movs	r0, #8
 800196c:	f000 face 	bl	8001f0c <assertError>

	HAL_IWDG_Refresh(&hiwdg);
 8001970:	4810      	ldr	r0, [pc, #64]	; (80019b4 <EEPROM_WriteBuffMemData+0x90>)
 8001972:	f00d fc7b 	bl	800f26c <HAL_IWDG_Refresh>
	HAL_Delay(6);
 8001976:	2006      	movs	r0, #6
 8001978:	f007 faaa 	bl	8008ed0 <HAL_Delay>

	if(HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDRESS, EEPROM_BUFF_MEM_ADD_DATA_COPY_2_ADD ,I2C_MEMADD_SIZE_16BIT,(uint8_t *)&g_stEepromBuffMemAdd,sizeof(g_stEepromBuffMemAdd),1000) != HAL_OK)
 800197c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001980:	9302      	str	r3, [sp, #8]
 8001982:	230c      	movs	r3, #12
 8001984:	9301      	str	r3, [sp, #4]
 8001986:	4b0c      	ldr	r3, [pc, #48]	; (80019b8 <EEPROM_WriteBuffMemData+0x94>)
 8001988:	9300      	str	r3, [sp, #0]
 800198a:	2302      	movs	r3, #2
 800198c:	2210      	movs	r2, #16
 800198e:	21a0      	movs	r1, #160	; 0xa0
 8001990:	480a      	ldr	r0, [pc, #40]	; (80019bc <EEPROM_WriteBuffMemData+0x98>)
 8001992:	f00c f859 	bl	800da48 <HAL_I2C_Mem_Write>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d004      	beq.n	80019a6 <EEPROM_WriteBuffMemData+0x82>
		assertError(enmTORERRORS_MEM_I2C,enmERRORSTATE_ACTIVE);
 800199c:	2101      	movs	r1, #1
 800199e:	2008      	movs	r0, #8
 80019a0:	f000 fab4 	bl	8001f0c <assertError>
	else
		assertError(enmTORERRORS_MEM_I2C,enmERRORSTATE_NOERROR);

}
 80019a4:	e003      	b.n	80019ae <EEPROM_WriteBuffMemData+0x8a>
		assertError(enmTORERRORS_MEM_I2C,enmERRORSTATE_NOERROR);
 80019a6:	2100      	movs	r1, #0
 80019a8:	2008      	movs	r0, #8
 80019aa:	f000 faaf 	bl	8001f0c <assertError>
}
 80019ae:	bf00      	nop
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	20003e50 	.word	0x20003e50
 80019b8:	200028c0 	.word	0x200028c0
 80019bc:	20003dfc 	.word	0x20003dfc

080019c0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b086      	sub	sp, #24
 80019c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80019c6:	463b      	mov	r3, r7
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	605a      	str	r2, [r3, #4]
 80019ce:	609a      	str	r2, [r3, #8]
 80019d0:	60da      	str	r2, [r3, #12]
 80019d2:	611a      	str	r2, [r3, #16]
 80019d4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80019d6:	4b3e      	ldr	r3, [pc, #248]	; (8001ad0 <MX_ADC1_Init+0x110>)
 80019d8:	4a3e      	ldr	r2, [pc, #248]	; (8001ad4 <MX_ADC1_Init+0x114>)
 80019da:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80019dc:	4b3c      	ldr	r3, [pc, #240]	; (8001ad0 <MX_ADC1_Init+0x110>)
 80019de:	2200      	movs	r2, #0
 80019e0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80019e2:	4b3b      	ldr	r3, [pc, #236]	; (8001ad0 <MX_ADC1_Init+0x110>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80019e8:	4b39      	ldr	r3, [pc, #228]	; (8001ad0 <MX_ADC1_Init+0x110>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80019ee:	4b38      	ldr	r3, [pc, #224]	; (8001ad0 <MX_ADC1_Init+0x110>)
 80019f0:	2201      	movs	r2, #1
 80019f2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80019f4:	4b36      	ldr	r3, [pc, #216]	; (8001ad0 <MX_ADC1_Init+0x110>)
 80019f6:	2204      	movs	r2, #4
 80019f8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80019fa:	4b35      	ldr	r3, [pc, #212]	; (8001ad0 <MX_ADC1_Init+0x110>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001a00:	4b33      	ldr	r3, [pc, #204]	; (8001ad0 <MX_ADC1_Init+0x110>)
 8001a02:	2201      	movs	r2, #1
 8001a04:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 4;
 8001a06:	4b32      	ldr	r3, [pc, #200]	; (8001ad0 <MX_ADC1_Init+0x110>)
 8001a08:	2204      	movs	r2, #4
 8001a0a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a0c:	4b30      	ldr	r3, [pc, #192]	; (8001ad0 <MX_ADC1_Init+0x110>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a14:	4b2e      	ldr	r3, [pc, #184]	; (8001ad0 <MX_ADC1_Init+0x110>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a1a:	4b2d      	ldr	r3, [pc, #180]	; (8001ad0 <MX_ADC1_Init+0x110>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001a20:	4b2b      	ldr	r3, [pc, #172]	; (8001ad0 <MX_ADC1_Init+0x110>)
 8001a22:	2201      	movs	r2, #1
 8001a24:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001a28:	4b29      	ldr	r3, [pc, #164]	; (8001ad0 <MX_ADC1_Init+0x110>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001a2e:	4b28      	ldr	r3, [pc, #160]	; (8001ad0 <MX_ADC1_Init+0x110>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a36:	4826      	ldr	r0, [pc, #152]	; (8001ad0 <MX_ADC1_Init+0x110>)
 8001a38:	f007 fca4 	bl	8009384 <HAL_ADC_Init>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8001a42:	f002 fda2 	bl	800458a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001a46:	4b24      	ldr	r3, [pc, #144]	; (8001ad8 <MX_ADC1_Init+0x118>)
 8001a48:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001a4a:	2306      	movs	r3, #6
 8001a4c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001a4e:	2307      	movs	r3, #7
 8001a50:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001a52:	237f      	movs	r3, #127	; 0x7f
 8001a54:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001a56:	2304      	movs	r3, #4
 8001a58:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a5e:	463b      	mov	r3, r7
 8001a60:	4619      	mov	r1, r3
 8001a62:	481b      	ldr	r0, [pc, #108]	; (8001ad0 <MX_ADC1_Init+0x110>)
 8001a64:	f008 fac8 	bl	8009ff8 <HAL_ADC_ConfigChannel>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001a6e:	f002 fd8c 	bl	800458a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001a72:	4b1a      	ldr	r3, [pc, #104]	; (8001adc <MX_ADC1_Init+0x11c>)
 8001a74:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001a76:	230c      	movs	r3, #12
 8001a78:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a7a:	463b      	mov	r3, r7
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	4814      	ldr	r0, [pc, #80]	; (8001ad0 <MX_ADC1_Init+0x110>)
 8001a80:	f008 faba 	bl	8009ff8 <HAL_ADC_ConfigChannel>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 8001a8a:	f002 fd7e 	bl	800458a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001a8e:	4b14      	ldr	r3, [pc, #80]	; (8001ae0 <MX_ADC1_Init+0x120>)
 8001a90:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001a92:	2312      	movs	r3, #18
 8001a94:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a96:	463b      	mov	r3, r7
 8001a98:	4619      	mov	r1, r3
 8001a9a:	480d      	ldr	r0, [pc, #52]	; (8001ad0 <MX_ADC1_Init+0x110>)
 8001a9c:	f008 faac 	bl	8009ff8 <HAL_ADC_ConfigChannel>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <MX_ADC1_Init+0xea>
  {
    Error_Handler();
 8001aa6:	f002 fd70 	bl	800458a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001aaa:	4b0e      	ldr	r3, [pc, #56]	; (8001ae4 <MX_ADC1_Init+0x124>)
 8001aac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001aae:	2318      	movs	r3, #24
 8001ab0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ab2:	463b      	mov	r3, r7
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	4806      	ldr	r0, [pc, #24]	; (8001ad0 <MX_ADC1_Init+0x110>)
 8001ab8:	f008 fa9e 	bl	8009ff8 <HAL_ADC_ConfigChannel>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 8001ac2:	f002 fd62 	bl	800458a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001ac6:	bf00      	nop
 8001ac8:	3718      	adds	r7, #24
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	200028cc 	.word	0x200028cc
 8001ad4:	50040000 	.word	0x50040000
 8001ad8:	25b00200 	.word	0x25b00200
 8001adc:	2a000400 	.word	0x2a000400
 8001ae0:	2e300800 	.word	0x2e300800
 8001ae4:	32601000 	.word	0x32601000

08001ae8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b0a2      	sub	sp, #136	; 0x88
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	605a      	str	r2, [r3, #4]
 8001afa:	609a      	str	r2, [r3, #8]
 8001afc:	60da      	str	r2, [r3, #12]
 8001afe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b00:	f107 0314 	add.w	r3, r7, #20
 8001b04:	2260      	movs	r2, #96	; 0x60
 8001b06:	2100      	movs	r1, #0
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f012 fae7 	bl	80140dc <memset>
  if(adcHandle->Instance==ADC1)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a3f      	ldr	r2, [pc, #252]	; (8001c10 <HAL_ADC_MspInit+0x128>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d176      	bne.n	8001c06 <HAL_ADC_MspInit+0x11e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001b18:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b1c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001b1e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001b22:	66bb      	str	r3, [r7, #104]	; 0x68
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8001b24:	2303      	movs	r3, #3
 8001b26:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 5;
 8001b28:	2305      	movs	r3, #5
 8001b2a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 13;
 8001b2c:	230d      	movs	r3, #13
 8001b2e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001b30:	2307      	movs	r3, #7
 8001b32:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001b34:	2302      	movs	r3, #2
 8001b36:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001b38:	2302      	movs	r3, #2
 8001b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001b3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b40:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b42:	f107 0314 	add.w	r3, r7, #20
 8001b46:	4618      	mov	r0, r3
 8001b48:	f00e fbe8 	bl	801031c <HAL_RCCEx_PeriphCLKConfig>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8001b52:	f002 fd1a 	bl	800458a <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001b56:	4b2f      	ldr	r3, [pc, #188]	; (8001c14 <HAL_ADC_MspInit+0x12c>)
 8001b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b5a:	4a2e      	ldr	r2, [pc, #184]	; (8001c14 <HAL_ADC_MspInit+0x12c>)
 8001b5c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b62:	4b2c      	ldr	r3, [pc, #176]	; (8001c14 <HAL_ADC_MspInit+0x12c>)
 8001b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b6a:	613b      	str	r3, [r7, #16]
 8001b6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b6e:	4b29      	ldr	r3, [pc, #164]	; (8001c14 <HAL_ADC_MspInit+0x12c>)
 8001b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b72:	4a28      	ldr	r2, [pc, #160]	; (8001c14 <HAL_ADC_MspInit+0x12c>)
 8001b74:	f043 0301 	orr.w	r3, r3, #1
 8001b78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b7a:	4b26      	ldr	r3, [pc, #152]	; (8001c14 <HAL_ADC_MspInit+0x12c>)
 8001b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b7e:	f003 0301 	and.w	r3, r3, #1
 8001b82:	60fb      	str	r3, [r7, #12]
 8001b84:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN9
    PA5     ------> ADC1_IN10
    PA6     ------> ADC1_IN11
    PA7     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Batt_Voltage_ADC1_9_Pin|GPIO_PIN_5|GPIO_PIN_6|Input_Voltage_ADC1_12_Pin;
 8001b86:	23f0      	movs	r3, #240	; 0xf0
 8001b88:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001b8a:	230b      	movs	r3, #11
 8001b8c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b92:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001b96:	4619      	mov	r1, r3
 8001b98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b9c:	f00b fa54 	bl	800d048 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001ba0:	4b1d      	ldr	r3, [pc, #116]	; (8001c18 <HAL_ADC_MspInit+0x130>)
 8001ba2:	4a1e      	ldr	r2, [pc, #120]	; (8001c1c <HAL_ADC_MspInit+0x134>)
 8001ba4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001ba6:	4b1c      	ldr	r3, [pc, #112]	; (8001c18 <HAL_ADC_MspInit+0x130>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bac:	4b1a      	ldr	r3, [pc, #104]	; (8001c18 <HAL_ADC_MspInit+0x130>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bb2:	4b19      	ldr	r3, [pc, #100]	; (8001c18 <HAL_ADC_MspInit+0x130>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001bb8:	4b17      	ldr	r3, [pc, #92]	; (8001c18 <HAL_ADC_MspInit+0x130>)
 8001bba:	2280      	movs	r2, #128	; 0x80
 8001bbc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001bbe:	4b16      	ldr	r3, [pc, #88]	; (8001c18 <HAL_ADC_MspInit+0x130>)
 8001bc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bc4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001bc6:	4b14      	ldr	r3, [pc, #80]	; (8001c18 <HAL_ADC_MspInit+0x130>)
 8001bc8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001bcc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001bce:	4b12      	ldr	r3, [pc, #72]	; (8001c18 <HAL_ADC_MspInit+0x130>)
 8001bd0:	2220      	movs	r2, #32
 8001bd2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001bd4:	4b10      	ldr	r3, [pc, #64]	; (8001c18 <HAL_ADC_MspInit+0x130>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001bda:	480f      	ldr	r0, [pc, #60]	; (8001c18 <HAL_ADC_MspInit+0x130>)
 8001bdc:	f00a fb48 	bl	800c270 <HAL_DMA_Init>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <HAL_ADC_MspInit+0x102>
    {
      Error_Handler();
 8001be6:	f002 fcd0 	bl	800458a <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a0a      	ldr	r2, [pc, #40]	; (8001c18 <HAL_ADC_MspInit+0x130>)
 8001bee:	64da      	str	r2, [r3, #76]	; 0x4c
 8001bf0:	4a09      	ldr	r2, [pc, #36]	; (8001c18 <HAL_ADC_MspInit+0x130>)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 6, 0);
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	2106      	movs	r1, #6
 8001bfa:	2012      	movs	r0, #18
 8001bfc:	f00a fad0 	bl	800c1a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8001c00:	2012      	movs	r0, #18
 8001c02:	f00a faf9 	bl	800c1f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001c06:	bf00      	nop
 8001c08:	3788      	adds	r7, #136	; 0x88
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	50040000 	.word	0x50040000
 8001c14:	40021000 	.word	0x40021000
 8001c18:	20002930 	.word	0x20002930
 8001c1c:	40020008 	.word	0x40020008

08001c20 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001c24:	4b28      	ldr	r3, [pc, #160]	; (8001cc8 <MX_CAN1_Init+0xa8>)
 8001c26:	4a29      	ldr	r2, [pc, #164]	; (8001ccc <MX_CAN1_Init+0xac>)
 8001c28:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 10;
 8001c2a:	4b27      	ldr	r3, [pc, #156]	; (8001cc8 <MX_CAN1_Init+0xa8>)
 8001c2c:	220a      	movs	r2, #10
 8001c2e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001c30:	4b25      	ldr	r3, [pc, #148]	; (8001cc8 <MX_CAN1_Init+0xa8>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001c36:	4b24      	ldr	r3, [pc, #144]	; (8001cc8 <MX_CAN1_Init+0xa8>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8001c3c:	4b22      	ldr	r3, [pc, #136]	; (8001cc8 <MX_CAN1_Init+0xa8>)
 8001c3e:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8001c42:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001c44:	4b20      	ldr	r3, [pc, #128]	; (8001cc8 <MX_CAN1_Init+0xa8>)
 8001c46:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001c4a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = ENABLE;
 8001c4c:	4b1e      	ldr	r3, [pc, #120]	; (8001cc8 <MX_CAN1_Init+0xa8>)
 8001c4e:	2201      	movs	r2, #1
 8001c50:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8001c52:	4b1d      	ldr	r3, [pc, #116]	; (8001cc8 <MX_CAN1_Init+0xa8>)
 8001c54:	2201      	movs	r2, #1
 8001c56:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = ENABLE;
 8001c58:	4b1b      	ldr	r3, [pc, #108]	; (8001cc8 <MX_CAN1_Init+0xa8>)
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001c5e:	4b1a      	ldr	r3, [pc, #104]	; (8001cc8 <MX_CAN1_Init+0xa8>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001c64:	4b18      	ldr	r3, [pc, #96]	; (8001cc8 <MX_CAN1_Init+0xa8>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001c6a:	4b17      	ldr	r3, [pc, #92]	; (8001cc8 <MX_CAN1_Init+0xa8>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001c70:	4815      	ldr	r0, [pc, #84]	; (8001cc8 <MX_CAN1_Init+0xa8>)
 8001c72:	f009 fa05 	bl	800b080 <HAL_CAN_Init>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001c7c:	f002 fc85 	bl	800458a <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

/*##-2- Configure the CAN Filter ###########################################*/
	  sFilterConfig.FilterBank = 0;
 8001c80:	4b13      	ldr	r3, [pc, #76]	; (8001cd0 <MX_CAN1_Init+0xb0>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	615a      	str	r2, [r3, #20]
	  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001c86:	4b12      	ldr	r3, [pc, #72]	; (8001cd0 <MX_CAN1_Init+0xb0>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	619a      	str	r2, [r3, #24]
	  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001c8c:	4b10      	ldr	r3, [pc, #64]	; (8001cd0 <MX_CAN1_Init+0xb0>)
 8001c8e:	2201      	movs	r2, #1
 8001c90:	61da      	str	r2, [r3, #28]
	  sFilterConfig.FilterIdHigh = 0x0000;
 8001c92:	4b0f      	ldr	r3, [pc, #60]	; (8001cd0 <MX_CAN1_Init+0xb0>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	601a      	str	r2, [r3, #0]
	  sFilterConfig.FilterIdLow = 0x0000;
 8001c98:	4b0d      	ldr	r3, [pc, #52]	; (8001cd0 <MX_CAN1_Init+0xb0>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	605a      	str	r2, [r3, #4]
	  sFilterConfig.FilterMaskIdHigh = 0x0000;
 8001c9e:	4b0c      	ldr	r3, [pc, #48]	; (8001cd0 <MX_CAN1_Init+0xb0>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	609a      	str	r2, [r3, #8]
	  sFilterConfig.FilterMaskIdLow = 0x0000;
 8001ca4:	4b0a      	ldr	r3, [pc, #40]	; (8001cd0 <MX_CAN1_Init+0xb0>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	60da      	str	r2, [r3, #12]
	  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001caa:	4b09      	ldr	r3, [pc, #36]	; (8001cd0 <MX_CAN1_Init+0xb0>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	611a      	str	r2, [r3, #16]
	  sFilterConfig.FilterActivation = ENABLE;
 8001cb0:	4b07      	ldr	r3, [pc, #28]	; (8001cd0 <MX_CAN1_Init+0xb0>)
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	621a      	str	r2, [r3, #32]
	  sFilterConfig.SlaveStartFilterBank = 14;
 8001cb6:	4b06      	ldr	r3, [pc, #24]	; (8001cd0 <MX_CAN1_Init+0xb0>)
 8001cb8:	220e      	movs	r2, #14
 8001cba:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 8001cbc:	4904      	ldr	r1, [pc, #16]	; (8001cd0 <MX_CAN1_Init+0xb0>)
 8001cbe:	4802      	ldr	r0, [pc, #8]	; (8001cc8 <MX_CAN1_Init+0xa8>)
 8001cc0:	f009 fc26 	bl	800b510 <HAL_CAN_ConfigFilter>


  /* USER CODE END CAN1_Init 2 */

}
 8001cc4:	bf00      	nop
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	200029a0 	.word	0x200029a0
 8001ccc:	40006400 	.word	0x40006400
 8001cd0:	20002978 	.word	0x20002978

08001cd4 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b08a      	sub	sp, #40	; 0x28
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cdc:	f107 0314 	add.w	r3, r7, #20
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]
 8001ce4:	605a      	str	r2, [r3, #4]
 8001ce6:	609a      	str	r2, [r3, #8]
 8001ce8:	60da      	str	r2, [r3, #12]
 8001cea:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a27      	ldr	r2, [pc, #156]	; (8001d90 <HAL_CAN_MspInit+0xbc>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d148      	bne.n	8001d88 <HAL_CAN_MspInit+0xb4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001cf6:	4b27      	ldr	r3, [pc, #156]	; (8001d94 <HAL_CAN_MspInit+0xc0>)
 8001cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cfa:	4a26      	ldr	r2, [pc, #152]	; (8001d94 <HAL_CAN_MspInit+0xc0>)
 8001cfc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d00:	6593      	str	r3, [r2, #88]	; 0x58
 8001d02:	4b24      	ldr	r3, [pc, #144]	; (8001d94 <HAL_CAN_MspInit+0xc0>)
 8001d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d0a:	613b      	str	r3, [r7, #16]
 8001d0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d0e:	4b21      	ldr	r3, [pc, #132]	; (8001d94 <HAL_CAN_MspInit+0xc0>)
 8001d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d12:	4a20      	ldr	r2, [pc, #128]	; (8001d94 <HAL_CAN_MspInit+0xc0>)
 8001d14:	f043 0302 	orr.w	r3, r3, #2
 8001d18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d1a:	4b1e      	ldr	r3, [pc, #120]	; (8001d94 <HAL_CAN_MspInit+0xc0>)
 8001d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d1e:	f003 0302 	and.w	r3, r3, #2
 8001d22:	60fb      	str	r3, [r7, #12]
 8001d24:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001d26:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d30:	2300      	movs	r3, #0
 8001d32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d34:	2303      	movs	r3, #3
 8001d36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001d38:	2309      	movs	r3, #9
 8001d3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d3c:	f107 0314 	add.w	r3, r7, #20
 8001d40:	4619      	mov	r1, r3
 8001d42:	4815      	ldr	r0, [pc, #84]	; (8001d98 <HAL_CAN_MspInit+0xc4>)
 8001d44:	f00b f980 	bl	800d048 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 1, 0);
 8001d48:	2200      	movs	r2, #0
 8001d4a:	2101      	movs	r1, #1
 8001d4c:	2013      	movs	r0, #19
 8001d4e:	f00a fa27 	bl	800c1a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001d52:	2013      	movs	r0, #19
 8001d54:	f00a fa50 	bl	800c1f8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 1, 0);
 8001d58:	2200      	movs	r2, #0
 8001d5a:	2101      	movs	r1, #1
 8001d5c:	2014      	movs	r0, #20
 8001d5e:	f00a fa1f 	bl	800c1a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001d62:	2014      	movs	r0, #20
 8001d64:	f00a fa48 	bl	800c1f8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 1, 0);
 8001d68:	2200      	movs	r2, #0
 8001d6a:	2101      	movs	r1, #1
 8001d6c:	2015      	movs	r0, #21
 8001d6e:	f00a fa17 	bl	800c1a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001d72:	2015      	movs	r0, #21
 8001d74:	f00a fa40 	bl	800c1f8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 1, 0);
 8001d78:	2200      	movs	r2, #0
 8001d7a:	2101      	movs	r1, #1
 8001d7c:	2016      	movs	r0, #22
 8001d7e:	f00a fa0f 	bl	800c1a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8001d82:	2016      	movs	r0, #22
 8001d84:	f00a fa38 	bl	800c1f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001d88:	bf00      	nop
 8001d8a:	3728      	adds	r7, #40	; 0x28
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	40006400 	.word	0x40006400
 8001d94:	40021000 	.word	0x40021000
 8001d98:	48000400 	.word	0x48000400

08001d9c <HAL_CAN_MspDeInit>:

void HAL_CAN_MspDeInit(CAN_HandleTypeDef* canHandle)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]

  if(canHandle->Instance==CAN1)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a0e      	ldr	r2, [pc, #56]	; (8001de4 <HAL_CAN_MspDeInit+0x48>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d116      	bne.n	8001ddc <HAL_CAN_MspDeInit+0x40>
  {
  /* USER CODE BEGIN CAN1_MspDeInit 0 */

  /* USER CODE END CAN1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_CAN1_CLK_DISABLE();
 8001dae:	4b0e      	ldr	r3, [pc, #56]	; (8001de8 <HAL_CAN_MspDeInit+0x4c>)
 8001db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db2:	4a0d      	ldr	r2, [pc, #52]	; (8001de8 <HAL_CAN_MspDeInit+0x4c>)
 8001db4:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8001db8:	6593      	str	r3, [r2, #88]	; 0x58

    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8|GPIO_PIN_9);
 8001dba:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001dbe:	480b      	ldr	r0, [pc, #44]	; (8001dec <HAL_CAN_MspDeInit+0x50>)
 8001dc0:	f00b fb8a 	bl	800d4d8 <HAL_GPIO_DeInit>

    /* CAN1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(CAN1_TX_IRQn);
 8001dc4:	2013      	movs	r0, #19
 8001dc6:	f00a fa2f 	bl	800c228 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(CAN1_RX0_IRQn);
 8001dca:	2014      	movs	r0, #20
 8001dcc:	f00a fa2c 	bl	800c228 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(CAN1_RX1_IRQn);
 8001dd0:	2015      	movs	r0, #21
 8001dd2:	f00a fa29 	bl	800c228 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(CAN1_SCE_IRQn);
 8001dd6:	2016      	movs	r0, #22
 8001dd8:	f00a fa26 	bl	800c228 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN CAN1_MspDeInit 1 */

  /* USER CODE END CAN1_MspDeInit 1 */
  }
}
 8001ddc:	bf00      	nop
 8001dde:	3708      	adds	r7, #8
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	40006400 	.word	0x40006400
 8001de8:	40021000 	.word	0x40021000
 8001dec:	48000400 	.word	0x48000400

08001df0 <updateDeviceSignature>:
 Author           	Date                Remarks
 KloudQ Team       11-04-18
 KloudQ Team	   19-09-18				Update . Flash Size removed from payload
******************************************************************************/
void updateDeviceSignature(void)
{
 8001df0:	b5b0      	push	{r4, r5, r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
	char buffflash[16] = {'0'};

	u32FlashSize = (uint16_t)STM32_FLASHSIZE;
#endif

	gu32DeviceID = STM32_UUID[0];
 8001df6:	4b2d      	ldr	r3, [pc, #180]	; (8001eac <updateDeviceSignature+0xbc>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a2d      	ldr	r2, [pc, #180]	; (8001eb0 <updateDeviceSignature+0xc0>)
 8001dfc:	6013      	str	r3, [r2, #0]
	uint32_t u32UUID0 = 0;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	60fb      	str	r3, [r7, #12]
	uint32_t u32UUID1 = 0;
 8001e02:	2300      	movs	r3, #0
 8001e04:	60bb      	str	r3, [r7, #8]
	uint32_t u32UUID2 = 0;
 8001e06:	2300      	movs	r3, #0
 8001e08:	607b      	str	r3, [r7, #4]
	u32UUID0 = STM32_UUID[0];
 8001e0a:	4b28      	ldr	r3, [pc, #160]	; (8001eac <updateDeviceSignature+0xbc>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	60fb      	str	r3, [r7, #12]
	u32UUID1 = STM32_UUID[1];
 8001e10:	4b28      	ldr	r3, [pc, #160]	; (8001eb4 <updateDeviceSignature+0xc4>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	60bb      	str	r3, [r7, #8]
	u32UUID2 = STM32_UUID[2];
 8001e16:	4b28      	ldr	r3, [pc, #160]	; (8001eb8 <updateDeviceSignature+0xc8>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	607b      	str	r3, [r7, #4]
#if(USEMEMSIZEINDINFO == TRUE)
	/*Integer to ASCII Flash Size */
	itoa(u32FlashSize,buffflash,10);
#endif
	/* Append Device Info to Array */
	itoa(u32UUID2,buffuuid2,10);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	220a      	movs	r2, #10
 8001e20:	4926      	ldr	r1, [pc, #152]	; (8001ebc <updateDeviceSignature+0xcc>)
 8001e22:	4618      	mov	r0, r3
 8001e24:	f012 f93a 	bl	801409c <itoa>
	strcat(dinfo,buffuuid2);
 8001e28:	4924      	ldr	r1, [pc, #144]	; (8001ebc <updateDeviceSignature+0xcc>)
 8001e2a:	4825      	ldr	r0, [pc, #148]	; (8001ec0 <updateDeviceSignature+0xd0>)
 8001e2c:	f012 fea2 	bl	8014b74 <strcat>

	itoa(u32UUID1,buffuuid2,10);
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	220a      	movs	r2, #10
 8001e34:	4921      	ldr	r1, [pc, #132]	; (8001ebc <updateDeviceSignature+0xcc>)
 8001e36:	4618      	mov	r0, r3
 8001e38:	f012 f930 	bl	801409c <itoa>
	strcat(dinfo,buffuuid2);
 8001e3c:	491f      	ldr	r1, [pc, #124]	; (8001ebc <updateDeviceSignature+0xcc>)
 8001e3e:	4820      	ldr	r0, [pc, #128]	; (8001ec0 <updateDeviceSignature+0xd0>)
 8001e40:	f012 fe98 	bl	8014b74 <strcat>

	itoa(u32UUID0,buffuuid2,10);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	220a      	movs	r2, #10
 8001e48:	491c      	ldr	r1, [pc, #112]	; (8001ebc <updateDeviceSignature+0xcc>)
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f012 f926 	bl	801409c <itoa>
	strcat(dinfo,buffuuid2);
 8001e50:	491a      	ldr	r1, [pc, #104]	; (8001ebc <updateDeviceSignature+0xcc>)
 8001e52:	481b      	ldr	r0, [pc, #108]	; (8001ec0 <updateDeviceSignature+0xd0>)
 8001e54:	f012 fe8e 	bl	8014b74 <strcat>
#if(USEMEMSIZEINDINFO == TRUE)
	/* 16 bit Flash Size use if required */
	//strcat(dinfo,buffflash);
#endif

	memset(g_u8PaylodLenMsgBuff,0,sizeof(g_u8PaylodLenMsgBuff));
 8001e58:	223c      	movs	r2, #60	; 0x3c
 8001e5a:	2100      	movs	r1, #0
 8001e5c:	4819      	ldr	r0, [pc, #100]	; (8001ec4 <updateDeviceSignature+0xd4>)
 8001e5e:	f012 f93d 	bl	80140dc <memset>
	strcpy(g_u8PaylodLenMsgBuff,(char * )"*,");
 8001e62:	4b18      	ldr	r3, [pc, #96]	; (8001ec4 <updateDeviceSignature+0xd4>)
 8001e64:	4a18      	ldr	r2, [pc, #96]	; (8001ec8 <updateDeviceSignature+0xd8>)
 8001e66:	8811      	ldrh	r1, [r2, #0]
 8001e68:	7892      	ldrb	r2, [r2, #2]
 8001e6a:	8019      	strh	r1, [r3, #0]
 8001e6c:	709a      	strb	r2, [r3, #2]
	strcat(g_u8PaylodLenMsgBuff,(char * )dinfo);
 8001e6e:	4914      	ldr	r1, [pc, #80]	; (8001ec0 <updateDeviceSignature+0xd0>)
 8001e70:	4814      	ldr	r0, [pc, #80]	; (8001ec4 <updateDeviceSignature+0xd4>)
 8001e72:	f012 fe7f 	bl	8014b74 <strcat>
	strcat(g_u8PaylodLenMsgBuff,",Memory allocation error,#");
 8001e76:	4813      	ldr	r0, [pc, #76]	; (8001ec4 <updateDeviceSignature+0xd4>)
 8001e78:	f7fe fdb4 	bl	80009e4 <strlen>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	461a      	mov	r2, r3
 8001e80:	4b10      	ldr	r3, [pc, #64]	; (8001ec4 <updateDeviceSignature+0xd4>)
 8001e82:	4413      	add	r3, r2
 8001e84:	4a11      	ldr	r2, [pc, #68]	; (8001ecc <updateDeviceSignature+0xdc>)
 8001e86:	461d      	mov	r5, r3
 8001e88:	4614      	mov	r4, r2
 8001e8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e8c:	6028      	str	r0, [r5, #0]
 8001e8e:	6069      	str	r1, [r5, #4]
 8001e90:	60aa      	str	r2, [r5, #8]
 8001e92:	60eb      	str	r3, [r5, #12]
 8001e94:	cc03      	ldmia	r4!, {r0, r1}
 8001e96:	6128      	str	r0, [r5, #16]
 8001e98:	6169      	str	r1, [r5, #20]
 8001e9a:	8823      	ldrh	r3, [r4, #0]
 8001e9c:	78a2      	ldrb	r2, [r4, #2]
 8001e9e:	832b      	strh	r3, [r5, #24]
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	76ab      	strb	r3, [r5, #26]
}
 8001ea4:	bf00      	nop
 8001ea6:	3710      	adds	r7, #16
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bdb0      	pop	{r4, r5, r7, pc}
 8001eac:	1fff7590 	.word	0x1fff7590
 8001eb0:	200016f4 	.word	0x200016f4
 8001eb4:	1fff7594 	.word	0x1fff7594
 8001eb8:	1fff7598 	.word	0x1fff7598
 8001ebc:	20000034 	.word	0x20000034
 8001ec0:	20000000 	.word	0x20000000
 8001ec4:	200016f8 	.word	0x200016f8
 8001ec8:	08018828 	.word	0x08018828
 8001ecc:	0801882c 	.word	0x0801882c

08001ed0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001ed6:	4b0c      	ldr	r3, [pc, #48]	; (8001f08 <MX_DMA_Init+0x38>)
 8001ed8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001eda:	4a0b      	ldr	r2, [pc, #44]	; (8001f08 <MX_DMA_Init+0x38>)
 8001edc:	f043 0301 	orr.w	r3, r3, #1
 8001ee0:	6493      	str	r3, [r2, #72]	; 0x48
 8001ee2:	4b09      	ldr	r3, [pc, #36]	; (8001f08 <MX_DMA_Init+0x38>)
 8001ee4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ee6:	f003 0301 	and.w	r3, r3, #1
 8001eea:	607b      	str	r3, [r7, #4]
 8001eec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 6, 0);
 8001eee:	2200      	movs	r2, #0
 8001ef0:	2106      	movs	r1, #6
 8001ef2:	200b      	movs	r0, #11
 8001ef4:	f00a f954 	bl	800c1a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001ef8:	200b      	movs	r0, #11
 8001efa:	f00a f97d 	bl	800c1f8 <HAL_NVIC_EnableIRQ>

}
 8001efe:	bf00      	nop
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	40021000 	.word	0x40021000

08001f0c <assertError>:
 Change History:
 Author           	Date                Remarks
 KTL   				12-2-19				Initial Draft
******************************************************************************/
void assertError(enmSystemErrorType errorType ,enmErrorStatus errorStatus)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	4603      	mov	r3, r0
 8001f14:	460a      	mov	r2, r1
 8001f16:	71fb      	strb	r3, [r7, #7]
 8001f18:	4613      	mov	r3, r2
 8001f1a:	71bb      	strb	r3, [r7, #6]
	switch(errorType)
 8001f1c:	79fb      	ldrb	r3, [r7, #7]
 8001f1e:	2b09      	cmp	r3, #9
 8001f20:	d826      	bhi.n	8001f70 <assertError+0x64>
 8001f22:	a201      	add	r2, pc, #4	; (adr r2, 8001f28 <assertError+0x1c>)
 8001f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f28:	08001f51 	.word	0x08001f51
 8001f2c:	08001f71 	.word	0x08001f71
 8001f30:	08001f71 	.word	0x08001f71
 8001f34:	08001f71 	.word	0x08001f71
 8001f38:	08001f71 	.word	0x08001f71
 8001f3c:	08001f71 	.word	0x08001f71
 8001f40:	08001f71 	.word	0x08001f71
 8001f44:	08001f59 	.word	0x08001f59
 8001f48:	08001f61 	.word	0x08001f61
 8001f4c:	08001f69 	.word	0x08001f69
	{
		case enmTORERRORS_TIMER7:
			strsystemErrorLog.u32Timer7Error = errorStatus;
 8001f50:	79bb      	ldrb	r3, [r7, #6]
 8001f52:	4a0b      	ldr	r2, [pc, #44]	; (8001f80 <assertError+0x74>)
 8001f54:	6013      	str	r3, [r2, #0]
		break;
 8001f56:	e00c      	b.n	8001f72 <assertError+0x66>

		case enmTORERRORS_ENQUEUE:
			strsystemErrorLog.u32EnqueueError = errorStatus;
 8001f58:	79bb      	ldrb	r3, [r7, #6]
 8001f5a:	4a09      	ldr	r2, [pc, #36]	; (8001f80 <assertError+0x74>)
 8001f5c:	61d3      	str	r3, [r2, #28]
		break;
 8001f5e:	e008      	b.n	8001f72 <assertError+0x66>

		case enmTORERRORS_MEM_I2C:
			strsystemErrorLog.u32MemI2CError = errorStatus;
 8001f60:	79bb      	ldrb	r3, [r7, #6]
 8001f62:	4a07      	ldr	r2, [pc, #28]	; (8001f80 <assertError+0x74>)
 8001f64:	6213      	str	r3, [r2, #32]
		break;
 8001f66:	e004      	b.n	8001f72 <assertError+0x66>

		case enmTORERRORS_MEM_QUEUE:
			strsystemErrorLog.u32MemQueueError = errorStatus;
 8001f68:	79bb      	ldrb	r3, [r7, #6]
 8001f6a:	4a05      	ldr	r2, [pc, #20]	; (8001f80 <assertError+0x74>)
 8001f6c:	6253      	str	r3, [r2, #36]	; 0x24
		break;
 8001f6e:	e000      	b.n	8001f72 <assertError+0x66>

		default :
			/* Unwanted / Undefined Error Occured
			 * System Will Halt Completely */
			//systemReset();
			break;
 8001f70:	bf00      	nop
	}
}
 8001f72:	bf00      	nop
 8001f74:	370c      	adds	r7, #12
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	200029c8 	.word	0x200029c8

08001f84 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b08a      	sub	sp, #40	; 0x28
 8001f88:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f8a:	f107 0314 	add.w	r3, r7, #20
 8001f8e:	2200      	movs	r2, #0
 8001f90:	601a      	str	r2, [r3, #0]
 8001f92:	605a      	str	r2, [r3, #4]
 8001f94:	609a      	str	r2, [r3, #8]
 8001f96:	60da      	str	r2, [r3, #12]
 8001f98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f9a:	4b49      	ldr	r3, [pc, #292]	; (80020c0 <MX_GPIO_Init+0x13c>)
 8001f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f9e:	4a48      	ldr	r2, [pc, #288]	; (80020c0 <MX_GPIO_Init+0x13c>)
 8001fa0:	f043 0304 	orr.w	r3, r3, #4
 8001fa4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fa6:	4b46      	ldr	r3, [pc, #280]	; (80020c0 <MX_GPIO_Init+0x13c>)
 8001fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001faa:	f003 0304 	and.w	r3, r3, #4
 8001fae:	613b      	str	r3, [r7, #16]
 8001fb0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001fb2:	4b43      	ldr	r3, [pc, #268]	; (80020c0 <MX_GPIO_Init+0x13c>)
 8001fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fb6:	4a42      	ldr	r2, [pc, #264]	; (80020c0 <MX_GPIO_Init+0x13c>)
 8001fb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fbe:	4b40      	ldr	r3, [pc, #256]	; (80020c0 <MX_GPIO_Init+0x13c>)
 8001fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fc6:	60fb      	str	r3, [r7, #12]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fca:	4b3d      	ldr	r3, [pc, #244]	; (80020c0 <MX_GPIO_Init+0x13c>)
 8001fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fce:	4a3c      	ldr	r2, [pc, #240]	; (80020c0 <MX_GPIO_Init+0x13c>)
 8001fd0:	f043 0301 	orr.w	r3, r3, #1
 8001fd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fd6:	4b3a      	ldr	r3, [pc, #232]	; (80020c0 <MX_GPIO_Init+0x13c>)
 8001fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fda:	f003 0301 	and.w	r3, r3, #1
 8001fde:	60bb      	str	r3, [r7, #8]
 8001fe0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fe2:	4b37      	ldr	r3, [pc, #220]	; (80020c0 <MX_GPIO_Init+0x13c>)
 8001fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fe6:	4a36      	ldr	r2, [pc, #216]	; (80020c0 <MX_GPIO_Init+0x13c>)
 8001fe8:	f043 0302 	orr.w	r3, r3, #2
 8001fec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fee:	4b34      	ldr	r3, [pc, #208]	; (80020c0 <MX_GPIO_Init+0x13c>)
 8001ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ff2:	f003 0302 	and.w	r3, r3, #2
 8001ff6:	607b      	str	r3, [r7, #4]
 8001ff8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GSM_PWR_KEY_GPIO_Port, GSM_PWR_KEY_Pin, GPIO_PIN_RESET);
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002000:	4830      	ldr	r0, [pc, #192]	; (80020c4 <MX_GPIO_Init+0x140>)
 8002002:	f00b fb97 	bl	800d734 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin|WD_FEED_uC_Pin|Comm_LED_Pin, GPIO_PIN_RESET);
 8002006:	2200      	movs	r2, #0
 8002008:	f241 0109 	movw	r1, #4105	; 0x1009
 800200c:	482e      	ldr	r0, [pc, #184]	; (80020c8 <MX_GPIO_Init+0x144>)
 800200e:	f00b fb91 	bl	800d734 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPS_LED_GPIO_Port, GPS_LED_Pin, GPIO_PIN_RESET);
 8002012:	2200      	movs	r2, #0
 8002014:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002018:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800201c:	f00b fb8a 	bl	800d734 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GSM_PWR_KEY_Pin;
 8002020:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002024:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002026:	2301      	movs	r3, #1
 8002028:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202a:	2300      	movs	r3, #0
 800202c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800202e:	2300      	movs	r3, #0
 8002030:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GSM_PWR_KEY_GPIO_Port, &GPIO_InitStruct);
 8002032:	f107 0314 	add.w	r3, r7, #20
 8002036:	4619      	mov	r1, r3
 8002038:	4822      	ldr	r0, [pc, #136]	; (80020c4 <MX_GPIO_Init+0x140>)
 800203a:	f00b f805 	bl	800d048 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin|WD_FEED_uC_Pin|Comm_LED_Pin;
 800203e:	f241 0309 	movw	r3, #4105	; 0x1009
 8002042:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002044:	2301      	movs	r3, #1
 8002046:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002048:	2300      	movs	r3, #0
 800204a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800204c:	2300      	movs	r3, #0
 800204e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002050:	f107 0314 	add.w	r3, r7, #20
 8002054:	4619      	mov	r1, r3
 8002056:	481c      	ldr	r0, [pc, #112]	; (80020c8 <MX_GPIO_Init+0x144>)
 8002058:	f00a fff6 	bl	800d048 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPS_LED_Pin;
 800205c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002060:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002062:	2301      	movs	r3, #1
 8002064:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002066:	2300      	movs	r3, #0
 8002068:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800206a:	2300      	movs	r3, #0
 800206c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPS_LED_GPIO_Port, &GPIO_InitStruct);
 800206e:	f107 0314 	add.w	r3, r7, #20
 8002072:	4619      	mov	r1, r3
 8002074:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002078:	f00a ffe6 	bl	800d048 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = DI_EXTI4_Pin|DI_EXTI5_Pin;
 800207c:	2330      	movs	r3, #48	; 0x30
 800207e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002080:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8002084:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002086:	2300      	movs	r3, #0
 8002088:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800208a:	f107 0314 	add.w	r3, r7, #20
 800208e:	4619      	mov	r1, r3
 8002090:	480d      	ldr	r0, [pc, #52]	; (80020c8 <MX_GPIO_Init+0x144>)
 8002092:	f00a ffd9 	bl	800d048 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 2, 0);
 8002096:	2200      	movs	r2, #0
 8002098:	2102      	movs	r1, #2
 800209a:	200a      	movs	r0, #10
 800209c:	f00a f880 	bl	800c1a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80020a0:	200a      	movs	r0, #10
 80020a2:	f00a f8a9 	bl	800c1f8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80020a6:	2200      	movs	r2, #0
 80020a8:	2100      	movs	r1, #0
 80020aa:	2017      	movs	r0, #23
 80020ac:	f00a f878 	bl	800c1a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80020b0:	2017      	movs	r0, #23
 80020b2:	f00a f8a1 	bl	800c1f8 <HAL_NVIC_EnableIRQ>

}
 80020b6:	bf00      	nop
 80020b8:	3728      	adds	r7, #40	; 0x28
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	40021000 	.word	0x40021000
 80020c4:	48000800 	.word	0x48000800
 80020c8:	48000400 	.word	0x48000400

080020cc <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll ISR          TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	69db      	ldr	r3, [r3, #28]
 80020d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020dc:	2b80      	cmp	r3, #128	; 0x80
 80020de:	d101      	bne.n	80020e4 <LL_USART_IsActiveFlag_TXE+0x18>
 80020e0:	2301      	movs	r3, #1
 80020e2:	e000      	b.n	80020e6 <LL_USART_IsActiveFlag_TXE+0x1a>
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	370c      	adds	r7, #12
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr

080020f2 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80020f2:	b480      	push	{r7}
 80020f4:	b083      	sub	sp, #12
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
 80020fa:	460b      	mov	r3, r1
 80020fc:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 80020fe:	78fb      	ldrb	r3, [r7, #3]
 8002100:	b29a      	uxth	r2, r3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8002106:	bf00      	nop
 8002108:	370c      	adds	r7, #12
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
	...

08002114 <initGSMSIM868>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
void initGSMSIM868(void)
{
 8002114:	b5b0      	push	{r4, r5, r7, lr}
 8002116:	af00      	add	r7, sp, #0
	/* Init Buffers */
	memset(gsmInstance.agpsLocationData, GSM_ARRAY_INIT_CHAR, (GPS_LOCATION_ARRAY_SIZE * sizeof(char)));
 8002118:	2296      	movs	r2, #150	; 0x96
 800211a:	2100      	movs	r1, #0
 800211c:	48c5      	ldr	r0, [pc, #788]	; (8002434 <initGSMSIM868+0x320>)
 800211e:	f011 ffdd 	bl	80140dc <memset>
	memset(gsmInstance.agsmNetworkIP, GSM_ARRAY_INIT_CHAR, (GPRS_NETWORKIP_ARRAY_SIZE * sizeof(char)));
 8002122:	2223      	movs	r2, #35	; 0x23
 8002124:	2100      	movs	r1, #0
 8002126:	48c4      	ldr	r0, [pc, #784]	; (8002438 <initGSMSIM868+0x324>)
 8002128:	f011 ffd8 	bl	80140dc <memset>
	memset(gsmInstance.agsmSignalStrength, GSM_ARRAY_INIT_CHAR, (GSM_SIGSTRGTH_ARRAY_SIZE * sizeof(char)));
 800212c:	220a      	movs	r2, #10
 800212e:	2100      	movs	r1, #0
 8002130:	48c2      	ldr	r0, [pc, #776]	; (800243c <initGSMSIM868+0x328>)
 8002132:	f011 ffd3 	bl	80140dc <memset>
	memset((char *)gsmInstance.as8GSM_Response_Buff,GSM_ARRAY_INIT_CHAR,(GSM_RESPONSE_ARRAY_SIZE * sizeof(char)));
 8002136:	f640 228c 	movw	r2, #2700	; 0xa8c
 800213a:	2100      	movs	r1, #0
 800213c:	48c0      	ldr	r0, [pc, #768]	; (8002440 <initGSMSIM868+0x32c>)
 800213e:	f011 ffcd 	bl	80140dc <memset>
	memset(gsmInstance.agsmCommandResponse, DATA_UNKNOWN, sizeof(gsmInstance.agsmCommandResponse[0][0])
 8002142:	f44f 7261 	mov.w	r2, #900	; 0x384
 8002146:	213f      	movs	r1, #63	; 0x3f
 8002148:	48be      	ldr	r0, [pc, #760]	; (8002444 <initGSMSIM868+0x330>)
 800214a:	f011 ffc7 	bl	80140dc <memset>
		   * GSM_TOTAL_COMMANDS * GSM_TOTAL_COMMANDS);
	memset(gsmInstance.agsmHTTPRequestStatus,DATA_UNKNOWN,GSM_HTTP_RESPONSE_CODE_SIZE * sizeof(char));
 800214e:	2208      	movs	r2, #8
 8002150:	213f      	movs	r1, #63	; 0x3f
 8002152:	48bd      	ldr	r0, [pc, #756]	; (8002448 <initGSMSIM868+0x334>)
 8002154:	f011 ffc2 	bl	80140dc <memset>
	memset(gsmInstance.strSystemSMS.agsmSMSRecipient,DATA_UNKNOWN,SMS_MOB_NO_LENGTH * sizeof(char));
 8002158:	220d      	movs	r2, #13
 800215a:	213f      	movs	r1, #63	; 0x3f
 800215c:	48bb      	ldr	r0, [pc, #748]	; (800244c <initGSMSIM868+0x338>)
 800215e:	f011 ffbd 	bl	80140dc <memset>
	memset(gsmInstance.strSystemSMS.agsmSMSMessageBody,0x00,SMS_MAX_MSG_LENGTH * sizeof(char));
 8002162:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002166:	2100      	movs	r1, #0
 8002168:	48b9      	ldr	r0, [pc, #740]	; (8002450 <initGSMSIM868+0x33c>)
 800216a:	f011 ffb7 	bl	80140dc <memset>
	memset(gsmInstance.u32GSMHttpResponseCode,0x00,sizeof(char) * 3);
 800216e:	2203      	movs	r2, #3
 8002170:	2100      	movs	r1, #0
 8002172:	48b8      	ldr	r0, [pc, #736]	; (8002454 <initGSMSIM868+0x340>)
 8002174:	f011 ffb2 	bl	80140dc <memset>
	memset(gau8GSM_ATAPN, 0x00, (180 * sizeof(char)));
 8002178:	22b4      	movs	r2, #180	; 0xb4
 800217a:	2100      	movs	r1, #0
 800217c:	48b6      	ldr	r0, [pc, #728]	; (8002458 <initGSMSIM868+0x344>)
 800217e:	f011 ffad 	bl	80140dc <memset>
	memset(gau8GSM_ATURL, 0x00, (180 * sizeof(char)));
 8002182:	22b4      	movs	r2, #180	; 0xb4
 8002184:	2100      	movs	r1, #0
 8002186:	48b5      	ldr	r0, [pc, #724]	; (800245c <initGSMSIM868+0x348>)
 8002188:	f011 ffa8 	bl	80140dc <memset>
	memset(gau8GSM_SMSRecepient, 0x00, ( 180 * sizeof(char)));
 800218c:	22b4      	movs	r2, #180	; 0xb4
 800218e:	2100      	movs	r1, #0
 8002190:	48b3      	ldr	r0, [pc, #716]	; (8002460 <initGSMSIM868+0x34c>)
 8002192:	f011 ffa3 	bl	80140dc <memset>

	strcat((char *)gau8GSM_ATAPN,(char *)gau8GSM_ATSETAPN);
 8002196:	49b3      	ldr	r1, [pc, #716]	; (8002464 <initGSMSIM868+0x350>)
 8002198:	48af      	ldr	r0, [pc, #700]	; (8002458 <initGSMSIM868+0x344>)
 800219a:	f012 fceb 	bl	8014b74 <strcat>
	strcat((char *)gau8GSM_ATAPN,(char *)"\"");
 800219e:	48ae      	ldr	r0, [pc, #696]	; (8002458 <initGSMSIM868+0x344>)
 80021a0:	f7fe fc20 	bl	80009e4 <strlen>
 80021a4:	4603      	mov	r3, r0
 80021a6:	461a      	mov	r2, r3
 80021a8:	4bab      	ldr	r3, [pc, #684]	; (8002458 <initGSMSIM868+0x344>)
 80021aa:	4413      	add	r3, r2
 80021ac:	49ae      	ldr	r1, [pc, #696]	; (8002468 <initGSMSIM868+0x354>)
 80021ae:	461a      	mov	r2, r3
 80021b0:	460b      	mov	r3, r1
 80021b2:	881b      	ldrh	r3, [r3, #0]
 80021b4:	8013      	strh	r3, [r2, #0]
	strcat((char *)gau8GSM_ATAPN,(char *)gau8GSM_apn);
 80021b6:	49ad      	ldr	r1, [pc, #692]	; (800246c <initGSMSIM868+0x358>)
 80021b8:	48a7      	ldr	r0, [pc, #668]	; (8002458 <initGSMSIM868+0x344>)
 80021ba:	f012 fcdb 	bl	8014b74 <strcat>
	strcat((char *)gau8GSM_ATAPN,(char *)"\"");
 80021be:	48a6      	ldr	r0, [pc, #664]	; (8002458 <initGSMSIM868+0x344>)
 80021c0:	f7fe fc10 	bl	80009e4 <strlen>
 80021c4:	4603      	mov	r3, r0
 80021c6:	461a      	mov	r2, r3
 80021c8:	4ba3      	ldr	r3, [pc, #652]	; (8002458 <initGSMSIM868+0x344>)
 80021ca:	4413      	add	r3, r2
 80021cc:	49a6      	ldr	r1, [pc, #664]	; (8002468 <initGSMSIM868+0x354>)
 80021ce:	461a      	mov	r2, r3
 80021d0:	460b      	mov	r3, r1
 80021d2:	881b      	ldrh	r3, [r3, #0]
 80021d4:	8013      	strh	r3, [r2, #0]
	strcat((char *)gau8GSM_ATAPN,(char *)",\"\",\"\",1\r\n");
 80021d6:	48a0      	ldr	r0, [pc, #640]	; (8002458 <initGSMSIM868+0x344>)
 80021d8:	f7fe fc04 	bl	80009e4 <strlen>
 80021dc:	4603      	mov	r3, r0
 80021de:	461a      	mov	r2, r3
 80021e0:	4b9d      	ldr	r3, [pc, #628]	; (8002458 <initGSMSIM868+0x344>)
 80021e2:	4413      	add	r3, r2
 80021e4:	49a2      	ldr	r1, [pc, #648]	; (8002470 <initGSMSIM868+0x35c>)
 80021e6:	461a      	mov	r2, r3
 80021e8:	460b      	mov	r3, r1
 80021ea:	cb03      	ldmia	r3!, {r0, r1}
 80021ec:	6010      	str	r0, [r2, #0]
 80021ee:	6051      	str	r1, [r2, #4]
 80021f0:	8819      	ldrh	r1, [r3, #0]
 80021f2:	789b      	ldrb	r3, [r3, #2]
 80021f4:	8111      	strh	r1, [r2, #8]
 80021f6:	7293      	strb	r3, [r2, #10]

	strcpy((char *)gau8GSM_ATURL,"http://kloudqpocapi.remotemonitor.in/api/Values/PostStringData");
 80021f8:	4a98      	ldr	r2, [pc, #608]	; (800245c <initGSMSIM868+0x348>)
 80021fa:	4b9e      	ldr	r3, [pc, #632]	; (8002474 <initGSMSIM868+0x360>)
 80021fc:	4614      	mov	r4, r2
 80021fe:	461d      	mov	r5, r3
 8002200:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002202:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002204:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002206:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002208:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800220a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800220c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002210:	c407      	stmia	r4!, {r0, r1, r2}
 8002212:	8023      	strh	r3, [r4, #0]
 8002214:	3402      	adds	r4, #2
 8002216:	0c1b      	lsrs	r3, r3, #16
 8002218:	7023      	strb	r3, [r4, #0]
	strcat(gau8GSM_ATURL,"\r\n");
 800221a:	4890      	ldr	r0, [pc, #576]	; (800245c <initGSMSIM868+0x348>)
 800221c:	f7fe fbe2 	bl	80009e4 <strlen>
 8002220:	4603      	mov	r3, r0
 8002222:	461a      	mov	r2, r3
 8002224:	4b8d      	ldr	r3, [pc, #564]	; (800245c <initGSMSIM868+0x348>)
 8002226:	4413      	add	r3, r2
 8002228:	4a93      	ldr	r2, [pc, #588]	; (8002478 <initGSMSIM868+0x364>)
 800222a:	8811      	ldrh	r1, [r2, #0]
 800222c:	7892      	ldrb	r2, [r2, #2]
 800222e:	8019      	strh	r1, [r3, #0]
 8002230:	709a      	strb	r2, [r3, #2]
//	itoa(temp_len,buffer,PAYLOAD_DATA_STRING_RADIX);
//	strcat((char*)gau8GSM_ATAPNL,(char *)buffer);
//	strcat((char*)gau8GSM_ATAPNL,",80\r\n"); // time out


	memset(gau8GSM_MQTTOPEN, 0x00, (100 * sizeof(char)));
 8002232:	2264      	movs	r2, #100	; 0x64
 8002234:	2100      	movs	r1, #0
 8002236:	4891      	ldr	r0, [pc, #580]	; (800247c <initGSMSIM868+0x368>)
 8002238:	f011 ff50 	bl	80140dc <memset>
	strcat((char *)gau8GSM_MQTTOPEN,(char *)gau8GSM_ATQMQTTOPEN);
 800223c:	4990      	ldr	r1, [pc, #576]	; (8002480 <initGSMSIM868+0x36c>)
 800223e:	488f      	ldr	r0, [pc, #572]	; (800247c <initGSMSIM868+0x368>)
 8002240:	f012 fc98 	bl	8014b74 <strcat>
	strcat((char *)gau8GSM_MQTTOPEN,(char *)"\"");
 8002244:	488d      	ldr	r0, [pc, #564]	; (800247c <initGSMSIM868+0x368>)
 8002246:	f7fe fbcd 	bl	80009e4 <strlen>
 800224a:	4603      	mov	r3, r0
 800224c:	461a      	mov	r2, r3
 800224e:	4b8b      	ldr	r3, [pc, #556]	; (800247c <initGSMSIM868+0x368>)
 8002250:	4413      	add	r3, r2
 8002252:	4985      	ldr	r1, [pc, #532]	; (8002468 <initGSMSIM868+0x354>)
 8002254:	461a      	mov	r2, r3
 8002256:	460b      	mov	r3, r1
 8002258:	881b      	ldrh	r3, [r3, #0]
 800225a:	8013      	strh	r3, [r2, #0]
	strcat((char *)gau8GSM_MQTTOPEN,(char *)MQTTUrl);
 800225c:	4887      	ldr	r0, [pc, #540]	; (800247c <initGSMSIM868+0x368>)
 800225e:	f7fe fbc1 	bl	80009e4 <strlen>
 8002262:	4603      	mov	r3, r0
 8002264:	461a      	mov	r2, r3
 8002266:	4b85      	ldr	r3, [pc, #532]	; (800247c <initGSMSIM868+0x368>)
 8002268:	4413      	add	r3, r2
 800226a:	4a86      	ldr	r2, [pc, #536]	; (8002484 <initGSMSIM868+0x370>)
 800226c:	461d      	mov	r5, r3
 800226e:	4614      	mov	r4, r2
 8002270:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002272:	6028      	str	r0, [r5, #0]
 8002274:	6069      	str	r1, [r5, #4]
 8002276:	60aa      	str	r2, [r5, #8]
 8002278:	60eb      	str	r3, [r5, #12]
 800227a:	8823      	ldrh	r3, [r4, #0]
 800227c:	78a2      	ldrb	r2, [r4, #2]
 800227e:	822b      	strh	r3, [r5, #16]
 8002280:	4613      	mov	r3, r2
 8002282:	74ab      	strb	r3, [r5, #18]
	strcat((char *)gau8GSM_MQTTOPEN,(char *)"\"");
 8002284:	487d      	ldr	r0, [pc, #500]	; (800247c <initGSMSIM868+0x368>)
 8002286:	f7fe fbad 	bl	80009e4 <strlen>
 800228a:	4603      	mov	r3, r0
 800228c:	461a      	mov	r2, r3
 800228e:	4b7b      	ldr	r3, [pc, #492]	; (800247c <initGSMSIM868+0x368>)
 8002290:	4413      	add	r3, r2
 8002292:	4975      	ldr	r1, [pc, #468]	; (8002468 <initGSMSIM868+0x354>)
 8002294:	461a      	mov	r2, r3
 8002296:	460b      	mov	r3, r1
 8002298:	881b      	ldrh	r3, [r3, #0]
 800229a:	8013      	strh	r3, [r2, #0]
	strcat((char *)gau8GSM_MQTTOPEN,(char *)",");
 800229c:	4877      	ldr	r0, [pc, #476]	; (800247c <initGSMSIM868+0x368>)
 800229e:	f7fe fba1 	bl	80009e4 <strlen>
 80022a2:	4603      	mov	r3, r0
 80022a4:	461a      	mov	r2, r3
 80022a6:	4b75      	ldr	r3, [pc, #468]	; (800247c <initGSMSIM868+0x368>)
 80022a8:	4413      	add	r3, r2
 80022aa:	4977      	ldr	r1, [pc, #476]	; (8002488 <initGSMSIM868+0x374>)
 80022ac:	461a      	mov	r2, r3
 80022ae:	460b      	mov	r3, r1
 80022b0:	881b      	ldrh	r3, [r3, #0]
 80022b2:	8013      	strh	r3, [r2, #0]
	strcat((char *)gau8GSM_MQTTOPEN,(char *)MQTTPort);
 80022b4:	4871      	ldr	r0, [pc, #452]	; (800247c <initGSMSIM868+0x368>)
 80022b6:	f7fe fb95 	bl	80009e4 <strlen>
 80022ba:	4603      	mov	r3, r0
 80022bc:	461a      	mov	r2, r3
 80022be:	4b6f      	ldr	r3, [pc, #444]	; (800247c <initGSMSIM868+0x368>)
 80022c0:	4413      	add	r3, r2
 80022c2:	4a72      	ldr	r2, [pc, #456]	; (800248c <initGSMSIM868+0x378>)
 80022c4:	6810      	ldr	r0, [r2, #0]
 80022c6:	6018      	str	r0, [r3, #0]
 80022c8:	7912      	ldrb	r2, [r2, #4]
 80022ca:	711a      	strb	r2, [r3, #4]
	strcat((char *)gau8GSM_MQTTOPEN,(char *)"\r\n");
 80022cc:	486b      	ldr	r0, [pc, #428]	; (800247c <initGSMSIM868+0x368>)
 80022ce:	f7fe fb89 	bl	80009e4 <strlen>
 80022d2:	4603      	mov	r3, r0
 80022d4:	461a      	mov	r2, r3
 80022d6:	4b69      	ldr	r3, [pc, #420]	; (800247c <initGSMSIM868+0x368>)
 80022d8:	4413      	add	r3, r2
 80022da:	4a67      	ldr	r2, [pc, #412]	; (8002478 <initGSMSIM868+0x364>)
 80022dc:	8811      	ldrh	r1, [r2, #0]
 80022de:	7892      	ldrb	r2, [r2, #2]
 80022e0:	8019      	strh	r1, [r3, #0]
 80022e2:	709a      	strb	r2, [r3, #2]

	memset(gau8GSM_MQTTCONN, 0x00, (150 * sizeof(char)));
 80022e4:	2296      	movs	r2, #150	; 0x96
 80022e6:	2100      	movs	r1, #0
 80022e8:	4869      	ldr	r0, [pc, #420]	; (8002490 <initGSMSIM868+0x37c>)
 80022ea:	f011 fef7 	bl	80140dc <memset>
	strcat((char *)gau8GSM_MQTTCONN,(char *)gau8GSM_ATQMTCONN);
 80022ee:	4969      	ldr	r1, [pc, #420]	; (8002494 <initGSMSIM868+0x380>)
 80022f0:	4867      	ldr	r0, [pc, #412]	; (8002490 <initGSMSIM868+0x37c>)
 80022f2:	f012 fc3f 	bl	8014b74 <strcat>
	strcat((char *)gau8GSM_MQTTCONN,(char *)"\"");
 80022f6:	4866      	ldr	r0, [pc, #408]	; (8002490 <initGSMSIM868+0x37c>)
 80022f8:	f7fe fb74 	bl	80009e4 <strlen>
 80022fc:	4603      	mov	r3, r0
 80022fe:	461a      	mov	r2, r3
 8002300:	4b63      	ldr	r3, [pc, #396]	; (8002490 <initGSMSIM868+0x37c>)
 8002302:	4413      	add	r3, r2
 8002304:	4958      	ldr	r1, [pc, #352]	; (8002468 <initGSMSIM868+0x354>)
 8002306:	461a      	mov	r2, r3
 8002308:	460b      	mov	r3, r1
 800230a:	881b      	ldrh	r3, [r3, #0]
 800230c:	8013      	strh	r3, [r2, #0]
	strcpy(MQTT_ClientID,(char * )dinfo);
 800230e:	4962      	ldr	r1, [pc, #392]	; (8002498 <initGSMSIM868+0x384>)
 8002310:	4862      	ldr	r0, [pc, #392]	; (800249c <initGSMSIM868+0x388>)
 8002312:	f012 fc4b 	bl	8014bac <strcpy>
	strcat((char *)gau8GSM_MQTTCONN,(char *)MQTT_ClientID);
 8002316:	4961      	ldr	r1, [pc, #388]	; (800249c <initGSMSIM868+0x388>)
 8002318:	485d      	ldr	r0, [pc, #372]	; (8002490 <initGSMSIM868+0x37c>)
 800231a:	f012 fc2b 	bl	8014b74 <strcat>
	strcat((char *)gau8GSM_MQTTCONN,(char *)"\",\"");
 800231e:	485c      	ldr	r0, [pc, #368]	; (8002490 <initGSMSIM868+0x37c>)
 8002320:	f7fe fb60 	bl	80009e4 <strlen>
 8002324:	4603      	mov	r3, r0
 8002326:	461a      	mov	r2, r3
 8002328:	4b59      	ldr	r3, [pc, #356]	; (8002490 <initGSMSIM868+0x37c>)
 800232a:	4413      	add	r3, r2
 800232c:	4a5c      	ldr	r2, [pc, #368]	; (80024a0 <initGSMSIM868+0x38c>)
 800232e:	6810      	ldr	r0, [r2, #0]
 8002330:	6018      	str	r0, [r3, #0]
	strcat((char *)gau8GSM_MQTTCONN,(char *)MQTT_UserName);
	strcat((char *)gau8GSM_MQTTCONN,(char *)"\",\"");
 8002332:	4857      	ldr	r0, [pc, #348]	; (8002490 <initGSMSIM868+0x37c>)
 8002334:	f7fe fb56 	bl	80009e4 <strlen>
 8002338:	4603      	mov	r3, r0
 800233a:	461a      	mov	r2, r3
 800233c:	4b54      	ldr	r3, [pc, #336]	; (8002490 <initGSMSIM868+0x37c>)
 800233e:	4413      	add	r3, r2
 8002340:	4a57      	ldr	r2, [pc, #348]	; (80024a0 <initGSMSIM868+0x38c>)
 8002342:	6810      	ldr	r0, [r2, #0]
 8002344:	6018      	str	r0, [r3, #0]
	strcat((char *)gau8GSM_MQTTCONN,(char *)MQTT_Password);
	strcat((char *)gau8GSM_MQTTCONN,(char *)"\"\r\n");
 8002346:	4852      	ldr	r0, [pc, #328]	; (8002490 <initGSMSIM868+0x37c>)
 8002348:	f7fe fb4c 	bl	80009e4 <strlen>
 800234c:	4603      	mov	r3, r0
 800234e:	461a      	mov	r2, r3
 8002350:	4b4f      	ldr	r3, [pc, #316]	; (8002490 <initGSMSIM868+0x37c>)
 8002352:	4413      	add	r3, r2
 8002354:	4a53      	ldr	r2, [pc, #332]	; (80024a4 <initGSMSIM868+0x390>)
 8002356:	6810      	ldr	r0, [r2, #0]
 8002358:	6018      	str	r0, [r3, #0]

	memset(gau8GSM_MQTTSUB, 0x00, (200 * sizeof(char)));
 800235a:	22c8      	movs	r2, #200	; 0xc8
 800235c:	2100      	movs	r1, #0
 800235e:	4852      	ldr	r0, [pc, #328]	; (80024a8 <initGSMSIM868+0x394>)
 8002360:	f011 febc 	bl	80140dc <memset>
	strcat((char *)gau8GSM_MQTTSUB,(char *)gau8GSM_ATQMTSUB);
 8002364:	4951      	ldr	r1, [pc, #324]	; (80024ac <initGSMSIM868+0x398>)
 8002366:	4850      	ldr	r0, [pc, #320]	; (80024a8 <initGSMSIM868+0x394>)
 8002368:	f012 fc04 	bl	8014b74 <strcat>
	strcat((char *)gau8GSM_MQTTSUB,(char *)"\"");
 800236c:	484e      	ldr	r0, [pc, #312]	; (80024a8 <initGSMSIM868+0x394>)
 800236e:	f7fe fb39 	bl	80009e4 <strlen>
 8002372:	4603      	mov	r3, r0
 8002374:	461a      	mov	r2, r3
 8002376:	4b4c      	ldr	r3, [pc, #304]	; (80024a8 <initGSMSIM868+0x394>)
 8002378:	4413      	add	r3, r2
 800237a:	493b      	ldr	r1, [pc, #236]	; (8002468 <initGSMSIM868+0x354>)
 800237c:	461a      	mov	r2, r3
 800237e:	460b      	mov	r3, r1
 8002380:	881b      	ldrh	r3, [r3, #0]
 8002382:	8013      	strh	r3, [r2, #0]
	strcat((char *)gau8GSM_MQTTSUB,(char *) MQTT_SUBConfig);
 8002384:	4848      	ldr	r0, [pc, #288]	; (80024a8 <initGSMSIM868+0x394>)
 8002386:	f7fe fb2d 	bl	80009e4 <strlen>
 800238a:	4603      	mov	r3, r0
 800238c:	461a      	mov	r2, r3
 800238e:	4b46      	ldr	r3, [pc, #280]	; (80024a8 <initGSMSIM868+0x394>)
 8002390:	4413      	add	r3, r2
 8002392:	4a47      	ldr	r2, [pc, #284]	; (80024b0 <initGSMSIM868+0x39c>)
 8002394:	461d      	mov	r5, r3
 8002396:	4614      	mov	r4, r2
 8002398:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800239a:	6028      	str	r0, [r5, #0]
 800239c:	6069      	str	r1, [r5, #4]
 800239e:	60aa      	str	r2, [r5, #8]
 80023a0:	60eb      	str	r3, [r5, #12]
 80023a2:	6820      	ldr	r0, [r4, #0]
 80023a4:	6128      	str	r0, [r5, #16]
 80023a6:	7923      	ldrb	r3, [r4, #4]
 80023a8:	752b      	strb	r3, [r5, #20]
	strcat((char *)gau8GSM_MQTTSUB,(char *)"\",2\r\n");
 80023aa:	483f      	ldr	r0, [pc, #252]	; (80024a8 <initGSMSIM868+0x394>)
 80023ac:	f7fe fb1a 	bl	80009e4 <strlen>
 80023b0:	4603      	mov	r3, r0
 80023b2:	461a      	mov	r2, r3
 80023b4:	4b3c      	ldr	r3, [pc, #240]	; (80024a8 <initGSMSIM868+0x394>)
 80023b6:	4413      	add	r3, r2
 80023b8:	4a3e      	ldr	r2, [pc, #248]	; (80024b4 <initGSMSIM868+0x3a0>)
 80023ba:	6810      	ldr	r0, [r2, #0]
 80023bc:	6018      	str	r0, [r3, #0]
 80023be:	8892      	ldrh	r2, [r2, #4]
 80023c0:	809a      	strh	r2, [r3, #4]


	strcat(gau8GSM_SMSRecepient,"\r\n");
 80023c2:	4827      	ldr	r0, [pc, #156]	; (8002460 <initGSMSIM868+0x34c>)
 80023c4:	f7fe fb0e 	bl	80009e4 <strlen>
 80023c8:	4603      	mov	r3, r0
 80023ca:	461a      	mov	r2, r3
 80023cc:	4b24      	ldr	r3, [pc, #144]	; (8002460 <initGSMSIM868+0x34c>)
 80023ce:	4413      	add	r3, r2
 80023d0:	4a29      	ldr	r2, [pc, #164]	; (8002478 <initGSMSIM868+0x364>)
 80023d2:	8811      	ldrh	r1, [r2, #0]
 80023d4:	7892      	ldrb	r2, [r2, #2]
 80023d6:	8019      	strh	r1, [r3, #0]
 80023d8:	709a      	strb	r2, [r3, #2]

	gsmInstance.strSystemSMS.u8NewMessage = FALSE;
 80023da:	4b16      	ldr	r3, [pc, #88]	; (8002434 <initGSMSIM868+0x320>)
 80023dc:	f503 5396 	add.w	r3, r3, #4800	; 0x12c0
 80023e0:	331e      	adds	r3, #30
 80023e2:	2200      	movs	r2, #0
 80023e4:	701a      	strb	r2, [r3, #0]
	gsmInstance.enmcurrentTask = enmGSMTASK_RESET;
 80023e6:	4b13      	ldr	r3, [pc, #76]	; (8002434 <initGSMSIM868+0x320>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	f883 2fae 	strb.w	r2, [r3, #4014]	; 0xfae
	gsmInstance.enmGSMPwrState = enmGSM_PWRNOTSTARTED;
 80023ee:	4b11      	ldr	r3, [pc, #68]	; (8002434 <initGSMSIM868+0x320>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	f883 2fb0 	strb.w	r2, [r3, #4016]	; 0xfb0
	gsmInstance.u8isConnected = FALSE;
 80023f6:	4b0f      	ldr	r3, [pc, #60]	; (8002434 <initGSMSIM868+0x320>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	f883 2f86 	strb.w	r2, [r3, #3974]	; 0xf86
	gsmInstance.u8GSM_Response_Character_Counter = 0;
 80023fe:	4b0d      	ldr	r3, [pc, #52]	; (8002434 <initGSMSIM868+0x320>)
 8002400:	2200      	movs	r2, #0
 8002402:	f8c3 2fa8 	str.w	r2, [r3, #4008]	; 0xfa8
	gsmInstance.u8gsmRegistrationStatus = FALSE;
 8002406:	4b0b      	ldr	r3, [pc, #44]	; (8002434 <initGSMSIM868+0x320>)
 8002408:	2200      	movs	r2, #0
 800240a:	f883 2f84 	strb.w	r2, [r3, #3972]	; 0xf84
	gsmInstance.u8gsmSIMReadyStatus = FALSE;
 800240e:	4b09      	ldr	r3, [pc, #36]	; (8002434 <initGSMSIM868+0x320>)
 8002410:	2200      	movs	r2, #0
 8002412:	f883 2f83 	strb.w	r2, [r3, #3971]	; 0xf83
	gsmInstance.u8gsmRetryCount = GSM_MAX_RETRY;
 8002416:	4b07      	ldr	r3, [pc, #28]	; (8002434 <initGSMSIM868+0x320>)
 8002418:	2205      	movs	r2, #5
 800241a:	f883 2f85 	strb.w	r2, [r3, #3973]	; 0xf85
	gsmInstance.boolAttemptFota= FALSE;
 800241e:	4b05      	ldr	r3, [pc, #20]	; (8002434 <initGSMSIM868+0x320>)
 8002420:	2200      	movs	r2, #0
 8002422:	f883 2f88 	strb.w	r2, [r3, #3976]	; 0xf88
	gsmInstance.u32GSMTimer = ONE_SEC;
 8002426:	4b03      	ldr	r3, [pc, #12]	; (8002434 <initGSMSIM868+0x320>)
 8002428:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800242c:	f8c3 2f90 	str.w	r2, [r3, #3984]	; 0xf90
 8002430:	e042      	b.n	80024b8 <initGSMSIM868+0x3a4>
 8002432:	bf00      	nop
 8002434:	20002b1c 	.word	0x20002b1c
 8002438:	20002c52 	.word	0x20002c52
 800243c:	20002c48 	.word	0x20002c48
 8002440:	20003013 	.word	0x20003013
 8002444:	20002c75 	.word	0x20002c75
 8002448:	20002ff9 	.word	0x20002ff9
 800244c:	20003acd 	.word	0x20003acd
 8002450:	20003ada 	.word	0x20003ada
 8002454:	20003001 	.word	0x20003001
 8002458:	20000310 	.word	0x20000310
 800245c:	200003c4 	.word	0x200003c4
 8002460:	20000478 	.word	0x20000478
 8002464:	20000228 	.word	0x20000228
 8002468:	080188e0 	.word	0x080188e0
 800246c:	2000074c 	.word	0x2000074c
 8002470:	080188e4 	.word	0x080188e4
 8002474:	080188f0 	.word	0x080188f0
 8002478:	08018930 	.word	0x08018930
 800247c:	20000568 	.word	0x20000568
 8002480:	20000558 	.word	0x20000558
 8002484:	08019034 	.word	0x08019034
 8002488:	08018934 	.word	0x08018934
 800248c:	08019048 	.word	0x08019048
 8002490:	200005dc 	.word	0x200005dc
 8002494:	200005cc 	.word	0x200005cc
 8002498:	20000000 	.word	0x20000000
 800249c:	200018ac 	.word	0x200018ac
 80024a0:	08018938 	.word	0x08018938
 80024a4:	0801893c 	.word	0x0801893c
 80024a8:	20000684 	.word	0x20000684
 80024ac:	20000674 	.word	0x20000674
 80024b0:	080190b0 	.word	0x080190b0
 80024b4:	08018940 	.word	0x08018940
	gu32GSMHangTimer = THREE_MIN;
 80024b8:	4b1f      	ldr	r3, [pc, #124]	; (8002538 <initGSMSIM868+0x424>)
 80024ba:	4a20      	ldr	r2, [pc, #128]	; (800253c <initGSMSIM868+0x428>)
 80024bc:	601a      	str	r2, [r3, #0]
	gsmInstance.u32GSMHeartbeatTimer = 0;
 80024be:	4b20      	ldr	r3, [pc, #128]	; (8002540 <initGSMSIM868+0x42c>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	f8c3 2f9c 	str.w	r2, [r3, #3996]	; 0xf9c
	gsmInstance.u8IllegalHttpResponseCounter = 0;
 80024c6:	4b1e      	ldr	r3, [pc, #120]	; (8002540 <initGSMSIM868+0x42c>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	f883 2f8a 	strb.w	r2, [r3, #3978]	; 0xf8a
	gsmInstance.enmGSMCommandResponseState = enmGSM_SENDCMD;
 80024ce:	4b1c      	ldr	r3, [pc, #112]	; (8002540 <initGSMSIM868+0x42c>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	f883 2fac 	strb.w	r2, [r3, #4012]	; 0xfac
	gsmInstance.enmGSMCommand = enmGSMSTATE_ATE0;
 80024d6:	4b1a      	ldr	r3, [pc, #104]	; (8002540 <initGSMSIM868+0x42c>)
 80024d8:	2201      	movs	r2, #1
 80024da:	f883 2faf 	strb.w	r2, [r3, #4015]	; 0xfaf
	gsmInstance.enmGSMCommandState = enmGSM_CMDSEND;
 80024de:	4b18      	ldr	r3, [pc, #96]	; (8002540 <initGSMSIM868+0x42c>)
 80024e0:	2201      	movs	r2, #1
 80024e2:	f883 2fad 	strb.w	r2, [r3, #4013]	; 0xfad

	gu32ModuleInitTimer = FIVEHUNDRED_MS;
 80024e6:	4b17      	ldr	r3, [pc, #92]	; (8002544 <initGSMSIM868+0x430>)
 80024e8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80024ec:	601a      	str	r2, [r3, #0]
	gu8ModuleInitFlag = TRUE;
 80024ee:	4b16      	ldr	r3, [pc, #88]	; (8002548 <initGSMSIM868+0x434>)
 80024f0:	2201      	movs	r2, #1
 80024f2:	701a      	strb	r2, [r3, #0]
	gu8ModuleInitNotifyCnt = 0;
 80024f4:	4b15      	ldr	r3, [pc, #84]	; (800254c <initGSMSIM868+0x438>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(GPS_LED_GPIO_Port, GPS_LED_Pin,GPIO_PIN_RESET);
 80024fa:	2200      	movs	r2, #0
 80024fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002500:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002504:	f00b f916 	bl	800d734 <HAL_GPIO_WritePin>

	g_u8HttpConEstablishedFlag = 0;
 8002508:	4b11      	ldr	r3, [pc, #68]	; (8002550 <initGSMSIM868+0x43c>)
 800250a:	2200      	movs	r2, #0
 800250c:	701a      	strb	r2, [r3, #0]
	/* Potential Hang Issue due to this variable */
	gu32ModuleInitComplete = 0;
 800250e:	4b11      	ldr	r3, [pc, #68]	; (8002554 <initGSMSIM868+0x440>)
 8002510:	2200      	movs	r2, #0
 8002512:	601a      	str	r2, [r3, #0]
	 u8daignostic|=(1<<6);
 8002514:	4b10      	ldr	r3, [pc, #64]	; (8002558 <initGSMSIM868+0x444>)
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800251c:	b2da      	uxtb	r2, r3
 800251e:	4b0e      	ldr	r3, [pc, #56]	; (8002558 <initGSMSIM868+0x444>)
 8002520:	701a      	strb	r2, [r3, #0]
	GSMInitCompleteFlag = FALSE;
 8002522:	4b0e      	ldr	r3, [pc, #56]	; (800255c <initGSMSIM868+0x448>)
 8002524:	2200      	movs	r2, #0
 8002526:	701a      	strb	r2, [r3, #0]

	SUBTriggerFlag = FALSE;
 8002528:	4b0d      	ldr	r3, [pc, #52]	; (8002560 <initGSMSIM868+0x44c>)
 800252a:	2200      	movs	r2, #0
 800252c:	701a      	strb	r2, [r3, #0]
	gu32FotaRquestFlag =FALSE;
 800252e:	4b0d      	ldr	r3, [pc, #52]	; (8002564 <initGSMSIM868+0x450>)
 8002530:	2200      	movs	r2, #0
 8002532:	601a      	str	r2, [r3, #0]
//	FOTACompleteFlag = FALSE;
#if(DEBUGENABLE == TRUE)
	strcat(DebugBuff,"\r\nGSM Module Init ......\r\n");
#endif					
}
 8002534:	bf00      	nop
 8002536:	bdb0      	pop	{r4, r5, r7, pc}
 8002538:	200028a0 	.word	0x200028a0
 800253c:	0002bf20 	.word	0x0002bf20
 8002540:	20002b1c 	.word	0x20002b1c
 8002544:	200028a4 	.word	0x200028a4
 8002548:	20001915 	.word	0x20001915
 800254c:	20001944 	.word	0x20001944
 8002550:	200018de 	.word	0x200018de
 8002554:	20001910 	.word	0x20001910
 8002558:	20001946 	.word	0x20001946
 800255c:	20001945 	.word	0x20001945
 8002560:	20001735 	.word	0x20001735
 8002564:	20001738 	.word	0x20001738

08002568 <operateGSMSIM868>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
void operateGSMSIM868()
{
 8002568:	b590      	push	{r4, r7, lr}
 800256a:	f5ad 5d96 	sub.w	sp, sp, #4800	; 0x12c0
 800256e:	b085      	sub	sp, #20
 8002570:	f241 27d0 	movw	r7, #4816	; 0x12d0
 8002574:	446f      	add	r7, sp
	if(gsmInstance.u32GSMTimer != 0)
 8002576:	4bbd      	ldr	r3, [pc, #756]	; (800286c <operateGSMSIM868+0x304>)
 8002578:	f8d3 3f90 	ldr.w	r3, [r3, #3984]	; 0xf90
 800257c:	2b00      	cmp	r3, #0
 800257e:	f040 81a4 	bne.w	80028ca <operateGSMSIM868+0x362>
		return;

	if(gsmInstance.enmcurrentTask > 9)
 8002582:	4bba      	ldr	r3, [pc, #744]	; (800286c <operateGSMSIM868+0x304>)
 8002584:	f893 3fae 	ldrb.w	r3, [r3, #4014]	; 0xfae
 8002588:	b2db      	uxtb	r3, r3
 800258a:	2b09      	cmp	r3, #9
 800258c:	d903      	bls.n	8002596 <operateGSMSIM868+0x2e>
	{
		gsmInstance.enmcurrentTask = 0;
 800258e:	4bb7      	ldr	r3, [pc, #732]	; (800286c <operateGSMSIM868+0x304>)
 8002590:	2200      	movs	r2, #0
 8002592:	f883 2fae 	strb.w	r2, [r3, #4014]	; 0xfae
	}

	/* Operate Current Task */
	switch(gsmInstance.enmcurrentTask)
 8002596:	4bb5      	ldr	r3, [pc, #724]	; (800286c <operateGSMSIM868+0x304>)
 8002598:	f893 3fae 	ldrb.w	r3, [r3, #4014]	; 0xfae
 800259c:	b2db      	uxtb	r3, r3
 800259e:	2b09      	cmp	r3, #9
 80025a0:	f200 818b 	bhi.w	80028ba <operateGSMSIM868+0x352>
 80025a4:	a201      	add	r2, pc, #4	; (adr r2, 80025ac <operateGSMSIM868+0x44>)
 80025a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025aa:	bf00      	nop
 80025ac:	080025d5 	.word	0x080025d5
 80025b0:	08002665 	.word	0x08002665
 80025b4:	08002771 	.word	0x08002771
 80025b8:	0800278d 	.word	0x0800278d
 80025bc:	080026f1 	.word	0x080026f1
 80025c0:	08002731 	.word	0x08002731
 80025c4:	080026d5 	.word	0x080026d5
 80025c8:	08002867 	.word	0x08002867
 80025cc:	0800288d 	.word	0x0800288d
 80025d0:	080028a9 	.word	0x080028a9
	{
		case enmGSMTASK_RESET:

			if(gsmInstance.enmGSMPwrState == enmGSM_PWRNOTSTARTED)
 80025d4:	4ba5      	ldr	r3, [pc, #660]	; (800286c <operateGSMSIM868+0x304>)
 80025d6:	f893 3fb0 	ldrb.w	r3, [r3, #4016]	; 0xfb0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d10f      	bne.n	80025fe <operateGSMSIM868+0x96>
			{
				HAL_GPIO_WritePin(GSM_PWR_KEY_GPIO_Port,GSM_PWR_KEY_Pin,GPIO_PIN_SET);
 80025de:	2201      	movs	r2, #1
 80025e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80025e4:	48a2      	ldr	r0, [pc, #648]	; (8002870 <operateGSMSIM868+0x308>)
 80025e6:	f00b f8a5 	bl	800d734 <HAL_GPIO_WritePin>
				gsmInstance.u32GSMTimer =  SEVEN_SEC;
 80025ea:	4ba0      	ldr	r3, [pc, #640]	; (800286c <operateGSMSIM868+0x304>)
 80025ec:	f641 3258 	movw	r2, #7000	; 0x1b58
 80025f0:	f8c3 2f90 	str.w	r2, [r3, #3984]	; 0xf90
				gsmInstance.enmGSMPwrState = enmGSM_PWRSTARTED;
 80025f4:	4b9d      	ldr	r3, [pc, #628]	; (800286c <operateGSMSIM868+0x304>)
 80025f6:	2201      	movs	r2, #1
 80025f8:	f883 2fb0 	strb.w	r2, [r3, #4016]	; 0xfb0
 80025fc:	e027      	b.n	800264e <operateGSMSIM868+0xe6>
			}
			else if(gsmInstance.enmGSMPwrState == enmGSM_PWRSTARTED)
 80025fe:	4b9b      	ldr	r3, [pc, #620]	; (800286c <operateGSMSIM868+0x304>)
 8002600:	f893 3fb0 	ldrb.w	r3, [r3, #4016]	; 0xfb0
 8002604:	2b01      	cmp	r3, #1
 8002606:	d113      	bne.n	8002630 <operateGSMSIM868+0xc8>
			{
				HAL_GPIO_WritePin(GSM_PWR_KEY_GPIO_Port,GSM_PWR_KEY_Pin,GPIO_PIN_RESET);
 8002608:	2200      	movs	r2, #0
 800260a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800260e:	4898      	ldr	r0, [pc, #608]	; (8002870 <operateGSMSIM868+0x308>)
 8002610:	f00b f890 	bl	800d734 <HAL_GPIO_WritePin>
				gsmInstance.u32GSMTimer = FOUR_SEC;
 8002614:	4b95      	ldr	r3, [pc, #596]	; (800286c <operateGSMSIM868+0x304>)
 8002616:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800261a:	f8c3 2f90 	str.w	r2, [r3, #3984]	; 0xf90
				gsmInstance.enmcurrentTask = enmGSMTASK_INITMODULE;
 800261e:	4b93      	ldr	r3, [pc, #588]	; (800286c <operateGSMSIM868+0x304>)
 8002620:	2201      	movs	r2, #1
 8002622:	f883 2fae 	strb.w	r2, [r3, #4014]	; 0xfae
				gsmInstance.enmGSMPwrState = enmGSM_PWRCOMPLETED;
 8002626:	4b91      	ldr	r3, [pc, #580]	; (800286c <operateGSMSIM868+0x304>)
 8002628:	2202      	movs	r2, #2
 800262a:	f883 2fb0 	strb.w	r2, [r3, #4016]	; 0xfb0
 800262e:	e00e      	b.n	800264e <operateGSMSIM868+0xe6>
			}
			else
			{
				if((gsmInstance.enmGSMPwrState == enmGSM_PWRCOMPLETED) && (gsmInstance.enmcurrentTask == enmGSMTASK_RESET))
 8002630:	4b8e      	ldr	r3, [pc, #568]	; (800286c <operateGSMSIM868+0x304>)
 8002632:	f893 3fb0 	ldrb.w	r3, [r3, #4016]	; 0xfb0
 8002636:	2b02      	cmp	r3, #2
 8002638:	d109      	bne.n	800264e <operateGSMSIM868+0xe6>
 800263a:	4b8c      	ldr	r3, [pc, #560]	; (800286c <operateGSMSIM868+0x304>)
 800263c:	f893 3fae 	ldrb.w	r3, [r3, #4014]	; 0xfae
 8002640:	b2db      	uxtb	r3, r3
 8002642:	2b00      	cmp	r3, #0
 8002644:	d103      	bne.n	800264e <operateGSMSIM868+0xe6>
				{
					gsmInstance.enmGSMPwrState = enmGSM_PWRNOTSTARTED;
 8002646:	4b89      	ldr	r3, [pc, #548]	; (800286c <operateGSMSIM868+0x304>)
 8002648:	2200      	movs	r2, #0
 800264a:	f883 2fb0 	strb.w	r2, [r3, #4016]	; 0xfb0
				}
			}

			if(gsmInstance.enmGSMPwrState > 2)
 800264e:	4b87      	ldr	r3, [pc, #540]	; (800286c <operateGSMSIM868+0x304>)
 8002650:	f893 3fb0 	ldrb.w	r3, [r3, #4016]	; 0xfb0
 8002654:	2b02      	cmp	r3, #2
 8002656:	f240 8133 	bls.w	80028c0 <operateGSMSIM868+0x358>
			{
				gsmInstance.enmGSMPwrState = enmGSM_PWRNOTSTARTED;
 800265a:	4b84      	ldr	r3, [pc, #528]	; (800286c <operateGSMSIM868+0x304>)
 800265c:	2200      	movs	r2, #0
 800265e:	f883 2fb0 	strb.w	r2, [r3, #4016]	; 0xfb0
			}
			break;
 8002662:	e12d      	b.n	80028c0 <operateGSMSIM868+0x358>


		case enmGSMTASK_INITMODULE:
			/* Initialize Module : ATE0 to HTTP URL */
			if(gsmInstance.enmGSMCommandState == enmGSM_CMDTIMEOUT)
 8002664:	4b81      	ldr	r3, [pc, #516]	; (800286c <operateGSMSIM868+0x304>)
 8002666:	f893 3fad 	ldrb.w	r3, [r3, #4013]	; 0xfad
 800266a:	b2db      	uxtb	r3, r3
 800266c:	2b05      	cmp	r3, #5
 800266e:	d102      	bne.n	8002676 <operateGSMSIM868+0x10e>
			{
				/* Reset Module */
				initGSMSIM868();
 8002670:	f7ff fd50 	bl	8002114 <initGSMSIM868>
				else
				{
					sendGSMCommand(gsmInstance);
				}
			}
			break;
 8002674:	e125      	b.n	80028c2 <operateGSMSIM868+0x35a>
				if(gsmInstance.enmGSMCommand == enmGSMSTATE_MQTTPUBEX)
 8002676:	4b7d      	ldr	r3, [pc, #500]	; (800286c <operateGSMSIM868+0x304>)
 8002678:	f893 3faf 	ldrb.w	r3, [r3, #4015]	; 0xfaf
 800267c:	2b19      	cmp	r3, #25
 800267e:	d11b      	bne.n	80026b8 <operateGSMSIM868+0x150>
					if(gu8CheckSMS == TRUE)
 8002680:	4b7c      	ldr	r3, [pc, #496]	; (8002874 <operateGSMSIM868+0x30c>)
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	2b01      	cmp	r3, #1
 8002686:	d10e      	bne.n	80026a6 <operateGSMSIM868+0x13e>
						gsmInstance.enmGSMCommand =  enmGSMSTATE_GPSNMEA;
 8002688:	4b78      	ldr	r3, [pc, #480]	; (800286c <operateGSMSIM868+0x304>)
 800268a:	2214      	movs	r2, #20
 800268c:	f883 2faf 	strb.w	r2, [r3, #4015]	; 0xfaf
						gsmInstance.enmcurrentTask = enmGSMTASK_UPDATELOCATION;
 8002690:	4b76      	ldr	r3, [pc, #472]	; (800286c <operateGSMSIM868+0x304>)
 8002692:	2202      	movs	r2, #2
 8002694:	f883 2fae 	strb.w	r2, [r3, #4014]	; 0xfae
						gu8ReadSMS = TRUE;
 8002698:	4b77      	ldr	r3, [pc, #476]	; (8002878 <operateGSMSIM868+0x310>)
 800269a:	2201      	movs	r2, #1
 800269c:	701a      	strb	r2, [r3, #0]
						gu8CheckSMS = FALSE;
 800269e:	4b75      	ldr	r3, [pc, #468]	; (8002874 <operateGSMSIM868+0x30c>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	701a      	strb	r2, [r3, #0]
			break;
 80026a4:	e10d      	b.n	80028c2 <operateGSMSIM868+0x35a>
						gsmInstance.enmGSMCommand =  enmGSMSTATE_GPSNMEA;
 80026a6:	4b71      	ldr	r3, [pc, #452]	; (800286c <operateGSMSIM868+0x304>)
 80026a8:	2214      	movs	r2, #20
 80026aa:	f883 2faf 	strb.w	r2, [r3, #4015]	; 0xfaf
						gsmInstance.enmcurrentTask = enmGSMTASK_UPDATELOCATION;
 80026ae:	4b6f      	ldr	r3, [pc, #444]	; (800286c <operateGSMSIM868+0x304>)
 80026b0:	2202      	movs	r2, #2
 80026b2:	f883 2fae 	strb.w	r2, [r3, #4014]	; 0xfae
			break;
 80026b6:	e104      	b.n	80028c2 <operateGSMSIM868+0x35a>
					sendGSMCommand(gsmInstance);
 80026b8:	4c6c      	ldr	r4, [pc, #432]	; (800286c <operateGSMSIM868+0x304>)
 80026ba:	4668      	mov	r0, sp
 80026bc:	f104 0310 	add.w	r3, r4, #16
 80026c0:	f241 22d0 	movw	r2, #4816	; 0x12d0
 80026c4:	4619      	mov	r1, r3
 80026c6:	f011 fcfb 	bl	80140c0 <memcpy>
 80026ca:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80026ce:	f000 f907 	bl	80028e0 <sendGSMCommand>
			break;
 80026d2:	e0f6      	b.n	80028c2 <operateGSMSIM868+0x35a>

		case enmGSMTASK_ISALIVE:
				sendGSMCommand(gsmInstance);
 80026d4:	4c65      	ldr	r4, [pc, #404]	; (800286c <operateGSMSIM868+0x304>)
 80026d6:	4668      	mov	r0, sp
 80026d8:	f104 0310 	add.w	r3, r4, #16
 80026dc:	f241 22d0 	movw	r2, #4816	; 0x12d0
 80026e0:	4619      	mov	r1, r3
 80026e2:	f011 fced 	bl	80140c0 <memcpy>
 80026e6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80026ea:	f000 f8f9 	bl	80028e0 <sendGSMCommand>
			break;
 80026ee:	e0e8      	b.n	80028c2 <operateGSMSIM868+0x35a>

		case enmGSMTASK_READSMS:
			if(gu8ReadSMS == TRUE)
 80026f0:	4b61      	ldr	r3, [pc, #388]	; (8002878 <operateGSMSIM868+0x310>)
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d10d      	bne.n	8002714 <operateGSMSIM868+0x1ac>
				sendGSMCommand(gsmInstance);
 80026f8:	4c5c      	ldr	r4, [pc, #368]	; (800286c <operateGSMSIM868+0x304>)
 80026fa:	4668      	mov	r0, sp
 80026fc:	f104 0310 	add.w	r3, r4, #16
 8002700:	f241 22d0 	movw	r2, #4816	; 0x12d0
 8002704:	4619      	mov	r1, r3
 8002706:	f011 fcdb 	bl	80140c0 <memcpy>
 800270a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800270e:	f000 f8e7 	bl	80028e0 <sendGSMCommand>
				gsmInstance.enmGSMCommand = enmGSMSTATE_GPSNMEA;
				gsmInstance.enmcurrentTask = enmGSMTASK_UPDATELOCATION;
				gsmInstance.u32GSMTimer = TWO_SEC;
			}

			break;
 8002712:	e0d6      	b.n	80028c2 <operateGSMSIM868+0x35a>
				gsmInstance.enmGSMCommand = enmGSMSTATE_GPSNMEA;
 8002714:	4b55      	ldr	r3, [pc, #340]	; (800286c <operateGSMSIM868+0x304>)
 8002716:	2214      	movs	r2, #20
 8002718:	f883 2faf 	strb.w	r2, [r3, #4015]	; 0xfaf
				gsmInstance.enmcurrentTask = enmGSMTASK_UPDATELOCATION;
 800271c:	4b53      	ldr	r3, [pc, #332]	; (800286c <operateGSMSIM868+0x304>)
 800271e:	2202      	movs	r2, #2
 8002720:	f883 2fae 	strb.w	r2, [r3, #4014]	; 0xfae
				gsmInstance.u32GSMTimer = TWO_SEC;
 8002724:	4b51      	ldr	r3, [pc, #324]	; (800286c <operateGSMSIM868+0x304>)
 8002726:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800272a:	f8c3 2f90 	str.w	r2, [r3, #3984]	; 0xf90
			break;
 800272e:	e0c8      	b.n	80028c2 <operateGSMSIM868+0x35a>

		case enmGSMTASK_SENDSMS:
			if(gu8SendSMS == TRUE)
 8002730:	4b52      	ldr	r3, [pc, #328]	; (800287c <operateGSMSIM868+0x314>)
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	2b01      	cmp	r3, #1
 8002736:	d10d      	bne.n	8002754 <operateGSMSIM868+0x1ec>
				sendGSMCommand(gsmInstance);
 8002738:	4c4c      	ldr	r4, [pc, #304]	; (800286c <operateGSMSIM868+0x304>)
 800273a:	4668      	mov	r0, sp
 800273c:	f104 0310 	add.w	r3, r4, #16
 8002740:	f241 22d0 	movw	r2, #4816	; 0x12d0
 8002744:	4619      	mov	r1, r3
 8002746:	f011 fcbb 	bl	80140c0 <memcpy>
 800274a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800274e:	f000 f8c7 	bl	80028e0 <sendGSMCommand>
			{
				gsmInstance.enmGSMCommand = enmGSMSTATE_GPSNMEA;
				gsmInstance.enmcurrentTask = enmGSMTASK_UPDATELOCATION;
				gsmInstance.u32GSMTimer = TWO_SEC;
			}
			break;
 8002752:	e0b6      	b.n	80028c2 <operateGSMSIM868+0x35a>
				gsmInstance.enmGSMCommand = enmGSMSTATE_GPSNMEA;
 8002754:	4b45      	ldr	r3, [pc, #276]	; (800286c <operateGSMSIM868+0x304>)
 8002756:	2214      	movs	r2, #20
 8002758:	f883 2faf 	strb.w	r2, [r3, #4015]	; 0xfaf
				gsmInstance.enmcurrentTask = enmGSMTASK_UPDATELOCATION;
 800275c:	4b43      	ldr	r3, [pc, #268]	; (800286c <operateGSMSIM868+0x304>)
 800275e:	2202      	movs	r2, #2
 8002760:	f883 2fae 	strb.w	r2, [r3, #4014]	; 0xfae
				gsmInstance.u32GSMTimer = TWO_SEC;
 8002764:	4b41      	ldr	r3, [pc, #260]	; (800286c <operateGSMSIM868+0x304>)
 8002766:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800276a:	f8c3 2f90 	str.w	r2, [r3, #3984]	; 0xf90
			break;
 800276e:	e0a8      	b.n	80028c2 <operateGSMSIM868+0x35a>

		case enmGSMTASK_UPDATELOCATION:
			/*Every 30 Sec */
			sendGSMCommand(gsmInstance);
 8002770:	4c3e      	ldr	r4, [pc, #248]	; (800286c <operateGSMSIM868+0x304>)
 8002772:	4668      	mov	r0, sp
 8002774:	f104 0310 	add.w	r3, r4, #16
 8002778:	f241 22d0 	movw	r2, #4816	; 0x12d0
 800277c:	4619      	mov	r1, r3
 800277e:	f011 fc9f 	bl	80140c0 <memcpy>
 8002782:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002786:	f000 f8ab 	bl	80028e0 <sendGSMCommand>
			break;
 800278a:	e09a      	b.n	80028c2 <operateGSMSIM868+0x35a>
		case enmGSMTASK_UPLOADDATA:
		{

			/* Send Data from the Queue with upload Time Interval */
			//if((Queue_IsLiveQueueEmpty(&gsmLivePayload) == FALSE )&& (gsmLivePayload.data[gsmLivePayload.tail] != NULL))
			if(((Queue_IsLiveQueueEmpty(&gsmLivePayload) == FALSE )&& (gsmLivePayload.data[gsmLivePayload.tail] != NULL))
 800278c:	483c      	ldr	r0, [pc, #240]	; (8002880 <operateGSMSIM868+0x318>)
 800278e:	f003 fc60 	bl	8006052 <Queue_IsLiveQueueEmpty>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d107      	bne.n	80027a8 <operateGSMSIM868+0x240>
 8002798:	4b39      	ldr	r3, [pc, #228]	; (8002880 <operateGSMSIM868+0x318>)
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	4a38      	ldr	r2, [pc, #224]	; (8002880 <operateGSMSIM868+0x318>)
 800279e:	3302      	adds	r3, #2
 80027a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d10d      	bne.n	80027c4 <operateGSMSIM868+0x25c>
							||((Queue_IsBuffQueueEmpty(&gsmBuffPayload) == FALSE )&& (gsmBuffPayload.data[gsmBuffPayload.tail] != NULL)))
 80027a8:	4836      	ldr	r0, [pc, #216]	; (8002884 <operateGSMSIM868+0x31c>)
 80027aa:	f003 fd21 	bl	80061f0 <Queue_IsBuffQueueEmpty>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d14e      	bne.n	8002852 <operateGSMSIM868+0x2ea>
 80027b4:	4b33      	ldr	r3, [pc, #204]	; (8002884 <operateGSMSIM868+0x31c>)
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	4a32      	ldr	r2, [pc, #200]	; (8002884 <operateGSMSIM868+0x31c>)
 80027ba:	3302      	adds	r3, #2
 80027bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d046      	beq.n	8002852 <operateGSMSIM868+0x2ea>
			{
				if((gu8HttpPayloadFlag == 0) && (gsmInstance.enmGSMCommand == enmGSMSTATE_ATHTTPDATA))
 80027c4:	4b30      	ldr	r3, [pc, #192]	; (8002888 <operateGSMSIM868+0x320>)
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d10a      	bne.n	80027e2 <operateGSMSIM868+0x27a>
 80027cc:	4b27      	ldr	r3, [pc, #156]	; (800286c <operateGSMSIM868+0x304>)
 80027ce:	f893 3faf 	ldrb.w	r3, [r3, #4015]	; 0xfaf
 80027d2:	2b20      	cmp	r3, #32
 80027d4:	d105      	bne.n	80027e2 <operateGSMSIM868+0x27a>
				{
					/* Update Payload Length once Every Cycle */
					updateHttpDataLength();
 80027d6:	f001 f881 	bl	80038dc <updateHttpDataLength>
					gu8HttpPayloadFlag = 1;
 80027da:	4b2b      	ldr	r3, [pc, #172]	; (8002888 <operateGSMSIM868+0x320>)
 80027dc:	2201      	movs	r2, #1
 80027de:	701a      	strb	r2, [r3, #0]
 80027e0:	e036      	b.n	8002850 <operateGSMSIM868+0x2e8>
				}
				else if((gu8HttpPayloadFlag == 1) && (gsmInstance.enmGSMCommand == enmGSMSTATE_SENDDATA))
 80027e2:	4b29      	ldr	r3, [pc, #164]	; (8002888 <operateGSMSIM868+0x320>)
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d108      	bne.n	80027fc <operateGSMSIM868+0x294>
 80027ea:	4b20      	ldr	r3, [pc, #128]	; (800286c <operateGSMSIM868+0x304>)
 80027ec:	f893 3faf 	ldrb.w	r3, [r3, #4015]	; 0xfaf
 80027f0:	2b22      	cmp	r3, #34	; 0x22
 80027f2:	d103      	bne.n	80027fc <operateGSMSIM868+0x294>
				{
					/* Flag to update new data length */
					gu8HttpPayloadFlag = 0;
 80027f4:	4b24      	ldr	r3, [pc, #144]	; (8002888 <operateGSMSIM868+0x320>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	701a      	strb	r2, [r3, #0]
 80027fa:	e029      	b.n	8002850 <operateGSMSIM868+0x2e8>
				}
				else if((gu8HttpPayloadFlag == 0) && (gsmInstance.enmGSMCommand ==enmGSMSTATE_MQTTPUBEX))
 80027fc:	4b22      	ldr	r3, [pc, #136]	; (8002888 <operateGSMSIM868+0x320>)
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d10a      	bne.n	800281a <operateGSMSIM868+0x2b2>
 8002804:	4b19      	ldr	r3, [pc, #100]	; (800286c <operateGSMSIM868+0x304>)
 8002806:	f893 3faf 	ldrb.w	r3, [r3, #4015]	; 0xfaf
 800280a:	2b19      	cmp	r3, #25
 800280c:	d105      	bne.n	800281a <operateGSMSIM868+0x2b2>
				{
					updateHttpDataLength();
 800280e:	f001 f865 	bl	80038dc <updateHttpDataLength>
					gu8HttpPayloadFlag = 1;
 8002812:	4b1d      	ldr	r3, [pc, #116]	; (8002888 <operateGSMSIM868+0x320>)
 8002814:	2201      	movs	r2, #1
 8002816:	701a      	strb	r2, [r3, #0]
 8002818:	e01a      	b.n	8002850 <operateGSMSIM868+0x2e8>
				}
				else if((gu8HttpPayloadFlag == 1) && (gsmInstance.enmGSMCommand == enmGSMSTATE_SENDDATA))
 800281a:	4b1b      	ldr	r3, [pc, #108]	; (8002888 <operateGSMSIM868+0x320>)
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	2b01      	cmp	r3, #1
 8002820:	d108      	bne.n	8002834 <operateGSMSIM868+0x2cc>
 8002822:	4b12      	ldr	r3, [pc, #72]	; (800286c <operateGSMSIM868+0x304>)
 8002824:	f893 3faf 	ldrb.w	r3, [r3, #4015]	; 0xfaf
 8002828:	2b22      	cmp	r3, #34	; 0x22
 800282a:	d103      	bne.n	8002834 <operateGSMSIM868+0x2cc>
				{
					/* Flag to update new data length */
					gu8HttpPayloadFlag = 0;
 800282c:	4b16      	ldr	r3, [pc, #88]	; (8002888 <operateGSMSIM868+0x320>)
 800282e:	2200      	movs	r2, #0
 8002830:	701a      	strb	r2, [r3, #0]
 8002832:	e00d      	b.n	8002850 <operateGSMSIM868+0x2e8>
				}
				else
				{
					sendGSMCommand(gsmInstance);
 8002834:	4c0d      	ldr	r4, [pc, #52]	; (800286c <operateGSMSIM868+0x304>)
 8002836:	4668      	mov	r0, sp
 8002838:	f104 0310 	add.w	r3, r4, #16
 800283c:	f241 22d0 	movw	r2, #4816	; 0x12d0
 8002840:	4619      	mov	r1, r3
 8002842:	f011 fc3d 	bl	80140c0 <memcpy>
 8002846:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800284a:	f000 f849 	bl	80028e0 <sendGSMCommand>
				if((gu8HttpPayloadFlag == 0) && (gsmInstance.enmGSMCommand == enmGSMSTATE_ATHTTPDATA))
 800284e:	e009      	b.n	8002864 <operateGSMSIM868+0x2fc>
 8002850:	e008      	b.n	8002864 <operateGSMSIM868+0x2fc>
				}
			}
			else
			{
				gsmInstance.enmGSMCommand = enmGSMSTATE_GPSNMEA;
 8002852:	4b06      	ldr	r3, [pc, #24]	; (800286c <operateGSMSIM868+0x304>)
 8002854:	2214      	movs	r2, #20
 8002856:	f883 2faf 	strb.w	r2, [r3, #4015]	; 0xfaf
				gsmInstance.enmcurrentTask = enmGSMTASK_UPDATELOCATION;
 800285a:	4b04      	ldr	r3, [pc, #16]	; (800286c <operateGSMSIM868+0x304>)
 800285c:	2202      	movs	r2, #2
 800285e:	f883 2fae 	strb.w	r2, [r3, #4014]	; 0xfae
			}
		}
			break;
 8002862:	e02e      	b.n	80028c2 <operateGSMSIM868+0x35a>
 8002864:	e02d      	b.n	80028c2 <operateGSMSIM868+0x35a>

		case enmGSMTASK_GETDATA:
			/* Provision for Two Way communication with Server : ex Modbus . Not Implemented
			 * In this Firmware */
			initGSMSIM868();
 8002866:	f7ff fc55 	bl	8002114 <initGSMSIM868>
			break;
 800286a:	e02a      	b.n	80028c2 <operateGSMSIM868+0x35a>
 800286c:	20002b1c 	.word	0x20002b1c
 8002870:	48000800 	.word	0x48000800
 8002874:	20001749 	.word	0x20001749
 8002878:	200018e0 	.word	0x200018e0
 800287c:	200018df 	.word	0x200018df
 8002880:	20002aec 	.word	0x20002aec
 8002884:	20002abc 	.word	0x20002abc
 8002888:	20001748 	.word	0x20001748

		case enmGSMTASK_DOWNLOADFOTAFILE:
				sendGSMCommand(gsmInstance);
 800288c:	4c11      	ldr	r4, [pc, #68]	; (80028d4 <operateGSMSIM868+0x36c>)
 800288e:	4668      	mov	r0, sp
 8002890:	f104 0310 	add.w	r3, r4, #16
 8002894:	f241 22d0 	movw	r2, #4816	; 0x12d0
 8002898:	4619      	mov	r1, r3
 800289a:	f011 fc11 	bl	80140c0 <memcpy>
 800289e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80028a2:	f000 f81d 	bl	80028e0 <sendGSMCommand>
			break;
 80028a6:	e00c      	b.n	80028c2 <operateGSMSIM868+0x35a>

		case enmGSMTASK_IDLE:
			gsmInstance.enmcurrentTask = enmGSMTASK_UPLOADDATA;
 80028a8:	4b0a      	ldr	r3, [pc, #40]	; (80028d4 <operateGSMSIM868+0x36c>)
 80028aa:	2203      	movs	r2, #3
 80028ac:	f883 2fae 	strb.w	r2, [r3, #4014]	; 0xfae
			gsmInstance.enmGSMCommand = enmGSMSTATE_MQTTPUBEX;
 80028b0:	4b08      	ldr	r3, [pc, #32]	; (80028d4 <operateGSMSIM868+0x36c>)
 80028b2:	2219      	movs	r2, #25
 80028b4:	f883 2faf 	strb.w	r2, [r3, #4015]	; 0xfaf
			break;
 80028b8:	e003      	b.n	80028c2 <operateGSMSIM868+0x35a>

		default:
			/* Log illegal State Error */
			initGSMSIM868();
 80028ba:	f7ff fc2b 	bl	8002114 <initGSMSIM868>
			break;
 80028be:	e000      	b.n	80028c2 <operateGSMSIM868+0x35a>
			break;
 80028c0:	bf00      	nop
	}
	gu32GSMHangTimer = THREE_MIN;
 80028c2:	4b05      	ldr	r3, [pc, #20]	; (80028d8 <operateGSMSIM868+0x370>)
 80028c4:	4a05      	ldr	r2, [pc, #20]	; (80028dc <operateGSMSIM868+0x374>)
 80028c6:	601a      	str	r2, [r3, #0]
 80028c8:	e000      	b.n	80028cc <operateGSMSIM868+0x364>
		return;
 80028ca:	bf00      	nop
}
 80028cc:	3704      	adds	r7, #4
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd90      	pop	{r4, r7, pc}
 80028d2:	bf00      	nop
 80028d4:	20002b1c 	.word	0x20002b1c
 80028d8:	200028a0 	.word	0x200028a0
 80028dc:	0002bf20 	.word	0x0002bf20

080028e0 <sendGSMCommand>:
* <hr>
*
*******************************************************************************/
char bufferChunkBytes[6] = {'0'};
void sendGSMCommand()
{
 80028e0:	b590      	push	{r4, r7, lr}
 80028e2:	b091      	sub	sp, #68	; 0x44
 80028e4:	af00      	add	r7, sp, #0
	static char * command;
	static uint32_t u8CharacterCounter;
	static uint32_t u8LoopCounter ;

	switch (gsmInstance.enmGSMCommandResponseState)
 80028e6:	4b9b      	ldr	r3, [pc, #620]	; (8002b54 <sendGSMCommand+0x274>)
 80028e8:	f893 3fac 	ldrb.w	r3, [r3, #4012]	; 0xfac
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d004      	beq.n	80028fc <sendGSMCommand+0x1c>
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	f000 80e5 	beq.w	8002ac2 <sendGSMCommand+0x1e2>
				u8GSMCharRcv = 0;
			}

			break;
	}
}
 80028f8:	f000 bfe6 	b.w	80038c8 <sendGSMCommand+0xfe8>
			if(gsmInstance.enmGSMCommandState == enmGSM_CMDSEND)
 80028fc:	4b95      	ldr	r3, [pc, #596]	; (8002b54 <sendGSMCommand+0x274>)
 80028fe:	f893 3fad 	ldrb.w	r3, [r3, #4013]	; 0xfad
 8002902:	b2db      	uxtb	r3, r3
 8002904:	2b01      	cmp	r3, #1
 8002906:	f040 8083 	bne.w	8002a10 <sendGSMCommand+0x130>
				u8LoopCounter = 0;
 800290a:	4b93      	ldr	r3, [pc, #588]	; (8002b58 <sendGSMCommand+0x278>)
 800290c:	2200      	movs	r2, #0
 800290e:	601a      	str	r2, [r3, #0]
				if(gsmInstance.enmGSMCommand == enmGSMSTATE_SENDDATA)
 8002910:	4b90      	ldr	r3, [pc, #576]	; (8002b54 <sendGSMCommand+0x274>)
 8002912:	f893 3faf 	ldrb.w	r3, [r3, #4015]	; 0xfaf
 8002916:	2b22      	cmp	r3, #34	; 0x22
 8002918:	d128      	bne.n	800296c <sendGSMCommand+0x8c>
					if(g_u8PayloadType == PAYLOD_TYPE_LIVE)
 800291a:	4b90      	ldr	r3, [pc, #576]	; (8002b5c <sendGSMCommand+0x27c>)
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	2b01      	cmp	r3, #1
 8002920:	d108      	bne.n	8002934 <sendGSMCommand+0x54>
						command = gsmLivePayload.data[gsmLivePayload.tail];
 8002922:	4b8f      	ldr	r3, [pc, #572]	; (8002b60 <sendGSMCommand+0x280>)
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	4a8e      	ldr	r2, [pc, #568]	; (8002b60 <sendGSMCommand+0x280>)
 8002928:	3302      	adds	r3, #2
 800292a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800292e:	4a8d      	ldr	r2, [pc, #564]	; (8002b64 <sendGSMCommand+0x284>)
 8002930:	6013      	str	r3, [r2, #0]
 8002932:	e00b      	b.n	800294c <sendGSMCommand+0x6c>
					else if(g_u8PayloadType == PAYLOD_TYPE_BUFF)
 8002934:	4b89      	ldr	r3, [pc, #548]	; (8002b5c <sendGSMCommand+0x27c>)
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	2b02      	cmp	r3, #2
 800293a:	d107      	bne.n	800294c <sendGSMCommand+0x6c>
						command = gsmBuffPayload.data[gsmBuffPayload.tail];
 800293c:	4b8a      	ldr	r3, [pc, #552]	; (8002b68 <sendGSMCommand+0x288>)
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	4a89      	ldr	r2, [pc, #548]	; (8002b68 <sendGSMCommand+0x288>)
 8002942:	3302      	adds	r3, #2
 8002944:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002948:	4a86      	ldr	r2, [pc, #536]	; (8002b64 <sendGSMCommand+0x284>)
 800294a:	6013      	str	r3, [r2, #0]
					if((command == NULL)||(strlen(command) < 20 ))
 800294c:	4b85      	ldr	r3, [pc, #532]	; (8002b64 <sendGSMCommand+0x284>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d007      	beq.n	8002964 <sendGSMCommand+0x84>
 8002954:	4b83      	ldr	r3, [pc, #524]	; (8002b64 <sendGSMCommand+0x284>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4618      	mov	r0, r3
 800295a:	f7fe f843 	bl	80009e4 <strlen>
 800295e:	4603      	mov	r3, r0
 8002960:	2b13      	cmp	r3, #19
 8002962:	d83a      	bhi.n	80029da <sendGSMCommand+0xfa>
						command = &g_u8PaylodLenMsgBuff[0];
 8002964:	4b7f      	ldr	r3, [pc, #508]	; (8002b64 <sendGSMCommand+0x284>)
 8002966:	4a81      	ldr	r2, [pc, #516]	; (8002b6c <sendGSMCommand+0x28c>)
 8002968:	601a      	str	r2, [r3, #0]
 800296a:	e036      	b.n	80029da <sendGSMCommand+0xfa>
				else if(gsmInstance.enmGSMCommand == enmGSMSTATE_MQTTPAYLOADDATA)
 800296c:	4b79      	ldr	r3, [pc, #484]	; (8002b54 <sendGSMCommand+0x274>)
 800296e:	f893 3faf 	ldrb.w	r3, [r3, #4015]	; 0xfaf
 8002972:	2b1a      	cmp	r3, #26
 8002974:	d128      	bne.n	80029c8 <sendGSMCommand+0xe8>
					if(g_u8PayloadType == PAYLOD_TYPE_LIVE)
 8002976:	4b79      	ldr	r3, [pc, #484]	; (8002b5c <sendGSMCommand+0x27c>)
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	2b01      	cmp	r3, #1
 800297c:	d108      	bne.n	8002990 <sendGSMCommand+0xb0>
						command = gsmLivePayload.data[gsmLivePayload.tail];
 800297e:	4b78      	ldr	r3, [pc, #480]	; (8002b60 <sendGSMCommand+0x280>)
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	4a77      	ldr	r2, [pc, #476]	; (8002b60 <sendGSMCommand+0x280>)
 8002984:	3302      	adds	r3, #2
 8002986:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800298a:	4a76      	ldr	r2, [pc, #472]	; (8002b64 <sendGSMCommand+0x284>)
 800298c:	6013      	str	r3, [r2, #0]
 800298e:	e00b      	b.n	80029a8 <sendGSMCommand+0xc8>
					else if(g_u8PayloadType == PAYLOD_TYPE_BUFF)
 8002990:	4b72      	ldr	r3, [pc, #456]	; (8002b5c <sendGSMCommand+0x27c>)
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	2b02      	cmp	r3, #2
 8002996:	d107      	bne.n	80029a8 <sendGSMCommand+0xc8>
						command = gsmBuffPayload.data[gsmBuffPayload.tail];
 8002998:	4b73      	ldr	r3, [pc, #460]	; (8002b68 <sendGSMCommand+0x288>)
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	4a72      	ldr	r2, [pc, #456]	; (8002b68 <sendGSMCommand+0x288>)
 800299e:	3302      	adds	r3, #2
 80029a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029a4:	4a6f      	ldr	r2, [pc, #444]	; (8002b64 <sendGSMCommand+0x284>)
 80029a6:	6013      	str	r3, [r2, #0]
					if((command == NULL)||(strlen(command) < 20 ))
 80029a8:	4b6e      	ldr	r3, [pc, #440]	; (8002b64 <sendGSMCommand+0x284>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d007      	beq.n	80029c0 <sendGSMCommand+0xe0>
 80029b0:	4b6c      	ldr	r3, [pc, #432]	; (8002b64 <sendGSMCommand+0x284>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4618      	mov	r0, r3
 80029b6:	f7fe f815 	bl	80009e4 <strlen>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b13      	cmp	r3, #19
 80029be:	d80c      	bhi.n	80029da <sendGSMCommand+0xfa>
						command = &g_u8PaylodLenMsgBuff[0];
 80029c0:	4b68      	ldr	r3, [pc, #416]	; (8002b64 <sendGSMCommand+0x284>)
 80029c2:	4a6a      	ldr	r2, [pc, #424]	; (8002b6c <sendGSMCommand+0x28c>)
 80029c4:	601a      	str	r2, [r3, #0]
 80029c6:	e008      	b.n	80029da <sendGSMCommand+0xfa>
					command = gsmStateTableArray[gsmInstance.enmGSMCommand].atCommand;
 80029c8:	4b62      	ldr	r3, [pc, #392]	; (8002b54 <sendGSMCommand+0x274>)
 80029ca:	f893 3faf 	ldrb.w	r3, [r3, #4015]	; 0xfaf
 80029ce:	4a68      	ldr	r2, [pc, #416]	; (8002b70 <sendGSMCommand+0x290>)
 80029d0:	011b      	lsls	r3, r3, #4
 80029d2:	4413      	add	r3, r2
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a63      	ldr	r2, [pc, #396]	; (8002b64 <sendGSMCommand+0x284>)
 80029d8:	6013      	str	r3, [r2, #0]
				u8CharacterCounter = strlen((const char *)command);
 80029da:	4b62      	ldr	r3, [pc, #392]	; (8002b64 <sendGSMCommand+0x284>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4618      	mov	r0, r3
 80029e0:	f7fe f800 	bl	80009e4 <strlen>
 80029e4:	4603      	mov	r3, r0
 80029e6:	4a63      	ldr	r2, [pc, #396]	; (8002b74 <sendGSMCommand+0x294>)
 80029e8:	6013      	str	r3, [r2, #0]
				LL_USART_TransmitData8(USART1,command[u8LoopCounter++]);
 80029ea:	4b5e      	ldr	r3, [pc, #376]	; (8002b64 <sendGSMCommand+0x284>)
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	4b5a      	ldr	r3, [pc, #360]	; (8002b58 <sendGSMCommand+0x278>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	1c59      	adds	r1, r3, #1
 80029f4:	4858      	ldr	r0, [pc, #352]	; (8002b58 <sendGSMCommand+0x278>)
 80029f6:	6001      	str	r1, [r0, #0]
 80029f8:	4413      	add	r3, r2
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	4619      	mov	r1, r3
 80029fe:	485e      	ldr	r0, [pc, #376]	; (8002b78 <sendGSMCommand+0x298>)
 8002a00:	f7ff fb77 	bl	80020f2 <LL_USART_TransmitData8>
				gsmInstance.enmGSMCommandState = enmGSM_CMDINPROCESS;
 8002a04:	4b53      	ldr	r3, [pc, #332]	; (8002b54 <sendGSMCommand+0x274>)
 8002a06:	2202      	movs	r2, #2
 8002a08:	f883 2fad 	strb.w	r2, [r3, #4013]	; 0xfad
			break;
 8002a0c:	f000 bf59 	b.w	80038c2 <sendGSMCommand+0xfe2>
			else if(gsmInstance.enmGSMCommandState == enmGSM_CMDINPROCESS)
 8002a10:	4b50      	ldr	r3, [pc, #320]	; (8002b54 <sendGSMCommand+0x274>)
 8002a12:	f893 3fad 	ldrb.w	r3, [r3, #4013]	; 0xfad
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d14e      	bne.n	8002aba <sendGSMCommand+0x1da>
				if(!LL_USART_IsActiveFlag_TXE(USART1))
 8002a1c:	4856      	ldr	r0, [pc, #344]	; (8002b78 <sendGSMCommand+0x298>)
 8002a1e:	f7ff fb55 	bl	80020cc <LL_USART_IsActiveFlag_TXE>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	f000 874c 	beq.w	80038c2 <sendGSMCommand+0xfe2>
					if(u8LoopCounter < (u8CharacterCounter))
 8002a2a:	4b4b      	ldr	r3, [pc, #300]	; (8002b58 <sendGSMCommand+0x278>)
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	4b51      	ldr	r3, [pc, #324]	; (8002b74 <sendGSMCommand+0x294>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d20e      	bcs.n	8002a54 <sendGSMCommand+0x174>
						LL_USART_TransmitData8(USART1,command[u8LoopCounter++]);
 8002a36:	4b4b      	ldr	r3, [pc, #300]	; (8002b64 <sendGSMCommand+0x284>)
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	4b47      	ldr	r3, [pc, #284]	; (8002b58 <sendGSMCommand+0x278>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	1c59      	adds	r1, r3, #1
 8002a40:	4845      	ldr	r0, [pc, #276]	; (8002b58 <sendGSMCommand+0x278>)
 8002a42:	6001      	str	r1, [r0, #0]
 8002a44:	4413      	add	r3, r2
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	4619      	mov	r1, r3
 8002a4a:	484b      	ldr	r0, [pc, #300]	; (8002b78 <sendGSMCommand+0x298>)
 8002a4c:	f7ff fb51 	bl	80020f2 <LL_USART_TransmitData8>
			break;
 8002a50:	f000 bf37 	b.w	80038c2 <sendGSMCommand+0xfe2>
						u8LoopCounter = 0;
 8002a54:	4b40      	ldr	r3, [pc, #256]	; (8002b58 <sendGSMCommand+0x278>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	601a      	str	r2, [r3, #0]
						gu32GSMCharacterTimeout = FIVEHUNDRED_MS;
 8002a5a:	4b48      	ldr	r3, [pc, #288]	; (8002b7c <sendGSMCommand+0x29c>)
 8002a5c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002a60:	601a      	str	r2, [r3, #0]
						u8CharacterCounter = 0;
 8002a62:	4b44      	ldr	r3, [pc, #272]	; (8002b74 <sendGSMCommand+0x294>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	601a      	str	r2, [r3, #0]
						gsmInstance.enmGSMCommandResponseState = enmGSM_CHKRESPONSE;
 8002a68:	4b3a      	ldr	r3, [pc, #232]	; (8002b54 <sendGSMCommand+0x274>)
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 2fac 	strb.w	r2, [r3, #4012]	; 0xfac
						gsmInstance.u32GSMResponseTimer = gsmStateTableArray[gsmInstance.enmGSMCommand].msTimeOut;
 8002a70:	4b38      	ldr	r3, [pc, #224]	; (8002b54 <sendGSMCommand+0x274>)
 8002a72:	f893 3faf 	ldrb.w	r3, [r3, #4015]	; 0xfaf
 8002a76:	4a3e      	ldr	r2, [pc, #248]	; (8002b70 <sendGSMCommand+0x290>)
 8002a78:	011b      	lsls	r3, r3, #4
 8002a7a:	4413      	add	r3, r2
 8002a7c:	3308      	adds	r3, #8
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a34      	ldr	r2, [pc, #208]	; (8002b54 <sendGSMCommand+0x274>)
 8002a82:	f8c2 3fa4 	str.w	r3, [r2, #4004]	; 0xfa4
						if((gsmInstance.enmGSMCommand == enmGSMSTATE_FOTAHTTPACTION) ||(gsmInstance.enmGSMCommand == enmGSMSTATE_ATQHTTPGETEX) || (gsmInstance.enmGSMCommand == enmGSMSTATE_READFILE))
 8002a86:	4b33      	ldr	r3, [pc, #204]	; (8002b54 <sendGSMCommand+0x274>)
 8002a88:	f893 3faf 	ldrb.w	r3, [r3, #4015]	; 0xfaf
 8002a8c:	2b1d      	cmp	r3, #29
 8002a8e:	d009      	beq.n	8002aa4 <sendGSMCommand+0x1c4>
 8002a90:	4b30      	ldr	r3, [pc, #192]	; (8002b54 <sendGSMCommand+0x274>)
 8002a92:	f893 3faf 	ldrb.w	r3, [r3, #4015]	; 0xfaf
 8002a96:	2b1e      	cmp	r3, #30
 8002a98:	d004      	beq.n	8002aa4 <sendGSMCommand+0x1c4>
 8002a9a:	4b2e      	ldr	r3, [pc, #184]	; (8002b54 <sendGSMCommand+0x274>)
 8002a9c:	f893 3faf 	ldrb.w	r3, [r3, #4015]	; 0xfaf
 8002aa0:	2b1f      	cmp	r3, #31
 8002aa2:	d105      	bne.n	8002ab0 <sendGSMCommand+0x1d0>
							gu32FotaFileReadTimer = FIFTEEN_SEC;
 8002aa4:	4b36      	ldr	r3, [pc, #216]	; (8002b80 <sendGSMCommand+0x2a0>)
 8002aa6:	f643 2298 	movw	r2, #15000	; 0x3a98
 8002aaa:	601a      	str	r2, [r3, #0]
			break;
 8002aac:	f000 bf09 	b.w	80038c2 <sendGSMCommand+0xfe2>
							gu32FotaFileReadTimer = 0;
 8002ab0:	4b33      	ldr	r3, [pc, #204]	; (8002b80 <sendGSMCommand+0x2a0>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	601a      	str	r2, [r3, #0]
			break;
 8002ab6:	f000 bf04 	b.w	80038c2 <sendGSMCommand+0xfe2>
				initGSMSIM868();
 8002aba:	f7ff fb2b 	bl	8002114 <initGSMSIM868>
			break;
 8002abe:	f000 bf00 	b.w	80038c2 <sendGSMCommand+0xfe2>
			if((gu32GSMCharacterTimeout == 0) && (gsmInstance.u32GSMResponseTimer != 0) && (u8GSMCharRcv == 1) && (gu32FotaFileReadTimer == 0))
 8002ac2:	4b2e      	ldr	r3, [pc, #184]	; (8002b7c <sendGSMCommand+0x29c>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	f040 86a3 	bne.w	8003812 <sendGSMCommand+0xf32>
 8002acc:	4b21      	ldr	r3, [pc, #132]	; (8002b54 <sendGSMCommand+0x274>)
 8002ace:	f8d3 3fa4 	ldr.w	r3, [r3, #4004]	; 0xfa4
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	f000 869d 	beq.w	8003812 <sendGSMCommand+0xf32>
 8002ad8:	4b2a      	ldr	r3, [pc, #168]	; (8002b84 <sendGSMCommand+0x2a4>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	f040 8698 	bne.w	8003812 <sendGSMCommand+0xf32>
 8002ae2:	4b27      	ldr	r3, [pc, #156]	; (8002b80 <sendGSMCommand+0x2a0>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	f040 8693 	bne.w	8003812 <sendGSMCommand+0xf32>
				const char *SOF = strstr((const char *)gsmInstance.as8GSM_Response_Buff, "$,");
 8002aec:	4926      	ldr	r1, [pc, #152]	; (8002b88 <sendGSMCommand+0x2a8>)
 8002aee:	4827      	ldr	r0, [pc, #156]	; (8002b8c <sendGSMCommand+0x2ac>)
 8002af0:	f012 f889 	bl	8014c06 <strstr>
 8002af4:	6338      	str	r0, [r7, #48]	; 0x30
				if(SOF != NULL)
 8002af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d051      	beq.n	8002ba0 <sendGSMCommand+0x2c0>
					const char *EOF = strstr((const char *)gsmInstance.as8GSM_Response_Buff, ",@");
 8002afc:	4924      	ldr	r1, [pc, #144]	; (8002b90 <sendGSMCommand+0x2b0>)
 8002afe:	4823      	ldr	r0, [pc, #140]	; (8002b8c <sendGSMCommand+0x2ac>)
 8002b00:	f012 f881 	bl	8014c06 <strstr>
 8002b04:	62f8      	str	r0, [r7, #44]	; 0x2c
					if(EOF != NULL)
 8002b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d01f      	beq.n	8002b4c <sendGSMCommand+0x26c>
						if(strstr((const char *)gsmInstance.as8GSM_Response_Buff,(const char *)dinfo) != NULL)
 8002b0c:	4921      	ldr	r1, [pc, #132]	; (8002b94 <sendGSMCommand+0x2b4>)
 8002b0e:	481f      	ldr	r0, [pc, #124]	; (8002b8c <sendGSMCommand+0x2ac>)
 8002b10:	f012 f879 	bl	8014c06 <strstr>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d014      	beq.n	8002b44 <sendGSMCommand+0x264>
							const size_t mlen = EOF - SOF;
 8002b1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	62bb      	str	r3, [r7, #40]	; 0x28
							memset(gau8SUBRequest,0x00,sizeof(gau8SUBRequest));
 8002b22:	2296      	movs	r2, #150	; 0x96
 8002b24:	2100      	movs	r1, #0
 8002b26:	481c      	ldr	r0, [pc, #112]	; (8002b98 <sendGSMCommand+0x2b8>)
 8002b28:	f011 fad8 	bl	80140dc <memset>
							memcpy(gau8SUBRequest,SOF-1, (mlen+3));
 8002b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b2e:	1e59      	subs	r1, r3, #1
 8002b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b32:	3303      	adds	r3, #3
 8002b34:	461a      	mov	r2, r3
 8002b36:	4818      	ldr	r0, [pc, #96]	; (8002b98 <sendGSMCommand+0x2b8>)
 8002b38:	f011 fac2 	bl	80140c0 <memcpy>
							SUBTriggerFlag = TRUE;
 8002b3c:	4b17      	ldr	r3, [pc, #92]	; (8002b9c <sendGSMCommand+0x2bc>)
 8002b3e:	2201      	movs	r2, #1
 8002b40:	701a      	strb	r2, [r3, #0]
 8002b42:	e030      	b.n	8002ba6 <sendGSMCommand+0x2c6>
							SUBTriggerFlag = FALSE;
 8002b44:	4b15      	ldr	r3, [pc, #84]	; (8002b9c <sendGSMCommand+0x2bc>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	701a      	strb	r2, [r3, #0]
 8002b4a:	e02c      	b.n	8002ba6 <sendGSMCommand+0x2c6>
						SUBTriggerFlag = FALSE;
 8002b4c:	4b13      	ldr	r3, [pc, #76]	; (8002b9c <sendGSMCommand+0x2bc>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	701a      	strb	r2, [r3, #0]
 8002b52:	e028      	b.n	8002ba6 <sendGSMCommand+0x2c6>
 8002b54:	20002b1c 	.word	0x20002b1c
 8002b58:	20001938 	.word	0x20001938
 8002b5c:	20001734 	.word	0x20001734
 8002b60:	20002aec 	.word	0x20002aec
 8002b64:	2000193c 	.word	0x2000193c
 8002b68:	20002abc 	.word	0x20002abc
 8002b6c:	200016f8 	.word	0x200016f8
 8002b70:	080190c8 	.word	0x080190c8
 8002b74:	20001940 	.word	0x20001940
 8002b78:	40013800 	.word	0x40013800
 8002b7c:	20002884 	.word	0x20002884
 8002b80:	2000289c 	.word	0x2000289c
 8002b84:	2000197c 	.word	0x2000197c
 8002b88:	08018948 	.word	0x08018948
 8002b8c:	20003013 	.word	0x20003013
 8002b90:	0801894c 	.word	0x0801894c
 8002b94:	20000000 	.word	0x20000000
 8002b98:	20000058 	.word	0x20000058
 8002b9c:	20001735 	.word	0x20001735
					SUBTriggerFlag = FALSE;
 8002ba0:	4bc3      	ldr	r3, [pc, #780]	; (8002eb0 <sendGSMCommand+0x5d0>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	701a      	strb	r2, [r3, #0]
						,(const char *)gsmStateTableArray[gsmInstance.enmGSMCommand].atCommandResponse) != NULL)
 8002ba6:	4bc3      	ldr	r3, [pc, #780]	; (8002eb4 <sendGSMCommand+0x5d4>)
 8002ba8:	f893 3faf 	ldrb.w	r3, [r3, #4015]	; 0xfaf
 8002bac:	4ac2      	ldr	r2, [pc, #776]	; (8002eb8 <sendGSMCommand+0x5d8>)
 8002bae:	011b      	lsls	r3, r3, #4
 8002bb0:	4413      	add	r3, r2
 8002bb2:	3304      	adds	r3, #4
 8002bb4:	681b      	ldr	r3, [r3, #0]
				if(strstr((const char *)gsmInstance.as8GSM_Response_Buff
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	48c0      	ldr	r0, [pc, #768]	; (8002ebc <sendGSMCommand+0x5dc>)
 8002bba:	f012 f824 	bl	8014c06 <strstr>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	f000 8614 	beq.w	80037ee <sendGSMCommand+0xf0e>
					switch(gsmInstance.enmGSMCommand)
 8002bc6:	4bbb      	ldr	r3, [pc, #748]	; (8002eb4 <sendGSMCommand+0x5d4>)
 8002bc8:	f893 3faf 	ldrb.w	r3, [r3, #4015]	; 0xfaf
 8002bcc:	2b22      	cmp	r3, #34	; 0x22
 8002bce:	f200 85ca 	bhi.w	8003766 <sendGSMCommand+0xe86>
 8002bd2:	a201      	add	r2, pc, #4	; (adr r2, 8002bd8 <sendGSMCommand+0x2f8>)
 8002bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bd8:	08002c65 	.word	0x08002c65
 8002bdc:	08002c71 	.word	0x08002c71
 8002be0:	08002ccf 	.word	0x08002ccf
 8002be4:	08002cdb 	.word	0x08002cdb
 8002be8:	08002db7 	.word	0x08002db7
 8002bec:	08002d37 	.word	0x08002d37
 8002bf0:	08002c7d 	.word	0x08002c7d
 8002bf4:	08002df9 	.word	0x08002df9
 8002bf8:	08002e3b 	.word	0x08002e3b
 8002bfc:	08002e47 	.word	0x08002e47
 8002c00:	08002e53 	.word	0x08002e53
 8002c04:	08002e5f 	.word	0x08002e5f
 8002c08:	08002e6b 	.word	0x08002e6b
 8002c0c:	08003767 	.word	0x08003767
 8002c10:	08002e77 	.word	0x08002e77
 8002c14:	08002e83 	.word	0x08002e83
 8002c18:	08002e8b 	.word	0x08002e8b
 8002c1c:	08002e97 	.word	0x08002e97
 8002c20:	08002ea3 	.word	0x08002ea3
 8002c24:	08003767 	.word	0x08003767
 8002c28:	08002f05 	.word	0x08002f05
 8002c2c:	080030c5 	.word	0x080030c5
 8002c30:	080030cf 	.word	0x080030cf
 8002c34:	080030d9 	.word	0x080030d9
 8002c38:	080030e3 	.word	0x080030e3
 8002c3c:	08002fa7 	.word	0x08002fa7
 8002c40:	080030f3 	.word	0x080030f3
 8002c44:	08003447 	.word	0x08003447
 8002c48:	08003767 	.word	0x08003767
 8002c4c:	08003451 	.word	0x08003451
 8002c50:	080035a1 	.word	0x080035a1
 8002c54:	080035d5 	.word	0x080035d5
 8002c58:	08002fb1 	.word	0x08002fb1
 8002c5c:	08002fe1 	.word	0x08002fe1
 8002c60:	08002fd7 	.word	0x08002fd7
							gsmInstance.u8IncrementGsmState = TRUE;
 8002c64:	4b93      	ldr	r3, [pc, #588]	; (8002eb4 <sendGSMCommand+0x5d4>)
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 2f89 	strb.w	r2, [r3, #3977]	; 0xf89
							break;
 8002c6c:	f000 bd86 	b.w	800377c <sendGSMCommand+0xe9c>
							gsmInstance.u8IncrementGsmState = TRUE;
 8002c70:	4b90      	ldr	r3, [pc, #576]	; (8002eb4 <sendGSMCommand+0x5d4>)
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 2f89 	strb.w	r2, [r3, #3977]	; 0xf89
							break;
 8002c78:	f000 bd80 	b.w	800377c <sendGSMCommand+0xe9c>
							char * strLoc = strstr((const char *)gsmInstance.as8GSM_Response_Buff
 8002c7c:	4990      	ldr	r1, [pc, #576]	; (8002ec0 <sendGSMCommand+0x5e0>)
 8002c7e:	488f      	ldr	r0, [pc, #572]	; (8002ebc <sendGSMCommand+0x5dc>)
 8002c80:	f011 ffc1 	bl	8014c06 <strstr>
 8002c84:	60f8      	str	r0, [r7, #12]
							memset(gau8GSM_TimeStamp,0x00,(sizeof(char ) * strlen(gau8GSM_TimeStamp)));
 8002c86:	488f      	ldr	r0, [pc, #572]	; (8002ec4 <sendGSMCommand+0x5e4>)
 8002c88:	f7fd feac 	bl	80009e4 <strlen>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	461a      	mov	r2, r3
 8002c90:	2100      	movs	r1, #0
 8002c92:	488c      	ldr	r0, [pc, #560]	; (8002ec4 <sendGSMCommand+0x5e4>)
 8002c94:	f011 fa22 	bl	80140dc <memset>
							memcpy( gau8GSM_TimeStamp, &strLoc[10], strlen(strtok(&strLoc[10],"\0")));
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f103 040a 	add.w	r4, r3, #10
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	330a      	adds	r3, #10
 8002ca2:	4989      	ldr	r1, [pc, #548]	; (8002ec8 <sendGSMCommand+0x5e8>)
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f012 fdf9 	bl	801589c <strtok>
 8002caa:	4603      	mov	r3, r0
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7fd fe99 	bl	80009e4 <strlen>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	4621      	mov	r1, r4
 8002cb8:	4882      	ldr	r0, [pc, #520]	; (8002ec4 <sendGSMCommand+0x5e4>)
 8002cba:	f011 fa01 	bl	80140c0 <memcpy>
							syncrtcwithNetworkTime();
 8002cbe:	f000 ffc1 	bl	8003c44 <syncrtcwithNetworkTime>
							gsmInstance.u8IncrementGsmState = TRUE;
 8002cc2:	4b7c      	ldr	r3, [pc, #496]	; (8002eb4 <sendGSMCommand+0x5d4>)
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	f883 2f89 	strb.w	r2, [r3, #3977]	; 0xf89
						break;
 8002cca:	f000 bd57 	b.w	800377c <sendGSMCommand+0xe9c>
							gsmInstance.u8IncrementGsmState = TRUE;
 8002cce:	4b79      	ldr	r3, [pc, #484]	; (8002eb4 <sendGSMCommand+0x5d4>)
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	f883 2f89 	strb.w	r2, [r3, #3977]	; 0xf89
							break;
 8002cd6:	f000 bd51 	b.w	800377c <sendGSMCommand+0xe9c>
								char * strLoc = strstr((const char *)gsmInstance.as8GSM_Response_Buff,(const char *)"+GSN:");
 8002cda:	497c      	ldr	r1, [pc, #496]	; (8002ecc <sendGSMCommand+0x5ec>)
 8002cdc:	4877      	ldr	r0, [pc, #476]	; (8002ebc <sendGSMCommand+0x5dc>)
 8002cde:	f011 ff92 	bl	8014c06 <strstr>
 8002ce2:	6038      	str	r0, [r7, #0]
								memset(gau8GSM_IMEI,0x00,(sizeof(char ) * strlen(gau8GSM_IMEI)));
 8002ce4:	487a      	ldr	r0, [pc, #488]	; (8002ed0 <sendGSMCommand+0x5f0>)
 8002ce6:	f7fd fe7d 	bl	80009e4 <strlen>
 8002cea:	4603      	mov	r3, r0
 8002cec:	461a      	mov	r2, r3
 8002cee:	2100      	movs	r1, #0
 8002cf0:	4877      	ldr	r0, [pc, #476]	; (8002ed0 <sendGSMCommand+0x5f0>)
 8002cf2:	f011 f9f3 	bl	80140dc <memset>
								memcpy( gau8GSM_IMEI, &strLoc[7], strlen(strtok(&strLoc[7],"\"\r\n")));
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	1ddc      	adds	r4, r3, #7
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	3307      	adds	r3, #7
 8002cfe:	4975      	ldr	r1, [pc, #468]	; (8002ed4 <sendGSMCommand+0x5f4>)
 8002d00:	4618      	mov	r0, r3
 8002d02:	f012 fdcb 	bl	801589c <strtok>
 8002d06:	4603      	mov	r3, r0
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7fd fe6b 	bl	80009e4 <strlen>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	461a      	mov	r2, r3
 8002d12:	4621      	mov	r1, r4
 8002d14:	486e      	ldr	r0, [pc, #440]	; (8002ed0 <sendGSMCommand+0x5f0>)
 8002d16:	f011 f9d3 	bl	80140c0 <memcpy>
								cu32IMEI = (atoll(gau8GSM_IMEI));
 8002d1a:	486d      	ldr	r0, [pc, #436]	; (8002ed0 <sendGSMCommand+0x5f0>)
 8002d1c:	f011 f977 	bl	801400e <atoll>
 8002d20:	4602      	mov	r2, r0
 8002d22:	460b      	mov	r3, r1
 8002d24:	496c      	ldr	r1, [pc, #432]	; (8002ed8 <sendGSMCommand+0x5f8>)
 8002d26:	e9c1 2300 	strd	r2, r3, [r1]
								gsmInstance.u8IncrementGsmState = TRUE;
 8002d2a:	4b62      	ldr	r3, [pc, #392]	; (8002eb4 <sendGSMCommand+0x5d4>)
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	f883 2f89 	strb.w	r2, [r3, #3977]	; 0xf89
								break;
 8002d32:	f000 bd23 	b.w	800377c <sendGSMCommand+0xe9c>
								char * strLoc = strstr((const char *)gsmInstance.as8GSM_Response_Buff
 8002d36:	4969      	ldr	r1, [pc, #420]	; (8002edc <sendGSMCommand+0x5fc>)
 8002d38:	4860      	ldr	r0, [pc, #384]	; (8002ebc <sendGSMCommand+0x5dc>)
 8002d3a:	f011 ff64 	bl	8014c06 <strstr>
 8002d3e:	60b8      	str	r0, [r7, #8]
								memcpy(gsmInstance.agsmSignalStrength, &strLoc[6], strlen(strtok(strLoc,"\r")));
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	1d9c      	adds	r4, r3, #6
 8002d44:	4966      	ldr	r1, [pc, #408]	; (8002ee0 <sendGSMCommand+0x600>)
 8002d46:	68b8      	ldr	r0, [r7, #8]
 8002d48:	f012 fda8 	bl	801589c <strtok>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f7fd fe48 	bl	80009e4 <strlen>
 8002d54:	4603      	mov	r3, r0
 8002d56:	461a      	mov	r2, r3
 8002d58:	4621      	mov	r1, r4
 8002d5a:	4862      	ldr	r0, [pc, #392]	; (8002ee4 <sendGSMCommand+0x604>)
 8002d5c:	f011 f9b0 	bl	80140c0 <memcpy>
 8002d60:	4b54      	ldr	r3, [pc, #336]	; (8002eb4 <sendGSMCommand+0x5d4>)
 8002d62:	f8b3 212c 	ldrh.w	r2, [r3, #300]	; 0x12c
								memcpy(gau8GSM_Signal,gsmInstance.agsmSignalStrength,2);
 8002d66:	4b60      	ldr	r3, [pc, #384]	; (8002ee8 <sendGSMCommand+0x608>)
 8002d68:	801a      	strh	r2, [r3, #0]
								signal_qaulity = atoi(gau8GSM_Signal);
 8002d6a:	485f      	ldr	r0, [pc, #380]	; (8002ee8 <sendGSMCommand+0x608>)
 8002d6c:	f011 f94b 	bl	8014006 <atoi>
 8002d70:	4603      	mov	r3, r0
 8002d72:	b2da      	uxtb	r2, r3
 8002d74:	4b5d      	ldr	r3, [pc, #372]	; (8002eec <sendGSMCommand+0x60c>)
 8002d76:	701a      	strb	r2, [r3, #0]
								if(gsmInstance.enmcurrentTask == enmGSMTASK_ISALIVE)
 8002d78:	4b4e      	ldr	r3, [pc, #312]	; (8002eb4 <sendGSMCommand+0x5d4>)
 8002d7a:	f893 3fae 	ldrb.w	r3, [r3, #4014]	; 0xfae
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	2b06      	cmp	r3, #6
 8002d82:	d112      	bne.n	8002daa <sendGSMCommand+0x4ca>
									gsmInstance.u32GSMTimer = FIVE_SEC;
 8002d84:	4b4b      	ldr	r3, [pc, #300]	; (8002eb4 <sendGSMCommand+0x5d4>)
 8002d86:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d8a:	f8c3 2f90 	str.w	r2, [r3, #3984]	; 0xf90
									gsmInstance.enmcurrentTask = enmGSMTASK_UPLOADDATA;
 8002d8e:	4b49      	ldr	r3, [pc, #292]	; (8002eb4 <sendGSMCommand+0x5d4>)
 8002d90:	2203      	movs	r2, #3
 8002d92:	f883 2fae 	strb.w	r2, [r3, #4014]	; 0xfae
									gsmInstance.enmGSMCommand = enmGSMSTATE_MQTTPUBEX;
 8002d96:	4b47      	ldr	r3, [pc, #284]	; (8002eb4 <sendGSMCommand+0x5d4>)
 8002d98:	2219      	movs	r2, #25
 8002d9a:	f883 2faf 	strb.w	r2, [r3, #4015]	; 0xfaf
									gsmInstance.u8IncrementGsmState = FALSE;
 8002d9e:	4b45      	ldr	r3, [pc, #276]	; (8002eb4 <sendGSMCommand+0x5d4>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 2f89 	strb.w	r2, [r3, #3977]	; 0xf89
							break;
 8002da6:	f000 bce9 	b.w	800377c <sendGSMCommand+0xe9c>
									gsmInstance.u8IncrementGsmState = TRUE;
 8002daa:	4b42      	ldr	r3, [pc, #264]	; (8002eb4 <sendGSMCommand+0x5d4>)
 8002dac:	2201      	movs	r2, #1
 8002dae:	f883 2f89 	strb.w	r2, [r3, #3977]	; 0xf89
							break;
 8002db2:	f000 bce3 	b.w	800377c <sendGSMCommand+0xe9c>
							if(strstr((const char *)gsmInstance.as8GSM_Response_Buff,(const char *)"+CREG:") != NULL)
 8002db6:	494e      	ldr	r1, [pc, #312]	; (8002ef0 <sendGSMCommand+0x610>)
 8002db8:	4840      	ldr	r0, [pc, #256]	; (8002ebc <sendGSMCommand+0x5dc>)
 8002dba:	f011 ff24 	bl	8014c06 <strstr>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d013      	beq.n	8002dec <sendGSMCommand+0x50c>
								char * strLoc = strstr((const char *)gsmInstance.as8GSM_Response_Buff
 8002dc4:	212c      	movs	r1, #44	; 0x2c
 8002dc6:	483d      	ldr	r0, [pc, #244]	; (8002ebc <sendGSMCommand+0x5dc>)
 8002dc8:	f011 fee3 	bl	8014b92 <strchr>
 8002dcc:	6078      	str	r0, [r7, #4]
								if(strLoc[1] == '0')
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	3301      	adds	r3, #1
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	2b30      	cmp	r3, #48	; 0x30
 8002dd6:	d105      	bne.n	8002de4 <sendGSMCommand+0x504>
									initGSMSIM868();
 8002dd8:	f7ff f99c 	bl	8002114 <initGSMSIM868>
									gu8CheckSMS = TRUE;
 8002ddc:	4b45      	ldr	r3, [pc, #276]	; (8002ef4 <sendGSMCommand+0x614>)
 8002dde:	2201      	movs	r2, #1
 8002de0:	701a      	strb	r2, [r3, #0]
 8002de2:	e003      	b.n	8002dec <sendGSMCommand+0x50c>
								else if((strLoc[1] == '1')||(strLoc[1] == '5'))
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	3301      	adds	r3, #1
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	2b31      	cmp	r3, #49	; 0x31
							gsmInstance.u8IncrementGsmState = TRUE;
 8002dec:	4b31      	ldr	r3, [pc, #196]	; (8002eb4 <sendGSMCommand+0x5d4>)
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 2f89 	strb.w	r2, [r3, #3977]	; 0xf89
							break;
 8002df4:	f000 bcc2 	b.w	800377c <sendGSMCommand+0xe9c>
								char * strLoc = strstr((const char *)gsmInstance.as8GSM_Response_Buff,(const char *)"+QNWINFO:");
 8002df8:	493f      	ldr	r1, [pc, #252]	; (8002ef8 <sendGSMCommand+0x618>)
 8002dfa:	4830      	ldr	r0, [pc, #192]	; (8002ebc <sendGSMCommand+0x5dc>)
 8002dfc:	f011 ff03 	bl	8014c06 <strstr>
 8002e00:	6138      	str	r0, [r7, #16]
								memset(gau8GSM_NWINFO,0x00,sizeof(gau8GSM_NWINFO));
 8002e02:	220f      	movs	r2, #15
 8002e04:	2100      	movs	r1, #0
 8002e06:	483d      	ldr	r0, [pc, #244]	; (8002efc <sendGSMCommand+0x61c>)
 8002e08:	f011 f968 	bl	80140dc <memset>
								memcpy(gau8GSM_NWINFO, &strLoc[10], strlen(strtok(strLoc,",")));
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	f103 040a 	add.w	r4, r3, #10
 8002e12:	493b      	ldr	r1, [pc, #236]	; (8002f00 <sendGSMCommand+0x620>)
 8002e14:	6938      	ldr	r0, [r7, #16]
 8002e16:	f012 fd41 	bl	801589c <strtok>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7fd fde1 	bl	80009e4 <strlen>
 8002e22:	4603      	mov	r3, r0
 8002e24:	461a      	mov	r2, r3
 8002e26:	4621      	mov	r1, r4
 8002e28:	4834      	ldr	r0, [pc, #208]	; (8002efc <sendGSMCommand+0x61c>)
 8002e2a:	f011 f949 	bl	80140c0 <memcpy>
								gsmInstance.u8IncrementGsmState = TRUE;
 8002e2e:	4b21      	ldr	r3, [pc, #132]	; (8002eb4 <sendGSMCommand+0x5d4>)
 8002e30:	2201      	movs	r2, #1
 8002e32:	f883 2f89 	strb.w	r2, [r3, #3977]	; 0xf89
								break;
 8002e36:	f000 bca1 	b.w	800377c <sendGSMCommand+0xe9c>
							gsmInstance.u8IncrementGsmState = TRUE;
 8002e3a:	4b1e      	ldr	r3, [pc, #120]	; (8002eb4 <sendGSMCommand+0x5d4>)
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	f883 2f89 	strb.w	r2, [r3, #3977]	; 0xf89
							break;
 8002e42:	f000 bc9b 	b.w	800377c <sendGSMCommand+0xe9c>
							gsmInstance.u8IncrementGsmState = TRUE;
 8002e46:	4b1b      	ldr	r3, [pc, #108]	; (8002eb4 <sendGSMCommand+0x5d4>)
 8002e48:	2201      	movs	r2, #1
 8002e4a:	f883 2f89 	strb.w	r2, [r3, #3977]	; 0xf89
							break;
 8002e4e:	f000 bc95 	b.w	800377c <sendGSMCommand+0xe9c>
							gsmInstance.u8IncrementGsmState = TRUE;
 8002e52:	4b18      	ldr	r3, [pc, #96]	; (8002eb4 <sendGSMCommand+0x5d4>)
 8002e54:	2201      	movs	r2, #1
 8002e56:	f883 2f89 	strb.w	r2, [r3, #3977]	; 0xf89
							break;
 8002e5a:	f000 bc8f 	b.w	800377c <sendGSMCommand+0xe9c>
							gsmInstance.u8IncrementGsmState = TRUE;
 8002e5e:	4b15      	ldr	r3, [pc, #84]	; (8002eb4 <sendGSMCommand+0x5d4>)
 8002e60:	2201      	movs	r2, #1
 8002e62:	f883 2f89 	strb.w	r2, [r3, #3977]	; 0xf89
							break;
 8002e66:	f000 bc89 	b.w	800377c <sendGSMCommand+0xe9c>
							gsmInstance.u8IncrementGsmState = TRUE;
 8002e6a:	4b12      	ldr	r3, [pc, #72]	; (8002eb4 <sendGSMCommand+0x5d4>)
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	f883 2f89 	strb.w	r2, [r3, #3977]	; 0xf89
							break;
 8002e72:	f000 bc83 	b.w	800377c <sendGSMCommand+0xe9c>
							gsmInstance.u8IncrementGsmState = TRUE;
 8002e76:	4b0f      	ldr	r3, [pc, #60]	; (8002eb4 <sendGSMCommand+0x5d4>)
 8002e78:	2201      	movs	r2, #1
 8002e7a:	f883 2f89 	strb.w	r2, [r3, #3977]	; 0xf89
							break;
 8002e7e:	f000 bc7d 	b.w	800377c <sendGSMCommand+0xe9c>
							gsmInstance.u8IncrementGsmState = TRUE;
 8002e82:	4b0c      	ldr	r3, [pc, #48]	; (8002eb4 <sendGSMCommand+0x5d4>)
 8002e84:	2201      	movs	r2, #1
 8002e86:	f883 2f89 	strb.w	r2, [r3, #3977]	; 0xf89
							gsmInstance.u8IncrementGsmState = TRUE;
 8002e8a:	4b0a      	ldr	r3, [pc, #40]	; (8002eb4 <sendGSMCommand+0x5d4>)
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	f883 2f89 	strb.w	r2, [r3, #3977]	; 0xf89
							break;
 8002e92:	f000 bc73 	b.w	800377c <sendGSMCommand+0xe9c>
							gsmInstance.u8IncrementGsmState = TRUE;
 8002e96:	4b07      	ldr	r3, [pc, #28]	; (8002eb4 <sendGSMCommand+0x5d4>)
 8002e98:	2201      	movs	r2, #1
 8002e9a:	f883 2f89 	strb.w	r2, [r3, #3977]	; 0xf89
							break;
 8002e9e:	f000 bc6d 	b.w	800377c <sendGSMCommand+0xe9c>
							gsmInstance.u8IncrementGsmState = TRUE;
 8002ea2:	4b04      	ldr	r3, [pc, #16]	; (8002eb4 <sendGSMCommand+0x5d4>)
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	f883 2f89 	strb.w	r2, [r3, #3977]	; 0xf89
							break;
 8002eaa:	f000 bc67 	b.w	800377c <sendGSMCommand+0xe9c>
 8002eae:	bf00      	nop
 8002eb0:	20001735 	.word	0x20001735
 8002eb4:	20002b1c 	.word	0x20002b1c
 8002eb8:	080190c8 	.word	0x080190c8
 8002ebc:	20003013 	.word	0x20003013
 8002ec0:	08018874 	.word	0x08018874
 8002ec4:	200007b0 	.word	0x200007b0
 8002ec8:	08018950 	.word	0x08018950
 8002ecc:	0801885c 	.word	0x0801885c
 8002ed0:	20000fc4 	.word	0x20000fc4
 8002ed4:	0801893c 	.word	0x0801893c
 8002ed8:	20001740 	.word	0x20001740
 8002edc:	08018954 	.word	0x08018954
 8002ee0:	0801895c 	.word	0x0801895c
 8002ee4:	20002c48 	.word	0x20002c48
 8002ee8:	20001918 	.word	0x20001918
 8002eec:	2000191a 	.word	0x2000191a
 8002ef0:	08018960 	.word	0x08018960
 8002ef4:	20001749 	.word	0x20001749
 8002ef8:	0801887c 	.word	0x0801887c
 8002efc:	20000fb4 	.word	0x20000fb4
 8002f00:	08018934 	.word	0x08018934
							char * strLoc = strstr((const char *)gsmInstance.as8GSM_Response_Buff,(const char *)"$GNRMC");
 8002f04:	49b0      	ldr	r1, [pc, #704]	; (80031c8 <sendGSMCommand+0x8e8>)
 8002f06:	48b1      	ldr	r0, [pc, #708]	; (80031cc <sendGSMCommand+0x8ec>)
 8002f08:	f011 fe7d 	bl	8014c06 <strstr>
 8002f0c:	6178      	str	r0, [r7, #20]
							memset(gsmInstance.agpsLocationData,0x00, sizeof(gsmInstance.agpsLocationData));
 8002f0e:	2296      	movs	r2, #150	; 0x96
 8002f10:	2100      	movs	r1, #0
 8002f12:	48af      	ldr	r0, [pc, #700]	; (80031d0 <sendGSMCommand+0x8f0>)
 8002f14:	f011 f8e2 	bl	80140dc <memset>
							if(strLoc != NULL)
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d00d      	beq.n	8002f3a <sendGSMCommand+0x65a>
								memcpy(gsmInstance.agpsLocationData, strLoc, strlen(strtok(strLoc,"\r\n")));
 8002f1e:	49ad      	ldr	r1, [pc, #692]	; (80031d4 <sendGSMCommand+0x8f4>)
 8002f20:	6978      	ldr	r0, [r7, #20]
 8002f22:	f012 fcbb 	bl	801589c <strtok>
 8002f26:	4603      	mov	r3, r0
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7fd fd5b 	bl	80009e4 <strlen>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	461a      	mov	r2, r3
 8002f32:	6979      	ldr	r1, [r7, #20]
 8002f34:	48a6      	ldr	r0, [pc, #664]	; (80031d0 <sendGSMCommand+0x8f0>)
 8002f36:	f011 f8c3 	bl	80140c0 <memcpy>
							if(gu32ModuleInitComplete == 1)
 8002f3a:	4ba7      	ldr	r3, [pc, #668]	; (80031d8 <sendGSMCommand+0x8f8>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d124      	bne.n	8002f8c <sendGSMCommand+0x6ac>
								if((gu32FotaRquestFlag == TRUE) && (Queue_IsLiveQueueEmpty(&gsmLivePayload) == 1))
 8002f42:	4ba6      	ldr	r3, [pc, #664]	; (80031dc <sendGSMCommand+0x8fc>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d113      	bne.n	8002f72 <sendGSMCommand+0x692>
 8002f4a:	48a5      	ldr	r0, [pc, #660]	; (80031e0 <sendGSMCommand+0x900>)
 8002f4c:	f003 f881 	bl	8006052 <Queue_IsLiveQueueEmpty>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d10d      	bne.n	8002f72 <sendGSMCommand+0x692>
									UrlLenforFOTA();
 8002f56:	f001 f833 	bl	8003fc0 <UrlLenforFOTA>
									gsmInstance.enmGSMCommand = enmGSMSTATE_QFOTAURLLEN;
 8002f5a:	4b9d      	ldr	r3, [pc, #628]	; (80031d0 <sendGSMCommand+0x8f0>)
 8002f5c:	221b      	movs	r2, #27
 8002f5e:	f883 2faf 	strb.w	r2, [r3, #4015]	; 0xfaf
									gsmInstance.enmcurrentTask = enmGSMTASK_DOWNLOADFOTAFILE;
 8002f62:	4b9b      	ldr	r3, [pc, #620]	; (80031d0 <sendGSMCommand+0x8f0>)
 8002f64:	2208      	movs	r2, #8
 8002f66:	f883 2fae 	strb.w	r2, [r3, #4014]	; 0xfae
									SUBTriggerFlag = FALSE;
 8002f6a:	4b9e      	ldr	r3, [pc, #632]	; (80031e4 <sendGSMCommand+0x904>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	701a      	strb	r2, [r3, #0]
 8002f70:	e007      	b.n	8002f82 <sendGSMCommand+0x6a2>
									gsmInstance.enmGSMCommand = enmGSMSTATE_ATCSQ;
 8002f72:	4b97      	ldr	r3, [pc, #604]	; (80031d0 <sendGSMCommand+0x8f0>)
 8002f74:	2205      	movs	r2, #5
 8002f76:	f883 2faf 	strb.w	r2, [r3, #4015]	; 0xfaf
									gsmInstance.enmcurrentTask = enmGSMTASK_ISALIVE;
 8002f7a:	4b95      	ldr	r3, [pc, #596]	; (80031d0 <sendGSMCommand+0x8f0>)
 8002f7c:	2206      	movs	r2, #6
 8002f7e:	f883 2fae 	strb.w	r2, [r3, #4014]	; 0xfae
								gsmInstance.u8IncrementGsmState = FALSE;
 8002f82:	4b93      	ldr	r3, [pc, #588]	; (80031d0 <sendGSMCommand+0x8f0>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 2f89 	strb.w	r2, [r3, #3977]	; 0xf89
						break;
 8002f8a:	e3f4      	b.n	8003776 <sendGSMCommand+0xe96>
							else if(gu32ModuleInitComplete == 0)
 8002f8c:	4b92      	ldr	r3, [pc, #584]	; (80031d8 <sendGSMCommand+0x8f8>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	f040 83f0 	bne.w	8003776 <sendGSMCommand+0xe96>
								gsmInstance.u8IncrementGsmState = TRUE;
 8002f96:	4b8e      	ldr	r3, [pc, #568]	; (80031d0 <sendGSMCommand+0x8f0>)
 8002f98:	2201      	movs	r2, #1
 8002f9a:	f883 2f89 	strb.w	r2, [r3, #3977]	; 0xf89
								gu32ModuleInitComplete = 1;
 8002f9e:	4b8e      	ldr	r3, [pc, #568]	; (80031d8 <sendGSMCommand+0x8f8>)
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	601a      	str	r2, [r3, #0]
						break;
 8002fa4:	e3e7      	b.n	8003776 <sendGSMCommand+0xe96>
							gsmInstance.u8IncrementGsmState = TRUE;
 8002fa6:	4b8a      	ldr	r3, [pc, #552]	; (80031d0 <sendGSMCommand+0x8f0>)
 8002fa8:	2201      	movs	r2, #1
 8002faa:	f883 2f89 	strb.w	r2, [r3, #3977]	; 0xf89
							break;
 8002fae:	e3e5      	b.n	800377c <sendGSMCommand+0xe9c>
							char * strLoc = strstr((const char *)gsmInstance.as8GSM_Response_Buff,(const char *)": ");
 8002fb0:	498d      	ldr	r1, [pc, #564]	; (80031e8 <sendGSMCommand+0x908>)
 8002fb2:	4886      	ldr	r0, [pc, #536]	; (80031cc <sendGSMCommand+0x8ec>)
 8002fb4:	f011 fe27 	bl	8014c06 <strstr>
 8002fb8:	6238      	str	r0, [r7, #32]
							memcpy(gsmInstance.u32GSMHttpResponseCode, (char *)&strLoc[4], 3);
 8002fba:	6a3b      	ldr	r3, [r7, #32]
 8002fbc:	1d1a      	adds	r2, r3, #4
 8002fbe:	4b84      	ldr	r3, [pc, #528]	; (80031d0 <sendGSMCommand+0x8f0>)
 8002fc0:	f203 43e5 	addw	r3, r3, #1253	; 0x4e5
 8002fc4:	8811      	ldrh	r1, [r2, #0]
 8002fc6:	7892      	ldrb	r2, [r2, #2]
 8002fc8:	8019      	strh	r1, [r3, #0]
 8002fca:	709a      	strb	r2, [r3, #2]
							gsmInstance.u8IncrementGsmState = TRUE;
 8002fcc:	4b80      	ldr	r3, [pc, #512]	; (80031d0 <sendGSMCommand+0x8f0>)
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 2f89 	strb.w	r2, [r3, #3977]	; 0xf89
							break;
 8002fd4:	e3d2      	b.n	800377c <sendGSMCommand+0xe9c>
							gsmInstance.u8IncrementGsmState = TRUE;
 8002fd6:	4b7e      	ldr	r3, [pc, #504]	; (80031d0 <sendGSMCommand+0x8f0>)
 8002fd8:	2201      	movs	r2, #1
 8002fda:	f883 2f89 	strb.w	r2, [r3, #3977]	; 0xf89
							break;
 8002fde:	e3cd      	b.n	800377c <sendGSMCommand+0xe9c>
							char * strLoc = strstr((const char *)gsmInstance.as8GSM_Response_Buff
 8002fe0:	4981      	ldr	r1, [pc, #516]	; (80031e8 <sendGSMCommand+0x908>)
 8002fe2:	487a      	ldr	r0, [pc, #488]	; (80031cc <sendGSMCommand+0x8ec>)
 8002fe4:	f011 fe0f 	bl	8014c06 <strstr>
 8002fe8:	6278      	str	r0, [r7, #36]	; 0x24
							memcpy(gsmInstance.u32GSMHttpResponseCode, (char *)&strLoc[4], 3);
 8002fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fec:	1d1a      	adds	r2, r3, #4
 8002fee:	4b78      	ldr	r3, [pc, #480]	; (80031d0 <sendGSMCommand+0x8f0>)
 8002ff0:	f203 43e5 	addw	r3, r3, #1253	; 0x4e5
 8002ff4:	8811      	ldrh	r1, [r2, #0]
 8002ff6:	7892      	ldrb	r2, [r2, #2]
 8002ff8:	8019      	strh	r1, [r3, #0]
 8002ffa:	709a      	strb	r2, [r3, #2]
							switch(atoi(gsmInstance.u32GSMHttpResponseCode))
 8002ffc:	487b      	ldr	r0, [pc, #492]	; (80031ec <sendGSMCommand+0x90c>)
 8002ffe:	f011 f802 	bl	8014006 <atoi>
 8003002:	4603      	mov	r3, r0
 8003004:	2bc8      	cmp	r3, #200	; 0xc8
 8003006:	d12a      	bne.n	800305e <sendGSMCommand+0x77e>
									if(g_u8PayloadType == PAYLOD_TYPE_LIVE)
 8003008:	4b79      	ldr	r3, [pc, #484]	; (80031f0 <sendGSMCommand+0x910>)
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	2b01      	cmp	r3, #1
 800300e:	d103      	bne.n	8003018 <sendGSMCommand+0x738>
										Queue_LiveDequeue(&gsmLivePayload);
 8003010:	4873      	ldr	r0, [pc, #460]	; (80031e0 <sendGSMCommand+0x900>)
 8003012:	f002 ffbd 	bl	8005f90 <Queue_LiveDequeue>
 8003016:	e006      	b.n	8003026 <sendGSMCommand+0x746>
									else if(g_u8PayloadType == PAYLOD_TYPE_BUFF)
 8003018:	4b75      	ldr	r3, [pc, #468]	; (80031f0 <sendGSMCommand+0x910>)
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	2b02      	cmp	r3, #2
 800301e:	d102      	bne.n	8003026 <sendGSMCommand+0x746>
										Queue_BuffDequeue(&gsmBuffPayload);
 8003020:	4874      	ldr	r0, [pc, #464]	; (80031f4 <sendGSMCommand+0x914>)
 8003022:	f003 f884 	bl	800612e <Queue_BuffDequeue>
								gsmInstance.u32GSMTimer = TWO_SEC; // Replace with Upload Frequency
 8003026:	4b6a      	ldr	r3, [pc, #424]	; (80031d0 <sendGSMCommand+0x8f0>)
 8003028:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800302c:	f8c3 2f90 	str.w	r2, [r3, #3984]	; 0xf90
								gu8HttpPayloadFlag = 0;
 8003030:	4b71      	ldr	r3, [pc, #452]	; (80031f8 <sendGSMCommand+0x918>)
 8003032:	2200      	movs	r2, #0
 8003034:	701a      	strb	r2, [r3, #0]
								gsmInstance.enmGSMCommand = enmGSMSTATE_MQTTPUBEX;
 8003036:	4b66      	ldr	r3, [pc, #408]	; (80031d0 <sendGSMCommand+0x8f0>)
 8003038:	2219      	movs	r2, #25
 800303a:	f883 2faf 	strb.w	r2, [r3, #4015]	; 0xfaf
								gsmInstance.enmGSMCommand = enmGSMSTATE_ATHTTPDATA;
 800303e:	4b64      	ldr	r3, [pc, #400]	; (80031d0 <sendGSMCommand+0x8f0>)
 8003040:	2220      	movs	r2, #32
 8003042:	f883 2faf 	strb.w	r2, [r3, #4015]	; 0xfaf
								gsmInstance.u8IncrementGsmState = FALSE;
 8003046:	4b62      	ldr	r3, [pc, #392]	; (80031d0 <sendGSMCommand+0x8f0>)
 8003048:	2200      	movs	r2, #0
 800304a:	f883 2f89 	strb.w	r2, [r3, #3977]	; 0xf89
								u8LastHttpResponseCode = atoi(gsmInstance.u32GSMHttpResponseCode);
 800304e:	4867      	ldr	r0, [pc, #412]	; (80031ec <sendGSMCommand+0x90c>)
 8003050:	f010 ffd9 	bl	8014006 <atoi>
 8003054:	4603      	mov	r3, r0
 8003056:	461a      	mov	r2, r3
 8003058:	4b68      	ldr	r3, [pc, #416]	; (80031fc <sendGSMCommand+0x91c>)
 800305a:	601a      	str	r2, [r3, #0]
								break;
 800305c:	e031      	b.n	80030c2 <sendGSMCommand+0x7e2>
									u8LastHttpResponseCode = atoi(gsmInstance.u32GSMHttpResponseCode);
 800305e:	4863      	ldr	r0, [pc, #396]	; (80031ec <sendGSMCommand+0x90c>)
 8003060:	f010 ffd1 	bl	8014006 <atoi>
 8003064:	4603      	mov	r3, r0
 8003066:	461a      	mov	r2, r3
 8003068:	4b64      	ldr	r3, [pc, #400]	; (80031fc <sendGSMCommand+0x91c>)
 800306a:	601a      	str	r2, [r3, #0]
									gsmInstance.u8IllegalHttpResponseCounter++;
 800306c:	4b58      	ldr	r3, [pc, #352]	; (80031d0 <sendGSMCommand+0x8f0>)
 800306e:	f893 3f8a 	ldrb.w	r3, [r3, #3978]	; 0xf8a
 8003072:	3301      	adds	r3, #1
 8003074:	b2da      	uxtb	r2, r3
 8003076:	4b56      	ldr	r3, [pc, #344]	; (80031d0 <sendGSMCommand+0x8f0>)
 8003078:	f883 2f8a 	strb.w	r2, [r3, #3978]	; 0xf8a
									if(gsmInstance.u8IllegalHttpResponseCounter >= MAX_HTTP_ATTEMPTS)
 800307c:	4b54      	ldr	r3, [pc, #336]	; (80031d0 <sendGSMCommand+0x8f0>)
 800307e:	f893 3f8a 	ldrb.w	r3, [r3, #3978]	; 0xf8a
 8003082:	2b04      	cmp	r3, #4
 8003084:	d905      	bls.n	8003092 <sendGSMCommand+0x7b2>
										initGSMSIM868();
 8003086:	f7ff f845 	bl	8002114 <initGSMSIM868>
										gu8CheckSMS = TRUE;
 800308a:	4b5d      	ldr	r3, [pc, #372]	; (8003200 <sendGSMCommand+0x920>)
 800308c:	2201      	movs	r2, #1
 800308e:	701a      	strb	r2, [r3, #0]
										break;
 8003090:	e017      	b.n	80030c2 <sendGSMCommand+0x7e2>
									u8LastHttpResponseCode = atoi(gsmInstance.u32GSMHttpResponseCode);
 8003092:	4856      	ldr	r0, [pc, #344]	; (80031ec <sendGSMCommand+0x90c>)
 8003094:	f010 ffb7 	bl	8014006 <atoi>
 8003098:	4603      	mov	r3, r0
 800309a:	461a      	mov	r2, r3
 800309c:	4b57      	ldr	r3, [pc, #348]	; (80031fc <sendGSMCommand+0x91c>)
 800309e:	601a      	str	r2, [r3, #0]
									gsmInstance.enmGSMCommand = enmGSMSTATE_MQTTPUBEX;
 80030a0:	4b4b      	ldr	r3, [pc, #300]	; (80031d0 <sendGSMCommand+0x8f0>)
 80030a2:	2219      	movs	r2, #25
 80030a4:	f883 2faf 	strb.w	r2, [r3, #4015]	; 0xfaf
									gsmInstance.enmGSMCommand =enmGSMSTATE_ATHTTPDATA;
 80030a8:	4b49      	ldr	r3, [pc, #292]	; (80031d0 <sendGSMCommand+0x8f0>)
 80030aa:	2220      	movs	r2, #32
 80030ac:	f883 2faf 	strb.w	r2, [r3, #4015]	; 0xfaf
									gsmInstance.u32GSMResponseTimer = 0;
 80030b0:	4b47      	ldr	r3, [pc, #284]	; (80031d0 <sendGSMCommand+0x8f0>)
 80030b2:	2200      	movs	r2, #0
 80030b4:	f8c3 2fa4 	str.w	r2, [r3, #4004]	; 0xfa4
									gsmInstance.u8IncrementGsmState = FALSE;
 80030b8:	4b45      	ldr	r3, [pc, #276]	; (80031d0 <sendGSMCommand+0x8f0>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	f883 2f89 	strb.w	r2, [r3, #3977]	; 0xf89
								break;
 80030c0:	bf00      	nop
							break;
 80030c2:	e35b      	b.n	800377c <sendGSMCommand+0xe9c>
							gsmInstance.u8IncrementGsmState = TRUE;
 80030c4:	4b42      	ldr	r3, [pc, #264]	; (80031d0 <sendGSMCommand+0x8f0>)
 80030c6:	2201      	movs	r2, #1
 80030c8:	f883 2f89 	strb.w	r2, [r3, #3977]	; 0xf89
							break;
 80030cc:	e356      	b.n	800377c <sendGSMCommand+0xe9c>
							gsmInstance.u8IncrementGsmState = TRUE;
 80030ce:	4b40      	ldr	r3, [pc, #256]	; (80031d0 <sendGSMCommand+0x8f0>)
 80030d0:	2201      	movs	r2, #1
 80030d2:	f883 2f89 	strb.w	r2, [r3, #3977]	; 0xf89
							break;
 80030d6:	e351      	b.n	800377c <sendGSMCommand+0xe9c>
							gsmInstance.u8IncrementGsmState = TRUE;
 80030d8:	4b3d      	ldr	r3, [pc, #244]	; (80031d0 <sendGSMCommand+0x8f0>)
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 2f89 	strb.w	r2, [r3, #3977]	; 0xf89
							break;
 80030e0:	e34c      	b.n	800377c <sendGSMCommand+0xe9c>
							GSMInitCompleteFlag = TRUE;
 80030e2:	4b48      	ldr	r3, [pc, #288]	; (8003204 <sendGSMCommand+0x924>)
 80030e4:	2201      	movs	r2, #1
 80030e6:	701a      	strb	r2, [r3, #0]
							gsmInstance.u8IncrementGsmState = TRUE;
 80030e8:	4b39      	ldr	r3, [pc, #228]	; (80031d0 <sendGSMCommand+0x8f0>)
 80030ea:	2201      	movs	r2, #1
 80030ec:	f883 2f89 	strb.w	r2, [r3, #3977]	; 0xf89
							break;
 80030f0:	e344      	b.n	800377c <sendGSMCommand+0xe9c>
							uint32_t i =0;
 80030f2:	2300      	movs	r3, #0
 80030f4:	63fb      	str	r3, [r7, #60]	; 0x3c
							uint8_t cnt = 0;
 80030f6:	2300      	movs	r3, #0
 80030f8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
							for(i=0;i<GSM_RESPONSE_ARRAY_SIZE && cnt<2;i++)
 80030fc:	2300      	movs	r3, #0
 80030fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003100:	e01a      	b.n	8003138 <sendGSMCommand+0x858>
								if(gsmInstance.as8GSM_Response_Buff[i] == '\0')
 8003102:	4a33      	ldr	r2, [pc, #204]	; (80031d0 <sendGSMCommand+0x8f0>)
 8003104:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003106:	4413      	add	r3, r2
 8003108:	f203 43f7 	addw	r3, r3, #1271	; 0x4f7
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d10c      	bne.n	800312c <sendGSMCommand+0x84c>
									gsmInstance.as8GSM_Response_Buff[i]='!';
 8003112:	4a2f      	ldr	r2, [pc, #188]	; (80031d0 <sendGSMCommand+0x8f0>)
 8003114:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003116:	4413      	add	r3, r2
 8003118:	f203 43f7 	addw	r3, r3, #1271	; 0x4f7
 800311c:	2221      	movs	r2, #33	; 0x21
 800311e:	701a      	strb	r2, [r3, #0]
									cnt++;
 8003120:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8003124:	3301      	adds	r3, #1
 8003126:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800312a:	e002      	b.n	8003132 <sendGSMCommand+0x852>
								   cnt=0;
 800312c:	2300      	movs	r3, #0
 800312e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
							for(i=0;i<GSM_RESPONSE_ARRAY_SIZE && cnt<2;i++)
 8003132:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003134:	3301      	adds	r3, #1
 8003136:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003138:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800313a:	f640 228b 	movw	r2, #2699	; 0xa8b
 800313e:	4293      	cmp	r3, r2
 8003140:	d803      	bhi.n	800314a <sendGSMCommand+0x86a>
 8003142:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8003146:	2b01      	cmp	r3, #1
 8003148:	d9db      	bls.n	8003102 <sendGSMCommand+0x822>
							char *token = NULL;
 800314a:	2300      	movs	r3, #0
 800314c:	637b      	str	r3, [r7, #52]	; 0x34
							token = strtok(gsmInstance.as8GSM_Response_Buff,"+");
 800314e:	492e      	ldr	r1, [pc, #184]	; (8003208 <sendGSMCommand+0x928>)
 8003150:	481e      	ldr	r0, [pc, #120]	; (80031cc <sendGSMCommand+0x8ec>)
 8003152:	f012 fba3 	bl	801589c <strtok>
 8003156:	6378      	str	r0, [r7, #52]	; 0x34
							while(token != NULL)
 8003158:	e0d9      	b.n	800330e <sendGSMCommand+0xa2e>
								if(strncmp(token,"QMTPUBEX",strlen("QMTPUBEX"))==0)
 800315a:	2208      	movs	r2, #8
 800315c:	492b      	ldr	r1, [pc, #172]	; (800320c <sendGSMCommand+0x92c>)
 800315e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003160:	f011 fd2c 	bl	8014bbc <strncmp>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d10a      	bne.n	8003180 <sendGSMCommand+0x8a0>
									memset(gsmInstance.u32GSMMQTTResponseCode,0x00,sizeof(gsmInstance.u32GSMMQTTResponseCode));
 800316a:	220f      	movs	r2, #15
 800316c:	2100      	movs	r1, #0
 800316e:	4828      	ldr	r0, [pc, #160]	; (8003210 <sendGSMCommand+0x930>)
 8003170:	f010 ffb4 	bl	80140dc <memset>
									memcpy(gsmInstance.u32GSMMQTTResponseCode, token, 13);
 8003174:	220d      	movs	r2, #13
 8003176:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003178:	4825      	ldr	r0, [pc, #148]	; (8003210 <sendGSMCommand+0x930>)
 800317a:	f010 ffa1 	bl	80140c0 <memcpy>
 800317e:	e0c1      	b.n	8003304 <sendGSMCommand+0xa24>
								else if(strncmp(token,"CSQ",strlen("CSQ"))==0)
 8003180:	2203      	movs	r2, #3
 8003182:	4924      	ldr	r1, [pc, #144]	; (8003214 <sendGSMCommand+0x934>)
 8003184:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003186:	f011 fd19 	bl	8014bbc <strncmp>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d149      	bne.n	8003224 <sendGSMCommand+0x944>
									 memcpy(gsmInstance.agsmSignalStrength,&token[5],((strstr(token,"\r\n"))-(&token[5])));
 8003190:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003192:	1d5c      	adds	r4, r3, #5
 8003194:	490f      	ldr	r1, [pc, #60]	; (80031d4 <sendGSMCommand+0x8f4>)
 8003196:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003198:	f011 fd35 	bl	8014c06 <strstr>
 800319c:	4602      	mov	r2, r0
 800319e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031a0:	3305      	adds	r3, #5
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	461a      	mov	r2, r3
 80031a6:	4621      	mov	r1, r4
 80031a8:	481b      	ldr	r0, [pc, #108]	; (8003218 <sendGSMCommand+0x938>)
 80031aa:	f010 ff89 	bl	80140c0 <memcpy>
 80031ae:	4b08      	ldr	r3, [pc, #32]	; (80031d0 <sendGSMCommand+0x8f0>)
 80031b0:	f8b3 212c 	ldrh.w	r2, [r3, #300]	; 0x12c
									memcpy(gau8GSM_Signal,gsmInstance.agsmSignalStrength,2);
 80031b4:	4b19      	ldr	r3, [pc, #100]	; (800321c <sendGSMCommand+0x93c>)
 80031b6:	801a      	strh	r2, [r3, #0]
									signal_qaulity = atoi(gau8GSM_Signal);
 80031b8:	4818      	ldr	r0, [pc, #96]	; (800321c <sendGSMCommand+0x93c>)
 80031ba:	f010 ff24 	bl	8014006 <atoi>
 80031be:	4603      	mov	r3, r0
 80031c0:	b2da      	uxtb	r2, r3
 80031c2:	4b17      	ldr	r3, [pc, #92]	; (8003220 <sendGSMCommand+0x940>)
 80031c4:	701a      	strb	r2, [r3, #0]
 80031c6:	e09d      	b.n	8003304 <sendGSMCommand+0xa24>
 80031c8:	08018968 	.word	0x08018968
 80031cc:	20003013 	.word	0x20003013
 80031d0:	20002b1c 	.word	0x20002b1c
 80031d4:	08018930 	.word	0x08018930
 80031d8:	20001910 	.word	0x20001910
 80031dc:	20001738 	.word	0x20001738
 80031e0:	20002aec 	.word	0x20002aec
 80031e4:	20001735 	.word	0x20001735
 80031e8:	08018970 	.word	0x08018970
 80031ec:	20003001 	.word	0x20003001
 80031f0:	20001734 	.word	0x20001734
 80031f4:	20002abc 	.word	0x20002abc
 80031f8:	20001748 	.word	0x20001748
 80031fc:	200018e4 	.word	0x200018e4
 8003200:	20001749 	.word	0x20001749
 8003204:	20001945 	.word	0x20001945
 8003208:	08018974 	.word	0x08018974
 800320c:	08018978 	.word	0x08018978
 8003210:	20003004 	.word	0x20003004
 8003214:	08018984 	.word	0x08018984
 8003218:	20002c48 	.word	0x20002c48
 800321c:	20001918 	.word	0x20001918
 8003220:	2000191a 	.word	0x2000191a
								else if(strncmp(token,"QNWINFO",strlen("QNWINFO"))==0)
 8003224:	2207      	movs	r2, #7
 8003226:	49b3      	ldr	r1, [pc, #716]	; (80034f4 <sendGSMCommand+0xc14>)
 8003228:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800322a:	f011 fcc7 	bl	8014bbc <strncmp>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d14f      	bne.n	80032d4 <sendGSMCommand+0x9f4>
									memset(gau8GSM_NWINFO,0x00,sizeof(gau8GSM_NWINFO));
 8003234:	220f      	movs	r2, #15
 8003236:	2100      	movs	r1, #0
 8003238:	48af      	ldr	r0, [pc, #700]	; (80034f8 <sendGSMCommand+0xc18>)
 800323a:	f010 ff4f 	bl	80140dc <memset>
									memcpy(gau8GSM_NWINFO,&token[9],((strstr(token,","))-(&token[9])));
 800323e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003240:	f103 0409 	add.w	r4, r3, #9
 8003244:	212c      	movs	r1, #44	; 0x2c
 8003246:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003248:	f011 fca3 	bl	8014b92 <strchr>
 800324c:	4602      	mov	r2, r0
 800324e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003250:	3309      	adds	r3, #9
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	461a      	mov	r2, r3
 8003256:	4621      	mov	r1, r4
 8003258:	48a7      	ldr	r0, [pc, #668]	; (80034f8 <sendGSMCommand+0xc18>)
 800325a:	f010 ff31 	bl	80140c0 <memcpy>
									if((strcmp(gau8GSM_NWINFO,"\"GSM\"") == 0) || (strcmp(gau8GSM_NWINFO,"\"GPRS\"") == 0) || (strcmp(gau8GSM_NWINFO,"\"EDGE\""))==0)
 800325e:	49a7      	ldr	r1, [pc, #668]	; (80034fc <sendGSMCommand+0xc1c>)
 8003260:	48a5      	ldr	r0, [pc, #660]	; (80034f8 <sendGSMCommand+0xc18>)
 8003262:	f7fd fbb5 	bl	80009d0 <strcmp>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d00d      	beq.n	8003288 <sendGSMCommand+0x9a8>
 800326c:	49a4      	ldr	r1, [pc, #656]	; (8003500 <sendGSMCommand+0xc20>)
 800326e:	48a2      	ldr	r0, [pc, #648]	; (80034f8 <sendGSMCommand+0xc18>)
 8003270:	f7fd fbae 	bl	80009d0 <strcmp>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d006      	beq.n	8003288 <sendGSMCommand+0x9a8>
 800327a:	49a2      	ldr	r1, [pc, #648]	; (8003504 <sendGSMCommand+0xc24>)
 800327c:	489e      	ldr	r0, [pc, #632]	; (80034f8 <sendGSMCommand+0xc18>)
 800327e:	f7fd fba7 	bl	80009d0 <strcmp>
 8003282:	4603      	mov	r3, r0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d107      	bne.n	8003298 <sendGSMCommand+0x9b8>
										u8daignostic|=(1<<1); // 2G
 8003288:	4b9f      	ldr	r3, [pc, #636]	; (8003508 <sendGSMCommand+0xc28>)
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	f043 0302 	orr.w	r3, r3, #2
 8003290:	b2da      	uxtb	r2, r3
 8003292:	4b9d      	ldr	r3, [pc, #628]	; (8003508 <sendGSMCommand+0xc28>)
 8003294:	701a      	strb	r2, [r3, #0]
 8003296:	e035      	b.n	8003304 <sendGSMCommand+0xa24>
									else if((strcmp(gau8GSM_NWINFO,"\"TDD LTE\"")==0) || (strcmp(gau8GSM_NWINFO,"\"FDD LTE\""))==0)
 8003298:	499c      	ldr	r1, [pc, #624]	; (800350c <sendGSMCommand+0xc2c>)
 800329a:	4897      	ldr	r0, [pc, #604]	; (80034f8 <sendGSMCommand+0xc18>)
 800329c:	f7fd fb98 	bl	80009d0 <strcmp>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d006      	beq.n	80032b4 <sendGSMCommand+0x9d4>
 80032a6:	499a      	ldr	r1, [pc, #616]	; (8003510 <sendGSMCommand+0xc30>)
 80032a8:	4893      	ldr	r0, [pc, #588]	; (80034f8 <sendGSMCommand+0xc18>)
 80032aa:	f7fd fb91 	bl	80009d0 <strcmp>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d107      	bne.n	80032c4 <sendGSMCommand+0x9e4>
										u8daignostic|=(1<<2); // 4G
 80032b4:	4b94      	ldr	r3, [pc, #592]	; (8003508 <sendGSMCommand+0xc28>)
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	f043 0304 	orr.w	r3, r3, #4
 80032bc:	b2da      	uxtb	r2, r3
 80032be:	4b92      	ldr	r3, [pc, #584]	; (8003508 <sendGSMCommand+0xc28>)
 80032c0:	701a      	strb	r2, [r3, #0]
 80032c2:	e01f      	b.n	8003304 <sendGSMCommand+0xa24>
										u8daignostic&=~((1<<0)|(1<<1)|(1<<2)); //
 80032c4:	4b90      	ldr	r3, [pc, #576]	; (8003508 <sendGSMCommand+0xc28>)
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	f023 0307 	bic.w	r3, r3, #7
 80032cc:	b2da      	uxtb	r2, r3
 80032ce:	4b8e      	ldr	r3, [pc, #568]	; (8003508 <sendGSMCommand+0xc28>)
 80032d0:	701a      	strb	r2, [r3, #0]
 80032d2:	e017      	b.n	8003304 <sendGSMCommand+0xa24>
								else if(strncmp(token,"QGPSGNMEA",strlen("QGPSGNMEA"))==0)
 80032d4:	2209      	movs	r2, #9
 80032d6:	498f      	ldr	r1, [pc, #572]	; (8003514 <sendGSMCommand+0xc34>)
 80032d8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80032da:	f011 fc6f 	bl	8014bbc <strncmp>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d10f      	bne.n	8003304 <sendGSMCommand+0xa24>
									strncpy(gsmInstance.agpsLocationData,&token[11],((strstr(token,"\r\n"))-(&token[11])));
 80032e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032e6:	f103 040b 	add.w	r4, r3, #11
 80032ea:	498b      	ldr	r1, [pc, #556]	; (8003518 <sendGSMCommand+0xc38>)
 80032ec:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80032ee:	f011 fc8a 	bl	8014c06 <strstr>
 80032f2:	4602      	mov	r2, r0
 80032f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032f6:	330b      	adds	r3, #11
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	461a      	mov	r2, r3
 80032fc:	4621      	mov	r1, r4
 80032fe:	4887      	ldr	r0, [pc, #540]	; (800351c <sendGSMCommand+0xc3c>)
 8003300:	f011 fc6e 	bl	8014be0 <strncpy>
								token=strtok(NULL,"+");
 8003304:	4986      	ldr	r1, [pc, #536]	; (8003520 <sendGSMCommand+0xc40>)
 8003306:	2000      	movs	r0, #0
 8003308:	f012 fac8 	bl	801589c <strtok>
 800330c:	6378      	str	r0, [r7, #52]	; 0x34
							while(token != NULL)
 800330e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003310:	2b00      	cmp	r3, #0
 8003312:	f47f af22 	bne.w	800315a <sendGSMCommand+0x87a>
							if(!(strcmp(gsmInstance.u32GSMMQTTResponseCode,"QMTPUBEX: 0,0")))
 8003316:	4983      	ldr	r1, [pc, #524]	; (8003524 <sendGSMCommand+0xc44>)
 8003318:	4883      	ldr	r0, [pc, #524]	; (8003528 <sendGSMCommand+0xc48>)
 800331a:	f7fd fb59 	bl	80009d0 <strcmp>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d102      	bne.n	800332a <sendGSMCommand+0xa4a>
								u8MqqtResponseFlag = TRUE;
 8003324:	4b81      	ldr	r3, [pc, #516]	; (800352c <sendGSMCommand+0xc4c>)
 8003326:	2201      	movs	r2, #1
 8003328:	701a      	strb	r2, [r3, #0]
							switch(u8MqqtResponseFlag)
 800332a:	4b80      	ldr	r3, [pc, #512]	; (800352c <sendGSMCommand+0xc4c>)
 800332c:	781b      	ldrb	r3, [r3, #0]
 800332e:	2b01      	cmp	r3, #1
 8003330:	d15a      	bne.n	80033e8 <sendGSMCommand+0xb08>
									u8MqqtResponseFlag = FALSE;
 8003332:	4b7e      	ldr	r3, [pc, #504]	; (800352c <sendGSMCommand+0xc4c>)
 8003334:	2200      	movs	r2, #0
 8003336:	701a      	strb	r2, [r3, #0]
									g_u8HttpConEstablishedFlag = 1;
 8003338:	4b7d      	ldr	r3, [pc, #500]	; (8003530 <sendGSMCommand+0xc50>)
 800333a:	2201      	movs	r2, #1
 800333c:	701a      	strb	r2, [r3, #0]
									if(g_u8PayloadType == PAYLOD_TYPE_LIVE)
 800333e:	4b7d      	ldr	r3, [pc, #500]	; (8003534 <sendGSMCommand+0xc54>)
 8003340:	781b      	ldrb	r3, [r3, #0]
 8003342:	2b01      	cmp	r3, #1
 8003344:	d103      	bne.n	800334e <sendGSMCommand+0xa6e>
										Queue_LiveDequeue(&gsmLivePayload);
 8003346:	487c      	ldr	r0, [pc, #496]	; (8003538 <sendGSMCommand+0xc58>)
 8003348:	f002 fe22 	bl	8005f90 <Queue_LiveDequeue>
 800334c:	e006      	b.n	800335c <sendGSMCommand+0xa7c>
									else if(g_u8PayloadType == PAYLOD_TYPE_BUFF)
 800334e:	4b79      	ldr	r3, [pc, #484]	; (8003534 <sendGSMCommand+0xc54>)
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	2b02      	cmp	r3, #2
 8003354:	d102      	bne.n	800335c <sendGSMCommand+0xa7c>
										Queue_BuffDequeue(&gsmBuffPayload);
 8003356:	4879      	ldr	r0, [pc, #484]	; (800353c <sendGSMCommand+0xc5c>)
 8003358:	f002 fee9 	bl	800612e <Queue_BuffDequeue>
									if(g_u8PayloadType == PAYLOD_TYPE_BUFF)
 800335c:	4b75      	ldr	r3, [pc, #468]	; (8003534 <sendGSMCommand+0xc54>)
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	2b02      	cmp	r3, #2
 8003362:	d120      	bne.n	80033a6 <sendGSMCommand+0xac6>
										if(FlashStr.bitFlagSFlashData == 1)
 8003364:	4b76      	ldr	r3, [pc, #472]	; (8003540 <sendGSMCommand+0xc60>)
 8003366:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800336a:	3318      	adds	r3, #24
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d019      	beq.n	80033a6 <sendGSMCommand+0xac6>
											FlashStr.u8BufferQueueCounts--;
 8003372:	4b73      	ldr	r3, [pc, #460]	; (8003540 <sendGSMCommand+0xc60>)
 8003374:	7d1b      	ldrb	r3, [r3, #20]
 8003376:	3b01      	subs	r3, #1
 8003378:	b2da      	uxtb	r2, r3
 800337a:	4b71      	ldr	r3, [pc, #452]	; (8003540 <sendGSMCommand+0xc60>)
 800337c:	751a      	strb	r2, [r3, #20]
											if(FlashStr.u8BufferQueueCounts == 0)
 800337e:	4b70      	ldr	r3, [pc, #448]	; (8003540 <sendGSMCommand+0xc60>)
 8003380:	7d1b      	ldrb	r3, [r3, #20]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d10f      	bne.n	80033a6 <sendGSMCommand+0xac6>
												FlashStr.bitFlagSFlashData = 0;
 8003386:	4b6e      	ldr	r3, [pc, #440]	; (8003540 <sendGSMCommand+0xc60>)
 8003388:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800338c:	3318      	adds	r3, #24
 800338e:	2200      	movs	r2, #0
 8003390:	701a      	strb	r2, [r3, #0]
												g_stEepromBuffMemAdd.u32BuffFlashWriteAddress = FlashStr.u32FlashWriteAddress;
 8003392:	4b6b      	ldr	r3, [pc, #428]	; (8003540 <sendGSMCommand+0xc60>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a6b      	ldr	r2, [pc, #428]	; (8003544 <sendGSMCommand+0xc64>)
 8003398:	6053      	str	r3, [r2, #4]
												g_stEepromBuffMemAdd.u32BuffFlashReadAddress =FlashStr.u32FlashReadAddress;
 800339a:	4b69      	ldr	r3, [pc, #420]	; (8003540 <sendGSMCommand+0xc60>)
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	4a69      	ldr	r2, [pc, #420]	; (8003544 <sendGSMCommand+0xc64>)
 80033a0:	6013      	str	r3, [r2, #0]
												EEPROM_WriteBuffMemData();
 80033a2:	f7fe fabf 	bl	8001924 <EEPROM_WriteBuffMemData>
									g_u8PayloadType = 0;
 80033a6:	4b63      	ldr	r3, [pc, #396]	; (8003534 <sendGSMCommand+0xc54>)
 80033a8:	2200      	movs	r2, #0
 80033aa:	701a      	strb	r2, [r3, #0]
								gu8HttpPayloadFlag = 0;
 80033ac:	4b66      	ldr	r3, [pc, #408]	; (8003548 <sendGSMCommand+0xc68>)
 80033ae:	2200      	movs	r2, #0
 80033b0:	701a      	strb	r2, [r3, #0]
								gu8HttpPayloadFlag = 0;
 80033b2:	4b65      	ldr	r3, [pc, #404]	; (8003548 <sendGSMCommand+0xc68>)
 80033b4:	2200      	movs	r2, #0
 80033b6:	701a      	strb	r2, [r3, #0]
								gsmInstance.u32GSMTimer = TWO_SEC; // Replace with Upload Frequency
 80033b8:	4b58      	ldr	r3, [pc, #352]	; (800351c <sendGSMCommand+0xc3c>)
 80033ba:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80033be:	f8c3 2f90 	str.w	r2, [r3, #3984]	; 0xf90
								gu8HttpPayloadFlag = 0;
 80033c2:	4b61      	ldr	r3, [pc, #388]	; (8003548 <sendGSMCommand+0xc68>)
 80033c4:	2200      	movs	r2, #0
 80033c6:	701a      	strb	r2, [r3, #0]
								gsmInstance.enmGSMCommand = enmGSMSTATE_MQTTPUBEX;
 80033c8:	4b54      	ldr	r3, [pc, #336]	; (800351c <sendGSMCommand+0xc3c>)
 80033ca:	2219      	movs	r2, #25
 80033cc:	f883 2faf 	strb.w	r2, [r3, #4015]	; 0xfaf
								gsmInstance.u8IncrementGsmState = FALSE;
 80033d0:	4b52      	ldr	r3, [pc, #328]	; (800351c <sendGSMCommand+0xc3c>)
 80033d2:	2200      	movs	r2, #0
 80033d4:	f883 2f89 	strb.w	r2, [r3, #3977]	; 0xf89
								u8LastMqttResponseCode = atoi(gsmInstance.u32GSMMQTTResponseCode);
 80033d8:	4853      	ldr	r0, [pc, #332]	; (8003528 <sendGSMCommand+0xc48>)
 80033da:	f010 fe14 	bl	8014006 <atoi>
 80033de:	4603      	mov	r3, r0
 80033e0:	461a      	mov	r2, r3
 80033e2:	4b5a      	ldr	r3, [pc, #360]	; (800354c <sendGSMCommand+0xc6c>)
 80033e4:	601a      	str	r2, [r3, #0]
								break;
 80033e6:	e02d      	b.n	8003444 <sendGSMCommand+0xb64>
									u8LastMqttResponseCode = atoi(gsmInstance.u32GSMMQTTResponseCode);
 80033e8:	484f      	ldr	r0, [pc, #316]	; (8003528 <sendGSMCommand+0xc48>)
 80033ea:	f010 fe0c 	bl	8014006 <atoi>
 80033ee:	4603      	mov	r3, r0
 80033f0:	461a      	mov	r2, r3
 80033f2:	4b56      	ldr	r3, [pc, #344]	; (800354c <sendGSMCommand+0xc6c>)
 80033f4:	601a      	str	r2, [r3, #0]
									gsmInstance.u8IllegalHttpResponseCounter++;
 80033f6:	4b49      	ldr	r3, [pc, #292]	; (800351c <sendGSMCommand+0xc3c>)
 80033f8:	f893 3f8a 	ldrb.w	r3, [r3, #3978]	; 0xf8a
 80033fc:	3301      	adds	r3, #1
 80033fe:	b2da      	uxtb	r2, r3
 8003400:	4b46      	ldr	r3, [pc, #280]	; (800351c <sendGSMCommand+0xc3c>)
 8003402:	f883 2f8a 	strb.w	r2, [r3, #3978]	; 0xf8a
									if(gsmInstance.u8IllegalHttpResponseCounter >= MAX_HTTP_ATTEMPTS)
 8003406:	4b45      	ldr	r3, [pc, #276]	; (800351c <sendGSMCommand+0xc3c>)
 8003408:	f893 3f8a 	ldrb.w	r3, [r3, #3978]	; 0xf8a
 800340c:	2b04      	cmp	r3, #4
 800340e:	d905      	bls.n	800341c <sendGSMCommand+0xb3c>
										initGSMSIM868();
 8003410:	f7fe fe80 	bl	8002114 <initGSMSIM868>
										gu8CheckSMS = TRUE;
 8003414:	4b4e      	ldr	r3, [pc, #312]	; (8003550 <sendGSMCommand+0xc70>)
 8003416:	2201      	movs	r2, #1
 8003418:	701a      	strb	r2, [r3, #0]
										break;
 800341a:	e013      	b.n	8003444 <sendGSMCommand+0xb64>
									u8LastMqttResponseCode = atoi(gsmInstance.u32GSMMQTTResponseCode);
 800341c:	4842      	ldr	r0, [pc, #264]	; (8003528 <sendGSMCommand+0xc48>)
 800341e:	f010 fdf2 	bl	8014006 <atoi>
 8003422:	4603      	mov	r3, r0
 8003424:	461a      	mov	r2, r3
 8003426:	4b49      	ldr	r3, [pc, #292]	; (800354c <sendGSMCommand+0xc6c>)
 8003428:	601a      	str	r2, [r3, #0]
									gsmInstance.enmGSMCommand = enmGSMSTATE_MQTTPUBEX;
 800342a:	4b3c      	ldr	r3, [pc, #240]	; (800351c <sendGSMCommand+0xc3c>)
 800342c:	2219      	movs	r2, #25
 800342e:	f883 2faf 	strb.w	r2, [r3, #4015]	; 0xfaf
									gsmInstance.u32GSMResponseTimer = 0;
 8003432:	4b3a      	ldr	r3, [pc, #232]	; (800351c <sendGSMCommand+0xc3c>)
 8003434:	2200      	movs	r2, #0
 8003436:	f8c3 2fa4 	str.w	r2, [r3, #4004]	; 0xfa4
									gsmInstance.u8IncrementGsmState = FALSE;
 800343a:	4b38      	ldr	r3, [pc, #224]	; (800351c <sendGSMCommand+0xc3c>)
 800343c:	2200      	movs	r2, #0
 800343e:	f883 2f89 	strb.w	r2, [r3, #3977]	; 0xf89
									break;
 8003442:	bf00      	nop
						break;
 8003444:	e19a      	b.n	800377c <sendGSMCommand+0xe9c>
							gsmInstance.u8IncrementGsmState = TRUE;
 8003446:	4b35      	ldr	r3, [pc, #212]	; (800351c <sendGSMCommand+0xc3c>)
 8003448:	2201      	movs	r2, #1
 800344a:	f883 2f89 	strb.w	r2, [r3, #3977]	; 0xf89
							break;
 800344e:	e195      	b.n	800377c <sendGSMCommand+0xe9c>
						char * strLoc = strstr((const char *)gsmInstance.as8GSM_Response_Buff
 8003450:	4940      	ldr	r1, [pc, #256]	; (8003554 <sendGSMCommand+0xc74>)
 8003452:	4841      	ldr	r0, [pc, #260]	; (8003558 <sendGSMCommand+0xc78>)
 8003454:	f011 fbd7 	bl	8014c06 <strstr>
 8003458:	61b8      	str	r0, [r7, #24]
						if(strLoc != NULL)
 800345a:	69bb      	ldr	r3, [r7, #24]
 800345c:	2b00      	cmp	r3, #0
 800345e:	f000 8092 	beq.w	8003586 <sendGSMCommand+0xca6>
							memset(gu32FotaFileSizeinBytes,0x00, strlen(gu32FotaFileSizeinBytes));
 8003462:	483e      	ldr	r0, [pc, #248]	; (800355c <sendGSMCommand+0xc7c>)
 8003464:	f7fd fabe 	bl	80009e4 <strlen>
 8003468:	4603      	mov	r3, r0
 800346a:	461a      	mov	r2, r3
 800346c:	2100      	movs	r1, #0
 800346e:	483b      	ldr	r0, [pc, #236]	; (800355c <sendGSMCommand+0xc7c>)
 8003470:	f010 fe34 	bl	80140dc <memset>
							memcpy(gu32FotaFileSizeinBytes, &strLoc[4], strlen(strtok(&strLoc[4],"\r\n")));
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	1d1c      	adds	r4, r3, #4
 8003478:	69bb      	ldr	r3, [r7, #24]
 800347a:	3304      	adds	r3, #4
 800347c:	4926      	ldr	r1, [pc, #152]	; (8003518 <sendGSMCommand+0xc38>)
 800347e:	4618      	mov	r0, r3
 8003480:	f012 fa0c 	bl	801589c <strtok>
 8003484:	4603      	mov	r3, r0
 8003486:	4618      	mov	r0, r3
 8003488:	f7fd faac 	bl	80009e4 <strlen>
 800348c:	4603      	mov	r3, r0
 800348e:	461a      	mov	r2, r3
 8003490:	4621      	mov	r1, r4
 8003492:	4832      	ldr	r0, [pc, #200]	; (800355c <sendGSMCommand+0xc7c>)
 8003494:	f010 fe14 	bl	80140c0 <memcpy>
							u32FotaFileSizeInBytes = strlen(gu32FotaFileSizeinBytes);
 8003498:	4830      	ldr	r0, [pc, #192]	; (800355c <sendGSMCommand+0xc7c>)
 800349a:	f7fd faa3 	bl	80009e4 <strlen>
 800349e:	4603      	mov	r3, r0
 80034a0:	4a2f      	ldr	r2, [pc, #188]	; (8003560 <sendGSMCommand+0xc80>)
 80034a2:	6013      	str	r3, [r2, #0]
							gsmInstance.u32FotaFileSizeBytes = atoi(gu32FotaFileSizeinBytes);
 80034a4:	482d      	ldr	r0, [pc, #180]	; (800355c <sendGSMCommand+0xc7c>)
 80034a6:	f010 fdae 	bl	8014006 <atoi>
 80034aa:	4603      	mov	r3, r0
 80034ac:	461a      	mov	r2, r3
 80034ae:	4b1b      	ldr	r3, [pc, #108]	; (800351c <sendGSMCommand+0xc3c>)
 80034b0:	f8c3 2fa0 	str.w	r2, [r3, #4000]	; 0xfa0
							if(gsmInstance.u32FotaFileSizeBytes <= (126000))// as Flash is of 128K
 80034b4:	4b19      	ldr	r3, [pc, #100]	; (800351c <sendGSMCommand+0xc3c>)
 80034b6:	f8d3 3fa0 	ldr.w	r3, [r3, #4000]	; 0xfa0
 80034ba:	4a2a      	ldr	r2, [pc, #168]	; (8003564 <sendGSMCommand+0xc84>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d855      	bhi.n	800356c <sendGSMCommand+0xc8c>
								boolAttemptFota = TRUE;
 80034c0:	4b29      	ldr	r3, [pc, #164]	; (8003568 <sendGSMCommand+0xc88>)
 80034c2:	2201      	movs	r2, #1
 80034c4:	701a      	strb	r2, [r3, #0]
								if(gsmInstance.u32FotaFileSizeBytes != 0)
 80034c6:	4b15      	ldr	r3, [pc, #84]	; (800351c <sendGSMCommand+0xc3c>)
 80034c8:	f8d3 3fa0 	ldr.w	r3, [r3, #4000]	; 0xfa0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d00a      	beq.n	80034e6 <sendGSMCommand+0xc06>
									updateHTTPReadLength(gsmInstance.u32FotaFileSizeBytes);
 80034d0:	4b12      	ldr	r3, [pc, #72]	; (800351c <sendGSMCommand+0xc3c>)
 80034d2:	f8d3 3fa0 	ldr.w	r3, [r3, #4000]	; 0xfa0
 80034d6:	4618      	mov	r0, r3
 80034d8:	f000 fc9e 	bl	8003e18 <updateHTTPReadLength>
							gsmInstance.u8IncrementGsmState = TRUE;
 80034dc:	4b0f      	ldr	r3, [pc, #60]	; (800351c <sendGSMCommand+0xc3c>)
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 2f89 	strb.w	r2, [r3, #3977]	; 0xf89
						break;
 80034e4:	e14a      	b.n	800377c <sendGSMCommand+0xe9c>
									Diagnostic(enmDiagnostic_RX_FILE_SIZE_ERROR);
 80034e6:	2006      	movs	r0, #6
 80034e8:	f001 fee4 	bl	80052b4 <Diagnostic>
									Deinit_FOTA_Fail();
 80034ec:	f000 fd98 	bl	8004020 <Deinit_FOTA_Fail>
									break;
 80034f0:	e144      	b.n	800377c <sendGSMCommand+0xe9c>
 80034f2:	bf00      	nop
 80034f4:	08018988 	.word	0x08018988
 80034f8:	20000fb4 	.word	0x20000fb4
 80034fc:	08018990 	.word	0x08018990
 8003500:	08018998 	.word	0x08018998
 8003504:	080189a0 	.word	0x080189a0
 8003508:	20001946 	.word	0x20001946
 800350c:	080189a8 	.word	0x080189a8
 8003510:	080189b4 	.word	0x080189b4
 8003514:	080189c0 	.word	0x080189c0
 8003518:	08018930 	.word	0x08018930
 800351c:	20002b1c 	.word	0x20002b1c
 8003520:	08018974 	.word	0x08018974
 8003524:	080189cc 	.word	0x080189cc
 8003528:	20003004 	.word	0x20003004
 800352c:	20001914 	.word	0x20001914
 8003530:	200018de 	.word	0x200018de
 8003534:	20001734 	.word	0x20001734
 8003538:	20002aec 	.word	0x20002aec
 800353c:	20002abc 	.word	0x20002abc
 8003540:	20003e84 	.word	0x20003e84
 8003544:	200028c0 	.word	0x200028c0
 8003548:	20001748 	.word	0x20001748
 800354c:	200018e8 	.word	0x200018e8
 8003550:	20001749 	.word	0x20001749
 8003554:	080189dc 	.word	0x080189dc
 8003558:	20003013 	.word	0x20003013
 800355c:	20000f9c 	.word	0x20000f9c
 8003560:	20001904 	.word	0x20001904
 8003564:	0001ec30 	.word	0x0001ec30
 8003568:	200018ec 	.word	0x200018ec
								gsmInstance.u8IncrementGsmState = FALSE;
 800356c:	4bbb      	ldr	r3, [pc, #748]	; (800385c <sendGSMCommand+0xf7c>)
 800356e:	2200      	movs	r2, #0
 8003570:	f883 2f89 	strb.w	r2, [r3, #3977]	; 0xf89
								gsmInstance.enmcurrentTask = enmGSMTASK_UPLOADDATA;
 8003574:	4bb9      	ldr	r3, [pc, #740]	; (800385c <sendGSMCommand+0xf7c>)
 8003576:	2203      	movs	r2, #3
 8003578:	f883 2fae 	strb.w	r2, [r3, #4014]	; 0xfae
								gsmInstance.enmGSMCommand = enmGSMSTATE_MQTTPUBEX;
 800357c:	4bb7      	ldr	r3, [pc, #732]	; (800385c <sendGSMCommand+0xf7c>)
 800357e:	2219      	movs	r2, #25
 8003580:	f883 2faf 	strb.w	r2, [r3, #4015]	; 0xfaf
								break;
 8003584:	e0fa      	b.n	800377c <sendGSMCommand+0xe9c>
							gsmInstance.u8IncrementGsmState = FALSE;
 8003586:	4bb5      	ldr	r3, [pc, #724]	; (800385c <sendGSMCommand+0xf7c>)
 8003588:	2200      	movs	r2, #0
 800358a:	f883 2f89 	strb.w	r2, [r3, #3977]	; 0xf89
							gsmInstance.enmcurrentTask = enmGSMTASK_UPLOADDATA;
 800358e:	4bb3      	ldr	r3, [pc, #716]	; (800385c <sendGSMCommand+0xf7c>)
 8003590:	2203      	movs	r2, #3
 8003592:	f883 2fae 	strb.w	r2, [r3, #4014]	; 0xfae
							gsmInstance.enmGSMCommand = enmGSMSTATE_MQTTPUBEX;
 8003596:	4bb1      	ldr	r3, [pc, #708]	; (800385c <sendGSMCommand+0xf7c>)
 8003598:	2219      	movs	r2, #25
 800359a:	f883 2faf 	strb.w	r2, [r3, #4015]	; 0xfaf
						break;
 800359e:	e0ed      	b.n	800377c <sendGSMCommand+0xe9c>
						char * strLoc = strstr((const char *)gsmInstance.as8GSM_Response_Buff,(const char *)"206,");
 80035a0:	49af      	ldr	r1, [pc, #700]	; (8003860 <sendGSMCommand+0xf80>)
 80035a2:	48b0      	ldr	r0, [pc, #704]	; (8003864 <sendGSMCommand+0xf84>)
 80035a4:	f011 fb2f 	bl	8014c06 <strstr>
 80035a8:	61f8      	str	r0, [r7, #28]
						if(strLoc != NULL)
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d004      	beq.n	80035ba <sendGSMCommand+0xcda>
							gsmInstance.u8IncrementGsmState = TRUE;
 80035b0:	4baa      	ldr	r3, [pc, #680]	; (800385c <sendGSMCommand+0xf7c>)
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 2f89 	strb.w	r2, [r3, #3977]	; 0xf89
							break;
 80035b8:	e0e0      	b.n	800377c <sendGSMCommand+0xe9c>
							gsmInstance.u8IncrementGsmState = FALSE;
 80035ba:	4ba8      	ldr	r3, [pc, #672]	; (800385c <sendGSMCommand+0xf7c>)
 80035bc:	2200      	movs	r2, #0
 80035be:	f883 2f89 	strb.w	r2, [r3, #3977]	; 0xf89
							gsmInstance.enmcurrentTask = enmGSMTASK_UPLOADDATA;
 80035c2:	4ba6      	ldr	r3, [pc, #664]	; (800385c <sendGSMCommand+0xf7c>)
 80035c4:	2203      	movs	r2, #3
 80035c6:	f883 2fae 	strb.w	r2, [r3, #4014]	; 0xfae
							gsmInstance.enmGSMCommand = enmGSMSTATE_MQTTPUBEX;
 80035ca:	4ba4      	ldr	r3, [pc, #656]	; (800385c <sendGSMCommand+0xf7c>)
 80035cc:	2219      	movs	r2, #25
 80035ce:	f883 2faf 	strb.w	r2, [r3, #4015]	; 0xfaf
							break;
 80035d2:	e0d3      	b.n	800377c <sendGSMCommand+0xe9c>
						if(boolAttemptFota == TRUE)
 80035d4:	4ba4      	ldr	r3, [pc, #656]	; (8003868 <sendGSMCommand+0xf88>)
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	f000 80bc 	beq.w	8003756 <sendGSMCommand+0xe76>
							HAL_GPIO_TogglePin(GPS_LED_GPIO_Port, GPS_LED_Pin);
 80035de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80035e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80035e6:	f00a f8d5 	bl	800d794 <HAL_GPIO_TogglePin>
							if(u32FotaFileReadComplete == 0)
 80035ea:	4ba0      	ldr	r3, [pc, #640]	; (800386c <sendGSMCommand+0xf8c>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d171      	bne.n	80036d6 <sendGSMCommand+0xdf6>
								memset(gau8FotaData,0x00,sizeof(gau8FotaData));
 80035f2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80035f6:	2100      	movs	r1, #0
 80035f8:	489d      	ldr	r0, [pc, #628]	; (8003870 <sendGSMCommand+0xf90>)
 80035fa:	f010 fd6f 	bl	80140dc <memset>
								memcpy(gau8FotaData,(const char *)&gsmInstance.as8GSM_Response_Buff[11],2000);
 80035fe:	4a9c      	ldr	r2, [pc, #624]	; (8003870 <sendGSMCommand+0xf90>)
 8003600:	4b96      	ldr	r3, [pc, #600]	; (800385c <sendGSMCommand+0xf7c>)
 8003602:	4610      	mov	r0, r2
 8003604:	f203 5302 	addw	r3, r3, #1282	; 0x502
 8003608:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800360c:	4619      	mov	r1, r3
 800360e:	f010 fd57 	bl	80140c0 <memcpy>
								if(u32MemoryWriteCycle == FALSE)
 8003612:	4b98      	ldr	r3, [pc, #608]	; (8003874 <sendGSMCommand+0xf94>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d136      	bne.n	8003688 <sendGSMCommand+0xda8>
									FLASH_If_Init();
 800361a:	f004 ffd7 	bl	80085cc <FLASH_If_Init>
									if(FLASH_If_Erase(0,getNewFirmwareStorageLocation()) != FLASHIF_ERASE_OK)
 800361e:	f005 f951 	bl	80088c4 <getNewFirmwareStorageLocation>
 8003622:	4603      	mov	r3, r0
 8003624:	4619      	mov	r1, r3
 8003626:	2000      	movs	r0, #0
 8003628:	f005 f8d2 	bl	80087d0 <FLASH_If_Erase>
 800362c:	4603      	mov	r3, r0
 800362e:	2b01      	cmp	r3, #1
 8003630:	d005      	beq.n	800363e <sendGSMCommand+0xd5e>
										Diagnostic(enmDiagnostic_FLASH_ERRASE_ERROR);
 8003632:	2008      	movs	r0, #8
 8003634:	f001 fe3e 	bl	80052b4 <Diagnostic>
										Deinit_FOTA_Fail();
 8003638:	f000 fcf2 	bl	8004020 <Deinit_FOTA_Fail>
										break;
 800363c:	e09e      	b.n	800377c <sendGSMCommand+0xe9c>
									u32FlashMemoryWriteStatus = WriteDatatoFlash((uint8_t *)gau8FotaData,1);
 800363e:	2101      	movs	r1, #1
 8003640:	488b      	ldr	r0, [pc, #556]	; (8003870 <sendGSMCommand+0xf90>)
 8003642:	f004 ffd5 	bl	80085f0 <WriteDatatoFlash>
 8003646:	4603      	mov	r3, r0
 8003648:	4a8b      	ldr	r2, [pc, #556]	; (8003878 <sendGSMCommand+0xf98>)
 800364a:	6013      	str	r3, [r2, #0]
									if(u32FlashMemoryWriteStatus == SUCCESS)
 800364c:	4b8a      	ldr	r3, [pc, #552]	; (8003878 <sendGSMCommand+0xf98>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	2b01      	cmp	r3, #1
 8003652:	d113      	bne.n	800367c <sendGSMCommand+0xd9c>
										u32MemoryWriteCycle = TRUE;
 8003654:	4b87      	ldr	r3, [pc, #540]	; (8003874 <sendGSMCommand+0xf94>)
 8003656:	2201      	movs	r2, #1
 8003658:	601a      	str	r2, [r3, #0]
										updateHTTPReadLength(gsmInstance.u32FotaFileSizeBytes);
 800365a:	4b80      	ldr	r3, [pc, #512]	; (800385c <sendGSMCommand+0xf7c>)
 800365c:	f8d3 3fa0 	ldr.w	r3, [r3, #4000]	; 0xfa0
 8003660:	4618      	mov	r0, r3
 8003662:	f000 fbd9 	bl	8003e18 <updateHTTPReadLength>
										memset((char *)gsmInstance.as8GSM_Response_Buff, GSM_ARRAY_INIT_CHAR,(GSM_RESPONSE_ARRAY_SIZE * sizeof(uint8_t)));
 8003666:	f640 228c 	movw	r2, #2700	; 0xa8c
 800366a:	2100      	movs	r1, #0
 800366c:	487d      	ldr	r0, [pc, #500]	; (8003864 <sendGSMCommand+0xf84>)
 800366e:	f010 fd35 	bl	80140dc <memset>
										gsmInstance.enmGSMCommand = enmGSMSTATE_ATQHTTPGETEX;
 8003672:	4b7a      	ldr	r3, [pc, #488]	; (800385c <sendGSMCommand+0xf7c>)
 8003674:	221e      	movs	r2, #30
 8003676:	f883 2faf 	strb.w	r2, [r3, #4015]	; 0xfaf
 800367a:	e027      	b.n	80036cc <sendGSMCommand+0xdec>
										Diagnostic(enmDiagnostic_FLASH_Write_ERROR);
 800367c:	2009      	movs	r0, #9
 800367e:	f001 fe19 	bl	80052b4 <Diagnostic>
										Deinit_FOTA_Fail();
 8003682:	f000 fccd 	bl	8004020 <Deinit_FOTA_Fail>
										break;
 8003686:	e079      	b.n	800377c <sendGSMCommand+0xe9c>
									u32FlashMemoryWriteStatus = WriteDatatoFlash((uint8_t *)gau8FotaData,0);
 8003688:	2100      	movs	r1, #0
 800368a:	4879      	ldr	r0, [pc, #484]	; (8003870 <sendGSMCommand+0xf90>)
 800368c:	f004 ffb0 	bl	80085f0 <WriteDatatoFlash>
 8003690:	4603      	mov	r3, r0
 8003692:	4a79      	ldr	r2, [pc, #484]	; (8003878 <sendGSMCommand+0xf98>)
 8003694:	6013      	str	r3, [r2, #0]
									if(u32FlashMemoryWriteStatus == SUCCESS)
 8003696:	4b78      	ldr	r3, [pc, #480]	; (8003878 <sendGSMCommand+0xf98>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	2b01      	cmp	r3, #1
 800369c:	d110      	bne.n	80036c0 <sendGSMCommand+0xde0>
										updateHTTPReadLength(gsmInstance.u32FotaFileSizeBytes);
 800369e:	4b6f      	ldr	r3, [pc, #444]	; (800385c <sendGSMCommand+0xf7c>)
 80036a0:	f8d3 3fa0 	ldr.w	r3, [r3, #4000]	; 0xfa0
 80036a4:	4618      	mov	r0, r3
 80036a6:	f000 fbb7 	bl	8003e18 <updateHTTPReadLength>
										memset((char *)gsmInstance.as8GSM_Response_Buff, GSM_ARRAY_INIT_CHAR,(GSM_RESPONSE_ARRAY_SIZE * sizeof(uint8_t)));
 80036aa:	f640 228c 	movw	r2, #2700	; 0xa8c
 80036ae:	2100      	movs	r1, #0
 80036b0:	486c      	ldr	r0, [pc, #432]	; (8003864 <sendGSMCommand+0xf84>)
 80036b2:	f010 fd13 	bl	80140dc <memset>
										gsmInstance.enmGSMCommand = enmGSMSTATE_ATQHTTPGETEX;
 80036b6:	4b69      	ldr	r3, [pc, #420]	; (800385c <sendGSMCommand+0xf7c>)
 80036b8:	221e      	movs	r2, #30
 80036ba:	f883 2faf 	strb.w	r2, [r3, #4015]	; 0xfaf
 80036be:	e005      	b.n	80036cc <sendGSMCommand+0xdec>
										Diagnostic(enmDiagnostic_FLASH_Write_ERROR);
 80036c0:	2009      	movs	r0, #9
 80036c2:	f001 fdf7 	bl	80052b4 <Diagnostic>
										Deinit_FOTA_Fail();
 80036c6:	f000 fcab 	bl	8004020 <Deinit_FOTA_Fail>
										break;
 80036ca:	e057      	b.n	800377c <sendGSMCommand+0xe9c>
								gsmInstance.u8IncrementGsmState = FALSE;
 80036cc:	4b63      	ldr	r3, [pc, #396]	; (800385c <sendGSMCommand+0xf7c>)
 80036ce:	2200      	movs	r2, #0
 80036d0:	f883 2f89 	strb.w	r2, [r3, #3977]	; 0xf89
					break;
 80036d4:	e051      	b.n	800377a <sendGSMCommand+0xe9a>
							else if(u32FotaFileReadComplete == 1)
 80036d6:	4b65      	ldr	r3, [pc, #404]	; (800386c <sendGSMCommand+0xf8c>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d14d      	bne.n	800377a <sendGSMCommand+0xe9a>
								if(u32MemoryWriteCycle == FALSE)
 80036de:	4b65      	ldr	r3, [pc, #404]	; (8003874 <sendGSMCommand+0xf94>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d101      	bne.n	80036ea <sendGSMCommand+0xe0a>
									FLASH_If_Init();
 80036e6:	f004 ff71 	bl	80085cc <FLASH_If_Init>
								u32FlashMemoryWriteStatus = WriteDatatoFlash((uint8_t *)gau8FotaData,0);
 80036ea:	2100      	movs	r1, #0
 80036ec:	4860      	ldr	r0, [pc, #384]	; (8003870 <sendGSMCommand+0xf90>)
 80036ee:	f004 ff7f 	bl	80085f0 <WriteDatatoFlash>
 80036f2:	4603      	mov	r3, r0
 80036f4:	4a60      	ldr	r2, [pc, #384]	; (8003878 <sendGSMCommand+0xf98>)
 80036f6:	6013      	str	r3, [r2, #0]
								if(u32FlashMemoryWriteStatus == SUCCESS)
 80036f8:	4b5f      	ldr	r3, [pc, #380]	; (8003878 <sendGSMCommand+0xf98>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d124      	bne.n	800374a <sendGSMCommand+0xe6a>
									if(flashWriteBootSection(getNewFirmwareStorageLocation()) == 0)
 8003700:	f005 f8e0 	bl	80088c4 <getNewFirmwareStorageLocation>
 8003704:	4603      	mov	r3, r0
 8003706:	4618      	mov	r0, r3
 8003708:	f005 f8fa 	bl	8008900 <flashWriteBootSection>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d115      	bne.n	800373e <sendGSMCommand+0xe5e>
										boolAttemptFota =  FALSE;
 8003712:	4b55      	ldr	r3, [pc, #340]	; (8003868 <sendGSMCommand+0xf88>)
 8003714:	2200      	movs	r2, #0
 8003716:	701a      	strb	r2, [r3, #0]
										if(u32MemoryWriteCycle == TRUE)
 8003718:	4b56      	ldr	r3, [pc, #344]	; (8003874 <sendGSMCommand+0xf94>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2b01      	cmp	r3, #1
 800371e:	d102      	bne.n	8003726 <sendGSMCommand+0xe46>
											u32MemoryWriteCycle = FALSE;
 8003720:	4b54      	ldr	r3, [pc, #336]	; (8003874 <sendGSMCommand+0xf94>)
 8003722:	2200      	movs	r2, #0
 8003724:	601a      	str	r2, [r3, #0]
										Diagnostic(enmDiagnostic_SUCCESS_OK);
 8003726:	2000      	movs	r0, #0
 8003728:	f001 fdc4 	bl	80052b4 <Diagnostic>
										boolFOTACompleteFlag = TRUE;
 800372c:	4b53      	ldr	r3, [pc, #332]	; (800387c <sendGSMCommand+0xf9c>)
 800372e:	2201      	movs	r2, #1
 8003730:	701a      	strb	r2, [r3, #0]
										Deinit_FOTA_Fail();
 8003732:	f000 fc75 	bl	8004020 <Deinit_FOTA_Fail>
								u32MemoryWriteCycle = TRUE;
 8003736:	4b4f      	ldr	r3, [pc, #316]	; (8003874 <sendGSMCommand+0xf94>)
 8003738:	2201      	movs	r2, #1
 800373a:	601a      	str	r2, [r3, #0]
					break;
 800373c:	e01d      	b.n	800377a <sendGSMCommand+0xe9a>
										Diagnostic(enmDiagnostic_FLASH_Write_ERROR);
 800373e:	2009      	movs	r0, #9
 8003740:	f001 fdb8 	bl	80052b4 <Diagnostic>
										Deinit_FOTA_Fail();
 8003744:	f000 fc6c 	bl	8004020 <Deinit_FOTA_Fail>
										break;
 8003748:	e018      	b.n	800377c <sendGSMCommand+0xe9c>
									Diagnostic(enmDiagnostic_FLASH_Write_ERROR);
 800374a:	2009      	movs	r0, #9
 800374c:	f001 fdb2 	bl	80052b4 <Diagnostic>
									Deinit_FOTA_Fail();
 8003750:	f000 fc66 	bl	8004020 <Deinit_FOTA_Fail>
									break;
 8003754:	e012      	b.n	800377c <sendGSMCommand+0xe9c>
							HAL_GPIO_WritePin(GPS_LED_GPIO_Port, GPS_LED_Pin, GPIO_PIN_RESET);
 8003756:	2200      	movs	r2, #0
 8003758:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800375c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003760:	f009 ffe8 	bl	800d734 <HAL_GPIO_WritePin>
					break;
 8003764:	e009      	b.n	800377a <sendGSMCommand+0xe9a>
							HAL_GPIO_WritePin(GPS_LED_GPIO_Port, GPS_LED_Pin, GPIO_PIN_RESET);
 8003766:	2200      	movs	r2, #0
 8003768:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800376c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003770:	f009 ffe0 	bl	800d734 <HAL_GPIO_WritePin>
							break;
 8003774:	e002      	b.n	800377c <sendGSMCommand+0xe9c>
						break;
 8003776:	bf00      	nop
 8003778:	e000      	b.n	800377c <sendGSMCommand+0xe9c>
					break;
 800377a:	bf00      	nop
					gsmInstance.u8GSM_Response_Character_Counter = 0;
 800377c:	4b37      	ldr	r3, [pc, #220]	; (800385c <sendGSMCommand+0xf7c>)
 800377e:	2200      	movs	r2, #0
 8003780:	f8c3 2fa8 	str.w	r2, [r3, #4008]	; 0xfa8
					gsmInstance.enmGSMCommandState = enmGSM_CMDSEND;
 8003784:	4b35      	ldr	r3, [pc, #212]	; (800385c <sendGSMCommand+0xf7c>)
 8003786:	2201      	movs	r2, #1
 8003788:	f883 2fad 	strb.w	r2, [r3, #4013]	; 0xfad
					gsmInstance.enmGSMCommandResponseState = enmGSM_SENDCMD;
 800378c:	4b33      	ldr	r3, [pc, #204]	; (800385c <sendGSMCommand+0xf7c>)
 800378e:	2200      	movs	r2, #0
 8003790:	f883 2fac 	strb.w	r2, [r3, #4012]	; 0xfac
					gsmInstance.u8gsmRetryCount = GSM_MAX_RETRY;
 8003794:	4b31      	ldr	r3, [pc, #196]	; (800385c <sendGSMCommand+0xf7c>)
 8003796:	2205      	movs	r2, #5
 8003798:	f883 2f85 	strb.w	r2, [r3, #3973]	; 0xf85
					gsmInstance.u32GSMResponseTimer = 0;
 800379c:	4b2f      	ldr	r3, [pc, #188]	; (800385c <sendGSMCommand+0xf7c>)
 800379e:	2200      	movs	r2, #0
 80037a0:	f8c3 2fa4 	str.w	r2, [r3, #4004]	; 0xfa4
					u8GSMCharRcv = 0;
 80037a4:	4b36      	ldr	r3, [pc, #216]	; (8003880 <sendGSMCommand+0xfa0>)
 80037a6:	2200      	movs	r2, #0
 80037a8:	601a      	str	r2, [r3, #0]
					gsmInstance.u8GSM_Response_Character_Counter = 0;
 80037aa:	4b2c      	ldr	r3, [pc, #176]	; (800385c <sendGSMCommand+0xf7c>)
 80037ac:	2200      	movs	r2, #0
 80037ae:	f8c3 2fa8 	str.w	r2, [r3, #4008]	; 0xfa8
					if(gsmInstance.enmGSMCommand != enmGSMSTATE_READFILE)
 80037b2:	4b2a      	ldr	r3, [pc, #168]	; (800385c <sendGSMCommand+0xf7c>)
 80037b4:	f893 3faf 	ldrb.w	r3, [r3, #4015]	; 0xfaf
 80037b8:	2b1f      	cmp	r3, #31
 80037ba:	d005      	beq.n	80037c8 <sendGSMCommand+0xee8>
						memset((char *)gsmInstance.as8GSM_Response_Buff, GSM_ARRAY_INIT_CHAR,(GSM_RESPONSE_ARRAY_SIZE * sizeof(uint8_t))); /* Clear Response Buffer */
 80037bc:	f640 228c 	movw	r2, #2700	; 0xa8c
 80037c0:	2100      	movs	r1, #0
 80037c2:	4828      	ldr	r0, [pc, #160]	; (8003864 <sendGSMCommand+0xf84>)
 80037c4:	f010 fc8a 	bl	80140dc <memset>
					if(gsmInstance.u8IncrementGsmState == TRUE)
 80037c8:	4b24      	ldr	r3, [pc, #144]	; (800385c <sendGSMCommand+0xf7c>)
 80037ca:	f893 3f89 	ldrb.w	r3, [r3, #3977]	; 0xf89
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d175      	bne.n	80038be <sendGSMCommand+0xfde>
							gsmInstance.u32GSMTimer = ONE_SEC;
 80037d2:	4b22      	ldr	r3, [pc, #136]	; (800385c <sendGSMCommand+0xf7c>)
 80037d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80037d8:	f8c3 2f90 	str.w	r2, [r3, #3984]	; 0xf90
						gsmInstance.enmGSMCommand++;
 80037dc:	4b1f      	ldr	r3, [pc, #124]	; (800385c <sendGSMCommand+0xf7c>)
 80037de:	f893 3faf 	ldrb.w	r3, [r3, #4015]	; 0xfaf
 80037e2:	3301      	adds	r3, #1
 80037e4:	b2da      	uxtb	r2, r3
 80037e6:	4b1d      	ldr	r3, [pc, #116]	; (800385c <sendGSMCommand+0xf7c>)
 80037e8:	f883 2faf 	strb.w	r2, [r3, #4015]	; 0xfaf
			{
 80037ec:	e067      	b.n	80038be <sendGSMCommand+0xfde>
					gsmInstance.u8GSM_Response_Character_Counter = 0;
 80037ee:	4b1b      	ldr	r3, [pc, #108]	; (800385c <sendGSMCommand+0xf7c>)
 80037f0:	2200      	movs	r2, #0
 80037f2:	f8c3 2fa8 	str.w	r2, [r3, #4008]	; 0xfa8
					gsmInstance.enmGSMCommandResponseState = enmGSM_CMDSEND;//enmGSM_SENDCMD;
 80037f6:	4b19      	ldr	r3, [pc, #100]	; (800385c <sendGSMCommand+0xf7c>)
 80037f8:	2201      	movs	r2, #1
 80037fa:	f883 2fac 	strb.w	r2, [r3, #4012]	; 0xfac
					memset((char *)gsmInstance.as8GSM_Response_Buff, GSM_ARRAY_INIT_CHAR,(GSM_RESPONSE_ARRAY_SIZE * sizeof(uint8_t))); /* Clear Response Buffer */
 80037fe:	f640 228c 	movw	r2, #2700	; 0xa8c
 8003802:	2100      	movs	r1, #0
 8003804:	4817      	ldr	r0, [pc, #92]	; (8003864 <sendGSMCommand+0xf84>)
 8003806:	f010 fc69 	bl	80140dc <memset>
					u8GSMCharRcv = 0;
 800380a:	4b1d      	ldr	r3, [pc, #116]	; (8003880 <sendGSMCommand+0xfa0>)
 800380c:	2200      	movs	r2, #0
 800380e:	601a      	str	r2, [r3, #0]
			{
 8003810:	e055      	b.n	80038be <sendGSMCommand+0xfde>
			else if(gsmInstance.u32GSMResponseTimer == 0)
 8003812:	4b12      	ldr	r3, [pc, #72]	; (800385c <sendGSMCommand+0xf7c>)
 8003814:	f8d3 3fa4 	ldr.w	r3, [r3, #4004]	; 0xfa4
 8003818:	2b00      	cmp	r3, #0
 800381a:	d154      	bne.n	80038c6 <sendGSMCommand+0xfe6>
				gsmInstance.u8gsmRetryCount--;
 800381c:	4b0f      	ldr	r3, [pc, #60]	; (800385c <sendGSMCommand+0xf7c>)
 800381e:	f893 3f85 	ldrb.w	r3, [r3, #3973]	; 0xf85
 8003822:	3b01      	subs	r3, #1
 8003824:	b2da      	uxtb	r2, r3
 8003826:	4b0d      	ldr	r3, [pc, #52]	; (800385c <sendGSMCommand+0xf7c>)
 8003828:	f883 2f85 	strb.w	r2, [r3, #3973]	; 0xf85
				if(gsmInstance.u8gsmRetryCount == 0)
 800382c:	4b0b      	ldr	r3, [pc, #44]	; (800385c <sendGSMCommand+0xf7c>)
 800382e:	f893 3f85 	ldrb.w	r3, [r3, #3973]	; 0xf85
 8003832:	2b00      	cmp	r3, #0
 8003834:	d128      	bne.n	8003888 <sendGSMCommand+0xfa8>
					memset((char *)gsmInstance.as8GSM_Response_Buff, GSM_ARRAY_INIT_CHAR, (GSM_RESPONSE_ARRAY_SIZE));
 8003836:	f640 228c 	movw	r2, #2700	; 0xa8c
 800383a:	2100      	movs	r1, #0
 800383c:	4809      	ldr	r0, [pc, #36]	; (8003864 <sendGSMCommand+0xf84>)
 800383e:	f010 fc4d 	bl	80140dc <memset>
					if(gsmInstance.enmcurrentTask == enmGSMTASK_UPLOADDATA)
 8003842:	4b06      	ldr	r3, [pc, #24]	; (800385c <sendGSMCommand+0xf7c>)
 8003844:	f893 3fae 	ldrb.w	r3, [r3, #4014]	; 0xfae
 8003848:	b2db      	uxtb	r3, r3
 800384a:	2b03      	cmp	r3, #3
 800384c:	d102      	bne.n	8003854 <sendGSMCommand+0xf74>
						gu8CheckSMS = TRUE;
 800384e:	4b0d      	ldr	r3, [pc, #52]	; (8003884 <sendGSMCommand+0xfa4>)
 8003850:	2201      	movs	r2, #1
 8003852:	701a      	strb	r2, [r3, #0]
					initGSMSIM868();
 8003854:	f7fe fc5e 	bl	8002114 <initGSMSIM868>
 8003858:	e029      	b.n	80038ae <sendGSMCommand+0xfce>
 800385a:	bf00      	nop
 800385c:	20002b1c 	.word	0x20002b1c
 8003860:	080189e4 	.word	0x080189e4
 8003864:	20003013 	.word	0x20003013
 8003868:	200018ec 	.word	0x200018ec
 800386c:	200018fc 	.word	0x200018fc
 8003870:	200007cc 	.word	0x200007cc
 8003874:	20001900 	.word	0x20001900
 8003878:	2000190c 	.word	0x2000190c
 800387c:	2000173c 	.word	0x2000173c
 8003880:	2000197c 	.word	0x2000197c
 8003884:	20001749 	.word	0x20001749
					gsmInstance.enmGSMCommandState = enmGSM_CMDSEND;
 8003888:	4b11      	ldr	r3, [pc, #68]	; (80038d0 <sendGSMCommand+0xff0>)
 800388a:	2201      	movs	r2, #1
 800388c:	f883 2fad 	strb.w	r2, [r3, #4013]	; 0xfad
					gsmInstance.enmGSMCommandResponseState = enmGSM_SENDCMD;
 8003890:	4b0f      	ldr	r3, [pc, #60]	; (80038d0 <sendGSMCommand+0xff0>)
 8003892:	2200      	movs	r2, #0
 8003894:	f883 2fac 	strb.w	r2, [r3, #4012]	; 0xfac
					memset((char *)gsmInstance.as8GSM_Response_Buff, GSM_ARRAY_INIT_CHAR, (GSM_RESPONSE_ARRAY_SIZE));
 8003898:	f640 228c 	movw	r2, #2700	; 0xa8c
 800389c:	2100      	movs	r1, #0
 800389e:	480d      	ldr	r0, [pc, #52]	; (80038d4 <sendGSMCommand+0xff4>)
 80038a0:	f010 fc1c 	bl	80140dc <memset>
					gsmInstance.u32GSMTimer = ONE_SEC;
 80038a4:	4b0a      	ldr	r3, [pc, #40]	; (80038d0 <sendGSMCommand+0xff0>)
 80038a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80038aa:	f8c3 2f90 	str.w	r2, [r3, #3984]	; 0xf90
				gsmInstance.u32GSMResponseTimer = 0;
 80038ae:	4b08      	ldr	r3, [pc, #32]	; (80038d0 <sendGSMCommand+0xff0>)
 80038b0:	2200      	movs	r2, #0
 80038b2:	f8c3 2fa4 	str.w	r2, [r3, #4004]	; 0xfa4
				u8GSMCharRcv = 0;
 80038b6:	4b08      	ldr	r3, [pc, #32]	; (80038d8 <sendGSMCommand+0xff8>)
 80038b8:	2200      	movs	r2, #0
 80038ba:	601a      	str	r2, [r3, #0]
			break;
 80038bc:	e003      	b.n	80038c6 <sendGSMCommand+0xfe6>
			{
 80038be:	bf00      	nop
			break;
 80038c0:	e001      	b.n	80038c6 <sendGSMCommand+0xfe6>
			break;
 80038c2:	bf00      	nop
 80038c4:	e000      	b.n	80038c8 <sendGSMCommand+0xfe8>
			break;
 80038c6:	bf00      	nop
}
 80038c8:	bf00      	nop
 80038ca:	3744      	adds	r7, #68	; 0x44
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd90      	pop	{r4, r7, pc}
 80038d0:	20002b1c 	.word	0x20002b1c
 80038d4:	20003013 	.word	0x20003013
 80038d8:	2000197c 	.word	0x2000197c

080038dc <updateHttpDataLength>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
void updateHttpDataLength()
{
 80038dc:	b5b0      	push	{r4, r5, r7, lr}
 80038de:	b088      	sub	sp, #32
 80038e0:	af00      	add	r7, sp, #0
	char* pDignosticPacket = NULL;
 80038e2:	2300      	movs	r3, #0
 80038e4:	61bb      	str	r3, [r7, #24]
	if((Queue_IsLiveQueueEmpty(&gsmLivePayload) == FALSE )&& (gsmLivePayload.data[gsmLivePayload.tail] != NULL))
 80038e6:	489d      	ldr	r0, [pc, #628]	; (8003b5c <updateHttpDataLength+0x280>)
 80038e8:	f002 fbb3 	bl	8006052 <Queue_IsLiveQueueEmpty>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d113      	bne.n	800391a <updateHttpDataLength+0x3e>
 80038f2:	4b9a      	ldr	r3, [pc, #616]	; (8003b5c <updateHttpDataLength+0x280>)
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	4a99      	ldr	r2, [pc, #612]	; (8003b5c <updateHttpDataLength+0x280>)
 80038f8:	3302      	adds	r3, #2
 80038fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d00b      	beq.n	800391a <updateHttpDataLength+0x3e>
		{
			g_u8PayloadType = PAYLOD_TYPE_LIVE;
 8003902:	4b97      	ldr	r3, [pc, #604]	; (8003b60 <updateHttpDataLength+0x284>)
 8003904:	2201      	movs	r2, #1
 8003906:	701a      	strb	r2, [r3, #0]
			tempdata = gsmLivePayload.data[gsmLivePayload.tail];
 8003908:	4b94      	ldr	r3, [pc, #592]	; (8003b5c <updateHttpDataLength+0x280>)
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	4a93      	ldr	r2, [pc, #588]	; (8003b5c <updateHttpDataLength+0x280>)
 800390e:	3302      	adds	r3, #2
 8003910:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003914:	4a93      	ldr	r2, [pc, #588]	; (8003b64 <updateHttpDataLength+0x288>)
 8003916:	6013      	str	r3, [r2, #0]
 8003918:	e018      	b.n	800394c <updateHttpDataLength+0x70>
		}
		else if((Queue_IsBuffQueueEmpty(&gsmBuffPayload) == FALSE )&& (gsmBuffPayload.data[gsmBuffPayload.tail] != NULL))
 800391a:	4893      	ldr	r0, [pc, #588]	; (8003b68 <updateHttpDataLength+0x28c>)
 800391c:	f002 fc68 	bl	80061f0 <Queue_IsBuffQueueEmpty>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d112      	bne.n	800394c <updateHttpDataLength+0x70>
 8003926:	4b90      	ldr	r3, [pc, #576]	; (8003b68 <updateHttpDataLength+0x28c>)
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	4a8f      	ldr	r2, [pc, #572]	; (8003b68 <updateHttpDataLength+0x28c>)
 800392c:	3302      	adds	r3, #2
 800392e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d00a      	beq.n	800394c <updateHttpDataLength+0x70>
		{
			g_u8PayloadType = PAYLOD_TYPE_BUFF;
 8003936:	4b8a      	ldr	r3, [pc, #552]	; (8003b60 <updateHttpDataLength+0x284>)
 8003938:	2202      	movs	r2, #2
 800393a:	701a      	strb	r2, [r3, #0]
			tempdata = gsmBuffPayload.data[gsmBuffPayload.tail];
 800393c:	4b8a      	ldr	r3, [pc, #552]	; (8003b68 <updateHttpDataLength+0x28c>)
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	4a89      	ldr	r2, [pc, #548]	; (8003b68 <updateHttpDataLength+0x28c>)
 8003942:	3302      	adds	r3, #2
 8003944:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003948:	4a86      	ldr	r2, [pc, #536]	; (8003b64 <updateHttpDataLength+0x288>)
 800394a:	6013      	str	r3, [r2, #0]
		}

		uint32_t payloadLength;
		//= strlen(tempdata);
		payloadLength = strlen(tempdata);
 800394c:	4b85      	ldr	r3, [pc, #532]	; (8003b64 <updateHttpDataLength+0x288>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4618      	mov	r0, r3
 8003952:	f7fd f847 	bl	80009e4 <strlen>
 8003956:	61f8      	str	r0, [r7, #28]
		if(payloadLength == 0 )
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d103      	bne.n	8003966 <updateHttpDataLength+0x8a>
		{
			payloadLength = strlen(g_u8PaylodLenMsgBuff);/*PAYLOAD LENGTH MISSMATCHED*/
 800395e:	4883      	ldr	r0, [pc, #524]	; (8003b6c <updateHttpDataLength+0x290>)
 8003960:	f7fd f840 	bl	80009e4 <strlen>
 8003964:	61f8      	str	r0, [r7, #28]
		}


//		char buffer[payloadLength];
		char PUBTopic[15] = "";
 8003966:	2300      	movs	r3, #0
 8003968:	603b      	str	r3, [r7, #0]
 800396a:	1d3b      	adds	r3, r7, #4
 800396c:	2200      	movs	r2, #0
 800396e:	601a      	str	r2, [r3, #0]
 8003970:	605a      	str	r2, [r3, #4]
 8003972:	f8c3 2007 	str.w	r2, [r3, #7]
		char *strLoc = NULL,*strLoc1 = NULL;
 8003976:	2300      	movs	r3, #0
 8003978:	617b      	str	r3, [r7, #20]
 800397a:	2300      	movs	r3, #0
 800397c:	613b      	str	r3, [r7, #16]
		uint8_t len = 0;
 800397e:	2300      	movs	r3, #0
 8003980:	73fb      	strb	r3, [r7, #15]
		memset(buffer, 0x00, (6 * sizeof(char))); /* Clear Response Buffer */
 8003982:	2206      	movs	r2, #6
 8003984:	2100      	movs	r1, #0
 8003986:	487a      	ldr	r0, [pc, #488]	; (8003b70 <updateHttpDataLength+0x294>)
 8003988:	f010 fba8 	bl	80140dc <memset>
		/*MQTT*/

		memset(gau8GSM_ATQMTPUBEX, 0x00, ( 250 * sizeof(char)));
 800398c:	22fa      	movs	r2, #250	; 0xfa
 800398e:	2100      	movs	r1, #0
 8003990:	4878      	ldr	r0, [pc, #480]	; (8003b74 <updateHttpDataLength+0x298>)
 8003992:	f010 fba3 	bl	80140dc <memset>
		itoa(payloadLength,buffer,PAYLOAD_DATA_STRING_RADIX);
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	220a      	movs	r2, #10
 800399a:	4975      	ldr	r1, [pc, #468]	; (8003b70 <updateHttpDataLength+0x294>)
 800399c:	4618      	mov	r0, r3
 800399e:	f010 fb7d 	bl	801409c <itoa>
		strcpy((char *)gau8GSM_ATQMTPUBEX,"AT+QMTPUBEX=0,0,0,0,");
 80039a2:	4a74      	ldr	r2, [pc, #464]	; (8003b74 <updateHttpDataLength+0x298>)
 80039a4:	4b74      	ldr	r3, [pc, #464]	; (8003b78 <updateHttpDataLength+0x29c>)
 80039a6:	4614      	mov	r4, r2
 80039a8:	461d      	mov	r5, r3
 80039aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80039ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80039ae:	e895 0003 	ldmia.w	r5, {r0, r1}
 80039b2:	6020      	str	r0, [r4, #0]
 80039b4:	3404      	adds	r4, #4
 80039b6:	7021      	strb	r1, [r4, #0]

		strcat((char *)gau8GSM_ATQMTPUBEX,(char *)"\"");
 80039b8:	486e      	ldr	r0, [pc, #440]	; (8003b74 <updateHttpDataLength+0x298>)
 80039ba:	f7fd f813 	bl	80009e4 <strlen>
 80039be:	4603      	mov	r3, r0
 80039c0:	461a      	mov	r2, r3
 80039c2:	4b6c      	ldr	r3, [pc, #432]	; (8003b74 <updateHttpDataLength+0x298>)
 80039c4:	4413      	add	r3, r2
 80039c6:	496d      	ldr	r1, [pc, #436]	; (8003b7c <updateHttpDataLength+0x2a0>)
 80039c8:	461a      	mov	r2, r3
 80039ca:	460b      	mov	r3, r1
 80039cc:	881b      	ldrh	r3, [r3, #0]
 80039ce:	8013      	strh	r3, [r2, #0]
		strLoc = strstr(tempdata,"_");
 80039d0:	4b64      	ldr	r3, [pc, #400]	; (8003b64 <updateHttpDataLength+0x288>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	215f      	movs	r1, #95	; 0x5f
 80039d6:	4618      	mov	r0, r3
 80039d8:	f011 f8db 	bl	8014b92 <strchr>
 80039dc:	6178      	str	r0, [r7, #20]
		strLoc1 = strstr(strLoc+1,",");
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	3301      	adds	r3, #1
 80039e2:	212c      	movs	r1, #44	; 0x2c
 80039e4:	4618      	mov	r0, r3
 80039e6:	f011 f8d4 	bl	8014b92 <strchr>
 80039ea:	6138      	str	r0, [r7, #16]
		len = strLoc1-strLoc;
 80039ec:	693a      	ldr	r2, [r7, #16]
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	73fb      	strb	r3, [r7, #15]
		memset(PUBTopic,0x00,sizeof(PUBTopic));
 80039f4:	463b      	mov	r3, r7
 80039f6:	220f      	movs	r2, #15
 80039f8:	2100      	movs	r1, #0
 80039fa:	4618      	mov	r0, r3
 80039fc:	f010 fb6e 	bl	80140dc <memset>
		memcpy(PUBTopic,(strLoc+1),(len-1));
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	1c59      	adds	r1, r3, #1
 8003a04:	7bfb      	ldrb	r3, [r7, #15]
 8003a06:	3b01      	subs	r3, #1
 8003a08:	461a      	mov	r2, r3
 8003a0a:	463b      	mov	r3, r7
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f010 fb57 	bl	80140c0 <memcpy>


		if(g_u8PayloadType == PAYLOD_TYPE_LIVE)
 8003a12:	4b53      	ldr	r3, [pc, #332]	; (8003b60 <updateHttpDataLength+0x284>)
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d166      	bne.n	8003ae8 <updateHttpDataLength+0x20c>
		{
//			strcat((char *)gau8GSM_ATQMTPUBEX,(char *)MQTT_PUBPayload);
			if(!strcmp(PUBTopic,"Diagnostic"))
 8003a1a:	463b      	mov	r3, r7
 8003a1c:	4958      	ldr	r1, [pc, #352]	; (8003b80 <updateHttpDataLength+0x2a4>)
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f7fc ffd6 	bl	80009d0 <strcmp>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d114      	bne.n	8003a54 <updateHttpDataLength+0x178>
			{
				strcat((char *)gau8GSM_ATQMTPUBEX,(char *)MQTT_PUBDiagnostic);
 8003a2a:	4852      	ldr	r0, [pc, #328]	; (8003b74 <updateHttpDataLength+0x298>)
 8003a2c:	f7fc ffda 	bl	80009e4 <strlen>
 8003a30:	4603      	mov	r3, r0
 8003a32:	461a      	mov	r2, r3
 8003a34:	4b4f      	ldr	r3, [pc, #316]	; (8003b74 <updateHttpDataLength+0x298>)
 8003a36:	4413      	add	r3, r2
 8003a38:	4a52      	ldr	r2, [pc, #328]	; (8003b84 <updateHttpDataLength+0x2a8>)
 8003a3a:	461d      	mov	r5, r3
 8003a3c:	4614      	mov	r4, r2
 8003a3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a40:	6028      	str	r0, [r5, #0]
 8003a42:	6069      	str	r1, [r5, #4]
 8003a44:	60aa      	str	r2, [r5, #8]
 8003a46:	60eb      	str	r3, [r5, #12]
 8003a48:	cc03      	ldmia	r4!, {r0, r1}
 8003a4a:	6128      	str	r0, [r5, #16]
 8003a4c:	6169      	str	r1, [r5, #20]
 8003a4e:	7823      	ldrb	r3, [r4, #0]
 8003a50:	762b      	strb	r3, [r5, #24]
 8003a52:	e0b6      	b.n	8003bc2 <updateHttpDataLength+0x2e6>
			}
			else if(!strcmp(PUBTopic,"Payload"))
 8003a54:	463b      	mov	r3, r7
 8003a56:	494c      	ldr	r1, [pc, #304]	; (8003b88 <updateHttpDataLength+0x2ac>)
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f7fc ffb9 	bl	80009d0 <strcmp>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d113      	bne.n	8003a8c <updateHttpDataLength+0x1b0>
			{
				strcat((char *)gau8GSM_ATQMTPUBEX,(char *)MQTT_PUBPayload);
 8003a64:	4843      	ldr	r0, [pc, #268]	; (8003b74 <updateHttpDataLength+0x298>)
 8003a66:	f7fc ffbd 	bl	80009e4 <strlen>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	4b41      	ldr	r3, [pc, #260]	; (8003b74 <updateHttpDataLength+0x298>)
 8003a70:	4413      	add	r3, r2
 8003a72:	4a46      	ldr	r2, [pc, #280]	; (8003b8c <updateHttpDataLength+0x2b0>)
 8003a74:	461d      	mov	r5, r3
 8003a76:	4614      	mov	r4, r2
 8003a78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a7a:	6028      	str	r0, [r5, #0]
 8003a7c:	6069      	str	r1, [r5, #4]
 8003a7e:	60aa      	str	r2, [r5, #8]
 8003a80:	60eb      	str	r3, [r5, #12]
 8003a82:	6820      	ldr	r0, [r4, #0]
 8003a84:	6128      	str	r0, [r5, #16]
 8003a86:	88a3      	ldrh	r3, [r4, #4]
 8003a88:	82ab      	strh	r3, [r5, #20]
 8003a8a:	e09a      	b.n	8003bc2 <updateHttpDataLength+0x2e6>
			}
			else if(!strcmp(PUBTopic,"Geo"))
 8003a8c:	463b      	mov	r3, r7
 8003a8e:	4940      	ldr	r1, [pc, #256]	; (8003b90 <updateHttpDataLength+0x2b4>)
 8003a90:	4618      	mov	r0, r3
 8003a92:	f7fc ff9d 	bl	80009d0 <strcmp>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d111      	bne.n	8003ac0 <updateHttpDataLength+0x1e4>
			{
				strcat((char *)gau8GSM_ATQMTPUBEX,(char *)MQTT_PUBGeo);
 8003a9c:	4835      	ldr	r0, [pc, #212]	; (8003b74 <updateHttpDataLength+0x298>)
 8003a9e:	f7fc ffa1 	bl	80009e4 <strlen>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	4b33      	ldr	r3, [pc, #204]	; (8003b74 <updateHttpDataLength+0x298>)
 8003aa8:	4413      	add	r3, r2
 8003aaa:	4a3a      	ldr	r2, [pc, #232]	; (8003b94 <updateHttpDataLength+0x2b8>)
 8003aac:	461d      	mov	r5, r3
 8003aae:	4614      	mov	r4, r2
 8003ab0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ab2:	6028      	str	r0, [r5, #0]
 8003ab4:	6069      	str	r1, [r5, #4]
 8003ab6:	60aa      	str	r2, [r5, #8]
 8003ab8:	60eb      	str	r3, [r5, #12]
 8003aba:	8823      	ldrh	r3, [r4, #0]
 8003abc:	822b      	strh	r3, [r5, #16]
 8003abe:	e080      	b.n	8003bc2 <updateHttpDataLength+0x2e6>
			}
			else
			{
				strcat((char *)gau8GSM_ATQMTPUBEX,(char *)MQTT_PUBPayload);
 8003ac0:	482c      	ldr	r0, [pc, #176]	; (8003b74 <updateHttpDataLength+0x298>)
 8003ac2:	f7fc ff8f 	bl	80009e4 <strlen>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	461a      	mov	r2, r3
 8003aca:	4b2a      	ldr	r3, [pc, #168]	; (8003b74 <updateHttpDataLength+0x298>)
 8003acc:	4413      	add	r3, r2
 8003ace:	4a2f      	ldr	r2, [pc, #188]	; (8003b8c <updateHttpDataLength+0x2b0>)
 8003ad0:	461d      	mov	r5, r3
 8003ad2:	4614      	mov	r4, r2
 8003ad4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ad6:	6028      	str	r0, [r5, #0]
 8003ad8:	6069      	str	r1, [r5, #4]
 8003ada:	60aa      	str	r2, [r5, #8]
 8003adc:	60eb      	str	r3, [r5, #12]
 8003ade:	6820      	ldr	r0, [r4, #0]
 8003ae0:	6128      	str	r0, [r5, #16]
 8003ae2:	88a3      	ldrh	r3, [r4, #4]
 8003ae4:	82ab      	strh	r3, [r5, #20]
 8003ae6:	e06c      	b.n	8003bc2 <updateHttpDataLength+0x2e6>
			}
		}
		else if(g_u8PayloadType == PAYLOD_TYPE_BUFF)
 8003ae8:	4b1d      	ldr	r3, [pc, #116]	; (8003b60 <updateHttpDataLength+0x284>)
 8003aea:	781b      	ldrb	r3, [r3, #0]
 8003aec:	2b02      	cmp	r3, #2
 8003aee:	d155      	bne.n	8003b9c <updateHttpDataLength+0x2c0>
		{
			/**/
			pDignosticPacket = NULL;
 8003af0:	2300      	movs	r3, #0
 8003af2:	61bb      	str	r3, [r7, #24]
			pDignosticPacket = strstr(tempdata,"Diagnostic");
 8003af4:	4b1b      	ldr	r3, [pc, #108]	; (8003b64 <updateHttpDataLength+0x288>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4921      	ldr	r1, [pc, #132]	; (8003b80 <updateHttpDataLength+0x2a4>)
 8003afa:	4618      	mov	r0, r3
 8003afc:	f011 f883 	bl	8014c06 <strstr>
 8003b00:	61b8      	str	r0, [r7, #24]
			if(pDignosticPacket == NULL)
 8003b02:	69bb      	ldr	r3, [r7, #24]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d113      	bne.n	8003b30 <updateHttpDataLength+0x254>
			{
				strcat((char *)gau8GSM_ATQMTPUBEX,(char *)MQTT_PUBBuffer);
 8003b08:	481a      	ldr	r0, [pc, #104]	; (8003b74 <updateHttpDataLength+0x298>)
 8003b0a:	f7fc ff6b 	bl	80009e4 <strlen>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	461a      	mov	r2, r3
 8003b12:	4b18      	ldr	r3, [pc, #96]	; (8003b74 <updateHttpDataLength+0x298>)
 8003b14:	4413      	add	r3, r2
 8003b16:	4a20      	ldr	r2, [pc, #128]	; (8003b98 <updateHttpDataLength+0x2bc>)
 8003b18:	461d      	mov	r5, r3
 8003b1a:	4614      	mov	r4, r2
 8003b1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b1e:	6028      	str	r0, [r5, #0]
 8003b20:	6069      	str	r1, [r5, #4]
 8003b22:	60aa      	str	r2, [r5, #8]
 8003b24:	60eb      	str	r3, [r5, #12]
 8003b26:	6820      	ldr	r0, [r4, #0]
 8003b28:	6128      	str	r0, [r5, #16]
 8003b2a:	7923      	ldrb	r3, [r4, #4]
 8003b2c:	752b      	strb	r3, [r5, #20]
 8003b2e:	e048      	b.n	8003bc2 <updateHttpDataLength+0x2e6>
			}
			else
			{
				strcat((char *)gau8GSM_ATQMTPUBEX,(char *)MQTT_PUBDiagnostic);
 8003b30:	4810      	ldr	r0, [pc, #64]	; (8003b74 <updateHttpDataLength+0x298>)
 8003b32:	f7fc ff57 	bl	80009e4 <strlen>
 8003b36:	4603      	mov	r3, r0
 8003b38:	461a      	mov	r2, r3
 8003b3a:	4b0e      	ldr	r3, [pc, #56]	; (8003b74 <updateHttpDataLength+0x298>)
 8003b3c:	4413      	add	r3, r2
 8003b3e:	4a11      	ldr	r2, [pc, #68]	; (8003b84 <updateHttpDataLength+0x2a8>)
 8003b40:	461d      	mov	r5, r3
 8003b42:	4614      	mov	r4, r2
 8003b44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b46:	6028      	str	r0, [r5, #0]
 8003b48:	6069      	str	r1, [r5, #4]
 8003b4a:	60aa      	str	r2, [r5, #8]
 8003b4c:	60eb      	str	r3, [r5, #12]
 8003b4e:	cc03      	ldmia	r4!, {r0, r1}
 8003b50:	6128      	str	r0, [r5, #16]
 8003b52:	6169      	str	r1, [r5, #20]
 8003b54:	7823      	ldrb	r3, [r4, #0]
 8003b56:	762b      	strb	r3, [r5, #24]
 8003b58:	e033      	b.n	8003bc2 <updateHttpDataLength+0x2e6>
 8003b5a:	bf00      	nop
 8003b5c:	20002aec 	.word	0x20002aec
 8003b60:	20001734 	.word	0x20001734
 8003b64:	20000054 	.word	0x20000054
 8003b68:	20002abc 	.word	0x20002abc
 8003b6c:	200016f8 	.word	0x200016f8
 8003b70:	20000fa4 	.word	0x20000fa4
 8003b74:	2000174c 	.word	0x2000174c
 8003b78:	080189ec 	.word	0x080189ec
 8003b7c:	080188e0 	.word	0x080188e0
 8003b80:	08018a04 	.word	0x08018a04
 8003b84:	08019068 	.word	0x08019068
 8003b88:	08018a10 	.word	0x08018a10
 8003b8c:	08019050 	.word	0x08019050
 8003b90:	08018a18 	.word	0x08018a18
 8003b94:	08019084 	.word	0x08019084
 8003b98:	08019098 	.word	0x08019098
			//strcat((char *)gau8GSM_ATQMTPUBEX,(char *)MQTT_PUBBuffer);
		}
		else
		{
			/*This will never happens but this is for saftey purpose.*/
			strcat((char *)gau8GSM_ATQMTPUBEX,(char *)MQTT_PUBPayload);
 8003b9c:	4823      	ldr	r0, [pc, #140]	; (8003c2c <updateHttpDataLength+0x350>)
 8003b9e:	f7fc ff21 	bl	80009e4 <strlen>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	4b21      	ldr	r3, [pc, #132]	; (8003c2c <updateHttpDataLength+0x350>)
 8003ba8:	4413      	add	r3, r2
 8003baa:	4a21      	ldr	r2, [pc, #132]	; (8003c30 <updateHttpDataLength+0x354>)
 8003bac:	461d      	mov	r5, r3
 8003bae:	4614      	mov	r4, r2
 8003bb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003bb2:	6028      	str	r0, [r5, #0]
 8003bb4:	6069      	str	r1, [r5, #4]
 8003bb6:	60aa      	str	r2, [r5, #8]
 8003bb8:	60eb      	str	r3, [r5, #12]
 8003bba:	6820      	ldr	r0, [r4, #0]
 8003bbc:	6128      	str	r0, [r5, #16]
 8003bbe:	88a3      	ldrh	r3, [r4, #4]
 8003bc0:	82ab      	strh	r3, [r5, #20]
//		else
//		{
//			strcat((char *)gau8GSM_ATQMTPUBEX,(char *)MQTT_PUBPayload);
//		}

		strcat((char *)gau8GSM_ATQMTPUBEX,(char *)"\",");
 8003bc2:	481a      	ldr	r0, [pc, #104]	; (8003c2c <updateHttpDataLength+0x350>)
 8003bc4:	f7fc ff0e 	bl	80009e4 <strlen>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	461a      	mov	r2, r3
 8003bcc:	4b17      	ldr	r3, [pc, #92]	; (8003c2c <updateHttpDataLength+0x350>)
 8003bce:	4413      	add	r3, r2
 8003bd0:	4a18      	ldr	r2, [pc, #96]	; (8003c34 <updateHttpDataLength+0x358>)
 8003bd2:	8811      	ldrh	r1, [r2, #0]
 8003bd4:	7892      	ldrb	r2, [r2, #2]
 8003bd6:	8019      	strh	r1, [r3, #0]
 8003bd8:	709a      	strb	r2, [r3, #2]
	//	strcpy((char *)gau8GSM_ATQMTPUBEX,"AT+QMTPUBEX=0,0,0,0,"<PUBTOPIC>",");

		strcat((char *)gau8GSM_ATQMTPUBEX,buffer); // lenght of payload
 8003bda:	4917      	ldr	r1, [pc, #92]	; (8003c38 <updateHttpDataLength+0x35c>)
 8003bdc:	4813      	ldr	r0, [pc, #76]	; (8003c2c <updateHttpDataLength+0x350>)
 8003bde:	f010 ffc9 	bl	8014b74 <strcat>
		strcat((char *)gau8GSM_ATQMTPUBEX,";+QGPSGNMEA=\"RMC\";+CSQ;+QNWINFO");//
 8003be2:	4812      	ldr	r0, [pc, #72]	; (8003c2c <updateHttpDataLength+0x350>)
 8003be4:	f7fc fefe 	bl	80009e4 <strlen>
 8003be8:	4603      	mov	r3, r0
 8003bea:	461a      	mov	r2, r3
 8003bec:	4b0f      	ldr	r3, [pc, #60]	; (8003c2c <updateHttpDataLength+0x350>)
 8003bee:	4413      	add	r3, r2
 8003bf0:	4a12      	ldr	r2, [pc, #72]	; (8003c3c <updateHttpDataLength+0x360>)
 8003bf2:	461c      	mov	r4, r3
 8003bf4:	4615      	mov	r5, r2
 8003bf6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003bf8:	6020      	str	r0, [r4, #0]
 8003bfa:	6061      	str	r1, [r4, #4]
 8003bfc:	60a2      	str	r2, [r4, #8]
 8003bfe:	60e3      	str	r3, [r4, #12]
 8003c00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c02:	6120      	str	r0, [r4, #16]
 8003c04:	6161      	str	r1, [r4, #20]
 8003c06:	61a2      	str	r2, [r4, #24]
 8003c08:	61e3      	str	r3, [r4, #28]
		strcat((char *)gau8GSM_ATQMTPUBEX,"\r\n");
 8003c0a:	4808      	ldr	r0, [pc, #32]	; (8003c2c <updateHttpDataLength+0x350>)
 8003c0c:	f7fc feea 	bl	80009e4 <strlen>
 8003c10:	4603      	mov	r3, r0
 8003c12:	461a      	mov	r2, r3
 8003c14:	4b05      	ldr	r3, [pc, #20]	; (8003c2c <updateHttpDataLength+0x350>)
 8003c16:	4413      	add	r3, r2
 8003c18:	4a09      	ldr	r2, [pc, #36]	; (8003c40 <updateHttpDataLength+0x364>)
 8003c1a:	8811      	ldrh	r1, [r2, #0]
 8003c1c:	7892      	ldrb	r2, [r2, #2]
 8003c1e:	8019      	strh	r1, [r3, #0]
 8003c20:	709a      	strb	r2, [r3, #2]

}
 8003c22:	bf00      	nop
 8003c24:	3720      	adds	r7, #32
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bdb0      	pop	{r4, r5, r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	2000174c 	.word	0x2000174c
 8003c30:	08019050 	.word	0x08019050
 8003c34:	08018a1c 	.word	0x08018a1c
 8003c38:	20000fa4 	.word	0x20000fa4
 8003c3c:	08018a20 	.word	0x08018a20
 8003c40:	08018930 	.word	0x08018930

08003c44 <syncrtcwithNetworkTime>:
uint32_t gu32Date = 0;
uint32_t gu32Hours = 0;
uint32_t gu32Minutes = 0;
uint32_t gu32Seconds = 0;
void syncrtcwithNetworkTime(void)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	af00      	add	r7, sp, #0
	if(gu32TimeSyncFlag == 1)
 8003c48:	4b65      	ldr	r3, [pc, #404]	; (8003de0 <syncrtcwithNetworkTime+0x19c>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	f000 80c5 	beq.w	8003ddc <syncrtcwithNetworkTime+0x198>
	//
	//	gu32Hours = (((gau8GSM_TimeStamp[11]-'0') * 10) + (gau8GSM_TimeStamp[12]-'0'));
	//	gu32Minutes = (((gau8GSM_TimeStamp[14]-'0') * 10) + (gau8GSM_TimeStamp[15]-'0'));
	//	gu32Seconds = (((gau8GSM_TimeStamp[17]-'0') * 10) + (gau8GSM_TimeStamp[18]-'0'));

		gu8YY = ((gau8GSM_TimeStamp[0]-'0')*10)+(gau8GSM_TimeStamp[1]-'0');
 8003c52:	4b64      	ldr	r3, [pc, #400]	; (8003de4 <syncrtcwithNetworkTime+0x1a0>)
 8003c54:	781b      	ldrb	r3, [r3, #0]
 8003c56:	3b30      	subs	r3, #48	; 0x30
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	0092      	lsls	r2, r2, #2
 8003c5e:	4413      	add	r3, r2
 8003c60:	005b      	lsls	r3, r3, #1
 8003c62:	b2da      	uxtb	r2, r3
 8003c64:	4b5f      	ldr	r3, [pc, #380]	; (8003de4 <syncrtcwithNetworkTime+0x1a0>)
 8003c66:	785b      	ldrb	r3, [r3, #1]
 8003c68:	4413      	add	r3, r2
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	3b30      	subs	r3, #48	; 0x30
 8003c6e:	b2da      	uxtb	r2, r3
 8003c70:	4b5d      	ldr	r3, [pc, #372]	; (8003de8 <syncrtcwithNetworkTime+0x1a4>)
 8003c72:	701a      	strb	r2, [r3, #0]
	//	gu32Year = (((gau8GSM_TimeStamp[0]-'0') * 1000) + ((gau8GSM_TimeStamp[1]-'0')*100)+((gau8GSM_TimeStamp[2]-'0')*10))+(gau8GSM_TimeStamp[3]-'0');
		gu32Year = ((gau8GSM_TimeStamp[0]-'0')*10)+(gau8GSM_TimeStamp[1]-'0');
 8003c74:	4b5b      	ldr	r3, [pc, #364]	; (8003de4 <syncrtcwithNetworkTime+0x1a0>)
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	4413      	add	r3, r2
 8003c82:	005b      	lsls	r3, r3, #1
 8003c84:	461a      	mov	r2, r3
 8003c86:	4b57      	ldr	r3, [pc, #348]	; (8003de4 <syncrtcwithNetworkTime+0x1a0>)
 8003c88:	785b      	ldrb	r3, [r3, #1]
 8003c8a:	3b30      	subs	r3, #48	; 0x30
 8003c8c:	4413      	add	r3, r2
 8003c8e:	461a      	mov	r2, r3
 8003c90:	4b56      	ldr	r3, [pc, #344]	; (8003dec <syncrtcwithNetworkTime+0x1a8>)
 8003c92:	601a      	str	r2, [r3, #0]
		gu32Month = (((gau8GSM_TimeStamp[3]-'0') * 10) + (gau8GSM_TimeStamp[4]-'0'));
 8003c94:	4b53      	ldr	r3, [pc, #332]	; (8003de4 <syncrtcwithNetworkTime+0x1a0>)
 8003c96:	78db      	ldrb	r3, [r3, #3]
 8003c98:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	4413      	add	r3, r2
 8003ca2:	005b      	lsls	r3, r3, #1
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	4b4f      	ldr	r3, [pc, #316]	; (8003de4 <syncrtcwithNetworkTime+0x1a0>)
 8003ca8:	791b      	ldrb	r3, [r3, #4]
 8003caa:	3b30      	subs	r3, #48	; 0x30
 8003cac:	4413      	add	r3, r2
 8003cae:	461a      	mov	r2, r3
 8003cb0:	4b4f      	ldr	r3, [pc, #316]	; (8003df0 <syncrtcwithNetworkTime+0x1ac>)
 8003cb2:	601a      	str	r2, [r3, #0]
		gu32Date = (((gau8GSM_TimeStamp[6]-'0') * 10) + (gau8GSM_TimeStamp[7]-'0'));
 8003cb4:	4b4b      	ldr	r3, [pc, #300]	; (8003de4 <syncrtcwithNetworkTime+0x1a0>)
 8003cb6:	799b      	ldrb	r3, [r3, #6]
 8003cb8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8003cbc:	4613      	mov	r3, r2
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	4413      	add	r3, r2
 8003cc2:	005b      	lsls	r3, r3, #1
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	4b47      	ldr	r3, [pc, #284]	; (8003de4 <syncrtcwithNetworkTime+0x1a0>)
 8003cc8:	79db      	ldrb	r3, [r3, #7]
 8003cca:	3b30      	subs	r3, #48	; 0x30
 8003ccc:	4413      	add	r3, r2
 8003cce:	461a      	mov	r2, r3
 8003cd0:	4b48      	ldr	r3, [pc, #288]	; (8003df4 <syncrtcwithNetworkTime+0x1b0>)
 8003cd2:	601a      	str	r2, [r3, #0]

		gu32Hours = (((gau8GSM_TimeStamp[9]-'0') * 10) + (gau8GSM_TimeStamp[10]-'0'));
 8003cd4:	4b43      	ldr	r3, [pc, #268]	; (8003de4 <syncrtcwithNetworkTime+0x1a0>)
 8003cd6:	7a5b      	ldrb	r3, [r3, #9]
 8003cd8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8003cdc:	4613      	mov	r3, r2
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	4413      	add	r3, r2
 8003ce2:	005b      	lsls	r3, r3, #1
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	4b3f      	ldr	r3, [pc, #252]	; (8003de4 <syncrtcwithNetworkTime+0x1a0>)
 8003ce8:	7a9b      	ldrb	r3, [r3, #10]
 8003cea:	3b30      	subs	r3, #48	; 0x30
 8003cec:	4413      	add	r3, r2
 8003cee:	461a      	mov	r2, r3
 8003cf0:	4b41      	ldr	r3, [pc, #260]	; (8003df8 <syncrtcwithNetworkTime+0x1b4>)
 8003cf2:	601a      	str	r2, [r3, #0]
		gu32Minutes = (((gau8GSM_TimeStamp[12]-'0') * 10) + (gau8GSM_TimeStamp[13]-'0'));
 8003cf4:	4b3b      	ldr	r3, [pc, #236]	; (8003de4 <syncrtcwithNetworkTime+0x1a0>)
 8003cf6:	7b1b      	ldrb	r3, [r3, #12]
 8003cf8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8003cfc:	4613      	mov	r3, r2
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	4413      	add	r3, r2
 8003d02:	005b      	lsls	r3, r3, #1
 8003d04:	461a      	mov	r2, r3
 8003d06:	4b37      	ldr	r3, [pc, #220]	; (8003de4 <syncrtcwithNetworkTime+0x1a0>)
 8003d08:	7b5b      	ldrb	r3, [r3, #13]
 8003d0a:	3b30      	subs	r3, #48	; 0x30
 8003d0c:	4413      	add	r3, r2
 8003d0e:	461a      	mov	r2, r3
 8003d10:	4b3a      	ldr	r3, [pc, #232]	; (8003dfc <syncrtcwithNetworkTime+0x1b8>)
 8003d12:	601a      	str	r2, [r3, #0]
		gu32Seconds = (((gau8GSM_TimeStamp[15]-'0') * 10) + (gau8GSM_TimeStamp[16]-'0'));
 8003d14:	4b33      	ldr	r3, [pc, #204]	; (8003de4 <syncrtcwithNetworkTime+0x1a0>)
 8003d16:	7bdb      	ldrb	r3, [r3, #15]
 8003d18:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8003d1c:	4613      	mov	r3, r2
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	4413      	add	r3, r2
 8003d22:	005b      	lsls	r3, r3, #1
 8003d24:	461a      	mov	r2, r3
 8003d26:	4b2f      	ldr	r3, [pc, #188]	; (8003de4 <syncrtcwithNetworkTime+0x1a0>)
 8003d28:	7c1b      	ldrb	r3, [r3, #16]
 8003d2a:	3b30      	subs	r3, #48	; 0x30
 8003d2c:	4413      	add	r3, r2
 8003d2e:	461a      	mov	r2, r3
 8003d30:	4b33      	ldr	r3, [pc, #204]	; (8003e00 <syncrtcwithNetworkTime+0x1bc>)
 8003d32:	601a      	str	r2, [r3, #0]

		/* Add 5 hr 30 Mins to get IST */

		SDate1.Year = DecimalToBCD(gu32Year);
 8003d34:	4b2d      	ldr	r3, [pc, #180]	; (8003dec <syncrtcwithNetworkTime+0x1a8>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f004 fef9 	bl	8008b30 <DecimalToBCD>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	b2da      	uxtb	r2, r3
 8003d42:	4b30      	ldr	r3, [pc, #192]	; (8003e04 <syncrtcwithNetworkTime+0x1c0>)
 8003d44:	70da      	strb	r2, [r3, #3]
		SDate1.Month = DecimalToBCD(gu32Month);
 8003d46:	4b2a      	ldr	r3, [pc, #168]	; (8003df0 <syncrtcwithNetworkTime+0x1ac>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f004 fef0 	bl	8008b30 <DecimalToBCD>
 8003d50:	4603      	mov	r3, r0
 8003d52:	b2da      	uxtb	r2, r3
 8003d54:	4b2b      	ldr	r3, [pc, #172]	; (8003e04 <syncrtcwithNetworkTime+0x1c0>)
 8003d56:	705a      	strb	r2, [r3, #1]
		SDate1.Date = DecimalToBCD(gu32Date);
 8003d58:	4b26      	ldr	r3, [pc, #152]	; (8003df4 <syncrtcwithNetworkTime+0x1b0>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f004 fee7 	bl	8008b30 <DecimalToBCD>
 8003d62:	4603      	mov	r3, r0
 8003d64:	b2da      	uxtb	r2, r3
 8003d66:	4b27      	ldr	r3, [pc, #156]	; (8003e04 <syncrtcwithNetworkTime+0x1c0>)
 8003d68:	709a      	strb	r2, [r3, #2]
		STime1.Hours = DecimalToBCD(gu32Hours);
 8003d6a:	4b23      	ldr	r3, [pc, #140]	; (8003df8 <syncrtcwithNetworkTime+0x1b4>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f004 fede 	bl	8008b30 <DecimalToBCD>
 8003d74:	4603      	mov	r3, r0
 8003d76:	b2da      	uxtb	r2, r3
 8003d78:	4b23      	ldr	r3, [pc, #140]	; (8003e08 <syncrtcwithNetworkTime+0x1c4>)
 8003d7a:	701a      	strb	r2, [r3, #0]
		STime1.Minutes = DecimalToBCD(gu32Minutes);
 8003d7c:	4b1f      	ldr	r3, [pc, #124]	; (8003dfc <syncrtcwithNetworkTime+0x1b8>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4618      	mov	r0, r3
 8003d82:	f004 fed5 	bl	8008b30 <DecimalToBCD>
 8003d86:	4603      	mov	r3, r0
 8003d88:	b2da      	uxtb	r2, r3
 8003d8a:	4b1f      	ldr	r3, [pc, #124]	; (8003e08 <syncrtcwithNetworkTime+0x1c4>)
 8003d8c:	705a      	strb	r2, [r3, #1]
		STime1.Seconds = DecimalToBCD(gu32Seconds);
 8003d8e:	4b1c      	ldr	r3, [pc, #112]	; (8003e00 <syncrtcwithNetworkTime+0x1bc>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4618      	mov	r0, r3
 8003d94:	f004 fecc 	bl	8008b30 <DecimalToBCD>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	b2da      	uxtb	r2, r3
 8003d9c:	4b1a      	ldr	r3, [pc, #104]	; (8003e08 <syncrtcwithNetworkTime+0x1c4>)
 8003d9e:	709a      	strb	r2, [r3, #2]

		/*Store Last Syncd date */
		lastKnownSDate1 = SDate1 ;
 8003da0:	4a1a      	ldr	r2, [pc, #104]	; (8003e0c <syncrtcwithNetworkTime+0x1c8>)
 8003da2:	4b18      	ldr	r3, [pc, #96]	; (8003e04 <syncrtcwithNetworkTime+0x1c0>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	6013      	str	r3, [r2, #0]

		strTimeUpdate.u32RefTimeHH = gu32Hours;
 8003da8:	4b13      	ldr	r3, [pc, #76]	; (8003df8 <syncrtcwithNetworkTime+0x1b4>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a18      	ldr	r2, [pc, #96]	; (8003e10 <syncrtcwithNetworkTime+0x1cc>)
 8003dae:	6013      	str	r3, [r2, #0]
		strTimeUpdate.u32RefTimeMin = gu32Minutes;
 8003db0:	4b12      	ldr	r3, [pc, #72]	; (8003dfc <syncrtcwithNetworkTime+0x1b8>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a16      	ldr	r2, [pc, #88]	; (8003e10 <syncrtcwithNetworkTime+0x1cc>)
 8003db6:	6053      	str	r3, [r2, #4]
		strTimeUpdate.u32RefTimeSec = gu32Seconds;
 8003db8:	4b11      	ldr	r3, [pc, #68]	; (8003e00 <syncrtcwithNetworkTime+0x1bc>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a14      	ldr	r2, [pc, #80]	; (8003e10 <syncrtcwithNetworkTime+0x1cc>)
 8003dbe:	6093      	str	r3, [r2, #8]

		HAL_RTC_SetTime(&hrtc,&STime1,RTC_FORMAT_BCD);
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	4911      	ldr	r1, [pc, #68]	; (8003e08 <syncrtcwithNetworkTime+0x1c4>)
 8003dc4:	4813      	ldr	r0, [pc, #76]	; (8003e14 <syncrtcwithNetworkTime+0x1d0>)
 8003dc6:	f00d f8c7 	bl	8010f58 <HAL_RTC_SetTime>
		HAL_RTC_SetDate(&hrtc,&SDate1,RTC_FORMAT_BCD);
 8003dca:	2201      	movs	r2, #1
 8003dcc:	490d      	ldr	r1, [pc, #52]	; (8003e04 <syncrtcwithNetworkTime+0x1c0>)
 8003dce:	4811      	ldr	r0, [pc, #68]	; (8003e14 <syncrtcwithNetworkTime+0x1d0>)
 8003dd0:	f00d fa78 	bl	80112c4 <HAL_RTC_SetDate>
		/* Update/ Set RTC Structure */
		//backupCurrentRTC();
		gu32TimeSyncFlag = 1;
 8003dd4:	4b02      	ldr	r3, [pc, #8]	; (8003de0 <syncrtcwithNetworkTime+0x19c>)
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	601a      	str	r2, [r3, #0]
 8003dda:	e000      	b.n	8003dde <syncrtcwithNetworkTime+0x19a>
		return;
 8003ddc:	bf00      	nop
	//	gu32RTCTestFlag++;
}
 8003dde:	bd80      	pop	{r7, pc}
 8003de0:	20002880 	.word	0x20002880
 8003de4:	200007b0 	.word	0x200007b0
 8003de8:	20001920 	.word	0x20001920
 8003dec:	2000191c 	.word	0x2000191c
 8003df0:	20001924 	.word	0x20001924
 8003df4:	20001928 	.word	0x20001928
 8003df8:	2000192c 	.word	0x2000192c
 8003dfc:	20001930 	.word	0x20001930
 8003e00:	20001934 	.word	0x20001934
 8003e04:	200065f4 	.word	0x200065f4
 8003e08:	200065f8 	.word	0x200065f8
 8003e0c:	20002ae8 	.word	0x20002ae8
 8003e10:	20002850 	.word	0x20002850
 8003e14:	20003e60 	.word	0x20003e60

08003e18 <updateHTTPReadLength>:
 KloudQ Team      8-04-2020			Initial Definition
 Kloudq Team	  10-04-2020		Strcpy logic added
******************************************************************************/
#define FOTAFILECHUNKSIZEBYTES	(2000)
uint32_t updateHTTPReadLength(uint32_t fotaFileSizeBytes)
{
 8003e18:	b5b0      	push	{r4, r5, r7, lr}
 8003e1a:	b082      	sub	sp, #8
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]

	if(fotaFileSizeBytes != 0)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	f000 80ac 	beq.w	8003f80 <updateHTTPReadLength+0x168>
	{

		/* Start of File */
		if(u32FOTAFileBaseAddress == 0)
 8003e28:	4b58      	ldr	r3, [pc, #352]	; (8003f8c <updateHTTPReadLength+0x174>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d11f      	bne.n	8003e70 <updateHTTPReadLength+0x58>
		{
			u32FotaFileChunkCounter = (fotaFileSizeBytes / FOTAFILECHUNKSIZEBYTES);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	4a57      	ldr	r2, [pc, #348]	; (8003f90 <updateHTTPReadLength+0x178>)
 8003e34:	fba2 2303 	umull	r2, r3, r2, r3
 8003e38:	09db      	lsrs	r3, r3, #7
 8003e3a:	4a56      	ldr	r2, [pc, #344]	; (8003f94 <updateHTTPReadLength+0x17c>)
 8003e3c:	6013      	str	r3, [r2, #0]
			/* Calculates Remaining data bytes after multiples of 2000  */
			u32FotaFileRemainingBytes = (fotaFileSizeBytes % FOTAFILECHUNKSIZEBYTES);
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	4b53      	ldr	r3, [pc, #332]	; (8003f90 <updateHTTPReadLength+0x178>)
 8003e42:	fba3 1302 	umull	r1, r3, r3, r2
 8003e46:	09db      	lsrs	r3, r3, #7
 8003e48:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8003e4c:	fb01 f303 	mul.w	r3, r1, r3
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	4a51      	ldr	r2, [pc, #324]	; (8003f98 <updateHTTPReadLength+0x180>)
 8003e54:	6013      	str	r3, [r2, #0]
			itoa(FOTAFILECHUNKSIZEBYTES,bufferChunkBytes,PAYLOAD_DATA_STRING_RADIX);
 8003e56:	220a      	movs	r2, #10
 8003e58:	4950      	ldr	r1, [pc, #320]	; (8003f9c <updateHTTPReadLength+0x184>)
 8003e5a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003e5e:	f010 f91d 	bl	801409c <itoa>
			itoa(u32FotaFileRemainingBytes,bufferRemBytes,PAYLOAD_DATA_STRING_RADIX);
 8003e62:	4b4d      	ldr	r3, [pc, #308]	; (8003f98 <updateHTTPReadLength+0x180>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	220a      	movs	r2, #10
 8003e68:	494d      	ldr	r1, [pc, #308]	; (8003fa0 <updateHTTPReadLength+0x188>)
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f010 f916 	bl	801409c <itoa>
		}

		strcpy(gau8GSM_ATQHTTPGETEXREAD,(char *)"AT+QHTTPGETEX=80,");
 8003e70:	4a4c      	ldr	r2, [pc, #304]	; (8003fa4 <updateHTTPReadLength+0x18c>)
 8003e72:	4b4d      	ldr	r3, [pc, #308]	; (8003fa8 <updateHTTPReadLength+0x190>)
 8003e74:	4614      	mov	r4, r2
 8003e76:	461d      	mov	r5, r3
 8003e78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003e7c:	682b      	ldr	r3, [r5, #0]
 8003e7e:	8023      	strh	r3, [r4, #0]
		memset(buffer,0x00,sizeof(char) * sizeof(buffer));
 8003e80:	2206      	movs	r2, #6
 8003e82:	2100      	movs	r1, #0
 8003e84:	4849      	ldr	r0, [pc, #292]	; (8003fac <updateHTTPReadLength+0x194>)
 8003e86:	f010 f929 	bl	80140dc <memset>

		if(u32FOTAFileBaseAddress < u32FotaFileChunkCounter)
 8003e8a:	4b40      	ldr	r3, [pc, #256]	; (8003f8c <updateHTTPReadLength+0x174>)
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	4b41      	ldr	r3, [pc, #260]	; (8003f94 <updateHTTPReadLength+0x17c>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d236      	bcs.n	8003f04 <updateHTTPReadLength+0xec>
		{
			itoa((u32FOTAFileBaseAddress * FOTAFILECHUNKSIZEBYTES),buffer,PAYLOAD_DATA_STRING_RADIX);
 8003e96:	4b3d      	ldr	r3, [pc, #244]	; (8003f8c <updateHTTPReadLength+0x174>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003e9e:	fb02 f303 	mul.w	r3, r2, r3
 8003ea2:	220a      	movs	r2, #10
 8003ea4:	4941      	ldr	r1, [pc, #260]	; (8003fac <updateHTTPReadLength+0x194>)
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f010 f8f8 	bl	801409c <itoa>
			strcat(gau8GSM_ATQHTTPGETEXREAD,(char *)buffer);
 8003eac:	493f      	ldr	r1, [pc, #252]	; (8003fac <updateHTTPReadLength+0x194>)
 8003eae:	483d      	ldr	r0, [pc, #244]	; (8003fa4 <updateHTTPReadLength+0x18c>)
 8003eb0:	f010 fe60 	bl	8014b74 <strcat>
			strcat(gau8GSM_ATQHTTPGETEXREAD,(char *)",");
 8003eb4:	483b      	ldr	r0, [pc, #236]	; (8003fa4 <updateHTTPReadLength+0x18c>)
 8003eb6:	f7fc fd95 	bl	80009e4 <strlen>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	4b39      	ldr	r3, [pc, #228]	; (8003fa4 <updateHTTPReadLength+0x18c>)
 8003ec0:	4413      	add	r3, r2
 8003ec2:	493b      	ldr	r1, [pc, #236]	; (8003fb0 <updateHTTPReadLength+0x198>)
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	460b      	mov	r3, r1
 8003ec8:	881b      	ldrh	r3, [r3, #0]
 8003eca:	8013      	strh	r3, [r2, #0]
			strcat(gau8GSM_ATQHTTPGETEXREAD,(char *)bufferChunkBytes); /* Byte(s) Chunk to read*/
 8003ecc:	4933      	ldr	r1, [pc, #204]	; (8003f9c <updateHTTPReadLength+0x184>)
 8003ece:	4835      	ldr	r0, [pc, #212]	; (8003fa4 <updateHTTPReadLength+0x18c>)
 8003ed0:	f010 fe50 	bl	8014b74 <strcat>
			strcat(gau8GSM_ATQHTTPGETEXREAD,(char *)"\r\n");
 8003ed4:	4833      	ldr	r0, [pc, #204]	; (8003fa4 <updateHTTPReadLength+0x18c>)
 8003ed6:	f7fc fd85 	bl	80009e4 <strlen>
 8003eda:	4603      	mov	r3, r0
 8003edc:	461a      	mov	r2, r3
 8003ede:	4b31      	ldr	r3, [pc, #196]	; (8003fa4 <updateHTTPReadLength+0x18c>)
 8003ee0:	4413      	add	r3, r2
 8003ee2:	4a34      	ldr	r2, [pc, #208]	; (8003fb4 <updateHTTPReadLength+0x19c>)
 8003ee4:	8811      	ldrh	r1, [r2, #0]
 8003ee6:	7892      	ldrb	r2, [r2, #2]
 8003ee8:	8019      	strh	r1, [r3, #0]
 8003eea:	709a      	strb	r2, [r3, #2]
			u32FOTAFileBaseAddress++;
 8003eec:	4b27      	ldr	r3, [pc, #156]	; (8003f8c <updateHTTPReadLength+0x174>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	3301      	adds	r3, #1
 8003ef2:	4a26      	ldr	r2, [pc, #152]	; (8003f8c <updateHTTPReadLength+0x174>)
 8003ef4:	6013      	str	r3, [r2, #0]
			gsmInstance.u32FotaFileSizeBytes = FOTAFILECHUNKSIZEBYTES;
 8003ef6:	4b30      	ldr	r3, [pc, #192]	; (8003fb8 <updateHTTPReadLength+0x1a0>)
 8003ef8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003efc:	f8c3 2fa0 	str.w	r2, [r3, #4000]	; 0xfa0
			return 2;
 8003f00:	2302      	movs	r3, #2
 8003f02:	e03e      	b.n	8003f82 <updateHTTPReadLength+0x16a>
		}
		else
		{
			itoa(u32FotaFileChunkCounter * FOTAFILECHUNKSIZEBYTES,buffer,PAYLOAD_DATA_STRING_RADIX);
 8003f04:	4b23      	ldr	r3, [pc, #140]	; (8003f94 <updateHTTPReadLength+0x17c>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003f0c:	fb02 f303 	mul.w	r3, r2, r3
 8003f10:	220a      	movs	r2, #10
 8003f12:	4926      	ldr	r1, [pc, #152]	; (8003fac <updateHTTPReadLength+0x194>)
 8003f14:	4618      	mov	r0, r3
 8003f16:	f010 f8c1 	bl	801409c <itoa>
			strcat(gau8GSM_ATQHTTPGETEXREAD,(char *)buffer);
 8003f1a:	4924      	ldr	r1, [pc, #144]	; (8003fac <updateHTTPReadLength+0x194>)
 8003f1c:	4821      	ldr	r0, [pc, #132]	; (8003fa4 <updateHTTPReadLength+0x18c>)
 8003f1e:	f010 fe29 	bl	8014b74 <strcat>
			strcat(gau8GSM_ATQHTTPGETEXREAD,(char *)",");
 8003f22:	4820      	ldr	r0, [pc, #128]	; (8003fa4 <updateHTTPReadLength+0x18c>)
 8003f24:	f7fc fd5e 	bl	80009e4 <strlen>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	4b1d      	ldr	r3, [pc, #116]	; (8003fa4 <updateHTTPReadLength+0x18c>)
 8003f2e:	4413      	add	r3, r2
 8003f30:	491f      	ldr	r1, [pc, #124]	; (8003fb0 <updateHTTPReadLength+0x198>)
 8003f32:	461a      	mov	r2, r3
 8003f34:	460b      	mov	r3, r1
 8003f36:	881b      	ldrh	r3, [r3, #0]
 8003f38:	8013      	strh	r3, [r2, #0]
			strcat(gau8GSM_ATQHTTPGETEXREAD,(char *)bufferRemBytes); /* Byte(s) Chunk to read*/
 8003f3a:	4919      	ldr	r1, [pc, #100]	; (8003fa0 <updateHTTPReadLength+0x188>)
 8003f3c:	4819      	ldr	r0, [pc, #100]	; (8003fa4 <updateHTTPReadLength+0x18c>)
 8003f3e:	f010 fe19 	bl	8014b74 <strcat>
			strcat(gau8GSM_ATQHTTPGETEXREAD,(char *)"\r\n");
 8003f42:	4818      	ldr	r0, [pc, #96]	; (8003fa4 <updateHTTPReadLength+0x18c>)
 8003f44:	f7fc fd4e 	bl	80009e4 <strlen>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	4b15      	ldr	r3, [pc, #84]	; (8003fa4 <updateHTTPReadLength+0x18c>)
 8003f4e:	4413      	add	r3, r2
 8003f50:	4a18      	ldr	r2, [pc, #96]	; (8003fb4 <updateHTTPReadLength+0x19c>)
 8003f52:	8811      	ldrh	r1, [r2, #0]
 8003f54:	7892      	ldrb	r2, [r2, #2]
 8003f56:	8019      	strh	r1, [r3, #0]
 8003f58:	709a      	strb	r2, [r3, #2]
			gsmInstance.u32FotaFileSizeBytes = u32FotaFileRemainingBytes;
 8003f5a:	4b0f      	ldr	r3, [pc, #60]	; (8003f98 <updateHTTPReadLength+0x180>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a16      	ldr	r2, [pc, #88]	; (8003fb8 <updateHTTPReadLength+0x1a0>)
 8003f60:	f8c2 3fa0 	str.w	r3, [r2, #4000]	; 0xfa0
			u32FOTAFileBaseAddress = 0;
 8003f64:	4b09      	ldr	r3, [pc, #36]	; (8003f8c <updateHTTPReadLength+0x174>)
 8003f66:	2200      	movs	r2, #0
 8003f68:	601a      	str	r2, [r3, #0]
			u32FotaFileChunkCounter = 0;
 8003f6a:	4b0a      	ldr	r3, [pc, #40]	; (8003f94 <updateHTTPReadLength+0x17c>)
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	601a      	str	r2, [r3, #0]
			u32FotaFileRemainingBytes = 0;
 8003f70:	4b09      	ldr	r3, [pc, #36]	; (8003f98 <updateHTTPReadLength+0x180>)
 8003f72:	2200      	movs	r2, #0
 8003f74:	601a      	str	r2, [r3, #0]
			u32FotaFileReadComplete = 1;
 8003f76:	4b11      	ldr	r3, [pc, #68]	; (8003fbc <updateHTTPReadLength+0x1a4>)
 8003f78:	2201      	movs	r2, #1
 8003f7a:	601a      	str	r2, [r3, #0]
			return 1;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e000      	b.n	8003f82 <updateHTTPReadLength+0x16a>
		}
	}
	else
		return 0;
 8003f80:	2300      	movs	r3, #0
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3708      	adds	r7, #8
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bdb0      	pop	{r4, r5, r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	200018f0 	.word	0x200018f0
 8003f90:	10624dd3 	.word	0x10624dd3
 8003f94:	200018f4 	.word	0x200018f4
 8003f98:	200018f8 	.word	0x200018f8
 8003f9c:	20000fd8 	.word	0x20000fd8
 8003fa0:	20000fac 	.word	0x20000fac
 8003fa4:	20000278 	.word	0x20000278
 8003fa8:	08018a40 	.word	0x08018a40
 8003fac:	20000fa4 	.word	0x20000fa4
 8003fb0:	08018934 	.word	0x08018934
 8003fb4:	08018930 	.word	0x08018930
 8003fb8:	20002b1c 	.word	0x20002b1c
 8003fbc:	200018fc 	.word	0x200018fc

08003fc0 <UrlLenforFOTA>:
//	strcat((char *)gau8GSM_ATURL,(char *)"\"");
//	strcat((char *)gau8GSM_ATURL,"\r\n");
}

void UrlLenforFOTA(void)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b082      	sub	sp, #8
 8003fc4:	af00      	add	r7, sp, #0
	uint32_t temp_len = strlen(gau8FotaURL);
 8003fc6:	4811      	ldr	r0, [pc, #68]	; (800400c <UrlLenforFOTA+0x4c>)
 8003fc8:	f7fc fd0c 	bl	80009e4 <strlen>
 8003fcc:	6078      	str	r0, [r7, #4]
	strcat((char*)gau8GSM_ATAPNL,(char *)gau8GSM_ATQHTTPURLLEN);
 8003fce:	4910      	ldr	r1, [pc, #64]	; (8004010 <UrlLenforFOTA+0x50>)
 8003fd0:	4810      	ldr	r0, [pc, #64]	; (8004014 <UrlLenforFOTA+0x54>)
 8003fd2:	f010 fdcf 	bl	8014b74 <strcat>
	itoa(temp_len,buffer,PAYLOAD_DATA_STRING_RADIX);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	220a      	movs	r2, #10
 8003fda:	490f      	ldr	r1, [pc, #60]	; (8004018 <UrlLenforFOTA+0x58>)
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f010 f85d 	bl	801409c <itoa>
	strcat((char*)gau8GSM_ATAPNL,(char *)buffer);
 8003fe2:	490d      	ldr	r1, [pc, #52]	; (8004018 <UrlLenforFOTA+0x58>)
 8003fe4:	480b      	ldr	r0, [pc, #44]	; (8004014 <UrlLenforFOTA+0x54>)
 8003fe6:	f010 fdc5 	bl	8014b74 <strcat>
	strcat((char*)gau8GSM_ATAPNL,",80\r\n"); // time out
 8003fea:	480a      	ldr	r0, [pc, #40]	; (8004014 <UrlLenforFOTA+0x54>)
 8003fec:	f7fc fcfa 	bl	80009e4 <strlen>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	4b07      	ldr	r3, [pc, #28]	; (8004014 <UrlLenforFOTA+0x54>)
 8003ff6:	4413      	add	r3, r2
 8003ff8:	4a08      	ldr	r2, [pc, #32]	; (800401c <UrlLenforFOTA+0x5c>)
 8003ffa:	6810      	ldr	r0, [r2, #0]
 8003ffc:	6018      	str	r0, [r3, #0]
 8003ffe:	8892      	ldrh	r2, [r2, #4]
 8004000:	809a      	strh	r2, [r3, #4]

}
 8004002:	bf00      	nop
 8004004:	3708      	adds	r7, #8
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
 800400a:	bf00      	nop
 800400c:	20001848 	.word	0x20001848
 8004010:	20000254 	.word	0x20000254
 8004014:	200002ac 	.word	0x200002ac
 8004018:	20000fa4 	.word	0x20000fa4
 800401c:	08018a54 	.word	0x08018a54

08004020 <Deinit_FOTA_Fail>:


void Deinit_FOTA_Fail()
{
 8004020:	b580      	push	{r7, lr}
 8004022:	af00      	add	r7, sp, #0
	memset((char *)gsmInstance.as8GSM_Response_Buff, GSM_ARRAY_INIT_CHAR, (GSM_RESPONSE_ARRAY_SIZE));
 8004024:	f640 228c 	movw	r2, #2700	; 0xa8c
 8004028:	2100      	movs	r1, #0
 800402a:	4815      	ldr	r0, [pc, #84]	; (8004080 <Deinit_FOTA_Fail+0x60>)
 800402c:	f010 f856 	bl	80140dc <memset>
	HAL_GPIO_WritePin(GPS_LED_GPIO_Port, GPS_LED_Pin, GPIO_PIN_RESET);
 8004030:	2200      	movs	r2, #0
 8004032:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004036:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800403a:	f009 fb7b 	bl	800d734 <HAL_GPIO_WritePin>
	u32FOTAFileBaseAddress = 0;
 800403e:	4b11      	ldr	r3, [pc, #68]	; (8004084 <Deinit_FOTA_Fail+0x64>)
 8004040:	2200      	movs	r2, #0
 8004042:	601a      	str	r2, [r3, #0]
	u32FotaFileChunkCounter = 0;
 8004044:	4b10      	ldr	r3, [pc, #64]	; (8004088 <Deinit_FOTA_Fail+0x68>)
 8004046:	2200      	movs	r2, #0
 8004048:	601a      	str	r2, [r3, #0]
	u32FotaFileRemainingBytes = 0;
 800404a:	4b10      	ldr	r3, [pc, #64]	; (800408c <Deinit_FOTA_Fail+0x6c>)
 800404c:	2200      	movs	r2, #0
 800404e:	601a      	str	r2, [r3, #0]
	SUBTriggerFlag = FALSE;
 8004050:	4b0f      	ldr	r3, [pc, #60]	; (8004090 <Deinit_FOTA_Fail+0x70>)
 8004052:	2200      	movs	r2, #0
 8004054:	701a      	strb	r2, [r3, #0]
	boolAttemptFota = FALSE;
 8004056:	4b0f      	ldr	r3, [pc, #60]	; (8004094 <Deinit_FOTA_Fail+0x74>)
 8004058:	2200      	movs	r2, #0
 800405a:	701a      	strb	r2, [r3, #0]
	u32MemoryWriteCycle = FALSE;
 800405c:	4b0e      	ldr	r3, [pc, #56]	; (8004098 <Deinit_FOTA_Fail+0x78>)
 800405e:	2200      	movs	r2, #0
 8004060:	601a      	str	r2, [r3, #0]
	gsmInstance.u8IncrementGsmState = FALSE;
 8004062:	4b0e      	ldr	r3, [pc, #56]	; (800409c <Deinit_FOTA_Fail+0x7c>)
 8004064:	2200      	movs	r2, #0
 8004066:	f883 2f89 	strb.w	r2, [r3, #3977]	; 0xf89
	gsmInstance.enmcurrentTask = enmGSMTASK_UPLOADDATA;
 800406a:	4b0c      	ldr	r3, [pc, #48]	; (800409c <Deinit_FOTA_Fail+0x7c>)
 800406c:	2203      	movs	r2, #3
 800406e:	f883 2fae 	strb.w	r2, [r3, #4014]	; 0xfae
	gsmInstance.enmGSMCommand = enmGSMSTATE_MQTTPUBEX;
 8004072:	4b0a      	ldr	r3, [pc, #40]	; (800409c <Deinit_FOTA_Fail+0x7c>)
 8004074:	2219      	movs	r2, #25
 8004076:	f883 2faf 	strb.w	r2, [r3, #4015]	; 0xfaf

}
 800407a:	bf00      	nop
 800407c:	bd80      	pop	{r7, pc}
 800407e:	bf00      	nop
 8004080:	20003013 	.word	0x20003013
 8004084:	200018f0 	.word	0x200018f0
 8004088:	200018f4 	.word	0x200018f4
 800408c:	200018f8 	.word	0x200018f8
 8004090:	20001735 	.word	0x20001735
 8004094:	200018ec 	.word	0x200018ec
 8004098:	20001900 	.word	0x20001900
 800409c:	20002b1c 	.word	0x20002b1c

080040a0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80040a4:	4b1b      	ldr	r3, [pc, #108]	; (8004114 <MX_I2C1_Init+0x74>)
 80040a6:	4a1c      	ldr	r2, [pc, #112]	; (8004118 <MX_I2C1_Init+0x78>)
 80040a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 80040aa:	4b1a      	ldr	r3, [pc, #104]	; (8004114 <MX_I2C1_Init+0x74>)
 80040ac:	4a1b      	ldr	r2, [pc, #108]	; (800411c <MX_I2C1_Init+0x7c>)
 80040ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80040b0:	4b18      	ldr	r3, [pc, #96]	; (8004114 <MX_I2C1_Init+0x74>)
 80040b2:	2200      	movs	r2, #0
 80040b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80040b6:	4b17      	ldr	r3, [pc, #92]	; (8004114 <MX_I2C1_Init+0x74>)
 80040b8:	2201      	movs	r2, #1
 80040ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80040bc:	4b15      	ldr	r3, [pc, #84]	; (8004114 <MX_I2C1_Init+0x74>)
 80040be:	2200      	movs	r2, #0
 80040c0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80040c2:	4b14      	ldr	r3, [pc, #80]	; (8004114 <MX_I2C1_Init+0x74>)
 80040c4:	2200      	movs	r2, #0
 80040c6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80040c8:	4b12      	ldr	r3, [pc, #72]	; (8004114 <MX_I2C1_Init+0x74>)
 80040ca:	2200      	movs	r2, #0
 80040cc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80040ce:	4b11      	ldr	r3, [pc, #68]	; (8004114 <MX_I2C1_Init+0x74>)
 80040d0:	2200      	movs	r2, #0
 80040d2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80040d4:	4b0f      	ldr	r3, [pc, #60]	; (8004114 <MX_I2C1_Init+0x74>)
 80040d6:	2200      	movs	r2, #0
 80040d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80040da:	480e      	ldr	r0, [pc, #56]	; (8004114 <MX_I2C1_Init+0x74>)
 80040dc:	f009 fb9a 	bl	800d814 <HAL_I2C_Init>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d001      	beq.n	80040ea <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80040e6:	f000 fa50 	bl	800458a <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80040ea:	2100      	movs	r1, #0
 80040ec:	4809      	ldr	r0, [pc, #36]	; (8004114 <MX_I2C1_Init+0x74>)
 80040ee:	f00a ff53 	bl	800ef98 <HAL_I2CEx_ConfigAnalogFilter>
 80040f2:	4603      	mov	r3, r0
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d001      	beq.n	80040fc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80040f8:	f000 fa47 	bl	800458a <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80040fc:	2100      	movs	r1, #0
 80040fe:	4805      	ldr	r0, [pc, #20]	; (8004114 <MX_I2C1_Init+0x74>)
 8004100:	f00a ffba 	bl	800f078 <HAL_I2CEx_ConfigDigitalFilter>
 8004104:	4603      	mov	r3, r0
 8004106:	2b00      	cmp	r3, #0
 8004108:	d001      	beq.n	800410e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800410a:	f000 fa3e 	bl	800458a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800410e:	bf00      	nop
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	20003dfc 	.word	0x20003dfc
 8004118:	40005400 	.word	0x40005400
 800411c:	10909cec 	.word	0x10909cec

08004120 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b0a2      	sub	sp, #136	; 0x88
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004128:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800412c:	2200      	movs	r2, #0
 800412e:	601a      	str	r2, [r3, #0]
 8004130:	605a      	str	r2, [r3, #4]
 8004132:	609a      	str	r2, [r3, #8]
 8004134:	60da      	str	r2, [r3, #12]
 8004136:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004138:	f107 0314 	add.w	r3, r7, #20
 800413c:	2260      	movs	r2, #96	; 0x60
 800413e:	2100      	movs	r1, #0
 8004140:	4618      	mov	r0, r3
 8004142:	f00f ffcb 	bl	80140dc <memset>
  if(i2cHandle->Instance==I2C1)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a27      	ldr	r2, [pc, #156]	; (80041e8 <HAL_I2C_MspInit+0xc8>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d147      	bne.n	80041e0 <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004150:	2340      	movs	r3, #64	; 0x40
 8004152:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004154:	2300      	movs	r3, #0
 8004156:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004158:	f107 0314 	add.w	r3, r7, #20
 800415c:	4618      	mov	r0, r3
 800415e:	f00c f8dd 	bl	801031c <HAL_RCCEx_PeriphCLKConfig>
 8004162:	4603      	mov	r3, r0
 8004164:	2b00      	cmp	r3, #0
 8004166:	d001      	beq.n	800416c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8004168:	f000 fa0f 	bl	800458a <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800416c:	4b1f      	ldr	r3, [pc, #124]	; (80041ec <HAL_I2C_MspInit+0xcc>)
 800416e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004170:	4a1e      	ldr	r2, [pc, #120]	; (80041ec <HAL_I2C_MspInit+0xcc>)
 8004172:	f043 0302 	orr.w	r3, r3, #2
 8004176:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004178:	4b1c      	ldr	r3, [pc, #112]	; (80041ec <HAL_I2C_MspInit+0xcc>)
 800417a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800417c:	f003 0302 	and.w	r3, r3, #2
 8004180:	613b      	str	r3, [r7, #16]
 8004182:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004184:	23c0      	movs	r3, #192	; 0xc0
 8004186:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004188:	2312      	movs	r3, #18
 800418a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800418c:	2300      	movs	r3, #0
 800418e:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004190:	2303      	movs	r3, #3
 8004192:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004196:	2304      	movs	r3, #4
 8004198:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800419c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80041a0:	4619      	mov	r1, r3
 80041a2:	4813      	ldr	r0, [pc, #76]	; (80041f0 <HAL_I2C_MspInit+0xd0>)
 80041a4:	f008 ff50 	bl	800d048 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80041a8:	4b10      	ldr	r3, [pc, #64]	; (80041ec <HAL_I2C_MspInit+0xcc>)
 80041aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ac:	4a0f      	ldr	r2, [pc, #60]	; (80041ec <HAL_I2C_MspInit+0xcc>)
 80041ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80041b2:	6593      	str	r3, [r2, #88]	; 0x58
 80041b4:	4b0d      	ldr	r3, [pc, #52]	; (80041ec <HAL_I2C_MspInit+0xcc>)
 80041b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041bc:	60fb      	str	r3, [r7, #12]
 80041be:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 4, 0);
 80041c0:	2200      	movs	r2, #0
 80041c2:	2104      	movs	r1, #4
 80041c4:	201f      	movs	r0, #31
 80041c6:	f007 ffeb 	bl	800c1a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80041ca:	201f      	movs	r0, #31
 80041cc:	f008 f814 	bl	800c1f8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 4, 0);
 80041d0:	2200      	movs	r2, #0
 80041d2:	2104      	movs	r1, #4
 80041d4:	2020      	movs	r0, #32
 80041d6:	f007 ffe3 	bl	800c1a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80041da:	2020      	movs	r0, #32
 80041dc:	f008 f80c 	bl	800c1f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80041e0:	bf00      	nop
 80041e2:	3788      	adds	r7, #136	; 0x88
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}
 80041e8:	40005400 	.word	0x40005400
 80041ec:	40021000 	.word	0x40021000
 80041f0:	48000400 	.word	0x48000400

080041f4 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80041f8:	4b0b      	ldr	r3, [pc, #44]	; (8004228 <MX_IWDG_Init+0x34>)
 80041fa:	4a0c      	ldr	r2, [pc, #48]	; (800422c <MX_IWDG_Init+0x38>)
 80041fc:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 80041fe:	4b0a      	ldr	r3, [pc, #40]	; (8004228 <MX_IWDG_Init+0x34>)
 8004200:	2206      	movs	r2, #6
 8004202:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8004204:	4b08      	ldr	r3, [pc, #32]	; (8004228 <MX_IWDG_Init+0x34>)
 8004206:	f640 72ff 	movw	r2, #4095	; 0xfff
 800420a:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 800420c:	4b06      	ldr	r3, [pc, #24]	; (8004228 <MX_IWDG_Init+0x34>)
 800420e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8004212:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8004214:	4804      	ldr	r0, [pc, #16]	; (8004228 <MX_IWDG_Init+0x34>)
 8004216:	f00a ff9b 	bl	800f150 <HAL_IWDG_Init>
 800421a:	4603      	mov	r3, r0
 800421c:	2b00      	cmp	r3, #0
 800421e:	d001      	beq.n	8004224 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8004220:	f000 f9b3 	bl	800458a <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8004224:	bf00      	nop
 8004226:	bd80      	pop	{r7, pc}
 8004228:	20003e50 	.word	0x20003e50
 800422c:	40003000 	.word	0x40003000

08004230 <LL_USART_EnableIT_RXNE>:
{
 8004230:	b480      	push	{r7}
 8004232:	b089      	sub	sp, #36	; 0x24
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	e853 3f00 	ldrex	r3, [r3]
 8004242:	60bb      	str	r3, [r7, #8]
   return(result);
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	f043 0320 	orr.w	r3, r3, #32
 800424a:	61fb      	str	r3, [r7, #28]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	69fa      	ldr	r2, [r7, #28]
 8004250:	61ba      	str	r2, [r7, #24]
 8004252:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004254:	6979      	ldr	r1, [r7, #20]
 8004256:	69ba      	ldr	r2, [r7, #24]
 8004258:	e841 2300 	strex	r3, r2, [r1]
 800425c:	613b      	str	r3, [r7, #16]
   return(result);
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d1e9      	bne.n	8004238 <LL_USART_EnableIT_RXNE+0x8>
}
 8004264:	bf00      	nop
 8004266:	bf00      	nop
 8004268:	3724      	adds	r7, #36	; 0x24
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr
	...

08004274 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004278:	f004 fdb5 	bl	8008de6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800427c:	f000 f934 	bl	80044e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004280:	f7fd fe80 	bl	8001f84 <MX_GPIO_Init>
  MX_DMA_Init();
 8004284:	f7fd fe24 	bl	8001ed0 <MX_DMA_Init>
  MX_ADC1_Init();
 8004288:	f7fd fb9a 	bl	80019c0 <MX_ADC1_Init>
  MX_CAN1_Init();
 800428c:	f7fd fcc8 	bl	8001c20 <MX_CAN1_Init>
  MX_IWDG_Init();
 8004290:	f7ff ffb0 	bl	80041f4 <MX_IWDG_Init>
  MX_I2C1_Init();
 8004294:	f7ff ff04 	bl	80040a0 <MX_I2C1_Init>
  MX_RTC_Init();
 8004298:	f001 ffc6 	bl	8006228 <MX_RTC_Init>
  MX_SPI2_Init();
 800429c:	f002 fe2e 	bl	8006efc <MX_SPI2_Init>
  MX_TIM7_Init();
 80042a0:	f003 f896 	bl	80073d0 <MX_TIM7_Init>
  MX_USART1_UART_Init();
 80042a4:	f003 f9f8 	bl	8007698 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80042a8:	f003 faee 	bl	8007888 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 80042ac:	f003 fa72 	bl	8007794 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  updateDeviceSignature();
 80042b0:	f7fd fd9e 	bl	8001df0 <updateDeviceSignature>
  HAL_TIM_Base_Start_IT(&htim7);
 80042b4:	4875      	ldr	r0, [pc, #468]	; (800448c <main+0x218>)
 80042b6:	f00e fc41 	bl	8012b3c <HAL_TIM_Base_Start_IT>
  LL_USART_EnableIT_RXNE(USART1);
 80042ba:	4875      	ldr	r0, [pc, #468]	; (8004490 <main+0x21c>)
 80042bc:	f7ff ffb8 	bl	8004230 <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_RXNE(USART2);
 80042c0:	4874      	ldr	r0, [pc, #464]	; (8004494 <main+0x220>)
 80042c2:	f7ff ffb5 	bl	8004230 <LL_USART_EnableIT_RXNE>
	#if(DEBUGENABLE == TRUE)
	 LL_USART_EnableIT_RXNE(USART3);
	#endif

	gsmInstance.enmGSMPwrState = enmGSM_PWRNOTSTARTED;
 80042c6:	4b74      	ldr	r3, [pc, #464]	; (8004498 <main+0x224>)
 80042c8:	2200      	movs	r2, #0
 80042ca:	f883 2fb0 	strb.w	r2, [r3, #4016]	; 0xfb0
	gu32PayloadQueueEnqueue = ONE_MIN;
 80042ce:	4b73      	ldr	r3, [pc, #460]	; (800449c <main+0x228>)
 80042d0:	f64e 2260 	movw	r2, #60000	; 0xea60
 80042d4:	601a      	str	r2, [r3, #0]
	u8daignostic|=(1<<7); // Device Started
 80042d6:	4b72      	ldr	r3, [pc, #456]	; (80044a0 <main+0x22c>)
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80042de:	b2da      	uxtb	r2, r3
 80042e0:	4b6f      	ldr	r3, [pc, #444]	; (80044a0 <main+0x22c>)
 80042e2:	701a      	strb	r2, [r3, #0]

	g_stEepromBuffMemAdd.u32BuffFlashWriteAddress = 0;
 80042e4:	4b6f      	ldr	r3, [pc, #444]	; (80044a4 <main+0x230>)
 80042e6:	2200      	movs	r2, #0
 80042e8:	605a      	str	r2, [r3, #4]
	g_stEepromBuffMemAdd.u32BuffFlashReadAddress = 0;
 80042ea:	4b6e      	ldr	r3, [pc, #440]	; (80044a4 <main+0x230>)
 80042ec:	2200      	movs	r2, #0
 80042ee:	601a      	str	r2, [r3, #0]
	EEPROM_RetriveBuffMemData();
 80042f0:	f7fd fab4 	bl	800185c <EEPROM_RetriveBuffMemData>
	FlashStr.u32FlashReadAddress =  g_stEepromBuffMemAdd.u32BuffFlashReadAddress;
 80042f4:	4b6b      	ldr	r3, [pc, #428]	; (80044a4 <main+0x230>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a6b      	ldr	r2, [pc, #428]	; (80044a8 <main+0x234>)
 80042fa:	6053      	str	r3, [r2, #4]
	FlashStr.u32FlashWriteAddress = g_stEepromBuffMemAdd.u32BuffFlashWriteAddress;
 80042fc:	4b69      	ldr	r3, [pc, #420]	; (80044a4 <main+0x230>)
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	4a69      	ldr	r2, [pc, #420]	; (80044a8 <main+0x234>)
 8004302:	6013      	str	r3, [r2, #0]
	SFlash_Chip_Select(DISABLE);
 8004304:	2000      	movs	r0, #0
 8004306:	f002 fbf5 	bl	8006af4 <SFlash_Chip_Select>
	SFlash_Read_Device_ID();
 800430a:	f002 fd6b 	bl	8006de4 <SFlash_Read_Device_ID>
	FlashStr.bitFlagSFlashData = 0;
 800430e:	4b66      	ldr	r3, [pc, #408]	; (80044a8 <main+0x234>)
 8004310:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004314:	3318      	adds	r3, #24
 8004316:	2200      	movs	r2, #0
 8004318:	701a      	strb	r2, [r3, #0]
	FlashStr.bitFlagMemoryFull = 0;
 800431a:	4b63      	ldr	r3, [pc, #396]	; (80044a8 <main+0x234>)
 800431c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004320:	3317      	adds	r3, #23
 8004322:	2200      	movs	r2, #0
 8004324:	701a      	strb	r2, [r3, #0]
	FlashStr.bitFlagReadInProgress = 0;
 8004326:	4b60      	ldr	r3, [pc, #384]	; (80044a8 <main+0x234>)
 8004328:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800432c:	3319      	adds	r3, #25
 800432e:	2200      	movs	r2, #0
 8004330:	701a      	strb	r2, [r3, #0]
	Queue_InitLiveQ(&gsmLivePayload);
 8004332:	485e      	ldr	r0, [pc, #376]	; (80044ac <main+0x238>)
 8004334:	f001 fdd4 	bl	8005ee0 <Queue_InitLiveQ>
	Queue_InitBuffQ(&gsmBuffPayload);
 8004338:	485d      	ldr	r0, [pc, #372]	; (80044b0 <main+0x23c>)
 800433a:	f001 fea5 	bl	8006088 <Queue_InitBuffQ>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_IWDG_Refresh(&hiwdg);
 800433e:	485d      	ldr	r0, [pc, #372]	; (80044b4 <main+0x240>)
 8004340:	f00a ff94 	bl	800f26c <HAL_IWDG_Refresh>
	  	  HAL_GPIO_TogglePin(WD_FEED_uC_GPIO_Port, WD_FEED_uC_Pin);
 8004344:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004348:	485b      	ldr	r0, [pc, #364]	; (80044b8 <main+0x244>)
 800434a:	f009 fa23 	bl	800d794 <HAL_GPIO_TogglePin>

	  	  if(boolstartCan)// && (Internal_Battery_Flag == FALSE))
 800434e:	4b5b      	ldr	r3, [pc, #364]	; (80044bc <main+0x248>)
 8004350:	781b      	ldrb	r3, [r3, #0]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d007      	beq.n	8004366 <main+0xf2>
	  	  {
	  		  canFilterConfig();
 8004356:	f003 fd4d 	bl	8007df4 <canFilterConfig>
	  		  boolstartCan = FALSE;
 800435a:	4b58      	ldr	r3, [pc, #352]	; (80044bc <main+0x248>)
 800435c:	2200      	movs	r2, #0
 800435e:	701a      	strb	r2, [r3, #0]
	  		  Diagnostic(enmDiagnostic_CAN_ID);
 8004360:	2001      	movs	r0, #1
 8004362:	f000 ffa7 	bl	80052b4 <Diagnostic>
	  		#endif

	  	  }//end of if(startCan)

	  	  /*1. ADC module Task*/
	  	 Adc_FSM();
 8004366:	f003 fc1f 	bl	8007ba8 <Adc_FSM>
	  	 /* Serial Flash operations */
	  	 SerialFlashFSM();
 800436a:	f001 fff1 	bl	8006350 <SerialFlashFSM>
	  	 /*RS232*/
       RS232();
 800436e:	f003 fbe9 	bl	8007b44 <RS232>
	  			}
	  			else{}
	  		}//end of if(CharacterCounter>1)
	  #endif

	  	 parseCanMessageQueue();
 8004372:	f003 ff25 	bl	80081c0 <parseCanMessageQueue>
//	  	executeCANQueries();
	  	   if((boolFOTACompleteFlag == TRUE) && (Queue_IsLiveQueueEmpty(&gsmLivePayload) == TRUE))
 8004376:	4b52      	ldr	r3, [pc, #328]	; (80044c0 <main+0x24c>)
 8004378:	781b      	ldrb	r3, [r3, #0]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d007      	beq.n	800438e <main+0x11a>
 800437e:	484b      	ldr	r0, [pc, #300]	; (80044ac <main+0x238>)
 8004380:	f001 fe67 	bl	8006052 <Queue_IsLiveQueueEmpty>
 8004384:	4603      	mov	r3, r0
 8004386:	2b01      	cmp	r3, #1
 8004388:	d101      	bne.n	800438e <main+0x11a>
	  	   {
	  	   		systemReset();
 800438a:	f002 ffff 	bl	800738c <systemReset>
	  	   }
	  	   if((gu32PayloadQueueEnqueue == 0) && (gu32FotaRquestFlag == FALSE)) //&& (GSMInitCompleteFlag == TRUE)
 800438e:	4b43      	ldr	r3, [pc, #268]	; (800449c <main+0x228>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d10e      	bne.n	80043b4 <main+0x140>
 8004396:	4b4b      	ldr	r3, [pc, #300]	; (80044c4 <main+0x250>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d10a      	bne.n	80043b4 <main+0x140>
	  	   {
	  	   		Queue_LiveEnequeue(&gsmLivePayload,(char *)getMachineDataString());
 800439e:	f000 f905 	bl	80045ac <getMachineDataString>
 80043a2:	4603      	mov	r3, r0
 80043a4:	4619      	mov	r1, r3
 80043a6:	4841      	ldr	r0, [pc, #260]	; (80044ac <main+0x238>)
 80043a8:	f001 fdaa 	bl	8005f00 <Queue_LiveEnequeue>
//	  	   		{
//	  	   			gu32PayloadQueueEnqueue = TEN_SEC; /* Upload Frequency */
//	  	   		}
//	  	   		else
//	  	   		{
	  	   			gu32PayloadQueueEnqueue = TEN_SEC; /* Upload Frequency */
 80043ac:	4b3b      	ldr	r3, [pc, #236]	; (800449c <main+0x228>)
 80043ae:	f242 7210 	movw	r2, #10000	; 0x2710
 80043b2:	601a      	str	r2, [r3, #0]
//	  	   		}

	  	   }//end of if((gu32PayloadQueueEnqueue == 0) && (gu32FotaRquestFlag == FALSE) ))

	  	   if(gsmInstance.u32GSMTimer > TWO_MIN)
 80043b4:	4b38      	ldr	r3, [pc, #224]	; (8004498 <main+0x224>)
 80043b6:	f8d3 3f90 	ldr.w	r3, [r3, #3984]	; 0xf90
 80043ba:	4a43      	ldr	r2, [pc, #268]	; (80044c8 <main+0x254>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d904      	bls.n	80043ca <main+0x156>
	  		  gsmInstance.u32GSMTimer =TWO_SEC;
 80043c0:	4b35      	ldr	r3, [pc, #212]	; (8004498 <main+0x224>)
 80043c2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80043c6:	f8c3 2f90 	str.w	r2, [r3, #3984]	; 0xf90

	  	  if(gu32GSMHangTimer == 0)
 80043ca:	4b40      	ldr	r3, [pc, #256]	; (80044cc <main+0x258>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d101      	bne.n	80043d6 <main+0x162>
	  		  initGSMSIM868();
 80043d2:	f7fd fe9f 	bl	8002114 <initGSMSIM868>

	  	  operateGSMSIM868();
 80043d6:	f7fe f8c7 	bl	8002568 <operateGSMSIM868>

	  	  if(SUBTriggerFlag == TRUE)
 80043da:	4b3d      	ldr	r3, [pc, #244]	; (80044d0 <main+0x25c>)
 80043dc:	781b      	ldrb	r3, [r3, #0]
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d101      	bne.n	80043e6 <main+0x172>
	  	  {
	  		SubRevicedString();
 80043e2:	f003 fad1 	bl	8007988 <SubRevicedString>
	  	  }//end of  if(SUBTriggerFlag == TRUE)
//	  	CheckImmobilization();
	  	/* LED Indications */
	  	  if(gu32LEDDelay == 0)
 80043e6:	4b3b      	ldr	r3, [pc, #236]	; (80044d4 <main+0x260>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d1a7      	bne.n	800433e <main+0xca>
	  	  {
	  		  HAL_GPIO_WritePin(Comm_LED_GPIO_Port, Comm_LED_Pin, GPIO_PIN_RESET);
 80043ee:	2200      	movs	r2, #0
 80043f0:	2108      	movs	r1, #8
 80043f2:	4831      	ldr	r0, [pc, #196]	; (80044b8 <main+0x244>)
 80043f4:	f009 f99e 	bl	800d734 <HAL_GPIO_WritePin>

	  		  //for module reset
	  		  if((gu8ModuleInitNotifyCnt <= 3) && (gu8ModuleInitFlag == TRUE))
 80043f8:	4b37      	ldr	r3, [pc, #220]	; (80044d8 <main+0x264>)
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	2b03      	cmp	r3, #3
 80043fe:	d810      	bhi.n	8004422 <main+0x1ae>
 8004400:	4b36      	ldr	r3, [pc, #216]	; (80044dc <main+0x268>)
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	2b01      	cmp	r3, #1
 8004406:	d10c      	bne.n	8004422 <main+0x1ae>
	  		  {
	  			  HAL_GPIO_TogglePin(GPS_LED_GPIO_Port, GPS_LED_Pin);
 8004408:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800440c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004410:	f009 f9c0 	bl	800d794 <HAL_GPIO_TogglePin>
	  			  gu8ModuleInitNotifyCnt++;
 8004414:	4b30      	ldr	r3, [pc, #192]	; (80044d8 <main+0x264>)
 8004416:	781b      	ldrb	r3, [r3, #0]
 8004418:	3301      	adds	r3, #1
 800441a:	b2da      	uxtb	r2, r3
 800441c:	4b2e      	ldr	r3, [pc, #184]	; (80044d8 <main+0x264>)
 800441e:	701a      	strb	r2, [r3, #0]
 8004420:	e005      	b.n	800442e <main+0x1ba>
	  		  }
	  		  else
	  		  {
	  			 gu8ModuleInitNotifyCnt = 0;
 8004422:	4b2d      	ldr	r3, [pc, #180]	; (80044d8 <main+0x264>)
 8004424:	2200      	movs	r2, #0
 8004426:	701a      	strb	r2, [r3, #0]
	  			 gu8ModuleInitFlag = FALSE;
 8004428:	4b2c      	ldr	r3, [pc, #176]	; (80044dc <main+0x268>)
 800442a:	2200      	movs	r2, #0
 800442c:	701a      	strb	r2, [r3, #0]
	  		  }

	  		  if(HAL_GPIO_ReadPin(GPIOB, DI_EXTI4_Pin) == HIGH)            //check pin state
 800442e:	2110      	movs	r1, #16
 8004430:	4821      	ldr	r0, [pc, #132]	; (80044b8 <main+0x244>)
 8004432:	f009 f959 	bl	800d6e8 <HAL_GPIO_ReadPin>
 8004436:	4603      	mov	r3, r0
 8004438:	2b01      	cmp	r3, #1
 800443a:	d103      	bne.n	8004444 <main+0x1d0>
	  		  {
	  			  boolInginitionStatus1 = FALSE;
 800443c:	4b28      	ldr	r3, [pc, #160]	; (80044e0 <main+0x26c>)
 800443e:	2200      	movs	r2, #0
 8004440:	701a      	strb	r2, [r3, #0]
 8004442:	e009      	b.n	8004458 <main+0x1e4>
	  		  }
	  		  else if(HAL_GPIO_ReadPin(GPIOB, DI_EXTI4_Pin) == LOW)
 8004444:	2110      	movs	r1, #16
 8004446:	481c      	ldr	r0, [pc, #112]	; (80044b8 <main+0x244>)
 8004448:	f009 f94e 	bl	800d6e8 <HAL_GPIO_ReadPin>
 800444c:	4603      	mov	r3, r0
 800444e:	2b00      	cmp	r3, #0
 8004450:	d102      	bne.n	8004458 <main+0x1e4>
	  		  {
	  			  boolInginitionStatus1 = TRUE;
 8004452:	4b23      	ldr	r3, [pc, #140]	; (80044e0 <main+0x26c>)
 8004454:	2201      	movs	r2, #1
 8004456:	701a      	strb	r2, [r3, #0]
//	  			  {
//	  				  gu32PayloadQueueEnqueue = TEN_SEC;
//	  			  }
	  		  }

	  		  if(HAL_GPIO_ReadPin(GPIOB, DI_EXTI5_Pin) == HIGH)            //check pin state
 8004458:	2120      	movs	r1, #32
 800445a:	4817      	ldr	r0, [pc, #92]	; (80044b8 <main+0x244>)
 800445c:	f009 f944 	bl	800d6e8 <HAL_GPIO_ReadPin>
 8004460:	4603      	mov	r3, r0
 8004462:	2b01      	cmp	r3, #1
 8004464:	d103      	bne.n	800446e <main+0x1fa>
	  		  {
	  			  boolInginitionStatus2 = FALSE;
 8004466:	4b1f      	ldr	r3, [pc, #124]	; (80044e4 <main+0x270>)
 8004468:	2200      	movs	r2, #0
 800446a:	701a      	strb	r2, [r3, #0]
 800446c:	e009      	b.n	8004482 <main+0x20e>
	  		  }
	  		  else if(HAL_GPIO_ReadPin(GPIOB, DI_EXTI5_Pin) == LOW)
 800446e:	2120      	movs	r1, #32
 8004470:	4811      	ldr	r0, [pc, #68]	; (80044b8 <main+0x244>)
 8004472:	f009 f939 	bl	800d6e8 <HAL_GPIO_ReadPin>
 8004476:	4603      	mov	r3, r0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d102      	bne.n	8004482 <main+0x20e>
	  		  {
	  			  boolInginitionStatus2 = TRUE;
 800447c:	4b19      	ldr	r3, [pc, #100]	; (80044e4 <main+0x270>)
 800447e:	2201      	movs	r2, #1
 8004480:	701a      	strb	r2, [r3, #0]
//	  			  {
//	  				  gu32PayloadQueueEnqueue = TEN_SEC;
//	  			  }
	  		  }

	  		  gu32LEDDelay = ONE_SEC;
 8004482:	4b14      	ldr	r3, [pc, #80]	; (80044d4 <main+0x260>)
 8004484:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004488:	601a      	str	r2, [r3, #0]
	  HAL_IWDG_Refresh(&hiwdg);
 800448a:	e758      	b.n	800433e <main+0xca>
 800448c:	20005f08 	.word	0x20005f08
 8004490:	40013800 	.word	0x40013800
 8004494:	40004400 	.word	0x40004400
 8004498:	20002b1c 	.word	0x20002b1c
 800449c:	20002888 	.word	0x20002888
 80044a0:	20001946 	.word	0x20001946
 80044a4:	200028c0 	.word	0x200028c0
 80044a8:	20003e84 	.word	0x20003e84
 80044ac:	20002aec 	.word	0x20002aec
 80044b0:	20002abc 	.word	0x20002abc
 80044b4:	20003e50 	.word	0x20003e50
 80044b8:	48000400 	.word	0x48000400
 80044bc:	20000fde 	.word	0x20000fde
 80044c0:	2000173c 	.word	0x2000173c
 80044c4:	20001738 	.word	0x20001738
 80044c8:	0001d4c0 	.word	0x0001d4c0
 80044cc:	200028a0 	.word	0x200028a0
 80044d0:	20001735 	.word	0x20001735
 80044d4:	20002894 	.word	0x20002894
 80044d8:	20001944 	.word	0x20001944
 80044dc:	20001915 	.word	0x20001915
 80044e0:	20002820 	.word	0x20002820
 80044e4:	20002821 	.word	0x20002821

080044e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b096      	sub	sp, #88	; 0x58
 80044ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80044ee:	f107 0314 	add.w	r3, r7, #20
 80044f2:	2244      	movs	r2, #68	; 0x44
 80044f4:	2100      	movs	r1, #0
 80044f6:	4618      	mov	r0, r3
 80044f8:	f00f fdf0 	bl	80140dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80044fc:	463b      	mov	r3, r7
 80044fe:	2200      	movs	r2, #0
 8004500:	601a      	str	r2, [r3, #0]
 8004502:	605a      	str	r2, [r3, #4]
 8004504:	609a      	str	r2, [r3, #8]
 8004506:	60da      	str	r2, [r3, #12]
 8004508:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800450a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800450e:	f00a fecb 	bl	800f2a8 <HAL_PWREx_ControlVoltageScaling>
 8004512:	4603      	mov	r3, r0
 8004514:	2b00      	cmp	r3, #0
 8004516:	d001      	beq.n	800451c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8004518:	f000 f837 	bl	800458a <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800451c:	2309      	movs	r3, #9
 800451e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004520:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004524:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8004526:	2301      	movs	r3, #1
 8004528:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800452a:	2302      	movs	r3, #2
 800452c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800452e:	2303      	movs	r3, #3
 8004530:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 5;
 8004532:	2305      	movs	r3, #5
 8004534:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 32;
 8004536:	2320      	movs	r3, #32
 8004538:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800453a:	2307      	movs	r3, #7
 800453c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800453e:	2302      	movs	r3, #2
 8004540:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004542:	2302      	movs	r3, #2
 8004544:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004546:	f107 0314 	add.w	r3, r7, #20
 800454a:	4618      	mov	r0, r3
 800454c:	f00a ff0e 	bl	800f36c <HAL_RCC_OscConfig>
 8004550:	4603      	mov	r3, r0
 8004552:	2b00      	cmp	r3, #0
 8004554:	d001      	beq.n	800455a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8004556:	f000 f818 	bl	800458a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800455a:	230f      	movs	r3, #15
 800455c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800455e:	2303      	movs	r3, #3
 8004560:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004562:	2300      	movs	r3, #0
 8004564:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004566:	2300      	movs	r3, #0
 8004568:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800456a:	2300      	movs	r3, #0
 800456c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800456e:	463b      	mov	r3, r7
 8004570:	2104      	movs	r1, #4
 8004572:	4618      	mov	r0, r3
 8004574:	f00b fc46 	bl	800fe04 <HAL_RCC_ClockConfig>
 8004578:	4603      	mov	r3, r0
 800457a:	2b00      	cmp	r3, #0
 800457c:	d001      	beq.n	8004582 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800457e:	f000 f804 	bl	800458a <Error_Handler>
  }
}
 8004582:	bf00      	nop
 8004584:	3758      	adds	r7, #88	; 0x58
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}

0800458a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800458a:	b480      	push	{r7}
 800458c:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800458e:	b672      	cpsid	i
}
 8004590:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004592:	e7fe      	b.n	8004592 <Error_Handler+0x8>

08004594 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8004594:	b480      	push	{r7}
 8004596:	b083      	sub	sp, #12
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 800459e:	bf00      	nop
 80045a0:	370c      	adds	r7, #12
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr
	...

080045ac <getMachineDataString>:
******************************************************************************/
uint32_t gu32CanIdsLoopCounter = 1;
//uint32_t gu32CanPayloadLoopCounter = 0;
//uint32_t gu32StringLength = 0;
char * getMachineDataString(void)
{
 80045ac:	b5b0      	push	{r4, r5, r7, lr}
 80045ae:	b084      	sub	sp, #16
 80045b0:	af00      	add	r7, sp, #0
	//updateSystemParameters();
	  char *systemPayload = (char *)malloc(sizeof(char) * GSM_PAYLOAD_MAX_SIZE);// GSM_PAYLOAD_MAX_SIZE = 1500
 80045b2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80045b6:	f00f fd73 	bl	80140a0 <malloc>
 80045ba:	4603      	mov	r3, r0
 80045bc:	60fb      	str	r3, [r7, #12]

	  char temp[8] = "";
 80045be:	2300      	movs	r3, #0
 80045c0:	607b      	str	r3, [r7, #4]
 80045c2:	2300      	movs	r3, #0
 80045c4:	60bb      	str	r3, [r7, #8]
//	uint16_t len = strlen(systemPayload);
//	uint16_t size = sizeof(systemPayload);

	if(systemPayload != NULL)
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	f000 822c 	beq.w	8004a26 <getMachineDataString+0x47a>
			2.	Hardware ID
			3.	Model No.
			4.	UTC date time
			5.	Firmware Version
		*/
		memset(systemPayload,0x00,sizeof(char) * GSM_PAYLOAD_MAX_SIZE);
 80045ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80045d2:	2100      	movs	r1, #0
 80045d4:	68f8      	ldr	r0, [r7, #12]
 80045d6:	f00f fd81 	bl	80140dc <memset>
		/* Start of Frame */
		strcpy((char *)systemPayload,(char * )START_OF_FRAME);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	496d      	ldr	r1, [pc, #436]	; (8004794 <getMachineDataString+0x1e8>)
 80045de:	461a      	mov	r2, r3
 80045e0:	460b      	mov	r3, r1
 80045e2:	881b      	ldrh	r3, [r3, #0]
 80045e4:	8013      	strh	r3, [r2, #0]
		strcat((char *)systemPayload,(char * )",");
 80045e6:	68f8      	ldr	r0, [r7, #12]
 80045e8:	f7fc f9fc 	bl	80009e4 <strlen>
 80045ec:	4603      	mov	r3, r0
 80045ee:	461a      	mov	r2, r3
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	4413      	add	r3, r2
 80045f4:	4968      	ldr	r1, [pc, #416]	; (8004798 <getMachineDataString+0x1ec>)
 80045f6:	461a      	mov	r2, r3
 80045f8:	460b      	mov	r3, r1
 80045fa:	881b      	ldrh	r3, [r3, #0]
 80045fc:	8013      	strh	r3, [r2, #0]

		/* Device UUID */
		strcat((char *)systemPayload,(char * )dinfo);
 80045fe:	4967      	ldr	r1, [pc, #412]	; (800479c <getMachineDataString+0x1f0>)
 8004600:	68f8      	ldr	r0, [r7, #12]
 8004602:	f010 fab7 	bl	8014b74 <strcat>
		strcat((char *)systemPayload,(char * )",");
 8004606:	68f8      	ldr	r0, [r7, #12]
 8004608:	f7fc f9ec 	bl	80009e4 <strlen>
 800460c:	4603      	mov	r3, r0
 800460e:	461a      	mov	r2, r3
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	4413      	add	r3, r2
 8004614:	4960      	ldr	r1, [pc, #384]	; (8004798 <getMachineDataString+0x1ec>)
 8004616:	461a      	mov	r2, r3
 8004618:	460b      	mov	r3, r1
 800461a:	881b      	ldrh	r3, [r3, #0]
 800461c:	8013      	strh	r3, [r2, #0]

		/* Model Number */
		strcat((char *)systemPayload,(char * )MODEL_NUMBER);
 800461e:	68f8      	ldr	r0, [r7, #12]
 8004620:	f7fc f9e0 	bl	80009e4 <strlen>
 8004624:	4603      	mov	r3, r0
 8004626:	461a      	mov	r2, r3
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	4413      	add	r3, r2
 800462c:	4a5c      	ldr	r2, [pc, #368]	; (80047a0 <getMachineDataString+0x1f4>)
 800462e:	461d      	mov	r5, r3
 8004630:	4614      	mov	r4, r2
 8004632:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004634:	6028      	str	r0, [r5, #0]
 8004636:	6069      	str	r1, [r5, #4]
 8004638:	60aa      	str	r2, [r5, #8]
 800463a:	60eb      	str	r3, [r5, #12]
 800463c:	cc03      	ldmia	r4!, {r0, r1}
 800463e:	6128      	str	r0, [r5, #16]
 8004640:	6169      	str	r1, [r5, #20]
 8004642:	8823      	ldrh	r3, [r4, #0]
 8004644:	78a2      	ldrb	r2, [r4, #2]
 8004646:	832b      	strh	r3, [r5, #24]
 8004648:	4613      	mov	r3, r2
 800464a:	76ab      	strb	r3, [r5, #26]
		strcat((char *)systemPayload,(char * )",");
 800464c:	68f8      	ldr	r0, [r7, #12]
 800464e:	f7fc f9c9 	bl	80009e4 <strlen>
 8004652:	4603      	mov	r3, r0
 8004654:	461a      	mov	r2, r3
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	4413      	add	r3, r2
 800465a:	494f      	ldr	r1, [pc, #316]	; (8004798 <getMachineDataString+0x1ec>)
 800465c:	461a      	mov	r2, r3
 800465e:	460b      	mov	r3, r1
 8004660:	881b      	ldrh	r3, [r3, #0]
 8004662:	8013      	strh	r3, [r2, #0]
		manufacturerDate(systemPayload);
 8004664:	68f8      	ldr	r0, [r7, #12]
 8004666:	f001 fb59 	bl	8005d1c <manufacturerDate>
		strcat((char *)systemPayload,"_Payload");
 800466a:	68f8      	ldr	r0, [r7, #12]
 800466c:	f7fc f9ba 	bl	80009e4 <strlen>
 8004670:	4603      	mov	r3, r0
 8004672:	461a      	mov	r2, r3
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	4413      	add	r3, r2
 8004678:	494a      	ldr	r1, [pc, #296]	; (80047a4 <getMachineDataString+0x1f8>)
 800467a:	461a      	mov	r2, r3
 800467c:	460b      	mov	r3, r1
 800467e:	cb03      	ldmia	r3!, {r0, r1}
 8004680:	6010      	str	r0, [r2, #0]
 8004682:	6051      	str	r1, [r2, #4]
 8004684:	781b      	ldrb	r3, [r3, #0]
 8004686:	7213      	strb	r3, [r2, #8]
		strcat((char *)systemPayload,(char * )",");
 8004688:	68f8      	ldr	r0, [r7, #12]
 800468a:	f7fc f9ab 	bl	80009e4 <strlen>
 800468e:	4603      	mov	r3, r0
 8004690:	461a      	mov	r2, r3
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	4413      	add	r3, r2
 8004696:	4940      	ldr	r1, [pc, #256]	; (8004798 <getMachineDataString+0x1ec>)
 8004698:	461a      	mov	r2, r3
 800469a:	460b      	mov	r3, r1
 800469c:	881b      	ldrh	r3, [r3, #0]
 800469e:	8013      	strh	r3, [r2, #0]

		/*System Time Stamp */
		PaylodTime(systemPayload);
 80046a0:	68f8      	ldr	r0, [r7, #12]
 80046a2:	f000 fb5b 	bl	8004d5c <PaylodTime>


		/* Firmware Version*/
		strcat((char *)systemPayload,(char * )BOOT_REGION);
 80046a6:	68f8      	ldr	r0, [r7, #12]
 80046a8:	f7fc f99c 	bl	80009e4 <strlen>
 80046ac:	4603      	mov	r3, r0
 80046ae:	461a      	mov	r2, r3
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	4413      	add	r3, r2
 80046b4:	4a3c      	ldr	r2, [pc, #240]	; (80047a8 <getMachineDataString+0x1fc>)
 80046b6:	8811      	ldrh	r1, [r2, #0]
 80046b8:	7892      	ldrb	r2, [r2, #2]
 80046ba:	8019      	strh	r1, [r3, #0]
 80046bc:	709a      	strb	r2, [r3, #2]
		strcat((char *)systemPayload,(char * )FIRMWARE_VER);
 80046be:	68f8      	ldr	r0, [r7, #12]
 80046c0:	f7fc f990 	bl	80009e4 <strlen>
 80046c4:	4603      	mov	r3, r0
 80046c6:	461a      	mov	r2, r3
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	4413      	add	r3, r2
 80046cc:	4a37      	ldr	r2, [pc, #220]	; (80047ac <getMachineDataString+0x200>)
 80046ce:	6810      	ldr	r0, [r2, #0]
 80046d0:	6018      	str	r0, [r3, #0]
		strcat((char *)systemPayload,(char * )","); // as reply for GSP start with ','
 80046d2:	68f8      	ldr	r0, [r7, #12]
 80046d4:	f7fc f986 	bl	80009e4 <strlen>
 80046d8:	4603      	mov	r3, r0
 80046da:	461a      	mov	r2, r3
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	4413      	add	r3, r2
 80046e0:	492d      	ldr	r1, [pc, #180]	; (8004798 <getMachineDataString+0x1ec>)
 80046e2:	461a      	mov	r2, r3
 80046e4:	460b      	mov	r3, r1
 80046e6:	881b      	ldrh	r3, [r3, #0]
 80046e8:	8013      	strh	r3, [r2, #0]

		/* GPS Data */
		if(strlen(gsmInstance.agpsLocationData) > 0)
 80046ea:	4b31      	ldr	r3, [pc, #196]	; (80047b0 <getMachineDataString+0x204>)
 80046ec:	781b      	ldrb	r3, [r3, #0]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d06c      	beq.n	80047cc <getMachineDataString+0x220>
		{
			memset(gsmInstance.agpsTempData,0x00, strlen(gsmInstance.agpsTempData));
 80046f2:	4830      	ldr	r0, [pc, #192]	; (80047b4 <getMachineDataString+0x208>)
 80046f4:	f7fc f976 	bl	80009e4 <strlen>
 80046f8:	4603      	mov	r3, r0
 80046fa:	461a      	mov	r2, r3
 80046fc:	2100      	movs	r1, #0
 80046fe:	482d      	ldr	r0, [pc, #180]	; (80047b4 <getMachineDataString+0x208>)
 8004700:	f00f fcec 	bl	80140dc <memset>
			GPS_SperateString();
 8004704:	f000 fba8 	bl	8004e58 <GPS_SperateString>
//			strcat((char *)systemPayload,(char * )gsmInstance.agpsTempData);
			strcat((char *)systemPayload,(char * )GPSUTCTIME);
 8004708:	492b      	ldr	r1, [pc, #172]	; (80047b8 <getMachineDataString+0x20c>)
 800470a:	68f8      	ldr	r0, [r7, #12]
 800470c:	f010 fa32 	bl	8014b74 <strcat>
			strcat((char *)systemPayload,",");
 8004710:	68f8      	ldr	r0, [r7, #12]
 8004712:	f7fc f967 	bl	80009e4 <strlen>
 8004716:	4603      	mov	r3, r0
 8004718:	461a      	mov	r2, r3
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	4413      	add	r3, r2
 800471e:	491e      	ldr	r1, [pc, #120]	; (8004798 <getMachineDataString+0x1ec>)
 8004720:	461a      	mov	r2, r3
 8004722:	460b      	mov	r3, r1
 8004724:	881b      	ldrh	r3, [r3, #0]
 8004726:	8013      	strh	r3, [r2, #0]
			strcat((char *)systemPayload,(char * )GPS_LAT);
 8004728:	4924      	ldr	r1, [pc, #144]	; (80047bc <getMachineDataString+0x210>)
 800472a:	68f8      	ldr	r0, [r7, #12]
 800472c:	f010 fa22 	bl	8014b74 <strcat>
			strcat((char *)systemPayload,",");
 8004730:	68f8      	ldr	r0, [r7, #12]
 8004732:	f7fc f957 	bl	80009e4 <strlen>
 8004736:	4603      	mov	r3, r0
 8004738:	461a      	mov	r2, r3
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	4413      	add	r3, r2
 800473e:	4916      	ldr	r1, [pc, #88]	; (8004798 <getMachineDataString+0x1ec>)
 8004740:	461a      	mov	r2, r3
 8004742:	460b      	mov	r3, r1
 8004744:	881b      	ldrh	r3, [r3, #0]
 8004746:	8013      	strh	r3, [r2, #0]
			strcat((char *)systemPayload,(char * )GPS_LONG);
 8004748:	491d      	ldr	r1, [pc, #116]	; (80047c0 <getMachineDataString+0x214>)
 800474a:	68f8      	ldr	r0, [r7, #12]
 800474c:	f010 fa12 	bl	8014b74 <strcat>
			strcat((char *)systemPayload,",");
 8004750:	68f8      	ldr	r0, [r7, #12]
 8004752:	f7fc f947 	bl	80009e4 <strlen>
 8004756:	4603      	mov	r3, r0
 8004758:	461a      	mov	r2, r3
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	4413      	add	r3, r2
 800475e:	490e      	ldr	r1, [pc, #56]	; (8004798 <getMachineDataString+0x1ec>)
 8004760:	461a      	mov	r2, r3
 8004762:	460b      	mov	r3, r1
 8004764:	881b      	ldrh	r3, [r3, #0]
 8004766:	8013      	strh	r3, [r2, #0]
			strcat((char *)systemPayload,(char * )GPSUTCDATE);
 8004768:	4916      	ldr	r1, [pc, #88]	; (80047c4 <getMachineDataString+0x218>)
 800476a:	68f8      	ldr	r0, [r7, #12]
 800476c:	f010 fa02 	bl	8014b74 <strcat>
			strcat((char *)systemPayload,",");
 8004770:	68f8      	ldr	r0, [r7, #12]
 8004772:	f7fc f937 	bl	80009e4 <strlen>
 8004776:	4603      	mov	r3, r0
 8004778:	461a      	mov	r2, r3
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	4413      	add	r3, r2
 800477e:	4906      	ldr	r1, [pc, #24]	; (8004798 <getMachineDataString+0x1ec>)
 8004780:	461a      	mov	r2, r3
 8004782:	460b      	mov	r3, r1
 8004784:	881b      	ldrh	r3, [r3, #0]
 8004786:	8013      	strh	r3, [r2, #0]
			strcat((char *)systemPayload,(char * )GPS_SPEED_OVR_GND);
 8004788:	490f      	ldr	r1, [pc, #60]	; (80047c8 <getMachineDataString+0x21c>)
 800478a:	68f8      	ldr	r0, [r7, #12]
 800478c:	f010 f9f2 	bl	8014b74 <strcat>
 8004790:	e022      	b.n	80047d8 <getMachineDataString+0x22c>
 8004792:	bf00      	nop
 8004794:	08018a88 	.word	0x08018a88
 8004798:	08018a8c 	.word	0x08018a8c
 800479c:	20000000 	.word	0x20000000
 80047a0:	08018a90 	.word	0x08018a90
 80047a4:	08018aac 	.word	0x08018aac
 80047a8:	08018ab8 	.word	0x08018ab8
 80047ac:	08018abc 	.word	0x08018abc
 80047b0:	20002b1c 	.word	0x20002b1c
 80047b4:	20002bb2 	.word	0x20002bb2
 80047b8:	20001950 	.word	0x20001950
 80047bc:	20001958 	.word	0x20001958
 80047c0:	20001964 	.word	0x20001964
 80047c4:	20001948 	.word	0x20001948
 80047c8:	20001970 	.word	0x20001970
		}
		else
			strcat((char *)systemPayload,gpu8NoString);
 80047cc:	4b98      	ldr	r3, [pc, #608]	; (8004a30 <getMachineDataString+0x484>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4619      	mov	r1, r3
 80047d2:	68f8      	ldr	r0, [r7, #12]
 80047d4:	f010 f9ce 	bl	8014b74 <strcat>


		strcat((char *)systemPayload,",");
 80047d8:	68f8      	ldr	r0, [r7, #12]
 80047da:	f7fc f903 	bl	80009e4 <strlen>
 80047de:	4603      	mov	r3, r0
 80047e0:	461a      	mov	r2, r3
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	4413      	add	r3, r2
 80047e6:	4993      	ldr	r1, [pc, #588]	; (8004a34 <getMachineDataString+0x488>)
 80047e8:	461a      	mov	r2, r3
 80047ea:	460b      	mov	r3, r1
 80047ec:	881b      	ldrh	r3, [r3, #0]
 80047ee:	8013      	strh	r3, [r2, #0]
		itoa(u8daignostic,temp,PAYLOAD_DATA_STRING_RADIX);
 80047f0:	4b91      	ldr	r3, [pc, #580]	; (8004a38 <getMachineDataString+0x48c>)
 80047f2:	781b      	ldrb	r3, [r3, #0]
 80047f4:	4618      	mov	r0, r3
 80047f6:	1d3b      	adds	r3, r7, #4
 80047f8:	220a      	movs	r2, #10
 80047fa:	4619      	mov	r1, r3
 80047fc:	f00f fc4e 	bl	801409c <itoa>
		strcat((char *)systemPayload,temp);
 8004800:	1d3b      	adds	r3, r7, #4
 8004802:	4619      	mov	r1, r3
 8004804:	68f8      	ldr	r0, [r7, #12]
 8004806:	f010 f9b5 	bl	8014b74 <strcat>
		if(u8daignostic & (1<<7))
 800480a:	4b8b      	ldr	r3, [pc, #556]	; (8004a38 <getMachineDataString+0x48c>)
 800480c:	781b      	ldrb	r3, [r3, #0]
 800480e:	b25b      	sxtb	r3, r3
 8004810:	2b00      	cmp	r3, #0
 8004812:	da06      	bge.n	8004822 <getMachineDataString+0x276>
		{
			u8daignostic &= ~(1<<7);
 8004814:	4b88      	ldr	r3, [pc, #544]	; (8004a38 <getMachineDataString+0x48c>)
 8004816:	781b      	ldrb	r3, [r3, #0]
 8004818:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800481c:	b2da      	uxtb	r2, r3
 800481e:	4b86      	ldr	r3, [pc, #536]	; (8004a38 <getMachineDataString+0x48c>)
 8004820:	701a      	strb	r2, [r3, #0]
		}
		if(u8daignostic & (1<<6))
 8004822:	4b85      	ldr	r3, [pc, #532]	; (8004a38 <getMachineDataString+0x48c>)
 8004824:	781b      	ldrb	r3, [r3, #0]
 8004826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800482a:	2b00      	cmp	r3, #0
 800482c:	d006      	beq.n	800483c <getMachineDataString+0x290>
		{
			u8daignostic &= ~(1<<6);
 800482e:	4b82      	ldr	r3, [pc, #520]	; (8004a38 <getMachineDataString+0x48c>)
 8004830:	781b      	ldrb	r3, [r3, #0]
 8004832:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004836:	b2da      	uxtb	r2, r3
 8004838:	4b7f      	ldr	r3, [pc, #508]	; (8004a38 <getMachineDataString+0x48c>)
 800483a:	701a      	strb	r2, [r3, #0]
		}
		strcat((char *)systemPayload,",");
 800483c:	68f8      	ldr	r0, [r7, #12]
 800483e:	f7fc f8d1 	bl	80009e4 <strlen>
 8004842:	4603      	mov	r3, r0
 8004844:	461a      	mov	r2, r3
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	4413      	add	r3, r2
 800484a:	497a      	ldr	r1, [pc, #488]	; (8004a34 <getMachineDataString+0x488>)
 800484c:	461a      	mov	r2, r3
 800484e:	460b      	mov	r3, r1
 8004850:	881b      	ldrh	r3, [r3, #0]
 8004852:	8013      	strh	r3, [r2, #0]

		updateInputVoltage(g_stAdcData.u32PwrSupplyVtg);
 8004854:	4b79      	ldr	r3, [pc, #484]	; (8004a3c <getMachineDataString+0x490>)
 8004856:	edd3 7a02 	vldr	s15, [r3, #8]
 800485a:	eeb0 0a67 	vmov.f32	s0, s15
 800485e:	f001 faa7 	bl	8005db0 <updateInputVoltage>
		strcat((char *)systemPayload,(char * )voltage);
 8004862:	4977      	ldr	r1, [pc, #476]	; (8004a40 <getMachineDataString+0x494>)
 8004864:	68f8      	ldr	r0, [r7, #12]
 8004866:	f010 f985 	bl	8014b74 <strcat>
		strcat((char *)systemPayload,",");
 800486a:	68f8      	ldr	r0, [r7, #12]
 800486c:	f7fc f8ba 	bl	80009e4 <strlen>
 8004870:	4603      	mov	r3, r0
 8004872:	461a      	mov	r2, r3
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	4413      	add	r3, r2
 8004878:	496e      	ldr	r1, [pc, #440]	; (8004a34 <getMachineDataString+0x488>)
 800487a:	461a      	mov	r2, r3
 800487c:	460b      	mov	r3, r1
 800487e:	881b      	ldrh	r3, [r3, #0]
 8004880:	8013      	strh	r3, [r2, #0]

		updateInputVoltage(g_stAdcData.u32IntBatVtg);
 8004882:	4b6e      	ldr	r3, [pc, #440]	; (8004a3c <getMachineDataString+0x490>)
 8004884:	edd3 7a03 	vldr	s15, [r3, #12]
 8004888:	eeb0 0a67 	vmov.f32	s0, s15
 800488c:	f001 fa90 	bl	8005db0 <updateInputVoltage>
		strcat((char *)systemPayload,(char * )voltage);
 8004890:	496b      	ldr	r1, [pc, #428]	; (8004a40 <getMachineDataString+0x494>)
 8004892:	68f8      	ldr	r0, [r7, #12]
 8004894:	f010 f96e 	bl	8014b74 <strcat>
		strcat((char *)systemPayload,(char * )",");
 8004898:	68f8      	ldr	r0, [r7, #12]
 800489a:	f7fc f8a3 	bl	80009e4 <strlen>
 800489e:	4603      	mov	r3, r0
 80048a0:	461a      	mov	r2, r3
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	4413      	add	r3, r2
 80048a6:	4963      	ldr	r1, [pc, #396]	; (8004a34 <getMachineDataString+0x488>)
 80048a8:	461a      	mov	r2, r3
 80048aa:	460b      	mov	r3, r1
 80048ac:	881b      	ldrh	r3, [r3, #0]
 80048ae:	8013      	strh	r3, [r2, #0]

		itoa(boolInginitionStatus1,temp,PAYLOAD_DATA_STRING_RADIX);
 80048b0:	4b64      	ldr	r3, [pc, #400]	; (8004a44 <getMachineDataString+0x498>)
 80048b2:	781b      	ldrb	r3, [r3, #0]
 80048b4:	4618      	mov	r0, r3
 80048b6:	1d3b      	adds	r3, r7, #4
 80048b8:	220a      	movs	r2, #10
 80048ba:	4619      	mov	r1, r3
 80048bc:	f00f fbee 	bl	801409c <itoa>
		strcat((char *)systemPayload,temp);
 80048c0:	1d3b      	adds	r3, r7, #4
 80048c2:	4619      	mov	r1, r3
 80048c4:	68f8      	ldr	r0, [r7, #12]
 80048c6:	f010 f955 	bl	8014b74 <strcat>
		strcat((char *)systemPayload,",");
 80048ca:	68f8      	ldr	r0, [r7, #12]
 80048cc:	f7fc f88a 	bl	80009e4 <strlen>
 80048d0:	4603      	mov	r3, r0
 80048d2:	461a      	mov	r2, r3
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	4413      	add	r3, r2
 80048d8:	4956      	ldr	r1, [pc, #344]	; (8004a34 <getMachineDataString+0x488>)
 80048da:	461a      	mov	r2, r3
 80048dc:	460b      	mov	r3, r1
 80048de:	881b      	ldrh	r3, [r3, #0]
 80048e0:	8013      	strh	r3, [r2, #0]

		itoa(boolInginitionStatus2,temp,PAYLOAD_DATA_STRING_RADIX);
 80048e2:	4b59      	ldr	r3, [pc, #356]	; (8004a48 <getMachineDataString+0x49c>)
 80048e4:	781b      	ldrb	r3, [r3, #0]
 80048e6:	4618      	mov	r0, r3
 80048e8:	1d3b      	adds	r3, r7, #4
 80048ea:	220a      	movs	r2, #10
 80048ec:	4619      	mov	r1, r3
 80048ee:	f00f fbd5 	bl	801409c <itoa>
		strcat((char *)systemPayload,temp);
 80048f2:	1d3b      	adds	r3, r7, #4
 80048f4:	4619      	mov	r1, r3
 80048f6:	68f8      	ldr	r0, [r7, #12]
 80048f8:	f010 f93c 	bl	8014b74 <strcat>
		strcat((char *)systemPayload,",");
 80048fc:	68f8      	ldr	r0, [r7, #12]
 80048fe:	f7fc f871 	bl	80009e4 <strlen>
 8004902:	4603      	mov	r3, r0
 8004904:	461a      	mov	r2, r3
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	4413      	add	r3, r2
 800490a:	494a      	ldr	r1, [pc, #296]	; (8004a34 <getMachineDataString+0x488>)
 800490c:	461a      	mov	r2, r3
 800490e:	460b      	mov	r3, r1
 8004910:	881b      	ldrh	r3, [r3, #0]
 8004912:	8013      	strh	r3, [r2, #0]

		itoa(g_stAdcData.u32AI1RawData,temp,PAYLOAD_DATA_STRING_RADIX);
 8004914:	4b49      	ldr	r3, [pc, #292]	; (8004a3c <getMachineDataString+0x490>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4618      	mov	r0, r3
 800491a:	1d3b      	adds	r3, r7, #4
 800491c:	220a      	movs	r2, #10
 800491e:	4619      	mov	r1, r3
 8004920:	f00f fbbc 	bl	801409c <itoa>
		strcat((char *)systemPayload,temp);
 8004924:	1d3b      	adds	r3, r7, #4
 8004926:	4619      	mov	r1, r3
 8004928:	68f8      	ldr	r0, [r7, #12]
 800492a:	f010 f923 	bl	8014b74 <strcat>
		strcat((char *)systemPayload,",");
 800492e:	68f8      	ldr	r0, [r7, #12]
 8004930:	f7fc f858 	bl	80009e4 <strlen>
 8004934:	4603      	mov	r3, r0
 8004936:	461a      	mov	r2, r3
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	4413      	add	r3, r2
 800493c:	493d      	ldr	r1, [pc, #244]	; (8004a34 <getMachineDataString+0x488>)
 800493e:	461a      	mov	r2, r3
 8004940:	460b      	mov	r3, r1
 8004942:	881b      	ldrh	r3, [r3, #0]
 8004944:	8013      	strh	r3, [r2, #0]


		/* CAN Data */
		updateCanPayload(1, systemPayload );
 8004946:	68f9      	ldr	r1, [r7, #12]
 8004948:	2001      	movs	r0, #1
 800494a:	f000 f88b 	bl	8004a64 <updateCanPayload>
		updateCanPayload(2, systemPayload );
 800494e:	68f9      	ldr	r1, [r7, #12]
 8004950:	2002      	movs	r0, #2
 8004952:	f000 f887 	bl	8004a64 <updateCanPayload>
		updateCanPayload(3, systemPayload );
 8004956:	68f9      	ldr	r1, [r7, #12]
 8004958:	2003      	movs	r0, #3
 800495a:	f000 f883 	bl	8004a64 <updateCanPayload>
		updateCanPayload(4, systemPayload );
 800495e:	68f9      	ldr	r1, [r7, #12]
 8004960:	2004      	movs	r0, #4
 8004962:	f000 f87f 	bl	8004a64 <updateCanPayload>
		updateCanPayload(5, systemPayload );
 8004966:	68f9      	ldr	r1, [r7, #12]
 8004968:	2005      	movs	r0, #5
 800496a:	f000 f87b 	bl	8004a64 <updateCanPayload>

		updateCanPayload(6, systemPayload );
 800496e:	68f9      	ldr	r1, [r7, #12]
 8004970:	2006      	movs	r0, #6
 8004972:	f000 f877 	bl	8004a64 <updateCanPayload>
		updateCanPayload(7, systemPayload );
 8004976:	68f9      	ldr	r1, [r7, #12]
 8004978:	2007      	movs	r0, #7
 800497a:	f000 f873 	bl	8004a64 <updateCanPayload>

        /*RS232*/
		strcat((char *)systemPayload,"RS232");
 800497e:	68f8      	ldr	r0, [r7, #12]
 8004980:	f7fc f830 	bl	80009e4 <strlen>
 8004984:	4603      	mov	r3, r0
 8004986:	461a      	mov	r2, r3
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	4413      	add	r3, r2
 800498c:	4a2f      	ldr	r2, [pc, #188]	; (8004a4c <getMachineDataString+0x4a0>)
 800498e:	6810      	ldr	r0, [r2, #0]
 8004990:	6018      	str	r0, [r3, #0]
 8004992:	8892      	ldrh	r2, [r2, #4]
 8004994:	809a      	strh	r2, [r3, #4]
		strcat((char *)systemPayload,",");
 8004996:	68f8      	ldr	r0, [r7, #12]
 8004998:	f7fc f824 	bl	80009e4 <strlen>
 800499c:	4603      	mov	r3, r0
 800499e:	461a      	mov	r2, r3
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	4413      	add	r3, r2
 80049a4:	4923      	ldr	r1, [pc, #140]	; (8004a34 <getMachineDataString+0x488>)
 80049a6:	461a      	mov	r2, r3
 80049a8:	460b      	mov	r3, r1
 80049aa:	881b      	ldrh	r3, [r3, #0]
 80049ac:	8013      	strh	r3, [r2, #0]
		strcat((char *)systemPayload,(char * )buff);
 80049ae:	4928      	ldr	r1, [pc, #160]	; (8004a50 <getMachineDataString+0x4a4>)
 80049b0:	68f8      	ldr	r0, [r7, #12]
 80049b2:	f010 f8df 	bl	8014b74 <strcat>
		strcat((char *)systemPayload,",");
 80049b6:	68f8      	ldr	r0, [r7, #12]
 80049b8:	f7fc f814 	bl	80009e4 <strlen>
 80049bc:	4603      	mov	r3, r0
 80049be:	461a      	mov	r2, r3
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	4413      	add	r3, r2
 80049c4:	491b      	ldr	r1, [pc, #108]	; (8004a34 <getMachineDataString+0x488>)
 80049c6:	461a      	mov	r2, r3
 80049c8:	460b      	mov	r3, r1
 80049ca:	881b      	ldrh	r3, [r3, #0]
 80049cc:	8013      	strh	r3, [r2, #0]

		/* RSSI */
		if(strlen(gsmInstance.agsmSignalStrength ) > 0)
 80049ce:	4b21      	ldr	r3, [pc, #132]	; (8004a54 <getMachineDataString+0x4a8>)
 80049d0:	781b      	ldrb	r3, [r3, #0]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d004      	beq.n	80049e0 <getMachineDataString+0x434>
		{
			strcat((char *)systemPayload,(char * )gsmInstance.agsmSignalStrength);
 80049d6:	491f      	ldr	r1, [pc, #124]	; (8004a54 <getMachineDataString+0x4a8>)
 80049d8:	68f8      	ldr	r0, [r7, #12]
 80049da:	f010 f8cb 	bl	8014b74 <strcat>
 80049de:	e005      	b.n	80049ec <getMachineDataString+0x440>
//			strcat((char *)systemPayload,(char * )",");
		}
		else
			strcat((char *)systemPayload,gpu8Norssi);
 80049e0:	4b1d      	ldr	r3, [pc, #116]	; (8004a58 <getMachineDataString+0x4ac>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4619      	mov	r1, r3
 80049e6:	68f8      	ldr	r0, [r7, #12]
 80049e8:	f010 f8c4 	bl	8014b74 <strcat>

		strcat((char *)systemPayload,(char * )",");
 80049ec:	68f8      	ldr	r0, [r7, #12]
 80049ee:	f7fb fff9 	bl	80009e4 <strlen>
 80049f2:	4603      	mov	r3, r0
 80049f4:	461a      	mov	r2, r3
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	4413      	add	r3, r2
 80049fa:	490e      	ldr	r1, [pc, #56]	; (8004a34 <getMachineDataString+0x488>)
 80049fc:	461a      	mov	r2, r3
 80049fe:	460b      	mov	r3, r1
 8004a00:	881b      	ldrh	r3, [r3, #0]
 8004a02:	8013      	strh	r3, [r2, #0]

		/* End of Frame */
		strcat((char *)systemPayload,(char * )END_OF_FRAME);
 8004a04:	68f8      	ldr	r0, [r7, #12]
 8004a06:	f7fb ffed 	bl	80009e4 <strlen>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	4413      	add	r3, r2
 8004a12:	4912      	ldr	r1, [pc, #72]	; (8004a5c <getMachineDataString+0x4b0>)
 8004a14:	461a      	mov	r2, r3
 8004a16:	460b      	mov	r3, r1
 8004a18:	881b      	ldrh	r3, [r3, #0]
 8004a1a:	8013      	strh	r3, [r2, #0]
		gu32CanIdsLoopCounter = 1;
 8004a1c:	4b10      	ldr	r3, [pc, #64]	; (8004a60 <getMachineDataString+0x4b4>)
 8004a1e:	2201      	movs	r2, #1
 8004a20:	601a      	str	r2, [r3, #0]

//		Payload_GEO_Toggle_Flag = GEO;
		return systemPayload;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	e000      	b.n	8004a28 <getMachineDataString+0x47c>
	}
	else
		return NULL; // malloc Error . Memory Allocation Failure
 8004a26:	2300      	movs	r3, #0
}//end of char * getMachineDataString(void)
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3710      	adds	r7, #16
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bdb0      	pop	{r4, r5, r7, pc}
 8004a30:	20000fe0 	.word	0x20000fe0
 8004a34:	08018a8c 	.word	0x08018a8c
 8004a38:	20001946 	.word	0x20001946
 8004a3c:	20005f5c 	.word	0x20005f5c
 8004a40:	20000fe8 	.word	0x20000fe8
 8004a44:	20002820 	.word	0x20002820
 8004a48:	20002821 	.word	0x20002821
 8004a4c:	08018ac0 	.word	0x08018ac0
 8004a50:	20001d88 	.word	0x20001d88
 8004a54:	20002c48 	.word	0x20002c48
 8004a58:	20000fe4 	.word	0x20000fe4
 8004a5c:	08018ac8 	.word	0x08018ac8
 8004a60:	20000ff0 	.word	0x20000ff0

08004a64 <updateCanPayload>:
 Author           	Date                Remarks
******************************************************************************/


void updateCanPayload(uint32_t data ,char * systemPayload )
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b086      	sub	sp, #24
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	6039      	str	r1, [r7, #0]
//		/* Added constant string in place of multiple strcat - 18/02/2021 Milind Vaze*/
////		strcat((char *)systemPayload,"00,00,00,00,00,00,00,00,");
//		strcat((char *)systemPayload,"0000000000000000,");
//
//	}
	char temp[10] = "";
 8004a6e:	2300      	movs	r3, #0
 8004a70:	60fb      	str	r3, [r7, #12]
 8004a72:	f107 0310 	add.w	r3, r7, #16
 8004a76:	2200      	movs	r2, #0
 8004a78:	601a      	str	r2, [r3, #0]
 8004a7a:	809a      	strh	r2, [r3, #4]
	strcat((char *)systemPayload,"^,0x");
 8004a7c:	6838      	ldr	r0, [r7, #0]
 8004a7e:	f7fb ffb1 	bl	80009e4 <strlen>
 8004a82:	4603      	mov	r3, r0
 8004a84:	461a      	mov	r2, r3
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	4413      	add	r3, r2
 8004a8a:	4ab0      	ldr	r2, [pc, #704]	; (8004d4c <updateCanPayload+0x2e8>)
 8004a8c:	6810      	ldr	r0, [r2, #0]
 8004a8e:	6018      	str	r0, [r3, #0]
 8004a90:	7912      	ldrb	r2, [r2, #4]
 8004a92:	711a      	strb	r2, [r3, #4]
//	strcat((char *)systemPayload,"");
	itoa(gu64CanMessageIDPGN[data],temp,CAN_PAYLOADSTRING_RADIX);
 8004a94:	4aae      	ldr	r2, [pc, #696]	; (8004d50 <updateCanPayload+0x2ec>)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	00db      	lsls	r3, r3, #3
 8004a9a:	4413      	add	r3, r2
 8004a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aa0:	4610      	mov	r0, r2
 8004aa2:	f107 030c 	add.w	r3, r7, #12
 8004aa6:	2210      	movs	r2, #16
 8004aa8:	4619      	mov	r1, r3
 8004aaa:	f00f faf7 	bl	801409c <itoa>
	strcat((char *)systemPayload,temp);
 8004aae:	f107 030c 	add.w	r3, r7, #12
 8004ab2:	4619      	mov	r1, r3
 8004ab4:	6838      	ldr	r0, [r7, #0]
 8004ab6:	f010 f85d 	bl	8014b74 <strcat>
	strcat((char *)systemPayload,",");
 8004aba:	6838      	ldr	r0, [r7, #0]
 8004abc:	f7fb ff92 	bl	80009e4 <strlen>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	4413      	add	r3, r2
 8004ac8:	49a2      	ldr	r1, [pc, #648]	; (8004d54 <updateCanPayload+0x2f0>)
 8004aca:	461a      	mov	r2, r3
 8004acc:	460b      	mov	r3, r1
 8004ace:	881b      	ldrh	r3, [r3, #0]
 8004ad0:	8013      	strh	r3, [r2, #0]
	itoa((((uint64_t)gu64CanMessageArray[data] >> 56) & 255),temp,CAN_PAYLOADSTRING_RADIX);
 8004ad2:	4aa1      	ldr	r2, [pc, #644]	; (8004d58 <updateCanPayload+0x2f4>)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	00db      	lsls	r3, r3, #3
 8004ad8:	4413      	add	r3, r2
 8004ada:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004ade:	f04f 0200 	mov.w	r2, #0
 8004ae2:	f04f 0300 	mov.w	r3, #0
 8004ae6:	0e0a      	lsrs	r2, r1, #24
 8004ae8:	2300      	movs	r3, #0
 8004aea:	4610      	mov	r0, r2
 8004aec:	f107 030c 	add.w	r3, r7, #12
 8004af0:	2210      	movs	r2, #16
 8004af2:	4619      	mov	r1, r3
 8004af4:	f00f fad2 	bl	801409c <itoa>
	strcat((char *)systemPayload,temp);
 8004af8:	f107 030c 	add.w	r3, r7, #12
 8004afc:	4619      	mov	r1, r3
 8004afe:	6838      	ldr	r0, [r7, #0]
 8004b00:	f010 f838 	bl	8014b74 <strcat>
	strcat((char *)systemPayload,",");
 8004b04:	6838      	ldr	r0, [r7, #0]
 8004b06:	f7fb ff6d 	bl	80009e4 <strlen>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	4413      	add	r3, r2
 8004b12:	4990      	ldr	r1, [pc, #576]	; (8004d54 <updateCanPayload+0x2f0>)
 8004b14:	461a      	mov	r2, r3
 8004b16:	460b      	mov	r3, r1
 8004b18:	881b      	ldrh	r3, [r3, #0]
 8004b1a:	8013      	strh	r3, [r2, #0]
	itoa((((uint64_t)gu64CanMessageArray[data] >> 48) & 255),temp,CAN_PAYLOADSTRING_RADIX);
 8004b1c:	4a8e      	ldr	r2, [pc, #568]	; (8004d58 <updateCanPayload+0x2f4>)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	00db      	lsls	r3, r3, #3
 8004b22:	4413      	add	r3, r2
 8004b24:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004b28:	f04f 0200 	mov.w	r2, #0
 8004b2c:	f04f 0300 	mov.w	r3, #0
 8004b30:	0c0a      	lsrs	r2, r1, #16
 8004b32:	2300      	movs	r3, #0
 8004b34:	4613      	mov	r3, r2
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	f107 010c 	add.w	r1, r7, #12
 8004b3c:	2210      	movs	r2, #16
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f00f faac 	bl	801409c <itoa>
	strcat((char *)systemPayload,temp);
 8004b44:	f107 030c 	add.w	r3, r7, #12
 8004b48:	4619      	mov	r1, r3
 8004b4a:	6838      	ldr	r0, [r7, #0]
 8004b4c:	f010 f812 	bl	8014b74 <strcat>
	strcat((char *)systemPayload,",");
 8004b50:	6838      	ldr	r0, [r7, #0]
 8004b52:	f7fb ff47 	bl	80009e4 <strlen>
 8004b56:	4603      	mov	r3, r0
 8004b58:	461a      	mov	r2, r3
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	4413      	add	r3, r2
 8004b5e:	497d      	ldr	r1, [pc, #500]	; (8004d54 <updateCanPayload+0x2f0>)
 8004b60:	461a      	mov	r2, r3
 8004b62:	460b      	mov	r3, r1
 8004b64:	881b      	ldrh	r3, [r3, #0]
 8004b66:	8013      	strh	r3, [r2, #0]
	itoa((((uint64_t)gu64CanMessageArray[data] >> 40) & 255),temp,CAN_PAYLOADSTRING_RADIX);
 8004b68:	4a7b      	ldr	r2, [pc, #492]	; (8004d58 <updateCanPayload+0x2f4>)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	00db      	lsls	r3, r3, #3
 8004b6e:	4413      	add	r3, r2
 8004b70:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004b74:	f04f 0200 	mov.w	r2, #0
 8004b78:	f04f 0300 	mov.w	r3, #0
 8004b7c:	0a0a      	lsrs	r2, r1, #8
 8004b7e:	2300      	movs	r3, #0
 8004b80:	4613      	mov	r3, r2
 8004b82:	b2db      	uxtb	r3, r3
 8004b84:	f107 010c 	add.w	r1, r7, #12
 8004b88:	2210      	movs	r2, #16
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f00f fa86 	bl	801409c <itoa>
	strcat((char *)systemPayload,temp);
 8004b90:	f107 030c 	add.w	r3, r7, #12
 8004b94:	4619      	mov	r1, r3
 8004b96:	6838      	ldr	r0, [r7, #0]
 8004b98:	f00f ffec 	bl	8014b74 <strcat>
	strcat((char *)systemPayload,",");
 8004b9c:	6838      	ldr	r0, [r7, #0]
 8004b9e:	f7fb ff21 	bl	80009e4 <strlen>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	4413      	add	r3, r2
 8004baa:	496a      	ldr	r1, [pc, #424]	; (8004d54 <updateCanPayload+0x2f0>)
 8004bac:	461a      	mov	r2, r3
 8004bae:	460b      	mov	r3, r1
 8004bb0:	881b      	ldrh	r3, [r3, #0]
 8004bb2:	8013      	strh	r3, [r2, #0]
	itoa((((uint64_t)gu64CanMessageArray[data] >> 32) & 255),temp,CAN_PAYLOADSTRING_RADIX);
 8004bb4:	4a68      	ldr	r2, [pc, #416]	; (8004d58 <updateCanPayload+0x2f4>)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	00db      	lsls	r3, r3, #3
 8004bba:	4413      	add	r3, r2
 8004bbc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004bc0:	f04f 0200 	mov.w	r2, #0
 8004bc4:	f04f 0300 	mov.w	r3, #0
 8004bc8:	000a      	movs	r2, r1
 8004bca:	2300      	movs	r3, #0
 8004bcc:	4613      	mov	r3, r2
 8004bce:	b2db      	uxtb	r3, r3
 8004bd0:	f107 010c 	add.w	r1, r7, #12
 8004bd4:	2210      	movs	r2, #16
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f00f fa60 	bl	801409c <itoa>
	strcat((char *)systemPayload,temp);
 8004bdc:	f107 030c 	add.w	r3, r7, #12
 8004be0:	4619      	mov	r1, r3
 8004be2:	6838      	ldr	r0, [r7, #0]
 8004be4:	f00f ffc6 	bl	8014b74 <strcat>
	strcat((char *)systemPayload,",");
 8004be8:	6838      	ldr	r0, [r7, #0]
 8004bea:	f7fb fefb 	bl	80009e4 <strlen>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	461a      	mov	r2, r3
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	4413      	add	r3, r2
 8004bf6:	4957      	ldr	r1, [pc, #348]	; (8004d54 <updateCanPayload+0x2f0>)
 8004bf8:	461a      	mov	r2, r3
 8004bfa:	460b      	mov	r3, r1
 8004bfc:	881b      	ldrh	r3, [r3, #0]
 8004bfe:	8013      	strh	r3, [r2, #0]
	itoa((((uint64_t)gu64CanMessageArray[data] >> 24) & 255),temp,CAN_PAYLOADSTRING_RADIX);
 8004c00:	4a55      	ldr	r2, [pc, #340]	; (8004d58 <updateCanPayload+0x2f4>)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	00db      	lsls	r3, r3, #3
 8004c06:	4413      	add	r3, r2
 8004c08:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004c0c:	f04f 0200 	mov.w	r2, #0
 8004c10:	f04f 0300 	mov.w	r3, #0
 8004c14:	0e02      	lsrs	r2, r0, #24
 8004c16:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004c1a:	0e0b      	lsrs	r3, r1, #24
 8004c1c:	4613      	mov	r3, r2
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	f107 010c 	add.w	r1, r7, #12
 8004c24:	2210      	movs	r2, #16
 8004c26:	4618      	mov	r0, r3
 8004c28:	f00f fa38 	bl	801409c <itoa>
	strcat((char *)systemPayload,temp);
 8004c2c:	f107 030c 	add.w	r3, r7, #12
 8004c30:	4619      	mov	r1, r3
 8004c32:	6838      	ldr	r0, [r7, #0]
 8004c34:	f00f ff9e 	bl	8014b74 <strcat>
	strcat((char *)systemPayload,",");
 8004c38:	6838      	ldr	r0, [r7, #0]
 8004c3a:	f7fb fed3 	bl	80009e4 <strlen>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	461a      	mov	r2, r3
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	4413      	add	r3, r2
 8004c46:	4943      	ldr	r1, [pc, #268]	; (8004d54 <updateCanPayload+0x2f0>)
 8004c48:	461a      	mov	r2, r3
 8004c4a:	460b      	mov	r3, r1
 8004c4c:	881b      	ldrh	r3, [r3, #0]
 8004c4e:	8013      	strh	r3, [r2, #0]
	itoa((((uint64_t)gu64CanMessageArray[data] >> 16) & 255),temp,CAN_PAYLOADSTRING_RADIX);
 8004c50:	4a41      	ldr	r2, [pc, #260]	; (8004d58 <updateCanPayload+0x2f4>)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	00db      	lsls	r3, r3, #3
 8004c56:	4413      	add	r3, r2
 8004c58:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004c5c:	f04f 0200 	mov.w	r2, #0
 8004c60:	f04f 0300 	mov.w	r3, #0
 8004c64:	0c02      	lsrs	r2, r0, #16
 8004c66:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004c6a:	0c0b      	lsrs	r3, r1, #16
 8004c6c:	4613      	mov	r3, r2
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	f107 010c 	add.w	r1, r7, #12
 8004c74:	2210      	movs	r2, #16
 8004c76:	4618      	mov	r0, r3
 8004c78:	f00f fa10 	bl	801409c <itoa>
	strcat((char *)systemPayload,temp);
 8004c7c:	f107 030c 	add.w	r3, r7, #12
 8004c80:	4619      	mov	r1, r3
 8004c82:	6838      	ldr	r0, [r7, #0]
 8004c84:	f00f ff76 	bl	8014b74 <strcat>
	strcat((char *)systemPayload,",");
 8004c88:	6838      	ldr	r0, [r7, #0]
 8004c8a:	f7fb feab 	bl	80009e4 <strlen>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	461a      	mov	r2, r3
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	4413      	add	r3, r2
 8004c96:	492f      	ldr	r1, [pc, #188]	; (8004d54 <updateCanPayload+0x2f0>)
 8004c98:	461a      	mov	r2, r3
 8004c9a:	460b      	mov	r3, r1
 8004c9c:	881b      	ldrh	r3, [r3, #0]
 8004c9e:	8013      	strh	r3, [r2, #0]
	itoa(((uint64_t)(gu64CanMessageArray[data] >> 8) & 255),temp,CAN_PAYLOADSTRING_RADIX);
 8004ca0:	4a2d      	ldr	r2, [pc, #180]	; (8004d58 <updateCanPayload+0x2f4>)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	00db      	lsls	r3, r3, #3
 8004ca6:	4413      	add	r3, r2
 8004ca8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004cac:	f04f 0200 	mov.w	r2, #0
 8004cb0:	f04f 0300 	mov.w	r3, #0
 8004cb4:	0a02      	lsrs	r2, r0, #8
 8004cb6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8004cba:	0a0b      	lsrs	r3, r1, #8
 8004cbc:	4613      	mov	r3, r2
 8004cbe:	b2db      	uxtb	r3, r3
 8004cc0:	f107 010c 	add.w	r1, r7, #12
 8004cc4:	2210      	movs	r2, #16
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f00f f9e8 	bl	801409c <itoa>
	strcat((char *)systemPayload,temp);
 8004ccc:	f107 030c 	add.w	r3, r7, #12
 8004cd0:	4619      	mov	r1, r3
 8004cd2:	6838      	ldr	r0, [r7, #0]
 8004cd4:	f00f ff4e 	bl	8014b74 <strcat>
	strcat((char *)systemPayload,",");
 8004cd8:	6838      	ldr	r0, [r7, #0]
 8004cda:	f7fb fe83 	bl	80009e4 <strlen>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	4413      	add	r3, r2
 8004ce6:	491b      	ldr	r1, [pc, #108]	; (8004d54 <updateCanPayload+0x2f0>)
 8004ce8:	461a      	mov	r2, r3
 8004cea:	460b      	mov	r3, r1
 8004cec:	881b      	ldrh	r3, [r3, #0]
 8004cee:	8013      	strh	r3, [r2, #0]
	itoa(((uint64_t)(gu64CanMessageArray[data]) & 255),temp,CAN_PAYLOADSTRING_RADIX); //255
 8004cf0:	4a19      	ldr	r2, [pc, #100]	; (8004d58 <updateCanPayload+0x2f4>)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	00db      	lsls	r3, r3, #3
 8004cf6:	4413      	add	r3, r2
 8004cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cfc:	4613      	mov	r3, r2
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	f107 010c 	add.w	r1, r7, #12
 8004d04:	2210      	movs	r2, #16
 8004d06:	4618      	mov	r0, r3
 8004d08:	f00f f9c8 	bl	801409c <itoa>
	strcat((char *)systemPayload,temp);
 8004d0c:	f107 030c 	add.w	r3, r7, #12
 8004d10:	4619      	mov	r1, r3
 8004d12:	6838      	ldr	r0, [r7, #0]
 8004d14:	f00f ff2e 	bl	8014b74 <strcat>
	strcat((char *)systemPayload,",");
 8004d18:	6838      	ldr	r0, [r7, #0]
 8004d1a:	f7fb fe63 	bl	80009e4 <strlen>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	461a      	mov	r2, r3
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	4413      	add	r3, r2
 8004d26:	490b      	ldr	r1, [pc, #44]	; (8004d54 <updateCanPayload+0x2f0>)
 8004d28:	461a      	mov	r2, r3
 8004d2a:	460b      	mov	r3, r1
 8004d2c:	881b      	ldrh	r3, [r3, #0]
 8004d2e:	8013      	strh	r3, [r2, #0]

	/*Clear Payload Array*/
	/* Removed after discussion with team that we should keep previous data in case of CAN communication not available */
	gu64CanMessageArray[data] = 0;
 8004d30:	4a09      	ldr	r2, [pc, #36]	; (8004d58 <updateCanPayload+0x2f4>)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	00db      	lsls	r3, r3, #3
 8004d36:	18d1      	adds	r1, r2, r3
 8004d38:	f04f 0200 	mov.w	r2, #0
 8004d3c:	f04f 0300 	mov.w	r3, #0
 8004d40:	e9c1 2300 	strd	r2, r3, [r1]

}//end of void updateCanPayload(uint32_t data ,char * systemPayload )
 8004d44:	bf00      	nop
 8004d46:	3718      	adds	r7, #24
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}
 8004d4c:	08018acc 	.word	0x08018acc
 8004d50:	20002358 	.word	0x20002358
 8004d54:	08018a8c 	.word	0x08018a8c
 8004d58:	200021c8 	.word	0x200021c8

08004d5c <PaylodTime>:
//
//	}
//}

void PaylodTime(char * systemPayload)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b082      	sub	sp, #8
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
	getrtcStamp();
 8004d64:	f003 fe82 	bl	8008a6c <getrtcStamp>

	/*System Time Stamp */
	strcat((char *)systemPayload,(char * )gau8Date);
 8004d68:	4931      	ldr	r1, [pc, #196]	; (8004e30 <PaylodTime+0xd4>)
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f00f ff02 	bl	8014b74 <strcat>
	strcat((char *)systemPayload,(char * )"/");
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f7fb fe37 	bl	80009e4 <strlen>
 8004d76:	4603      	mov	r3, r0
 8004d78:	461a      	mov	r2, r3
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	4413      	add	r3, r2
 8004d7e:	492d      	ldr	r1, [pc, #180]	; (8004e34 <PaylodTime+0xd8>)
 8004d80:	461a      	mov	r2, r3
 8004d82:	460b      	mov	r3, r1
 8004d84:	881b      	ldrh	r3, [r3, #0]
 8004d86:	8013      	strh	r3, [r2, #0]
	strcat((char *)systemPayload,(char * )gau8Month);
 8004d88:	492b      	ldr	r1, [pc, #172]	; (8004e38 <PaylodTime+0xdc>)
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f00f fef2 	bl	8014b74 <strcat>
	strcat((char *)systemPayload,(char * )"/");
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f7fb fe27 	bl	80009e4 <strlen>
 8004d96:	4603      	mov	r3, r0
 8004d98:	461a      	mov	r2, r3
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4413      	add	r3, r2
 8004d9e:	4925      	ldr	r1, [pc, #148]	; (8004e34 <PaylodTime+0xd8>)
 8004da0:	461a      	mov	r2, r3
 8004da2:	460b      	mov	r3, r1
 8004da4:	881b      	ldrh	r3, [r3, #0]
 8004da6:	8013      	strh	r3, [r2, #0]
	strcat((char *)systemPayload,(char * )gau8Year);
 8004da8:	4924      	ldr	r1, [pc, #144]	; (8004e3c <PaylodTime+0xe0>)
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f00f fee2 	bl	8014b74 <strcat>
	strcat((char *)systemPayload,(char * )" ");
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f7fb fe17 	bl	80009e4 <strlen>
 8004db6:	4603      	mov	r3, r0
 8004db8:	461a      	mov	r2, r3
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	4413      	add	r3, r2
 8004dbe:	4920      	ldr	r1, [pc, #128]	; (8004e40 <PaylodTime+0xe4>)
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	460b      	mov	r3, r1
 8004dc4:	881b      	ldrh	r3, [r3, #0]
 8004dc6:	8013      	strh	r3, [r2, #0]
	strcat((char *)systemPayload,(char * )gau8Hour);
 8004dc8:	491e      	ldr	r1, [pc, #120]	; (8004e44 <PaylodTime+0xe8>)
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f00f fed2 	bl	8014b74 <strcat>
	strcat((char *)systemPayload,(char * )":");
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	f7fb fe07 	bl	80009e4 <strlen>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	461a      	mov	r2, r3
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	4413      	add	r3, r2
 8004dde:	491a      	ldr	r1, [pc, #104]	; (8004e48 <PaylodTime+0xec>)
 8004de0:	461a      	mov	r2, r3
 8004de2:	460b      	mov	r3, r1
 8004de4:	881b      	ldrh	r3, [r3, #0]
 8004de6:	8013      	strh	r3, [r2, #0]
	strcat((char *)systemPayload,(char * )gau8Minutes);
 8004de8:	4918      	ldr	r1, [pc, #96]	; (8004e4c <PaylodTime+0xf0>)
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f00f fec2 	bl	8014b74 <strcat>
	strcat((char *)systemPayload,(char * )":");
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f7fb fdf7 	bl	80009e4 <strlen>
 8004df6:	4603      	mov	r3, r0
 8004df8:	461a      	mov	r2, r3
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	4413      	add	r3, r2
 8004dfe:	4912      	ldr	r1, [pc, #72]	; (8004e48 <PaylodTime+0xec>)
 8004e00:	461a      	mov	r2, r3
 8004e02:	460b      	mov	r3, r1
 8004e04:	881b      	ldrh	r3, [r3, #0]
 8004e06:	8013      	strh	r3, [r2, #0]
	strcat((char *)systemPayload,(char * )gau8Seconds);
 8004e08:	4911      	ldr	r1, [pc, #68]	; (8004e50 <PaylodTime+0xf4>)
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f00f feb2 	bl	8014b74 <strcat>
	strcat((char *)systemPayload,(char * )",");
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f7fb fde7 	bl	80009e4 <strlen>
 8004e16:	4603      	mov	r3, r0
 8004e18:	461a      	mov	r2, r3
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	4413      	add	r3, r2
 8004e1e:	490d      	ldr	r1, [pc, #52]	; (8004e54 <PaylodTime+0xf8>)
 8004e20:	461a      	mov	r2, r3
 8004e22:	460b      	mov	r3, r1
 8004e24:	881b      	ldrh	r3, [r3, #0]
 8004e26:	8013      	strh	r3, [r2, #0]
}//end of void PaylodTime(char * systemPayload)
 8004e28:	bf00      	nop
 8004e2a:	3708      	adds	r7, #8
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	200014c0 	.word	0x200014c0
 8004e34:	08018ad4 	.word	0x08018ad4
 8004e38:	200014bc 	.word	0x200014bc
 8004e3c:	200014b4 	.word	0x200014b4
 8004e40:	08018ad8 	.word	0x08018ad8
 8004e44:	200014c4 	.word	0x200014c4
 8004e48:	08018adc 	.word	0x08018adc
 8004e4c:	200014c8 	.word	0x200014c8
 8004e50:	200014cc 	.word	0x200014cc
 8004e54:	08018a8c 	.word	0x08018a8c

08004e58 <GPS_SperateString>:

void GPS_SperateString()
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b086      	sub	sp, #24
 8004e5c:	af00      	add	r7, sp, #0
	uint32_t LoopCounter = 0;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	617b      	str	r3, [r7, #20]
	uint32_t CopyCounter = 0;
 8004e62:	2300      	movs	r3, #0
 8004e64:	613b      	str	r3, [r7, #16]
	uint8_t genric_Cnt = 0;
 8004e66:	2300      	movs	r3, #0
 8004e68:	73fb      	strb	r3, [r7, #15]


	/* Skip ,*/
	for(LoopCounter = 0; gsmInstance.agpsLocationData[LoopCounter] != ','; LoopCounter++)
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	617b      	str	r3, [r7, #20]
 8004e6e:	e002      	b.n	8004e76 <GPS_SperateString+0x1e>
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	3301      	adds	r3, #1
 8004e74:	617b      	str	r3, [r7, #20]
 8004e76:	4a8d      	ldr	r2, [pc, #564]	; (80050ac <GPS_SperateString+0x254>)
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	4413      	add	r3, r2
 8004e7c:	781b      	ldrb	r3, [r3, #0]
 8004e7e:	2b2c      	cmp	r3, #44	; 0x2c
 8004e80:	d1f6      	bne.n	8004e70 <GPS_SperateString+0x18>
	{
		// Nothing to do
	}
	gsmInstance.agpsTempData[CopyCounter++] = gsmInstance.agpsLocationData[LoopCounter];//,
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	1c5a      	adds	r2, r3, #1
 8004e86:	613a      	str	r2, [r7, #16]
 8004e88:	4988      	ldr	r1, [pc, #544]	; (80050ac <GPS_SperateString+0x254>)
 8004e8a:	697a      	ldr	r2, [r7, #20]
 8004e8c:	440a      	add	r2, r1
 8004e8e:	7811      	ldrb	r1, [r2, #0]
 8004e90:	4a86      	ldr	r2, [pc, #536]	; (80050ac <GPS_SperateString+0x254>)
 8004e92:	4413      	add	r3, r2
 8004e94:	460a      	mov	r2, r1
 8004e96:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	LoopCounter++;
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	3301      	adds	r3, #1
 8004e9e:	617b      	str	r3, [r7, #20]
	if(gsmInstance.agpsLocationData[LoopCounter] != ',')
 8004ea0:	4a82      	ldr	r2, [pc, #520]	; (80050ac <GPS_SperateString+0x254>)
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	4413      	add	r3, r2
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	2b2c      	cmp	r3, #44	; 0x2c
 8004eaa:	d02a      	beq.n	8004f02 <GPS_SperateString+0xaa>
	{

		for(; gsmInstance.agpsLocationData[LoopCounter] != '.'; LoopCounter++)
 8004eac:	e019      	b.n	8004ee2 <GPS_SperateString+0x8a>
		{
		// Get date time
			gsmInstance.agpsTempData[CopyCounter] = gsmInstance.agpsLocationData[LoopCounter];
 8004eae:	4a7f      	ldr	r2, [pc, #508]	; (80050ac <GPS_SperateString+0x254>)
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	4413      	add	r3, r2
 8004eb4:	7819      	ldrb	r1, [r3, #0]
 8004eb6:	4a7d      	ldr	r2, [pc, #500]	; (80050ac <GPS_SperateString+0x254>)
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	4413      	add	r3, r2
 8004ebc:	3396      	adds	r3, #150	; 0x96
 8004ebe:	460a      	mov	r2, r1
 8004ec0:	701a      	strb	r2, [r3, #0]
			GPSUTCTIME[genric_Cnt]=gsmInstance.agpsLocationData[LoopCounter];
 8004ec2:	7bfb      	ldrb	r3, [r7, #15]
 8004ec4:	4979      	ldr	r1, [pc, #484]	; (80050ac <GPS_SperateString+0x254>)
 8004ec6:	697a      	ldr	r2, [r7, #20]
 8004ec8:	440a      	add	r2, r1
 8004eca:	7811      	ldrb	r1, [r2, #0]
 8004ecc:	4a78      	ldr	r2, [pc, #480]	; (80050b0 <GPS_SperateString+0x258>)
 8004ece:	54d1      	strb	r1, [r2, r3]
			genric_Cnt++;
 8004ed0:	7bfb      	ldrb	r3, [r7, #15]
 8004ed2:	3301      	adds	r3, #1
 8004ed4:	73fb      	strb	r3, [r7, #15]
			CopyCounter++;
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	3301      	adds	r3, #1
 8004eda:	613b      	str	r3, [r7, #16]
		for(; gsmInstance.agpsLocationData[LoopCounter] != '.'; LoopCounter++)
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	3301      	adds	r3, #1
 8004ee0:	617b      	str	r3, [r7, #20]
 8004ee2:	4a72      	ldr	r2, [pc, #456]	; (80050ac <GPS_SperateString+0x254>)
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	4413      	add	r3, r2
 8004ee8:	781b      	ldrb	r3, [r3, #0]
 8004eea:	2b2e      	cmp	r3, #46	; 0x2e
 8004eec:	d1df      	bne.n	8004eae <GPS_SperateString+0x56>
//		sprintf(u32GPSUTCTime[2],"%02X", GPSUTCTIME[2]);
//		sprintf(u32GPSUTCTime[3],"%02X", GPSUTCTIME[3]);
//		sprintf(u32GPSUTCTime[4],"%02X", GPSUTCTIME[4]);
//		sprintf(u32GPSUTCTime[5],"%02X", GPSUTCTIME[5]);
	/* Skip ms and 2nd ,*/
		for(; gsmInstance.agpsLocationData[LoopCounter] != ','; LoopCounter++)
 8004eee:	e002      	b.n	8004ef6 <GPS_SperateString+0x9e>
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	3301      	adds	r3, #1
 8004ef4:	617b      	str	r3, [r7, #20]
 8004ef6:	4a6d      	ldr	r2, [pc, #436]	; (80050ac <GPS_SperateString+0x254>)
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	4413      	add	r3, r2
 8004efc:	781b      	ldrb	r3, [r3, #0]
 8004efe:	2b2c      	cmp	r3, #44	; 0x2c
 8004f00:	d1f6      	bne.n	8004ef0 <GPS_SperateString+0x98>
		{
			// Nothing to do
		}
	}
	gsmInstance.agpsTempData[CopyCounter++] = gsmInstance.agpsLocationData[LoopCounter];//','
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	1c5a      	adds	r2, r3, #1
 8004f06:	613a      	str	r2, [r7, #16]
 8004f08:	4968      	ldr	r1, [pc, #416]	; (80050ac <GPS_SperateString+0x254>)
 8004f0a:	697a      	ldr	r2, [r7, #20]
 8004f0c:	440a      	add	r2, r1
 8004f0e:	7811      	ldrb	r1, [r2, #0]
 8004f10:	4a66      	ldr	r2, [pc, #408]	; (80050ac <GPS_SperateString+0x254>)
 8004f12:	4413      	add	r3, r2
 8004f14:	460a      	mov	r2, r1
 8004f16:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	LoopCounter++;
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	3301      	adds	r3, #1
 8004f1e:	617b      	str	r3, [r7, #20]
	if(gsmInstance.agpsLocationData[LoopCounter] == 'A')
 8004f20:	4a62      	ldr	r2, [pc, #392]	; (80050ac <GPS_SperateString+0x254>)
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	4413      	add	r3, r2
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	2b41      	cmp	r3, #65	; 0x41
 8004f2a:	d107      	bne.n	8004f3c <GPS_SperateString+0xe4>
	{
		HAL_GPIO_WritePin( GPS_LED_GPIO_Port,  GPS_LED_Pin, GPIO_PIN_SET);
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004f32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f36:	f008 fbfd 	bl	800d734 <HAL_GPIO_WritePin>
 8004f3a:	e00a      	b.n	8004f52 <GPS_SperateString+0xfa>
//		TelematicHeartBeat[enumTeleHearBeat_GPS_STATUS]=0x01;
	}
	else
	{
		HAL_GPIO_WritePin( GPS_LED_GPIO_Port,  GPS_LED_Pin, GPIO_PIN_RESET);
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004f42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f46:	f008 fbf5 	bl	800d734 <HAL_GPIO_WritePin>
//		TelematicHeartBeat[enumTeleHearBeat_GPS_STATUS]=0x00;
	}

	for(; gsmInstance.agpsLocationData[LoopCounter] != ','; LoopCounter++)
 8004f4a:	e002      	b.n	8004f52 <GPS_SperateString+0xfa>
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	3301      	adds	r3, #1
 8004f50:	617b      	str	r3, [r7, #20]
 8004f52:	4a56      	ldr	r2, [pc, #344]	; (80050ac <GPS_SperateString+0x254>)
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	4413      	add	r3, r2
 8004f58:	781b      	ldrb	r3, [r3, #0]
 8004f5a:	2b2c      	cmp	r3, #44	; 0x2c
 8004f5c:	d1f6      	bne.n	8004f4c <GPS_SperateString+0xf4>
	{
		// Nothing to do
	}
	LoopCounter++;
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	3301      	adds	r3, #1
 8004f62:	617b      	str	r3, [r7, #20]
	genric_Cnt = 0;
 8004f64:	2300      	movs	r3, #0
 8004f66:	73fb      	strb	r3, [r7, #15]
	memset(GPS_LAT,0x00,sizeof(GPS_LAT));
 8004f68:	220a      	movs	r2, #10
 8004f6a:	2100      	movs	r1, #0
 8004f6c:	4851      	ldr	r0, [pc, #324]	; (80050b4 <GPS_SperateString+0x25c>)
 8004f6e:	f00f f8b5 	bl	80140dc <memset>
	for(; gsmInstance.agpsLocationData[LoopCounter] != ','; LoopCounter++)
 8004f72:	e019      	b.n	8004fa8 <GPS_SperateString+0x150>
	{
		//LAT
		gsmInstance.agpsTempData[CopyCounter] = gsmInstance.agpsLocationData[LoopCounter];
 8004f74:	4a4d      	ldr	r2, [pc, #308]	; (80050ac <GPS_SperateString+0x254>)
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	4413      	add	r3, r2
 8004f7a:	7819      	ldrb	r1, [r3, #0]
 8004f7c:	4a4b      	ldr	r2, [pc, #300]	; (80050ac <GPS_SperateString+0x254>)
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	4413      	add	r3, r2
 8004f82:	3396      	adds	r3, #150	; 0x96
 8004f84:	460a      	mov	r2, r1
 8004f86:	701a      	strb	r2, [r3, #0]
		GPS_LAT[genric_Cnt++] = gsmInstance.agpsLocationData[LoopCounter];
 8004f88:	7bfb      	ldrb	r3, [r7, #15]
 8004f8a:	1c5a      	adds	r2, r3, #1
 8004f8c:	73fa      	strb	r2, [r7, #15]
 8004f8e:	4619      	mov	r1, r3
 8004f90:	4a46      	ldr	r2, [pc, #280]	; (80050ac <GPS_SperateString+0x254>)
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	4413      	add	r3, r2
 8004f96:	781a      	ldrb	r2, [r3, #0]
 8004f98:	4b46      	ldr	r3, [pc, #280]	; (80050b4 <GPS_SperateString+0x25c>)
 8004f9a:	545a      	strb	r2, [r3, r1]
		CopyCounter++;
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	3301      	adds	r3, #1
 8004fa0:	613b      	str	r3, [r7, #16]
	for(; gsmInstance.agpsLocationData[LoopCounter] != ','; LoopCounter++)
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	3301      	adds	r3, #1
 8004fa6:	617b      	str	r3, [r7, #20]
 8004fa8:	4a40      	ldr	r2, [pc, #256]	; (80050ac <GPS_SperateString+0x254>)
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	4413      	add	r3, r2
 8004fae:	781b      	ldrb	r3, [r3, #0]
 8004fb0:	2b2c      	cmp	r3, #44	; 0x2c
 8004fb2:	d1df      	bne.n	8004f74 <GPS_SperateString+0x11c>
	}
	if(strlen(GPS_LAT)!=0)
 8004fb4:	4b3f      	ldr	r3, [pc, #252]	; (80050b4 <GPS_SperateString+0x25c>)
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d03a      	beq.n	8005032 <GPS_SperateString+0x1da>
	{
		float templat = 0;
 8004fbc:	f04f 0300 	mov.w	r3, #0
 8004fc0:	60bb      	str	r3, [r7, #8]
		templat = atof(&GPS_LAT[2]);
 8004fc2:	483d      	ldr	r0, [pc, #244]	; (80050b8 <GPS_SperateString+0x260>)
 8004fc4:	f00f f81c 	bl	8014000 <atof>
 8004fc8:	ec53 2b10 	vmov	r2, r3, d0
 8004fcc:	4610      	mov	r0, r2
 8004fce:	4619      	mov	r1, r3
 8004fd0:	f7fc fa1a 	bl	8001408 <__aeabi_d2f>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	60bb      	str	r3, [r7, #8]
		templat /= 60;
 8004fd8:	ed97 7a02 	vldr	s14, [r7, #8]
 8004fdc:	eddf 6a37 	vldr	s13, [pc, #220]	; 80050bc <GPS_SperateString+0x264>
 8004fe0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004fe4:	edc7 7a02 	vstr	s15, [r7, #8]
		templat += (((GPS_LAT[0]-'0') * 10) + (GPS_LAT[1]-'0'));
 8004fe8:	4b32      	ldr	r3, [pc, #200]	; (80050b4 <GPS_SperateString+0x25c>)
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8004ff0:	4613      	mov	r3, r2
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	4413      	add	r3, r2
 8004ff6:	005b      	lsls	r3, r3, #1
 8004ff8:	461a      	mov	r2, r3
 8004ffa:	4b2e      	ldr	r3, [pc, #184]	; (80050b4 <GPS_SperateString+0x25c>)
 8004ffc:	785b      	ldrb	r3, [r3, #1]
 8004ffe:	3b30      	subs	r3, #48	; 0x30
 8005000:	4413      	add	r3, r2
 8005002:	ee07 3a90 	vmov	s15, r3
 8005006:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800500a:	ed97 7a02 	vldr	s14, [r7, #8]
 800500e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005012:	edc7 7a02 	vstr	s15, [r7, #8]
		memset(GPS_LAT,0x00,sizeof(GPS_LAT));
 8005016:	220a      	movs	r2, #10
 8005018:	2100      	movs	r1, #0
 800501a:	4826      	ldr	r0, [pc, #152]	; (80050b4 <GPS_SperateString+0x25c>)
 800501c:	f00f f85e 	bl	80140dc <memset>
		sprintf(GPS_LAT,"%.7f",templat);
 8005020:	68b8      	ldr	r0, [r7, #8]
 8005022:	f7fb fea1 	bl	8000d68 <__aeabi_f2d>
 8005026:	4602      	mov	r2, r0
 8005028:	460b      	mov	r3, r1
 800502a:	4925      	ldr	r1, [pc, #148]	; (80050c0 <GPS_SperateString+0x268>)
 800502c:	4821      	ldr	r0, [pc, #132]	; (80050b4 <GPS_SperateString+0x25c>)
 800502e:	f00f fd81 	bl	8014b34 <siprintf>
	}
	gsmInstance.agpsTempData[CopyCounter++] = gsmInstance.agpsLocationData[LoopCounter];//','
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	1c5a      	adds	r2, r3, #1
 8005036:	613a      	str	r2, [r7, #16]
 8005038:	491c      	ldr	r1, [pc, #112]	; (80050ac <GPS_SperateString+0x254>)
 800503a:	697a      	ldr	r2, [r7, #20]
 800503c:	440a      	add	r2, r1
 800503e:	7811      	ldrb	r1, [r2, #0]
 8005040:	4a1a      	ldr	r2, [pc, #104]	; (80050ac <GPS_SperateString+0x254>)
 8005042:	4413      	add	r3, r2
 8005044:	460a      	mov	r2, r1
 8005046:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	LoopCounter++;
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	3301      	adds	r3, #1
 800504e:	617b      	str	r3, [r7, #20]
	for(; gsmInstance.agpsLocationData[LoopCounter] != ','; LoopCounter++)
 8005050:	e00f      	b.n	8005072 <GPS_SperateString+0x21a>
	{
		//N/S
		gsmInstance.agpsTempData[CopyCounter] = gsmInstance.agpsLocationData[LoopCounter];
 8005052:	4a16      	ldr	r2, [pc, #88]	; (80050ac <GPS_SperateString+0x254>)
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	4413      	add	r3, r2
 8005058:	7819      	ldrb	r1, [r3, #0]
 800505a:	4a14      	ldr	r2, [pc, #80]	; (80050ac <GPS_SperateString+0x254>)
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	4413      	add	r3, r2
 8005060:	3396      	adds	r3, #150	; 0x96
 8005062:	460a      	mov	r2, r1
 8005064:	701a      	strb	r2, [r3, #0]
		CopyCounter++;
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	3301      	adds	r3, #1
 800506a:	613b      	str	r3, [r7, #16]
	for(; gsmInstance.agpsLocationData[LoopCounter] != ','; LoopCounter++)
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	3301      	adds	r3, #1
 8005070:	617b      	str	r3, [r7, #20]
 8005072:	4a0e      	ldr	r2, [pc, #56]	; (80050ac <GPS_SperateString+0x254>)
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	4413      	add	r3, r2
 8005078:	781b      	ldrb	r3, [r3, #0]
 800507a:	2b2c      	cmp	r3, #44	; 0x2c
 800507c:	d1e9      	bne.n	8005052 <GPS_SperateString+0x1fa>
	}
	gsmInstance.agpsTempData[CopyCounter++] = gsmInstance.agpsLocationData[LoopCounter];//','
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	1c5a      	adds	r2, r3, #1
 8005082:	613a      	str	r2, [r7, #16]
 8005084:	4909      	ldr	r1, [pc, #36]	; (80050ac <GPS_SperateString+0x254>)
 8005086:	697a      	ldr	r2, [r7, #20]
 8005088:	440a      	add	r2, r1
 800508a:	7811      	ldrb	r1, [r2, #0]
 800508c:	4a07      	ldr	r2, [pc, #28]	; (80050ac <GPS_SperateString+0x254>)
 800508e:	4413      	add	r3, r2
 8005090:	460a      	mov	r2, r1
 8005092:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	LoopCounter++;
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	3301      	adds	r3, #1
 800509a:	617b      	str	r3, [r7, #20]
	genric_Cnt = 0;
 800509c:	2300      	movs	r3, #0
 800509e:	73fb      	strb	r3, [r7, #15]
	memset(GPS_LONG,0x00,sizeof(GPS_LONG));
 80050a0:	220a      	movs	r2, #10
 80050a2:	2100      	movs	r1, #0
 80050a4:	4807      	ldr	r0, [pc, #28]	; (80050c4 <GPS_SperateString+0x26c>)
 80050a6:	f00f f819 	bl	80140dc <memset>
	for(; gsmInstance.agpsLocationData[LoopCounter] != ','; LoopCounter++)
 80050aa:	e027      	b.n	80050fc <GPS_SperateString+0x2a4>
 80050ac:	20002b1c 	.word	0x20002b1c
 80050b0:	20001950 	.word	0x20001950
 80050b4:	20001958 	.word	0x20001958
 80050b8:	2000195a 	.word	0x2000195a
 80050bc:	42700000 	.word	0x42700000
 80050c0:	08018ae0 	.word	0x08018ae0
 80050c4:	20001964 	.word	0x20001964
	{
		//LONG
		gsmInstance.agpsTempData[CopyCounter] = gsmInstance.agpsLocationData[LoopCounter];
 80050c8:	4a73      	ldr	r2, [pc, #460]	; (8005298 <GPS_SperateString+0x440>)
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	4413      	add	r3, r2
 80050ce:	7819      	ldrb	r1, [r3, #0]
 80050d0:	4a71      	ldr	r2, [pc, #452]	; (8005298 <GPS_SperateString+0x440>)
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	4413      	add	r3, r2
 80050d6:	3396      	adds	r3, #150	; 0x96
 80050d8:	460a      	mov	r2, r1
 80050da:	701a      	strb	r2, [r3, #0]
		GPS_LONG[genric_Cnt++] = gsmInstance.agpsLocationData[LoopCounter];
 80050dc:	7bfb      	ldrb	r3, [r7, #15]
 80050de:	1c5a      	adds	r2, r3, #1
 80050e0:	73fa      	strb	r2, [r7, #15]
 80050e2:	4619      	mov	r1, r3
 80050e4:	4a6c      	ldr	r2, [pc, #432]	; (8005298 <GPS_SperateString+0x440>)
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	4413      	add	r3, r2
 80050ea:	781a      	ldrb	r2, [r3, #0]
 80050ec:	4b6b      	ldr	r3, [pc, #428]	; (800529c <GPS_SperateString+0x444>)
 80050ee:	545a      	strb	r2, [r3, r1]
		CopyCounter++;
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	3301      	adds	r3, #1
 80050f4:	613b      	str	r3, [r7, #16]
	for(; gsmInstance.agpsLocationData[LoopCounter] != ','; LoopCounter++)
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	3301      	adds	r3, #1
 80050fa:	617b      	str	r3, [r7, #20]
 80050fc:	4a66      	ldr	r2, [pc, #408]	; (8005298 <GPS_SperateString+0x440>)
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	4413      	add	r3, r2
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	2b2c      	cmp	r3, #44	; 0x2c
 8005106:	d1df      	bne.n	80050c8 <GPS_SperateString+0x270>
	}
	if(strlen(GPS_LONG)!=0)
 8005108:	4b64      	ldr	r3, [pc, #400]	; (800529c <GPS_SperateString+0x444>)
 800510a:	781b      	ldrb	r3, [r3, #0]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d040      	beq.n	8005192 <GPS_SperateString+0x33a>
	{
		float templon = 0;
 8005110:	f04f 0300 	mov.w	r3, #0
 8005114:	607b      	str	r3, [r7, #4]
		templon = atof(&GPS_LONG[3]);
 8005116:	4862      	ldr	r0, [pc, #392]	; (80052a0 <GPS_SperateString+0x448>)
 8005118:	f00e ff72 	bl	8014000 <atof>
 800511c:	ec53 2b10 	vmov	r2, r3, d0
 8005120:	4610      	mov	r0, r2
 8005122:	4619      	mov	r1, r3
 8005124:	f7fc f970 	bl	8001408 <__aeabi_d2f>
 8005128:	4603      	mov	r3, r0
 800512a:	607b      	str	r3, [r7, #4]
		templon /= 60;
 800512c:	ed97 7a01 	vldr	s14, [r7, #4]
 8005130:	eddf 6a5c 	vldr	s13, [pc, #368]	; 80052a4 <GPS_SperateString+0x44c>
 8005134:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005138:	edc7 7a01 	vstr	s15, [r7, #4]
		templon += (((GPS_LONG[0]- '0') * 100 )+ ((GPS_LONG[1]-'0') * 10) +(GPS_LONG[2]-'0'));
 800513c:	4b57      	ldr	r3, [pc, #348]	; (800529c <GPS_SperateString+0x444>)
 800513e:	781b      	ldrb	r3, [r3, #0]
 8005140:	3b30      	subs	r3, #48	; 0x30
 8005142:	2264      	movs	r2, #100	; 0x64
 8005144:	fb02 f103 	mul.w	r1, r2, r3
 8005148:	4b54      	ldr	r3, [pc, #336]	; (800529c <GPS_SperateString+0x444>)
 800514a:	785b      	ldrb	r3, [r3, #1]
 800514c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8005150:	4613      	mov	r3, r2
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	4413      	add	r3, r2
 8005156:	005b      	lsls	r3, r3, #1
 8005158:	18ca      	adds	r2, r1, r3
 800515a:	4b50      	ldr	r3, [pc, #320]	; (800529c <GPS_SperateString+0x444>)
 800515c:	789b      	ldrb	r3, [r3, #2]
 800515e:	3b30      	subs	r3, #48	; 0x30
 8005160:	4413      	add	r3, r2
 8005162:	ee07 3a90 	vmov	s15, r3
 8005166:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800516a:	ed97 7a01 	vldr	s14, [r7, #4]
 800516e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005172:	edc7 7a01 	vstr	s15, [r7, #4]
		memset(GPS_LONG,0x00,sizeof(GPS_LONG));
 8005176:	220a      	movs	r2, #10
 8005178:	2100      	movs	r1, #0
 800517a:	4848      	ldr	r0, [pc, #288]	; (800529c <GPS_SperateString+0x444>)
 800517c:	f00e ffae 	bl	80140dc <memset>
		sprintf(GPS_LONG,"%.7f",templon);
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f7fb fdf1 	bl	8000d68 <__aeabi_f2d>
 8005186:	4602      	mov	r2, r0
 8005188:	460b      	mov	r3, r1
 800518a:	4947      	ldr	r1, [pc, #284]	; (80052a8 <GPS_SperateString+0x450>)
 800518c:	4843      	ldr	r0, [pc, #268]	; (800529c <GPS_SperateString+0x444>)
 800518e:	f00f fcd1 	bl	8014b34 <siprintf>
	}

	gsmInstance.agpsTempData[CopyCounter++] = gsmInstance.agpsLocationData[LoopCounter];//','
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	1c5a      	adds	r2, r3, #1
 8005196:	613a      	str	r2, [r7, #16]
 8005198:	493f      	ldr	r1, [pc, #252]	; (8005298 <GPS_SperateString+0x440>)
 800519a:	697a      	ldr	r2, [r7, #20]
 800519c:	440a      	add	r2, r1
 800519e:	7811      	ldrb	r1, [r2, #0]
 80051a0:	4a3d      	ldr	r2, [pc, #244]	; (8005298 <GPS_SperateString+0x440>)
 80051a2:	4413      	add	r3, r2
 80051a4:	460a      	mov	r2, r1
 80051a6:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	LoopCounter++;
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	3301      	adds	r3, #1
 80051ae:	617b      	str	r3, [r7, #20]
	for(; gsmInstance.agpsLocationData[LoopCounter] != ','; LoopCounter++)
 80051b0:	e00f      	b.n	80051d2 <GPS_SperateString+0x37a>
	{
		//E/W
		gsmInstance.agpsTempData[CopyCounter] = gsmInstance.agpsLocationData[LoopCounter];
 80051b2:	4a39      	ldr	r2, [pc, #228]	; (8005298 <GPS_SperateString+0x440>)
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	4413      	add	r3, r2
 80051b8:	7819      	ldrb	r1, [r3, #0]
 80051ba:	4a37      	ldr	r2, [pc, #220]	; (8005298 <GPS_SperateString+0x440>)
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	4413      	add	r3, r2
 80051c0:	3396      	adds	r3, #150	; 0x96
 80051c2:	460a      	mov	r2, r1
 80051c4:	701a      	strb	r2, [r3, #0]
		CopyCounter++;
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	3301      	adds	r3, #1
 80051ca:	613b      	str	r3, [r7, #16]
	for(; gsmInstance.agpsLocationData[LoopCounter] != ','; LoopCounter++)
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	3301      	adds	r3, #1
 80051d0:	617b      	str	r3, [r7, #20]
 80051d2:	4a31      	ldr	r2, [pc, #196]	; (8005298 <GPS_SperateString+0x440>)
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	4413      	add	r3, r2
 80051d8:	781b      	ldrb	r3, [r3, #0]
 80051da:	2b2c      	cmp	r3, #44	; 0x2c
 80051dc:	d1e9      	bne.n	80051b2 <GPS_SperateString+0x35a>
	}
	gsmInstance.agpsTempData[CopyCounter++] = gsmInstance.agpsLocationData[LoopCounter];//','
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	1c5a      	adds	r2, r3, #1
 80051e2:	613a      	str	r2, [r7, #16]
 80051e4:	492c      	ldr	r1, [pc, #176]	; (8005298 <GPS_SperateString+0x440>)
 80051e6:	697a      	ldr	r2, [r7, #20]
 80051e8:	440a      	add	r2, r1
 80051ea:	7811      	ldrb	r1, [r2, #0]
 80051ec:	4a2a      	ldr	r2, [pc, #168]	; (8005298 <GPS_SperateString+0x440>)
 80051ee:	4413      	add	r3, r2
 80051f0:	460a      	mov	r2, r1
 80051f2:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	LoopCounter++;
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	3301      	adds	r3, #1
 80051fa:	617b      	str	r3, [r7, #20]
	genric_Cnt = 0;
 80051fc:	2300      	movs	r3, #0
 80051fe:	73fb      	strb	r3, [r7, #15]
	for(; gsmInstance.agpsLocationData[LoopCounter] != ','; LoopCounter++)
 8005200:	e00c      	b.n	800521c <GPS_SperateString+0x3c4>
	{
		GPS_SPEED_OVR_GND[genric_Cnt++]=gsmInstance.agpsLocationData[LoopCounter];
 8005202:	7bfb      	ldrb	r3, [r7, #15]
 8005204:	1c5a      	adds	r2, r3, #1
 8005206:	73fa      	strb	r2, [r7, #15]
 8005208:	4619      	mov	r1, r3
 800520a:	4a23      	ldr	r2, [pc, #140]	; (8005298 <GPS_SperateString+0x440>)
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	4413      	add	r3, r2
 8005210:	781a      	ldrb	r2, [r3, #0]
 8005212:	4b26      	ldr	r3, [pc, #152]	; (80052ac <GPS_SperateString+0x454>)
 8005214:	545a      	strb	r2, [r3, r1]
	for(; gsmInstance.agpsLocationData[LoopCounter] != ','; LoopCounter++)
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	3301      	adds	r3, #1
 800521a:	617b      	str	r3, [r7, #20]
 800521c:	4a1e      	ldr	r2, [pc, #120]	; (8005298 <GPS_SperateString+0x440>)
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	4413      	add	r3, r2
 8005222:	781b      	ldrb	r3, [r3, #0]
 8005224:	2b2c      	cmp	r3, #44	; 0x2c
 8005226:	d1ec      	bne.n	8005202 <GPS_SperateString+0x3aa>
		//Speed Over Ground
		// Nothing to do
	}
	LoopCounter++;
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	3301      	adds	r3, #1
 800522c:	617b      	str	r3, [r7, #20]
	for(; gsmInstance.agpsLocationData[LoopCounter] != ','; LoopCounter++)
 800522e:	e002      	b.n	8005236 <GPS_SperateString+0x3de>
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	3301      	adds	r3, #1
 8005234:	617b      	str	r3, [r7, #20]
 8005236:	4a18      	ldr	r2, [pc, #96]	; (8005298 <GPS_SperateString+0x440>)
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	4413      	add	r3, r2
 800523c:	781b      	ldrb	r3, [r3, #0]
 800523e:	2b2c      	cmp	r3, #44	; 0x2c
 8005240:	d1f6      	bne.n	8005230 <GPS_SperateString+0x3d8>
	{
		//Course Over Ground
		// Nothing to do
	}
	LoopCounter++;
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	3301      	adds	r3, #1
 8005246:	617b      	str	r3, [r7, #20]
	genric_Cnt = 0;
 8005248:	2300      	movs	r3, #0
 800524a:	73fb      	strb	r3, [r7, #15]
	for(; gsmInstance.agpsLocationData[LoopCounter] != ','; LoopCounter++)
 800524c:	e019      	b.n	8005282 <GPS_SperateString+0x42a>
	{
		//Date
		gsmInstance.agpsTempData[CopyCounter] = gsmInstance.agpsLocationData[LoopCounter];
 800524e:	4a12      	ldr	r2, [pc, #72]	; (8005298 <GPS_SperateString+0x440>)
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	4413      	add	r3, r2
 8005254:	7819      	ldrb	r1, [r3, #0]
 8005256:	4a10      	ldr	r2, [pc, #64]	; (8005298 <GPS_SperateString+0x440>)
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	4413      	add	r3, r2
 800525c:	3396      	adds	r3, #150	; 0x96
 800525e:	460a      	mov	r2, r1
 8005260:	701a      	strb	r2, [r3, #0]
		GPSUTCDATE[genric_Cnt++] = gsmInstance.agpsLocationData[LoopCounter];
 8005262:	7bfb      	ldrb	r3, [r7, #15]
 8005264:	1c5a      	adds	r2, r3, #1
 8005266:	73fa      	strb	r2, [r7, #15]
 8005268:	4619      	mov	r1, r3
 800526a:	4a0b      	ldr	r2, [pc, #44]	; (8005298 <GPS_SperateString+0x440>)
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	4413      	add	r3, r2
 8005270:	781a      	ldrb	r2, [r3, #0]
 8005272:	4b0f      	ldr	r3, [pc, #60]	; (80052b0 <GPS_SperateString+0x458>)
 8005274:	545a      	strb	r2, [r3, r1]
		CopyCounter++;
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	3301      	adds	r3, #1
 800527a:	613b      	str	r3, [r7, #16]
	for(; gsmInstance.agpsLocationData[LoopCounter] != ','; LoopCounter++)
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	3301      	adds	r3, #1
 8005280:	617b      	str	r3, [r7, #20]
 8005282:	4a05      	ldr	r2, [pc, #20]	; (8005298 <GPS_SperateString+0x440>)
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	4413      	add	r3, r2
 8005288:	781b      	ldrb	r3, [r3, #0]
 800528a:	2b2c      	cmp	r3, #44	; 0x2c
 800528c:	d1df      	bne.n	800524e <GPS_SperateString+0x3f6>
	}
}
 800528e:	bf00      	nop
 8005290:	bf00      	nop
 8005292:	3718      	adds	r7, #24
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}
 8005298:	20002b1c 	.word	0x20002b1c
 800529c:	20001964 	.word	0x20001964
 80052a0:	20001967 	.word	0x20001967
 80052a4:	42700000 	.word	0x42700000
 80052a8:	08018ae0 	.word	0x08018ae0
 80052ac:	20001970 	.word	0x20001970
 80052b0:	20001948 	.word	0x20001948

080052b4 <Diagnostic>:



void Diagnostic(enmDiagnosticStatus DiagnosticStatus)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b082      	sub	sp, #8
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	4603      	mov	r3, r0
 80052bc:	71fb      	strb	r3, [r7, #7]
	Queue_LiveEnequeue(&gsmLivePayload,(char *)getDiagDataString(DiagnosticStatus));
 80052be:	79fb      	ldrb	r3, [r7, #7]
 80052c0:	4618      	mov	r0, r3
 80052c2:	f000 f80b 	bl	80052dc <getDiagDataString>
 80052c6:	4603      	mov	r3, r0
 80052c8:	4619      	mov	r1, r3
 80052ca:	4803      	ldr	r0, [pc, #12]	; (80052d8 <Diagnostic+0x24>)
 80052cc:	f000 fe18 	bl	8005f00 <Queue_LiveEnequeue>

}
 80052d0:	bf00      	nop
 80052d2:	3708      	adds	r7, #8
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}
 80052d8:	20002aec 	.word	0x20002aec

080052dc <getDiagDataString>:

char * getDiagDataString(enmDiagnosticStatus DiagnosticStatus)
{
 80052dc:	b5b0      	push	{r4, r5, r7, lr}
 80052de:	b084      	sub	sp, #16
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	4603      	mov	r3, r0
 80052e4:	71fb      	strb	r3, [r7, #7]

	char * systemPayload = (char*)malloc(sizeof(char) * GSM_PAYLOAD_MAX_SIZE);
 80052e6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80052ea:	f00e fed9 	bl	80140a0 <malloc>
 80052ee:	4603      	mov	r3, r0
 80052f0:	60fb      	str	r3, [r7, #12]
	if(systemPayload != NULL)
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	f000 8094 	beq.w	8005422 <getDiagDataString+0x146>
			2.	Hardware ID
			3.	Model No.
			4.	UTC date time
			5.	Firmware Version
		*/
		memset(systemPayload,0x00,sizeof(char) * GSM_PAYLOAD_MAX_SIZE);
 80052fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80052fe:	2100      	movs	r1, #0
 8005300:	68f8      	ldr	r0, [r7, #12]
 8005302:	f00e feeb 	bl	80140dc <memset>
		/* Start of Frame */
		strcpy((char *)systemPayload,(char * )START_OF_FRAME);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	4948      	ldr	r1, [pc, #288]	; (800542c <getDiagDataString+0x150>)
 800530a:	461a      	mov	r2, r3
 800530c:	460b      	mov	r3, r1
 800530e:	881b      	ldrh	r3, [r3, #0]
 8005310:	8013      	strh	r3, [r2, #0]
		strcat((char *)systemPayload,(char * )",");
 8005312:	68f8      	ldr	r0, [r7, #12]
 8005314:	f7fb fb66 	bl	80009e4 <strlen>
 8005318:	4603      	mov	r3, r0
 800531a:	461a      	mov	r2, r3
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	4413      	add	r3, r2
 8005320:	4943      	ldr	r1, [pc, #268]	; (8005430 <getDiagDataString+0x154>)
 8005322:	461a      	mov	r2, r3
 8005324:	460b      	mov	r3, r1
 8005326:	881b      	ldrh	r3, [r3, #0]
 8005328:	8013      	strh	r3, [r2, #0]

		/* Device UUID */
		strcat((char *)systemPayload,(char * )dinfo);
 800532a:	4942      	ldr	r1, [pc, #264]	; (8005434 <getDiagDataString+0x158>)
 800532c:	68f8      	ldr	r0, [r7, #12]
 800532e:	f00f fc21 	bl	8014b74 <strcat>
		strcat((char *)systemPayload,(char * )",");
 8005332:	68f8      	ldr	r0, [r7, #12]
 8005334:	f7fb fb56 	bl	80009e4 <strlen>
 8005338:	4603      	mov	r3, r0
 800533a:	461a      	mov	r2, r3
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	4413      	add	r3, r2
 8005340:	493b      	ldr	r1, [pc, #236]	; (8005430 <getDiagDataString+0x154>)
 8005342:	461a      	mov	r2, r3
 8005344:	460b      	mov	r3, r1
 8005346:	881b      	ldrh	r3, [r3, #0]
 8005348:	8013      	strh	r3, [r2, #0]

		strcat((char *)systemPayload,(char * )MODEL_NUMBER);
 800534a:	68f8      	ldr	r0, [r7, #12]
 800534c:	f7fb fb4a 	bl	80009e4 <strlen>
 8005350:	4603      	mov	r3, r0
 8005352:	461a      	mov	r2, r3
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	4413      	add	r3, r2
 8005358:	4a37      	ldr	r2, [pc, #220]	; (8005438 <getDiagDataString+0x15c>)
 800535a:	461d      	mov	r5, r3
 800535c:	4614      	mov	r4, r2
 800535e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005360:	6028      	str	r0, [r5, #0]
 8005362:	6069      	str	r1, [r5, #4]
 8005364:	60aa      	str	r2, [r5, #8]
 8005366:	60eb      	str	r3, [r5, #12]
 8005368:	cc03      	ldmia	r4!, {r0, r1}
 800536a:	6128      	str	r0, [r5, #16]
 800536c:	6169      	str	r1, [r5, #20]
 800536e:	8823      	ldrh	r3, [r4, #0]
 8005370:	78a2      	ldrb	r2, [r4, #2]
 8005372:	832b      	strh	r3, [r5, #24]
 8005374:	4613      	mov	r3, r2
 8005376:	76ab      	strb	r3, [r5, #26]
		manufacturerDate(systemPayload);
 8005378:	68f8      	ldr	r0, [r7, #12]
 800537a:	f000 fccf 	bl	8005d1c <manufacturerDate>
		strcat((char *)systemPayload,"_Diagnostic");
 800537e:	68f8      	ldr	r0, [r7, #12]
 8005380:	f7fb fb30 	bl	80009e4 <strlen>
 8005384:	4603      	mov	r3, r0
 8005386:	461a      	mov	r2, r3
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	4413      	add	r3, r2
 800538c:	4a2b      	ldr	r2, [pc, #172]	; (800543c <getDiagDataString+0x160>)
 800538e:	461c      	mov	r4, r3
 8005390:	4613      	mov	r3, r2
 8005392:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005394:	6020      	str	r0, [r4, #0]
 8005396:	6061      	str	r1, [r4, #4]
 8005398:	60a2      	str	r2, [r4, #8]
		strcat((char *)systemPayload,(char * )",");
 800539a:	68f8      	ldr	r0, [r7, #12]
 800539c:	f7fb fb22 	bl	80009e4 <strlen>
 80053a0:	4603      	mov	r3, r0
 80053a2:	461a      	mov	r2, r3
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	4413      	add	r3, r2
 80053a8:	4921      	ldr	r1, [pc, #132]	; (8005430 <getDiagDataString+0x154>)
 80053aa:	461a      	mov	r2, r3
 80053ac:	460b      	mov	r3, r1
 80053ae:	881b      	ldrh	r3, [r3, #0]
 80053b0:	8013      	strh	r3, [r2, #0]

		PaylodTime(systemPayload);
 80053b2:	68f8      	ldr	r0, [r7, #12]
 80053b4:	f7ff fcd2 	bl	8004d5c <PaylodTime>

		/* Firmware Version*/
		/* Firmware Version*/
		strcat((char *)systemPayload,(char * )BOOT_REGION);
 80053b8:	68f8      	ldr	r0, [r7, #12]
 80053ba:	f7fb fb13 	bl	80009e4 <strlen>
 80053be:	4603      	mov	r3, r0
 80053c0:	461a      	mov	r2, r3
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	4413      	add	r3, r2
 80053c6:	4a1e      	ldr	r2, [pc, #120]	; (8005440 <getDiagDataString+0x164>)
 80053c8:	8811      	ldrh	r1, [r2, #0]
 80053ca:	7892      	ldrb	r2, [r2, #2]
 80053cc:	8019      	strh	r1, [r3, #0]
 80053ce:	709a      	strb	r2, [r3, #2]
		strcat((char *)systemPayload,(char * )FIRMWARE_VER);
 80053d0:	68f8      	ldr	r0, [r7, #12]
 80053d2:	f7fb fb07 	bl	80009e4 <strlen>
 80053d6:	4603      	mov	r3, r0
 80053d8:	461a      	mov	r2, r3
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	4413      	add	r3, r2
 80053de:	4a19      	ldr	r2, [pc, #100]	; (8005444 <getDiagDataString+0x168>)
 80053e0:	6810      	ldr	r0, [r2, #0]
 80053e2:	6018      	str	r0, [r3, #0]
		strcat((char *)systemPayload,(char * )",");
 80053e4:	68f8      	ldr	r0, [r7, #12]
 80053e6:	f7fb fafd 	bl	80009e4 <strlen>
 80053ea:	4603      	mov	r3, r0
 80053ec:	461a      	mov	r2, r3
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	4413      	add	r3, r2
 80053f2:	490f      	ldr	r1, [pc, #60]	; (8005430 <getDiagDataString+0x154>)
 80053f4:	461a      	mov	r2, r3
 80053f6:	460b      	mov	r3, r1
 80053f8:	881b      	ldrh	r3, [r3, #0]
 80053fa:	8013      	strh	r3, [r2, #0]

		DiagnosticString(systemPayload,DiagnosticStatus);
 80053fc:	79fb      	ldrb	r3, [r7, #7]
 80053fe:	4619      	mov	r1, r3
 8005400:	68f8      	ldr	r0, [r7, #12]
 8005402:	f000 f823 	bl	800544c <DiagnosticString>

		/* End of Frame */
		strcat((char *)systemPayload,(char * )END_OF_FRAME);
 8005406:	68f8      	ldr	r0, [r7, #12]
 8005408:	f7fb faec 	bl	80009e4 <strlen>
 800540c:	4603      	mov	r3, r0
 800540e:	461a      	mov	r2, r3
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	4413      	add	r3, r2
 8005414:	490c      	ldr	r1, [pc, #48]	; (8005448 <getDiagDataString+0x16c>)
 8005416:	461a      	mov	r2, r3
 8005418:	460b      	mov	r3, r1
 800541a:	881b      	ldrh	r3, [r3, #0]
 800541c:	8013      	strh	r3, [r2, #0]

		return systemPayload;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	e000      	b.n	8005424 <getDiagDataString+0x148>
	}
	else
		return NULL; // malloc Error . Memory Allocation Failure
 8005422:	2300      	movs	r3, #0
}
 8005424:	4618      	mov	r0, r3
 8005426:	3710      	adds	r7, #16
 8005428:	46bd      	mov	sp, r7
 800542a:	bdb0      	pop	{r4, r5, r7, pc}
 800542c:	08018a88 	.word	0x08018a88
 8005430:	08018a8c 	.word	0x08018a8c
 8005434:	20000000 	.word	0x20000000
 8005438:	08018a90 	.word	0x08018a90
 800543c:	08018ae8 	.word	0x08018ae8
 8005440:	08018ab8 	.word	0x08018ab8
 8005444:	08018abc 	.word	0x08018abc
 8005448:	08018ac8 	.word	0x08018ac8

0800544c <DiagnosticString>:

void DiagnosticString(char * systemPayload, enmDiagnosticStatus DiagnosticStatus)
{
 800544c:	b5b0      	push	{r4, r5, r7, lr}
 800544e:	b088      	sub	sp, #32
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	460b      	mov	r3, r1
 8005456:	70fb      	strb	r3, [r7, #3]
	char temp[20] = "";
 8005458:	2300      	movs	r3, #0
 800545a:	60fb      	str	r3, [r7, #12]
 800545c:	f107 0310 	add.w	r3, r7, #16
 8005460:	2200      	movs	r2, #0
 8005462:	601a      	str	r2, [r3, #0]
 8005464:	605a      	str	r2, [r3, #4]
 8005466:	609a      	str	r2, [r3, #8]
 8005468:	60da      	str	r2, [r3, #12]
	switch(DiagnosticStatus)
 800546a:	78fb      	ldrb	r3, [r7, #3]
 800546c:	2b63      	cmp	r3, #99	; 0x63
 800546e:	f200 83f6 	bhi.w	8005c5e <DiagnosticString+0x812>
 8005472:	a201      	add	r2, pc, #4	; (adr r2, 8005478 <DiagnosticString+0x2c>)
 8005474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005478:	08005609 	.word	0x08005609
 800547c:	08005673 	.word	0x08005673
 8005480:	08005c5f 	.word	0x08005c5f
 8005484:	08005697 	.word	0x08005697
 8005488:	080056fb 	.word	0x080056fb
 800548c:	0800574d 	.word	0x0800574d
 8005490:	0800582d 	.word	0x0800582d
 8005494:	080058f9 	.word	0x080058f9
 8005498:	0800597d 	.word	0x0800597d
 800549c:	080059e1 	.word	0x080059e1
 80054a0:	08005ab1 	.word	0x08005ab1
 80054a4:	08005b15 	.word	0x08005b15
 80054a8:	08005b79 	.word	0x08005b79
 80054ac:	08005c91 	.word	0x08005c91
 80054b0:	08005bdd 	.word	0x08005bdd
 80054b4:	08005c5f 	.word	0x08005c5f
 80054b8:	08005c5f 	.word	0x08005c5f
 80054bc:	08005c5f 	.word	0x08005c5f
 80054c0:	08005c5f 	.word	0x08005c5f
 80054c4:	08005c5f 	.word	0x08005c5f
 80054c8:	08005c5f 	.word	0x08005c5f
 80054cc:	08005c5f 	.word	0x08005c5f
 80054d0:	08005c5f 	.word	0x08005c5f
 80054d4:	08005c5f 	.word	0x08005c5f
 80054d8:	08005c5f 	.word	0x08005c5f
 80054dc:	08005c5f 	.word	0x08005c5f
 80054e0:	08005c5f 	.word	0x08005c5f
 80054e4:	08005c5f 	.word	0x08005c5f
 80054e8:	08005c5f 	.word	0x08005c5f
 80054ec:	08005c5f 	.word	0x08005c5f
 80054f0:	08005c5f 	.word	0x08005c5f
 80054f4:	08005c5f 	.word	0x08005c5f
 80054f8:	08005c5f 	.word	0x08005c5f
 80054fc:	08005c5f 	.word	0x08005c5f
 8005500:	08005c5f 	.word	0x08005c5f
 8005504:	08005c5f 	.word	0x08005c5f
 8005508:	08005c5f 	.word	0x08005c5f
 800550c:	08005c5f 	.word	0x08005c5f
 8005510:	08005c5f 	.word	0x08005c5f
 8005514:	08005c5f 	.word	0x08005c5f
 8005518:	08005c5f 	.word	0x08005c5f
 800551c:	08005c5f 	.word	0x08005c5f
 8005520:	08005c5f 	.word	0x08005c5f
 8005524:	08005c5f 	.word	0x08005c5f
 8005528:	08005c5f 	.word	0x08005c5f
 800552c:	08005c5f 	.word	0x08005c5f
 8005530:	08005c5f 	.word	0x08005c5f
 8005534:	08005c5f 	.word	0x08005c5f
 8005538:	08005c5f 	.word	0x08005c5f
 800553c:	08005c5f 	.word	0x08005c5f
 8005540:	08005c5f 	.word	0x08005c5f
 8005544:	08005c5f 	.word	0x08005c5f
 8005548:	08005c5f 	.word	0x08005c5f
 800554c:	08005c5f 	.word	0x08005c5f
 8005550:	08005c5f 	.word	0x08005c5f
 8005554:	08005c5f 	.word	0x08005c5f
 8005558:	08005c5f 	.word	0x08005c5f
 800555c:	08005c5f 	.word	0x08005c5f
 8005560:	08005c5f 	.word	0x08005c5f
 8005564:	08005c5f 	.word	0x08005c5f
 8005568:	08005c5f 	.word	0x08005c5f
 800556c:	08005c5f 	.word	0x08005c5f
 8005570:	08005c5f 	.word	0x08005c5f
 8005574:	08005c5f 	.word	0x08005c5f
 8005578:	08005c5f 	.word	0x08005c5f
 800557c:	08005c5f 	.word	0x08005c5f
 8005580:	08005c5f 	.word	0x08005c5f
 8005584:	08005c5f 	.word	0x08005c5f
 8005588:	08005c5f 	.word	0x08005c5f
 800558c:	08005c5f 	.word	0x08005c5f
 8005590:	08005c5f 	.word	0x08005c5f
 8005594:	08005c5f 	.word	0x08005c5f
 8005598:	08005c5f 	.word	0x08005c5f
 800559c:	08005c5f 	.word	0x08005c5f
 80055a0:	08005c5f 	.word	0x08005c5f
 80055a4:	08005c5f 	.word	0x08005c5f
 80055a8:	08005c5f 	.word	0x08005c5f
 80055ac:	08005c5f 	.word	0x08005c5f
 80055b0:	08005c5f 	.word	0x08005c5f
 80055b4:	08005c5f 	.word	0x08005c5f
 80055b8:	08005c5f 	.word	0x08005c5f
 80055bc:	08005c5f 	.word	0x08005c5f
 80055c0:	08005c5f 	.word	0x08005c5f
 80055c4:	08005c5f 	.word	0x08005c5f
 80055c8:	08005c5f 	.word	0x08005c5f
 80055cc:	08005c5f 	.word	0x08005c5f
 80055d0:	08005c5f 	.word	0x08005c5f
 80055d4:	08005c5f 	.word	0x08005c5f
 80055d8:	08005c5f 	.word	0x08005c5f
 80055dc:	08005c5f 	.word	0x08005c5f
 80055e0:	08005c5f 	.word	0x08005c5f
 80055e4:	08005c5f 	.word	0x08005c5f
 80055e8:	08005c5f 	.word	0x08005c5f
 80055ec:	08005c5f 	.word	0x08005c5f
 80055f0:	08005c5f 	.word	0x08005c5f
 80055f4:	08005c5f 	.word	0x08005c5f
 80055f8:	08005c5f 	.word	0x08005c5f
 80055fc:	08005c5f 	.word	0x08005c5f
 8005600:	08005c5f 	.word	0x08005c5f
 8005604:	08005c2d 	.word	0x08005c2d
	{
		case enmDiagnostic_SUCCESS_OK:
			strcat((char *)systemPayload,"FS");
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f7fb f9eb 	bl	80009e4 <strlen>
 800560e:	4603      	mov	r3, r0
 8005610:	461a      	mov	r2, r3
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	4413      	add	r3, r2
 8005616:	4aac      	ldr	r2, [pc, #688]	; (80058c8 <DiagnosticString+0x47c>)
 8005618:	8811      	ldrh	r1, [r2, #0]
 800561a:	7892      	ldrb	r2, [r2, #2]
 800561c:	8019      	strh	r1, [r3, #0]
 800561e:	709a      	strb	r2, [r3, #2]
			strcat((char *)systemPayload,(char * )",");
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f7fb f9df 	bl	80009e4 <strlen>
 8005626:	4603      	mov	r3, r0
 8005628:	461a      	mov	r2, r3
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	4413      	add	r3, r2
 800562e:	49a7      	ldr	r1, [pc, #668]	; (80058cc <DiagnosticString+0x480>)
 8005630:	461a      	mov	r2, r3
 8005632:	460b      	mov	r3, r1
 8005634:	881b      	ldrh	r3, [r3, #0]
 8005636:	8013      	strh	r3, [r2, #0]
			itoa(DiagnosticStatus,temp,PAYLOAD_DATA_STRING_RADIX);
 8005638:	78fb      	ldrb	r3, [r7, #3]
 800563a:	f107 010c 	add.w	r1, r7, #12
 800563e:	220a      	movs	r2, #10
 8005640:	4618      	mov	r0, r3
 8005642:	f00e fd2b 	bl	801409c <itoa>
			strcat((char *)systemPayload,temp);
 8005646:	f107 030c 	add.w	r3, r7, #12
 800564a:	4619      	mov	r1, r3
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f00f fa91 	bl	8014b74 <strcat>
			strcat((char *)systemPayload,(char * )",");
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f7fb f9c6 	bl	80009e4 <strlen>
 8005658:	4603      	mov	r3, r0
 800565a:	461a      	mov	r2, r3
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	4413      	add	r3, r2
 8005660:	499a      	ldr	r1, [pc, #616]	; (80058cc <DiagnosticString+0x480>)
 8005662:	461a      	mov	r2, r3
 8005664:	460b      	mov	r3, r1
 8005666:	881b      	ldrh	r3, [r3, #0]
 8005668:	8013      	strh	r3, [r2, #0]
			FOTACompleteFlag = TRUE;
 800566a:	4b99      	ldr	r3, [pc, #612]	; (80058d0 <DiagnosticString+0x484>)
 800566c:	2201      	movs	r2, #1
 800566e:	701a      	strb	r2, [r3, #0]
			break;
 8005670:	e30f      	b.n	8005c92 <DiagnosticString+0x846>

		case enmDiagnostic_CAN_ID:
			strcat((char *)systemPayload,"CAN ID's : ");
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f7fb f9b6 	bl	80009e4 <strlen>
 8005678:	4603      	mov	r3, r0
 800567a:	461a      	mov	r2, r3
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	4413      	add	r3, r2
 8005680:	4a94      	ldr	r2, [pc, #592]	; (80058d4 <DiagnosticString+0x488>)
 8005682:	461c      	mov	r4, r3
 8005684:	4613      	mov	r3, r2
 8005686:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005688:	6020      	str	r0, [r4, #0]
 800568a:	6061      	str	r1, [r4, #4]
 800568c:	60a2      	str	r2, [r4, #8]
			CANIDPrase(systemPayload);
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f000 fb08 	bl	8005ca4 <CANIDPrase>
			break;
 8005694:	e2fd      	b.n	8005c92 <DiagnosticString+0x846>

		case enmDiagnostic_HW_ID_MISMATCH_ERROR: // Device HW ID Mismatch
			strcat((char *)systemPayload,"FF");
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f7fb f9a4 	bl	80009e4 <strlen>
 800569c:	4603      	mov	r3, r0
 800569e:	461a      	mov	r2, r3
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	4413      	add	r3, r2
 80056a4:	4a8c      	ldr	r2, [pc, #560]	; (80058d8 <DiagnosticString+0x48c>)
 80056a6:	8811      	ldrh	r1, [r2, #0]
 80056a8:	7892      	ldrb	r2, [r2, #2]
 80056aa:	8019      	strh	r1, [r3, #0]
 80056ac:	709a      	strb	r2, [r3, #2]
			strcat((char *)systemPayload,(char * )",");
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f7fb f998 	bl	80009e4 <strlen>
 80056b4:	4603      	mov	r3, r0
 80056b6:	461a      	mov	r2, r3
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	4413      	add	r3, r2
 80056bc:	4983      	ldr	r1, [pc, #524]	; (80058cc <DiagnosticString+0x480>)
 80056be:	461a      	mov	r2, r3
 80056c0:	460b      	mov	r3, r1
 80056c2:	881b      	ldrh	r3, [r3, #0]
 80056c4:	8013      	strh	r3, [r2, #0]
			itoa(DiagnosticStatus,temp,PAYLOAD_DATA_STRING_RADIX);
 80056c6:	78fb      	ldrb	r3, [r7, #3]
 80056c8:	f107 010c 	add.w	r1, r7, #12
 80056cc:	220a      	movs	r2, #10
 80056ce:	4618      	mov	r0, r3
 80056d0:	f00e fce4 	bl	801409c <itoa>
			strcat((char *)systemPayload,temp);
 80056d4:	f107 030c 	add.w	r3, r7, #12
 80056d8:	4619      	mov	r1, r3
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f00f fa4a 	bl	8014b74 <strcat>
			strcat((char *)systemPayload,(char * )",");
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f7fb f97f 	bl	80009e4 <strlen>
 80056e6:	4603      	mov	r3, r0
 80056e8:	461a      	mov	r2, r3
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	4413      	add	r3, r2
 80056ee:	4977      	ldr	r1, [pc, #476]	; (80058cc <DiagnosticString+0x480>)
 80056f0:	461a      	mov	r2, r3
 80056f2:	460b      	mov	r3, r1
 80056f4:	881b      	ldrh	r3, [r3, #0]
 80056f6:	8013      	strh	r3, [r2, #0]
			break;
 80056f8:	e2cb      	b.n	8005c92 <DiagnosticString+0x846>

		case enmDiagnostic_FOTA_REQ_RX:
			strcat((char *)systemPayload,"FR");
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f7fb f972 	bl	80009e4 <strlen>
 8005700:	4603      	mov	r3, r0
 8005702:	461a      	mov	r2, r3
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	4413      	add	r3, r2
 8005708:	4a74      	ldr	r2, [pc, #464]	; (80058dc <DiagnosticString+0x490>)
 800570a:	8811      	ldrh	r1, [r2, #0]
 800570c:	7892      	ldrb	r2, [r2, #2]
 800570e:	8019      	strh	r1, [r3, #0]
 8005710:	709a      	strb	r2, [r3, #2]
			strcat((char *)systemPayload,(char * )",");
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f7fb f966 	bl	80009e4 <strlen>
 8005718:	4603      	mov	r3, r0
 800571a:	461a      	mov	r2, r3
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	4413      	add	r3, r2
 8005720:	496a      	ldr	r1, [pc, #424]	; (80058cc <DiagnosticString+0x480>)
 8005722:	461a      	mov	r2, r3
 8005724:	460b      	mov	r3, r1
 8005726:	881b      	ldrh	r3, [r3, #0]
 8005728:	8013      	strh	r3, [r2, #0]
			strcat((char *)systemPayload,(char *)gau8FotaURL);
 800572a:	496d      	ldr	r1, [pc, #436]	; (80058e0 <DiagnosticString+0x494>)
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f00f fa21 	bl	8014b74 <strcat>
			strcat((char *)systemPayload,(char * )",");
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f7fb f956 	bl	80009e4 <strlen>
 8005738:	4603      	mov	r3, r0
 800573a:	461a      	mov	r2, r3
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	4413      	add	r3, r2
 8005740:	4962      	ldr	r1, [pc, #392]	; (80058cc <DiagnosticString+0x480>)
 8005742:	461a      	mov	r2, r3
 8005744:	460b      	mov	r3, r1
 8005746:	881b      	ldrh	r3, [r3, #0]
 8005748:	8013      	strh	r3, [r2, #0]
			break;
 800574a:	e2a2      	b.n	8005c92 <DiagnosticString+0x846>


		case enmDiagnostic_POWER_SUPPLY_ERROR:
			strcat((char *)systemPayload,"FF");
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f7fb f949 	bl	80009e4 <strlen>
 8005752:	4603      	mov	r3, r0
 8005754:	461a      	mov	r2, r3
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	4413      	add	r3, r2
 800575a:	4a5f      	ldr	r2, [pc, #380]	; (80058d8 <DiagnosticString+0x48c>)
 800575c:	8811      	ldrh	r1, [r2, #0]
 800575e:	7892      	ldrb	r2, [r2, #2]
 8005760:	8019      	strh	r1, [r3, #0]
 8005762:	709a      	strb	r2, [r3, #2]
			strcat((char *)systemPayload,(char * )",");
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f7fb f93d 	bl	80009e4 <strlen>
 800576a:	4603      	mov	r3, r0
 800576c:	461a      	mov	r2, r3
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	4413      	add	r3, r2
 8005772:	4956      	ldr	r1, [pc, #344]	; (80058cc <DiagnosticString+0x480>)
 8005774:	461a      	mov	r2, r3
 8005776:	460b      	mov	r3, r1
 8005778:	881b      	ldrh	r3, [r3, #0]
 800577a:	8013      	strh	r3, [r2, #0]
			itoa(DiagnosticStatus,temp,PAYLOAD_DATA_STRING_RADIX);
 800577c:	78fb      	ldrb	r3, [r7, #3]
 800577e:	f107 010c 	add.w	r1, r7, #12
 8005782:	220a      	movs	r2, #10
 8005784:	4618      	mov	r0, r3
 8005786:	f00e fc89 	bl	801409c <itoa>
			strcat((char *)systemPayload,temp);
 800578a:	f107 030c 	add.w	r3, r7, #12
 800578e:	4619      	mov	r1, r3
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f00f f9ef 	bl	8014b74 <strcat>
			strcat((char *)systemPayload,(char * )",");
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f7fb f924 	bl	80009e4 <strlen>
 800579c:	4603      	mov	r3, r0
 800579e:	461a      	mov	r2, r3
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	4413      	add	r3, r2
 80057a4:	4949      	ldr	r1, [pc, #292]	; (80058cc <DiagnosticString+0x480>)
 80057a6:	461a      	mov	r2, r3
 80057a8:	460b      	mov	r3, r1
 80057aa:	881b      	ldrh	r3, [r3, #0]
 80057ac:	8013      	strh	r3, [r2, #0]
			strcat((char *)systemPayload,"Input Supply : ");
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f7fb f918 	bl	80009e4 <strlen>
 80057b4:	4603      	mov	r3, r0
 80057b6:	461a      	mov	r2, r3
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	4413      	add	r3, r2
 80057bc:	4a49      	ldr	r2, [pc, #292]	; (80058e4 <DiagnosticString+0x498>)
 80057be:	461c      	mov	r4, r3
 80057c0:	4615      	mov	r5, r2
 80057c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80057c4:	6020      	str	r0, [r4, #0]
 80057c6:	6061      	str	r1, [r4, #4]
 80057c8:	60a2      	str	r2, [r4, #8]
 80057ca:	60e3      	str	r3, [r4, #12]
//			updateInputVoltage(ADCValues.ADC_Input_Voltage);
//			strcat((char *)systemPayload,(char * )voltage);
			strcat((char *)systemPayload,(char * )",");
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f7fb f909 	bl	80009e4 <strlen>
 80057d2:	4603      	mov	r3, r0
 80057d4:	461a      	mov	r2, r3
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	4413      	add	r3, r2
 80057da:	493c      	ldr	r1, [pc, #240]	; (80058cc <DiagnosticString+0x480>)
 80057dc:	461a      	mov	r2, r3
 80057de:	460b      	mov	r3, r1
 80057e0:	881b      	ldrh	r3, [r3, #0]
 80057e2:	8013      	strh	r3, [r2, #0]
			strcat((char *)systemPayload,"Internal Battery Supply : ");
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f7fb f8fd 	bl	80009e4 <strlen>
 80057ea:	4603      	mov	r3, r0
 80057ec:	461a      	mov	r2, r3
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	4413      	add	r3, r2
 80057f2:	4a3d      	ldr	r2, [pc, #244]	; (80058e8 <DiagnosticString+0x49c>)
 80057f4:	461d      	mov	r5, r3
 80057f6:	4614      	mov	r4, r2
 80057f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80057fa:	6028      	str	r0, [r5, #0]
 80057fc:	6069      	str	r1, [r5, #4]
 80057fe:	60aa      	str	r2, [r5, #8]
 8005800:	60eb      	str	r3, [r5, #12]
 8005802:	cc03      	ldmia	r4!, {r0, r1}
 8005804:	6128      	str	r0, [r5, #16]
 8005806:	6169      	str	r1, [r5, #20]
 8005808:	8823      	ldrh	r3, [r4, #0]
 800580a:	78a2      	ldrb	r2, [r4, #2]
 800580c:	832b      	strh	r3, [r5, #24]
 800580e:	4613      	mov	r3, r2
 8005810:	76ab      	strb	r3, [r5, #26]
//			updateInputVoltage(ADCValues.ADC_Batt_Voltage);
//			strcat((char *)systemPayload,(char * )voltage);
			strcat((char *)systemPayload,(char * )",");
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f7fb f8e6 	bl	80009e4 <strlen>
 8005818:	4603      	mov	r3, r0
 800581a:	461a      	mov	r2, r3
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	4413      	add	r3, r2
 8005820:	492a      	ldr	r1, [pc, #168]	; (80058cc <DiagnosticString+0x480>)
 8005822:	461a      	mov	r2, r3
 8005824:	460b      	mov	r3, r1
 8005826:	881b      	ldrh	r3, [r3, #0]
 8005828:	8013      	strh	r3, [r2, #0]
			break;
 800582a:	e232      	b.n	8005c92 <DiagnosticString+0x846>

		case enmDiagnostic_RX_FILE_SIZE_ERROR: //Received File Size is Greater than (FLASH_SIZE-4k)/2
			strcat((char *)systemPayload,"FF");
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f7fb f8d9 	bl	80009e4 <strlen>
 8005832:	4603      	mov	r3, r0
 8005834:	461a      	mov	r2, r3
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	4413      	add	r3, r2
 800583a:	4a27      	ldr	r2, [pc, #156]	; (80058d8 <DiagnosticString+0x48c>)
 800583c:	8811      	ldrh	r1, [r2, #0]
 800583e:	7892      	ldrb	r2, [r2, #2]
 8005840:	8019      	strh	r1, [r3, #0]
 8005842:	709a      	strb	r2, [r3, #2]
			strcat((char *)systemPayload,(char * )",");
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f7fb f8cd 	bl	80009e4 <strlen>
 800584a:	4603      	mov	r3, r0
 800584c:	461a      	mov	r2, r3
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	4413      	add	r3, r2
 8005852:	491e      	ldr	r1, [pc, #120]	; (80058cc <DiagnosticString+0x480>)
 8005854:	461a      	mov	r2, r3
 8005856:	460b      	mov	r3, r1
 8005858:	881b      	ldrh	r3, [r3, #0]
 800585a:	8013      	strh	r3, [r2, #0]
			itoa(DiagnosticStatus,temp,PAYLOAD_DATA_STRING_RADIX);
 800585c:	78fb      	ldrb	r3, [r7, #3]
 800585e:	f107 010c 	add.w	r1, r7, #12
 8005862:	220a      	movs	r2, #10
 8005864:	4618      	mov	r0, r3
 8005866:	f00e fc19 	bl	801409c <itoa>
			strcat((char *)systemPayload,temp);
 800586a:	f107 030c 	add.w	r3, r7, #12
 800586e:	4619      	mov	r1, r3
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f00f f97f 	bl	8014b74 <strcat>
			strcat((char *)systemPayload,(char * )",Received File Size : ");
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f7fb f8b4 	bl	80009e4 <strlen>
 800587c:	4603      	mov	r3, r0
 800587e:	461a      	mov	r2, r3
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	4413      	add	r3, r2
 8005884:	4a19      	ldr	r2, [pc, #100]	; (80058ec <DiagnosticString+0x4a0>)
 8005886:	461c      	mov	r4, r3
 8005888:	4615      	mov	r5, r2
 800588a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800588c:	6020      	str	r0, [r4, #0]
 800588e:	6061      	str	r1, [r4, #4]
 8005890:	60a2      	str	r2, [r4, #8]
 8005892:	60e3      	str	r3, [r4, #12]
 8005894:	6828      	ldr	r0, [r5, #0]
 8005896:	6120      	str	r0, [r4, #16]
 8005898:	88ab      	ldrh	r3, [r5, #4]
 800589a:	79aa      	ldrb	r2, [r5, #6]
 800589c:	82a3      	strh	r3, [r4, #20]
 800589e:	4613      	mov	r3, r2
 80058a0:	75a3      	strb	r3, [r4, #22]
			strcat((char *)systemPayload,gu32FotaFileSizeinBytes);
 80058a2:	4913      	ldr	r1, [pc, #76]	; (80058f0 <DiagnosticString+0x4a4>)
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f00f f965 	bl	8014b74 <strcat>
			strcat((char *)systemPayload,(char * )" Bytes,");
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f7fb f89a 	bl	80009e4 <strlen>
 80058b0:	4603      	mov	r3, r0
 80058b2:	461a      	mov	r2, r3
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	4413      	add	r3, r2
 80058b8:	490e      	ldr	r1, [pc, #56]	; (80058f4 <DiagnosticString+0x4a8>)
 80058ba:	461a      	mov	r2, r3
 80058bc:	460b      	mov	r3, r1
 80058be:	cb03      	ldmia	r3!, {r0, r1}
 80058c0:	6010      	str	r0, [r2, #0]
 80058c2:	6051      	str	r1, [r2, #4]
			break;
 80058c4:	e1e5      	b.n	8005c92 <DiagnosticString+0x846>
 80058c6:	bf00      	nop
 80058c8:	08018af4 	.word	0x08018af4
 80058cc:	08018a8c 	.word	0x08018a8c
 80058d0:	20001976 	.word	0x20001976
 80058d4:	08018af8 	.word	0x08018af8
 80058d8:	08018b04 	.word	0x08018b04
 80058dc:	08018b08 	.word	0x08018b08
 80058e0:	20001848 	.word	0x20001848
 80058e4:	08018b0c 	.word	0x08018b0c
 80058e8:	08018b1c 	.word	0x08018b1c
 80058ec:	08018b38 	.word	0x08018b38
 80058f0:	20000f9c 	.word	0x20000f9c
 80058f4:	08018b50 	.word	0x08018b50

		case enmDiagnostic_FILE_DONWLOAD_ERROR:
			strcat((char *)systemPayload,"FF");
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f7fb f873 	bl	80009e4 <strlen>
 80058fe:	4603      	mov	r3, r0
 8005900:	461a      	mov	r2, r3
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4413      	add	r3, r2
 8005906:	4ac2      	ldr	r2, [pc, #776]	; (8005c10 <DiagnosticString+0x7c4>)
 8005908:	8811      	ldrh	r1, [r2, #0]
 800590a:	7892      	ldrb	r2, [r2, #2]
 800590c:	8019      	strh	r1, [r3, #0]
 800590e:	709a      	strb	r2, [r3, #2]
			strcat((char *)systemPayload,(char * )",");
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f7fb f867 	bl	80009e4 <strlen>
 8005916:	4603      	mov	r3, r0
 8005918:	461a      	mov	r2, r3
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4413      	add	r3, r2
 800591e:	49bd      	ldr	r1, [pc, #756]	; (8005c14 <DiagnosticString+0x7c8>)
 8005920:	461a      	mov	r2, r3
 8005922:	460b      	mov	r3, r1
 8005924:	881b      	ldrh	r3, [r3, #0]
 8005926:	8013      	strh	r3, [r2, #0]
			itoa(DiagnosticStatus,temp,PAYLOAD_DATA_STRING_RADIX);
 8005928:	78fb      	ldrb	r3, [r7, #3]
 800592a:	f107 010c 	add.w	r1, r7, #12
 800592e:	220a      	movs	r2, #10
 8005930:	4618      	mov	r0, r3
 8005932:	f00e fbb3 	bl	801409c <itoa>
			strcat((char *)systemPayload,temp);
 8005936:	f107 030c 	add.w	r3, r7, #12
 800593a:	4619      	mov	r1, r3
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f00f f919 	bl	8014b74 <strcat>
			strcat((char *)systemPayload,(char * )",");
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f7fb f84e 	bl	80009e4 <strlen>
 8005948:	4603      	mov	r3, r0
 800594a:	461a      	mov	r2, r3
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	4413      	add	r3, r2
 8005950:	49b0      	ldr	r1, [pc, #704]	; (8005c14 <DiagnosticString+0x7c8>)
 8005952:	461a      	mov	r2, r3
 8005954:	460b      	mov	r3, r1
 8005956:	881b      	ldrh	r3, [r3, #0]
 8005958:	8013      	strh	r3, [r2, #0]
//			strcat((char *)systemPayload,(char * )gsmInstance.u32GSMHttpResponseCode);
			strcat((char *)systemPayload,(char * )gu32FotaFileSizeinBytes);
 800595a:	49af      	ldr	r1, [pc, #700]	; (8005c18 <DiagnosticString+0x7cc>)
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f00f f909 	bl	8014b74 <strcat>
			strcat((char *)systemPayload,(char * )",");
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f7fb f83e 	bl	80009e4 <strlen>
 8005968:	4603      	mov	r3, r0
 800596a:	461a      	mov	r2, r3
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	4413      	add	r3, r2
 8005970:	49a8      	ldr	r1, [pc, #672]	; (8005c14 <DiagnosticString+0x7c8>)
 8005972:	461a      	mov	r2, r3
 8005974:	460b      	mov	r3, r1
 8005976:	881b      	ldrh	r3, [r3, #0]
 8005978:	8013      	strh	r3, [r2, #0]
			break;
 800597a:	e18a      	b.n	8005c92 <DiagnosticString+0x846>

		case enmDiagnostic_FLASH_ERRASE_ERROR:
			strcat((char *)systemPayload,"FF");
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f7fb f831 	bl	80009e4 <strlen>
 8005982:	4603      	mov	r3, r0
 8005984:	461a      	mov	r2, r3
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	4413      	add	r3, r2
 800598a:	4aa1      	ldr	r2, [pc, #644]	; (8005c10 <DiagnosticString+0x7c4>)
 800598c:	8811      	ldrh	r1, [r2, #0]
 800598e:	7892      	ldrb	r2, [r2, #2]
 8005990:	8019      	strh	r1, [r3, #0]
 8005992:	709a      	strb	r2, [r3, #2]
			strcat((char *)systemPayload,(char * )",");
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f7fb f825 	bl	80009e4 <strlen>
 800599a:	4603      	mov	r3, r0
 800599c:	461a      	mov	r2, r3
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	4413      	add	r3, r2
 80059a2:	499c      	ldr	r1, [pc, #624]	; (8005c14 <DiagnosticString+0x7c8>)
 80059a4:	461a      	mov	r2, r3
 80059a6:	460b      	mov	r3, r1
 80059a8:	881b      	ldrh	r3, [r3, #0]
 80059aa:	8013      	strh	r3, [r2, #0]
			itoa(DiagnosticStatus,temp,PAYLOAD_DATA_STRING_RADIX);
 80059ac:	78fb      	ldrb	r3, [r7, #3]
 80059ae:	f107 010c 	add.w	r1, r7, #12
 80059b2:	220a      	movs	r2, #10
 80059b4:	4618      	mov	r0, r3
 80059b6:	f00e fb71 	bl	801409c <itoa>
			strcat((char *)systemPayload,temp);
 80059ba:	f107 030c 	add.w	r3, r7, #12
 80059be:	4619      	mov	r1, r3
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f00f f8d7 	bl	8014b74 <strcat>
			strcat((char *)systemPayload,(char * )",");
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f7fb f80c 	bl	80009e4 <strlen>
 80059cc:	4603      	mov	r3, r0
 80059ce:	461a      	mov	r2, r3
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	4413      	add	r3, r2
 80059d4:	498f      	ldr	r1, [pc, #572]	; (8005c14 <DiagnosticString+0x7c8>)
 80059d6:	461a      	mov	r2, r3
 80059d8:	460b      	mov	r3, r1
 80059da:	881b      	ldrh	r3, [r3, #0]
 80059dc:	8013      	strh	r3, [r2, #0]
			break;
 80059de:	e158      	b.n	8005c92 <DiagnosticString+0x846>

		case enmDiagnostic_FLASH_Write_ERROR:
			strcat((char *)systemPayload,"FF");
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f7fa ffff 	bl	80009e4 <strlen>
 80059e6:	4603      	mov	r3, r0
 80059e8:	461a      	mov	r2, r3
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	4413      	add	r3, r2
 80059ee:	4a88      	ldr	r2, [pc, #544]	; (8005c10 <DiagnosticString+0x7c4>)
 80059f0:	8811      	ldrh	r1, [r2, #0]
 80059f2:	7892      	ldrb	r2, [r2, #2]
 80059f4:	8019      	strh	r1, [r3, #0]
 80059f6:	709a      	strb	r2, [r3, #2]
			strcat((char *)systemPayload,(char * )",");
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f7fa fff3 	bl	80009e4 <strlen>
 80059fe:	4603      	mov	r3, r0
 8005a00:	461a      	mov	r2, r3
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	4413      	add	r3, r2
 8005a06:	4983      	ldr	r1, [pc, #524]	; (8005c14 <DiagnosticString+0x7c8>)
 8005a08:	461a      	mov	r2, r3
 8005a0a:	460b      	mov	r3, r1
 8005a0c:	881b      	ldrh	r3, [r3, #0]
 8005a0e:	8013      	strh	r3, [r2, #0]
			itoa(DiagnosticStatus,temp,PAYLOAD_DATA_STRING_RADIX);
 8005a10:	78fb      	ldrb	r3, [r7, #3]
 8005a12:	f107 010c 	add.w	r1, r7, #12
 8005a16:	220a      	movs	r2, #10
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f00e fb3f 	bl	801409c <itoa>
			strcat((char *)systemPayload,temp);
 8005a1e:	f107 030c 	add.w	r3, r7, #12
 8005a22:	4619      	mov	r1, r3
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f00f f8a5 	bl	8014b74 <strcat>
			strcat((char *)systemPayload,(char * )",");
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f7fa ffda 	bl	80009e4 <strlen>
 8005a30:	4603      	mov	r3, r0
 8005a32:	461a      	mov	r2, r3
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	4413      	add	r3, r2
 8005a38:	4976      	ldr	r1, [pc, #472]	; (8005c14 <DiagnosticString+0x7c8>)
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	460b      	mov	r3, r1
 8005a3e:	881b      	ldrh	r3, [r3, #0]
 8005a40:	8013      	strh	r3, [r2, #0]
			itoa(u32FOTAFileBaseAddress,temp,PAYLOAD_DATA_STRING_RADIX);
 8005a42:	4b76      	ldr	r3, [pc, #472]	; (8005c1c <DiagnosticString+0x7d0>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4618      	mov	r0, r3
 8005a48:	f107 030c 	add.w	r3, r7, #12
 8005a4c:	220a      	movs	r2, #10
 8005a4e:	4619      	mov	r1, r3
 8005a50:	f00e fb24 	bl	801409c <itoa>
			strcat((char *)systemPayload,temp);
 8005a54:	f107 030c 	add.w	r3, r7, #12
 8005a58:	4619      	mov	r1, r3
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f00f f88a 	bl	8014b74 <strcat>
			strcat((char *)systemPayload,(char * )"//");
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f7fa ffbf 	bl	80009e4 <strlen>
 8005a66:	4603      	mov	r3, r0
 8005a68:	461a      	mov	r2, r3
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	4413      	add	r3, r2
 8005a6e:	4a6c      	ldr	r2, [pc, #432]	; (8005c20 <DiagnosticString+0x7d4>)
 8005a70:	8811      	ldrh	r1, [r2, #0]
 8005a72:	7892      	ldrb	r2, [r2, #2]
 8005a74:	8019      	strh	r1, [r3, #0]
 8005a76:	709a      	strb	r2, [r3, #2]
			itoa(u32FotaFileChunkCounter,temp,PAYLOAD_DATA_STRING_RADIX);
 8005a78:	4b6a      	ldr	r3, [pc, #424]	; (8005c24 <DiagnosticString+0x7d8>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f107 030c 	add.w	r3, r7, #12
 8005a82:	220a      	movs	r2, #10
 8005a84:	4619      	mov	r1, r3
 8005a86:	f00e fb09 	bl	801409c <itoa>
			strcat((char *)systemPayload,temp);
 8005a8a:	f107 030c 	add.w	r3, r7, #12
 8005a8e:	4619      	mov	r1, r3
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f00f f86f 	bl	8014b74 <strcat>
			strcat((char *)systemPayload,(char * )",");
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f7fa ffa4 	bl	80009e4 <strlen>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	461a      	mov	r2, r3
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	4413      	add	r3, r2
 8005aa4:	495b      	ldr	r1, [pc, #364]	; (8005c14 <DiagnosticString+0x7c8>)
 8005aa6:	461a      	mov	r2, r3
 8005aa8:	460b      	mov	r3, r1
 8005aaa:	881b      	ldrh	r3, [r3, #0]
 8005aac:	8013      	strh	r3, [r2, #0]
			break;
 8005aae:	e0f0      	b.n	8005c92 <DiagnosticString+0x846>

		case enmDiagnostic_BOOT_REGION_SELECTION_ERROR:
			strcat((char *)systemPayload,"FF");
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f7fa ff97 	bl	80009e4 <strlen>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	461a      	mov	r2, r3
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	4413      	add	r3, r2
 8005abe:	4a54      	ldr	r2, [pc, #336]	; (8005c10 <DiagnosticString+0x7c4>)
 8005ac0:	8811      	ldrh	r1, [r2, #0]
 8005ac2:	7892      	ldrb	r2, [r2, #2]
 8005ac4:	8019      	strh	r1, [r3, #0]
 8005ac6:	709a      	strb	r2, [r3, #2]
			strcat((char *)systemPayload,(char * )",");
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f7fa ff8b 	bl	80009e4 <strlen>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	4413      	add	r3, r2
 8005ad6:	494f      	ldr	r1, [pc, #316]	; (8005c14 <DiagnosticString+0x7c8>)
 8005ad8:	461a      	mov	r2, r3
 8005ada:	460b      	mov	r3, r1
 8005adc:	881b      	ldrh	r3, [r3, #0]
 8005ade:	8013      	strh	r3, [r2, #0]
			itoa(DiagnosticStatus,temp,PAYLOAD_DATA_STRING_RADIX);
 8005ae0:	78fb      	ldrb	r3, [r7, #3]
 8005ae2:	f107 010c 	add.w	r1, r7, #12
 8005ae6:	220a      	movs	r2, #10
 8005ae8:	4618      	mov	r0, r3
 8005aea:	f00e fad7 	bl	801409c <itoa>
			strcat((char *)systemPayload,temp);
 8005aee:	f107 030c 	add.w	r3, r7, #12
 8005af2:	4619      	mov	r1, r3
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f00f f83d 	bl	8014b74 <strcat>
			strcat((char *)systemPayload,(char * )",");
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f7fa ff72 	bl	80009e4 <strlen>
 8005b00:	4603      	mov	r3, r0
 8005b02:	461a      	mov	r2, r3
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	4413      	add	r3, r2
 8005b08:	4942      	ldr	r1, [pc, #264]	; (8005c14 <DiagnosticString+0x7c8>)
 8005b0a:	461a      	mov	r2, r3
 8005b0c:	460b      	mov	r3, r1
 8005b0e:	881b      	ldrh	r3, [r3, #0]
 8005b10:	8013      	strh	r3, [r2, #0]
			break;
 8005b12:	e0be      	b.n	8005c92 <DiagnosticString+0x846>

		case enmDiagnostic_MEM_WR_CHK_SUM_ERROR: //MEM sector written, but downloaded DATA and Written data in MEM Mismatch
			strcat((char *)systemPayload,"FF");
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f7fa ff65 	bl	80009e4 <strlen>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	461a      	mov	r2, r3
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	4413      	add	r3, r2
 8005b22:	4a3b      	ldr	r2, [pc, #236]	; (8005c10 <DiagnosticString+0x7c4>)
 8005b24:	8811      	ldrh	r1, [r2, #0]
 8005b26:	7892      	ldrb	r2, [r2, #2]
 8005b28:	8019      	strh	r1, [r3, #0]
 8005b2a:	709a      	strb	r2, [r3, #2]
			strcat((char *)systemPayload,(char * )",");
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f7fa ff59 	bl	80009e4 <strlen>
 8005b32:	4603      	mov	r3, r0
 8005b34:	461a      	mov	r2, r3
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	4413      	add	r3, r2
 8005b3a:	4936      	ldr	r1, [pc, #216]	; (8005c14 <DiagnosticString+0x7c8>)
 8005b3c:	461a      	mov	r2, r3
 8005b3e:	460b      	mov	r3, r1
 8005b40:	881b      	ldrh	r3, [r3, #0]
 8005b42:	8013      	strh	r3, [r2, #0]
			itoa(DiagnosticStatus,temp,PAYLOAD_DATA_STRING_RADIX);
 8005b44:	78fb      	ldrb	r3, [r7, #3]
 8005b46:	f107 010c 	add.w	r1, r7, #12
 8005b4a:	220a      	movs	r2, #10
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f00e faa5 	bl	801409c <itoa>
			strcat((char *)systemPayload,temp);
 8005b52:	f107 030c 	add.w	r3, r7, #12
 8005b56:	4619      	mov	r1, r3
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f00f f80b 	bl	8014b74 <strcat>
			strcat((char *)systemPayload,(char * )",");
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f7fa ff40 	bl	80009e4 <strlen>
 8005b64:	4603      	mov	r3, r0
 8005b66:	461a      	mov	r2, r3
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	4413      	add	r3, r2
 8005b6c:	4929      	ldr	r1, [pc, #164]	; (8005c14 <DiagnosticString+0x7c8>)
 8005b6e:	461a      	mov	r2, r3
 8005b70:	460b      	mov	r3, r1
 8005b72:	881b      	ldrh	r3, [r3, #0]
 8005b74:	8013      	strh	r3, [r2, #0]
			break;
 8005b76:	e08c      	b.n	8005c92 <DiagnosticString+0x846>

		case enmDiagnostic_BOOT_REGION_JUMP_ERROR:
			strcat((char *)systemPayload,"FF");
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f7fa ff33 	bl	80009e4 <strlen>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	461a      	mov	r2, r3
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	4413      	add	r3, r2
 8005b86:	4a22      	ldr	r2, [pc, #136]	; (8005c10 <DiagnosticString+0x7c4>)
 8005b88:	8811      	ldrh	r1, [r2, #0]
 8005b8a:	7892      	ldrb	r2, [r2, #2]
 8005b8c:	8019      	strh	r1, [r3, #0]
 8005b8e:	709a      	strb	r2, [r3, #2]
			strcat((char *)systemPayload,(char * )",");
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f7fa ff27 	bl	80009e4 <strlen>
 8005b96:	4603      	mov	r3, r0
 8005b98:	461a      	mov	r2, r3
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	4413      	add	r3, r2
 8005b9e:	491d      	ldr	r1, [pc, #116]	; (8005c14 <DiagnosticString+0x7c8>)
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	460b      	mov	r3, r1
 8005ba4:	881b      	ldrh	r3, [r3, #0]
 8005ba6:	8013      	strh	r3, [r2, #0]
			itoa(DiagnosticStatus,temp,PAYLOAD_DATA_STRING_RADIX);
 8005ba8:	78fb      	ldrb	r3, [r7, #3]
 8005baa:	f107 010c 	add.w	r1, r7, #12
 8005bae:	220a      	movs	r2, #10
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f00e fa73 	bl	801409c <itoa>
			strcat((char *)systemPayload,temp);
 8005bb6:	f107 030c 	add.w	r3, r7, #12
 8005bba:	4619      	mov	r1, r3
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f00e ffd9 	bl	8014b74 <strcat>
			strcat((char *)systemPayload,(char * )",");
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f7fa ff0e 	bl	80009e4 <strlen>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	461a      	mov	r2, r3
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	4413      	add	r3, r2
 8005bd0:	4910      	ldr	r1, [pc, #64]	; (8005c14 <DiagnosticString+0x7c8>)
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	460b      	mov	r3, r1
 8005bd6:	881b      	ldrh	r3, [r3, #0]
 8005bd8:	8013      	strh	r3, [r2, #0]
			break;
 8005bda:	e05a      	b.n	8005c92 <DiagnosticString+0x846>
//
//			strcat((char *)systemPayload,(char * )",");
			break;

		case enmDiagnostic_IMOBI_SUCCESS_OK:
			strcat((char *)systemPayload,"IS");
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f7fa ff01 	bl	80009e4 <strlen>
 8005be2:	4603      	mov	r3, r0
 8005be4:	461a      	mov	r2, r3
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	4413      	add	r3, r2
 8005bea:	4a0f      	ldr	r2, [pc, #60]	; (8005c28 <DiagnosticString+0x7dc>)
 8005bec:	8811      	ldrh	r1, [r2, #0]
 8005bee:	7892      	ldrb	r2, [r2, #2]
 8005bf0:	8019      	strh	r1, [r3, #0]
 8005bf2:	709a      	strb	r2, [r3, #2]
			strcat((char *)systemPayload,(char * )",");
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f7fa fef5 	bl	80009e4 <strlen>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	461a      	mov	r2, r3
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	4413      	add	r3, r2
 8005c02:	4904      	ldr	r1, [pc, #16]	; (8005c14 <DiagnosticString+0x7c8>)
 8005c04:	461a      	mov	r2, r3
 8005c06:	460b      	mov	r3, r1
 8005c08:	881b      	ldrh	r3, [r3, #0]
 8005c0a:	8013      	strh	r3, [r2, #0]
			break;
 8005c0c:	e041      	b.n	8005c92 <DiagnosticString+0x846>
 8005c0e:	bf00      	nop
 8005c10:	08018b04 	.word	0x08018b04
 8005c14:	08018a8c 	.word	0x08018a8c
 8005c18:	20000f9c 	.word	0x20000f9c
 8005c1c:	200018f0 	.word	0x200018f0
 8005c20:	08018b58 	.word	0x08018b58
 8005c24:	200018f4 	.word	0x200018f4
 8005c28:	08018b5c 	.word	0x08018b5c

		case enmDiagnostic_IDLE:
			strcat((char *)systemPayload,"IDLE");
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f7fa fed9 	bl	80009e4 <strlen>
 8005c32:	4603      	mov	r3, r0
 8005c34:	461a      	mov	r2, r3
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	4413      	add	r3, r2
 8005c3a:	4a18      	ldr	r2, [pc, #96]	; (8005c9c <DiagnosticString+0x850>)
 8005c3c:	6810      	ldr	r0, [r2, #0]
 8005c3e:	6018      	str	r0, [r3, #0]
 8005c40:	7912      	ldrb	r2, [r2, #4]
 8005c42:	711a      	strb	r2, [r3, #4]
			strcat((char *)systemPayload,(char * )",");
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	f7fa fecd 	bl	80009e4 <strlen>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	461a      	mov	r2, r3
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	4413      	add	r3, r2
 8005c52:	4913      	ldr	r1, [pc, #76]	; (8005ca0 <DiagnosticString+0x854>)
 8005c54:	461a      	mov	r2, r3
 8005c56:	460b      	mov	r3, r1
 8005c58:	881b      	ldrh	r3, [r3, #0]
 8005c5a:	8013      	strh	r3, [r2, #0]
			break;
 8005c5c:	e019      	b.n	8005c92 <DiagnosticString+0x846>

		default:
			strcat((char *)systemPayload,"IDLE");
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f7fa fec0 	bl	80009e4 <strlen>
 8005c64:	4603      	mov	r3, r0
 8005c66:	461a      	mov	r2, r3
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	4413      	add	r3, r2
 8005c6c:	4a0b      	ldr	r2, [pc, #44]	; (8005c9c <DiagnosticString+0x850>)
 8005c6e:	6810      	ldr	r0, [r2, #0]
 8005c70:	6018      	str	r0, [r3, #0]
 8005c72:	7912      	ldrb	r2, [r2, #4]
 8005c74:	711a      	strb	r2, [r3, #4]
			strcat((char *)systemPayload,(char * )",");
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f7fa feb4 	bl	80009e4 <strlen>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	461a      	mov	r2, r3
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	4413      	add	r3, r2
 8005c84:	4906      	ldr	r1, [pc, #24]	; (8005ca0 <DiagnosticString+0x854>)
 8005c86:	461a      	mov	r2, r3
 8005c88:	460b      	mov	r3, r1
 8005c8a:	881b      	ldrh	r3, [r3, #0]
 8005c8c:	8013      	strh	r3, [r2, #0]
			break;
 8005c8e:	e000      	b.n	8005c92 <DiagnosticString+0x846>
			break;
 8005c90:	bf00      	nop
	}//end of switch(DiagnosticStatus)

}//end of void DiagnosticString(char * systemPayload,enmDiagnosticStatus DiagnosticStatus)
 8005c92:	bf00      	nop
 8005c94:	3720      	adds	r7, #32
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bdb0      	pop	{r4, r5, r7, pc}
 8005c9a:	bf00      	nop
 8005c9c:	08018b60 	.word	0x08018b60
 8005ca0:	08018a8c 	.word	0x08018a8c

08005ca4 <CANIDPrase>:

void CANIDPrase(char * systemPayload)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b086      	sub	sp, #24
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
	uint8_t CANIDloop = 1;
 8005cac:	2301      	movs	r3, #1
 8005cae:	75fb      	strb	r3, [r7, #23]

	char temp[10] = "";
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	60fb      	str	r3, [r7, #12]
 8005cb4:	f107 0310 	add.w	r3, r7, #16
 8005cb8:	2200      	movs	r2, #0
 8005cba:	601a      	str	r2, [r3, #0]
 8005cbc:	809a      	strh	r2, [r3, #4]
	for(CANIDloop=1; CANIDloop <= (MAX_CAN_IDS_SUPPORTED + 1); CANIDloop++)
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	75fb      	strb	r3, [r7, #23]
 8005cc2:	e01f      	b.n	8005d04 <CANIDPrase+0x60>
	{
		itoa(gu32CanConfigurationArray[CANIDloop],temp,CAN_PAYLOADSTRING_RADIX);
 8005cc4:	7dfb      	ldrb	r3, [r7, #23]
 8005cc6:	4a13      	ldr	r2, [pc, #76]	; (8005d14 <CANIDPrase+0x70>)
 8005cc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f107 030c 	add.w	r3, r7, #12
 8005cd2:	2210      	movs	r2, #16
 8005cd4:	4619      	mov	r1, r3
 8005cd6:	f00e f9e1 	bl	801409c <itoa>
		strcat((char *)systemPayload,temp);
 8005cda:	f107 030c 	add.w	r3, r7, #12
 8005cde:	4619      	mov	r1, r3
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f00e ff47 	bl	8014b74 <strcat>
		strcat((char *)systemPayload,",");
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f7fa fe7c 	bl	80009e4 <strlen>
 8005cec:	4603      	mov	r3, r0
 8005cee:	461a      	mov	r2, r3
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	4413      	add	r3, r2
 8005cf4:	4908      	ldr	r1, [pc, #32]	; (8005d18 <CANIDPrase+0x74>)
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	460b      	mov	r3, r1
 8005cfa:	881b      	ldrh	r3, [r3, #0]
 8005cfc:	8013      	strh	r3, [r2, #0]
	for(CANIDloop=1; CANIDloop <= (MAX_CAN_IDS_SUPPORTED + 1); CANIDloop++)
 8005cfe:	7dfb      	ldrb	r3, [r7, #23]
 8005d00:	3301      	adds	r3, #1
 8005d02:	75fb      	strb	r3, [r7, #23]
 8005d04:	7dfb      	ldrb	r3, [r7, #23]
 8005d06:	2b33      	cmp	r3, #51	; 0x33
 8005d08:	d9dc      	bls.n	8005cc4 <CANIDPrase+0x20>
	}
}
 8005d0a:	bf00      	nop
 8005d0c:	bf00      	nop
 8005d0e:	3718      	adds	r7, #24
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}
 8005d14:	2000131c 	.word	0x2000131c
 8005d18:	08018a8c 	.word	0x08018a8c

08005d1c <manufacturerDate>:

void manufacturerDate(char *systemPayload )
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b086      	sub	sp, #24
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
	char temp[10] = "";
 8005d24:	2300      	movs	r3, #0
 8005d26:	60fb      	str	r3, [r7, #12]
 8005d28:	f107 0310 	add.w	r3, r7, #16
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	601a      	str	r2, [r3, #0]
 8005d30:	809a      	strh	r2, [r3, #4]
//	itoa(DATE,temp,CAN_PAYLOADSTRING_RADIX);
	sprintf(temp,"%2d",DATE);
 8005d32:	f107 030c 	add.w	r3, r7, #12
 8005d36:	2211      	movs	r2, #17
 8005d38:	491b      	ldr	r1, [pc, #108]	; (8005da8 <manufacturerDate+0x8c>)
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f00e fefa 	bl	8014b34 <siprintf>
	strcat((char *)systemPayload,(char * )temp);
 8005d40:	f107 030c 	add.w	r3, r7, #12
 8005d44:	4619      	mov	r1, r3
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f00e ff14 	bl	8014b74 <strcat>

	memset(temp,0x00,sizeof(temp));
 8005d4c:	f107 030c 	add.w	r3, r7, #12
 8005d50:	220a      	movs	r2, #10
 8005d52:	2100      	movs	r1, #0
 8005d54:	4618      	mov	r0, r3
 8005d56:	f00e f9c1 	bl	80140dc <memset>
	sprintf(temp,"%2d",MONTH);
 8005d5a:	f107 030c 	add.w	r3, r7, #12
 8005d5e:	2206      	movs	r2, #6
 8005d60:	4911      	ldr	r1, [pc, #68]	; (8005da8 <manufacturerDate+0x8c>)
 8005d62:	4618      	mov	r0, r3
 8005d64:	f00e fee6 	bl	8014b34 <siprintf>
	strcat((char *)systemPayload,(char * )temp);
 8005d68:	f107 030c 	add.w	r3, r7, #12
 8005d6c:	4619      	mov	r1, r3
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f00e ff00 	bl	8014b74 <strcat>

	memset(temp,0x00,sizeof(temp));
 8005d74:	f107 030c 	add.w	r3, r7, #12
 8005d78:	220a      	movs	r2, #10
 8005d7a:	2100      	movs	r1, #0
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f00e f9ad 	bl	80140dc <memset>
	sprintf(temp,"%d",YEAR);
 8005d82:	f107 030c 	add.w	r3, r7, #12
 8005d86:	f240 72e7 	movw	r2, #2023	; 0x7e7
 8005d8a:	4908      	ldr	r1, [pc, #32]	; (8005dac <manufacturerDate+0x90>)
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f00e fed1 	bl	8014b34 <siprintf>
	strcat((char *)systemPayload,(char * )temp);
 8005d92:	f107 030c 	add.w	r3, r7, #12
 8005d96:	4619      	mov	r1, r3
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	f00e feeb 	bl	8014b74 <strcat>
}
 8005d9e:	bf00      	nop
 8005da0:	3718      	adds	r7, #24
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
 8005da6:	bf00      	nop
 8005da8:	08018b68 	.word	0x08018b68
 8005dac:	08018b6c 	.word	0x08018b6c

08005db0 <updateInputVoltage>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
void updateInputVoltage(float Volt)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b087      	sub	sp, #28
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	ed87 0a01 	vstr	s0, [r7, #4]
//	sprintf(gcSystemSupplyVoltage,"%.2f",gfInputSupplyVoltage);
	uint8_t Integer = 0;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	75fb      	strb	r3, [r7, #23]
	float Frac =0;
 8005dbe:	f04f 0300 	mov.w	r3, #0
 8005dc2:	613b      	str	r3, [r7, #16]
	uint16_t ftoi = 0;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	81fb      	strh	r3, [r7, #14]
	if(Volt > 0)
 8005dc8:	edd7 7a01 	vldr	s15, [r7, #4]
 8005dcc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005dd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dd4:	dd6f      	ble.n	8005eb6 <updateInputVoltage+0x106>
	{
		Integer = Volt;
 8005dd6:	edd7 7a01 	vldr	s15, [r7, #4]
 8005dda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005dde:	edc7 7a00 	vstr	s15, [r7]
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	75fb      	strb	r3, [r7, #23]
		Frac = (Volt - (int)Volt);
 8005de6:	edd7 7a01 	vldr	s15, [r7, #4]
 8005dea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005dee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005df2:	ed97 7a01 	vldr	s14, [r7, #4]
 8005df6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005dfa:	edc7 7a04 	vstr	s15, [r7, #16]
		ftoi = Frac*100;
 8005dfe:	edd7 7a04 	vldr	s15, [r7, #16]
 8005e02:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8005ed0 <updateInputVoltage+0x120>
 8005e06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005e0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e0e:	ee17 3a90 	vmov	r3, s15
 8005e12:	81fb      	strh	r3, [r7, #14]

		if(Integer >= 10)
 8005e14:	7dfb      	ldrb	r3, [r7, #23]
 8005e16:	2b09      	cmp	r3, #9
 8005e18:	d919      	bls.n	8005e4e <updateInputVoltage+0x9e>
		{
			voltage[0] = (Integer/10)+48;
 8005e1a:	7dfb      	ldrb	r3, [r7, #23]
 8005e1c:	4a2d      	ldr	r2, [pc, #180]	; (8005ed4 <updateInputVoltage+0x124>)
 8005e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8005e22:	08db      	lsrs	r3, r3, #3
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	3330      	adds	r3, #48	; 0x30
 8005e28:	b2da      	uxtb	r2, r3
 8005e2a:	4b2b      	ldr	r3, [pc, #172]	; (8005ed8 <updateInputVoltage+0x128>)
 8005e2c:	701a      	strb	r2, [r3, #0]
			voltage[1] = (Integer%10)+48;
 8005e2e:	7dfa      	ldrb	r2, [r7, #23]
 8005e30:	4b28      	ldr	r3, [pc, #160]	; (8005ed4 <updateInputVoltage+0x124>)
 8005e32:	fba3 1302 	umull	r1, r3, r3, r2
 8005e36:	08d9      	lsrs	r1, r3, #3
 8005e38:	460b      	mov	r3, r1
 8005e3a:	009b      	lsls	r3, r3, #2
 8005e3c:	440b      	add	r3, r1
 8005e3e:	005b      	lsls	r3, r3, #1
 8005e40:	1ad3      	subs	r3, r2, r3
 8005e42:	b2db      	uxtb	r3, r3
 8005e44:	3330      	adds	r3, #48	; 0x30
 8005e46:	b2da      	uxtb	r2, r3
 8005e48:	4b23      	ldr	r3, [pc, #140]	; (8005ed8 <updateInputVoltage+0x128>)
 8005e4a:	705a      	strb	r2, [r3, #1]
 8005e4c:	e007      	b.n	8005e5e <updateInputVoltage+0xae>
		}
		else
		{
			voltage[0] = '0';
 8005e4e:	4b22      	ldr	r3, [pc, #136]	; (8005ed8 <updateInputVoltage+0x128>)
 8005e50:	2230      	movs	r2, #48	; 0x30
 8005e52:	701a      	strb	r2, [r3, #0]
			voltage[1] = Integer+48;
 8005e54:	7dfb      	ldrb	r3, [r7, #23]
 8005e56:	3330      	adds	r3, #48	; 0x30
 8005e58:	b2da      	uxtb	r2, r3
 8005e5a:	4b1f      	ldr	r3, [pc, #124]	; (8005ed8 <updateInputVoltage+0x128>)
 8005e5c:	705a      	strb	r2, [r3, #1]
		}

		voltage[2] = '.' ;
 8005e5e:	4b1e      	ldr	r3, [pc, #120]	; (8005ed8 <updateInputVoltage+0x128>)
 8005e60:	222e      	movs	r2, #46	; 0x2e
 8005e62:	709a      	strb	r2, [r3, #2]

		if(ftoi >= 10)
 8005e64:	89fb      	ldrh	r3, [r7, #14]
 8005e66:	2b09      	cmp	r3, #9
 8005e68:	d91b      	bls.n	8005ea2 <updateInputVoltage+0xf2>
		{
			voltage[3] = (ftoi/10)+48;
 8005e6a:	89fb      	ldrh	r3, [r7, #14]
 8005e6c:	4a19      	ldr	r2, [pc, #100]	; (8005ed4 <updateInputVoltage+0x124>)
 8005e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8005e72:	08db      	lsrs	r3, r3, #3
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	b2db      	uxtb	r3, r3
 8005e78:	3330      	adds	r3, #48	; 0x30
 8005e7a:	b2da      	uxtb	r2, r3
 8005e7c:	4b16      	ldr	r3, [pc, #88]	; (8005ed8 <updateInputVoltage+0x128>)
 8005e7e:	70da      	strb	r2, [r3, #3]
			voltage[4] = (ftoi%10)+48;
 8005e80:	89fa      	ldrh	r2, [r7, #14]
 8005e82:	4b14      	ldr	r3, [pc, #80]	; (8005ed4 <updateInputVoltage+0x124>)
 8005e84:	fba3 1302 	umull	r1, r3, r3, r2
 8005e88:	08d9      	lsrs	r1, r3, #3
 8005e8a:	460b      	mov	r3, r1
 8005e8c:	009b      	lsls	r3, r3, #2
 8005e8e:	440b      	add	r3, r1
 8005e90:	005b      	lsls	r3, r3, #1
 8005e92:	1ad3      	subs	r3, r2, r3
 8005e94:	b29b      	uxth	r3, r3
 8005e96:	b2db      	uxtb	r3, r3
 8005e98:	3330      	adds	r3, #48	; 0x30
 8005e9a:	b2da      	uxtb	r2, r3
 8005e9c:	4b0e      	ldr	r3, [pc, #56]	; (8005ed8 <updateInputVoltage+0x128>)
 8005e9e:	711a      	strb	r2, [r3, #4]
		strcpy(voltage,"0.00");
	}

	//ftoa[0] = "1";

}
 8005ea0:	e010      	b.n	8005ec4 <updateInputVoltage+0x114>
			voltage[3] = '0';
 8005ea2:	4b0d      	ldr	r3, [pc, #52]	; (8005ed8 <updateInputVoltage+0x128>)
 8005ea4:	2230      	movs	r2, #48	; 0x30
 8005ea6:	70da      	strb	r2, [r3, #3]
			voltage[4] = ftoi+48;
 8005ea8:	89fb      	ldrh	r3, [r7, #14]
 8005eaa:	b2db      	uxtb	r3, r3
 8005eac:	3330      	adds	r3, #48	; 0x30
 8005eae:	b2da      	uxtb	r2, r3
 8005eb0:	4b09      	ldr	r3, [pc, #36]	; (8005ed8 <updateInputVoltage+0x128>)
 8005eb2:	711a      	strb	r2, [r3, #4]
}
 8005eb4:	e006      	b.n	8005ec4 <updateInputVoltage+0x114>
		strcpy(voltage,"0.00");
 8005eb6:	4b08      	ldr	r3, [pc, #32]	; (8005ed8 <updateInputVoltage+0x128>)
 8005eb8:	4a08      	ldr	r2, [pc, #32]	; (8005edc <updateInputVoltage+0x12c>)
 8005eba:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005ebe:	6018      	str	r0, [r3, #0]
 8005ec0:	3304      	adds	r3, #4
 8005ec2:	7019      	strb	r1, [r3, #0]
}
 8005ec4:	bf00      	nop
 8005ec6:	371c      	adds	r7, #28
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ece:	4770      	bx	lr
 8005ed0:	42c80000 	.word	0x42c80000
 8005ed4:	cccccccd 	.word	0xcccccccd
 8005ed8:	20000fe8 	.word	0x20000fe8
 8005edc:	08018b70 	.word	0x08018b70

08005ee0 <Queue_InitLiveQ>:
 Change History:
 Author            	Date                Remarks
 KloudQ Team        22/05/19			initial code
******************************************************************************/
void Queue_InitLiveQ(strctQUEUE *queue)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b083      	sub	sp, #12
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
    queue->head = 0;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2200      	movs	r2, #0
 8005eec:	601a      	str	r2, [r3, #0]
    queue->tail = 0;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	605a      	str	r2, [r3, #4]
}
 8005ef4:	bf00      	nop
 8005ef6:	370c      	adds	r7, #12
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr

08005f00 <Queue_LiveEnequeue>:
 Change History:
 Author            	Date                Remarks
 KloudQ Team        22/05/19			initial code
******************************************************************************/
void Queue_LiveEnequeue(strctQUEUE * queue,char * data)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b082      	sub	sp, #8
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
 8005f08:	6039      	str	r1, [r7, #0]

	/* if data is completely transfered, reset the queue */
	if(queue->head <= queue->tail)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681a      	ldr	r2, [r3, #0]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	429a      	cmp	r2, r3
 8005f14:	dc05      	bgt.n	8005f22 <Queue_LiveEnequeue+0x22>
	{
		queue->head = 0;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	601a      	str	r2, [r3, #0]
		queue->tail = 0;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	605a      	str	r2, [r3, #4]
	}

	/* If queue has data clear it */
	if(queue->data[queue->head] != NULL)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681a      	ldr	r2, [r3, #0]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	3202      	adds	r2, #2
 8005f2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d00f      	beq.n	8005f52 <Queue_LiveEnequeue+0x52>
	{
		free(queue->data[queue->head]);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681a      	ldr	r2, [r3, #0]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	3202      	adds	r2, #2
 8005f3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f00e f8b6 	bl	80140b0 <free>
		queue->data[queue->head] = NULL;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681a      	ldr	r2, [r3, #0]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	3202      	adds	r2, #2
 8005f4c:	2100      	movs	r1, #0
 8005f4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

	if(data != NULL) /*malloc successfully done*/
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d00b      	beq.n	8005f70 <Queue_LiveEnequeue+0x70>
	{
		/* Write data to queue head */
		queue->data[queue->head]= data;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681a      	ldr	r2, [r3, #0]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	3202      	adds	r2, #2
 8005f60:	6839      	ldr	r1, [r7, #0]
 8005f62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		/* move to head to next location */
		queue->head++;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	1c5a      	adds	r2, r3, #1
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	601a      	str	r2, [r3, #0]
	}

	/* If queue is full */
	if(queue->head > (MAX_LIVE_QUEUE_SIZE - 1))
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	2b09      	cmp	r3, #9
 8005f76:	dd05      	ble.n	8005f84 <Queue_LiveEnequeue+0x84>
	{
		/*Raise Queue Overflow flag */
		GSMQueueFullFlag = 1;
 8005f78:	4b04      	ldr	r3, [pc, #16]	; (8005f8c <Queue_LiveEnequeue+0x8c>)
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	601a      	str	r2, [r3, #0]
		queue->head = (MAX_LIVE_QUEUE_SIZE - 1);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2209      	movs	r2, #9
 8005f82:	601a      	str	r2, [r3, #0]
	}
}
 8005f84:	bf00      	nop
 8005f86:	3708      	adds	r7, #8
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}
 8005f8c:	20001978 	.word	0x20001978

08005f90 <Queue_LiveDequeue>:
 Change History:
 Author            	Date                Remarks
 KloudQ Team        22/05/19			initial code
******************************************************************************/
void Queue_LiveDequeue(strctQUEUE * queue)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b082      	sub	sp, #8
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]

    /* After data is uploaded free the pointer in queue->data */
        if(((queue->tail == 0) && (queue->head == 0)) || (queue->tail == queue->head))
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d103      	bne.n	8005fa8 <Queue_LiveDequeue+0x18>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d005      	beq.n	8005fb4 <Queue_LiveDequeue+0x24>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	685a      	ldr	r2, [r3, #4]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	d12c      	bne.n	800600e <Queue_LiveDequeue+0x7e>
        {

            if((queue->tail >= queue->head) && (queue->tail != 0)  && (queue->head != 0))
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	685a      	ldr	r2, [r3, #4]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	db43      	blt.n	8006048 <Queue_LiveDequeue+0xb8>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d03f      	beq.n	8006048 <Queue_LiveDequeue+0xb8>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d03b      	beq.n	8006048 <Queue_LiveDequeue+0xb8>
            {
            	if(queue->data[queue->tail] != NULL)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	685a      	ldr	r2, [r3, #4]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	3202      	adds	r2, #2
 8005fd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d00f      	beq.n	8006000 <Queue_LiveDequeue+0x70>
				{
					free(queue->data[queue->tail]);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	685a      	ldr	r2, [r3, #4]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	3202      	adds	r2, #2
 8005fe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fec:	4618      	mov	r0, r3
 8005fee:	f00e f85f 	bl	80140b0 <free>
					queue->data[queue->tail] = NULL;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	685a      	ldr	r2, [r3, #4]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	3202      	adds	r2, #2
 8005ffa:	2100      	movs	r1, #0
 8005ffc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				}

            	queue->head = 0;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2200      	movs	r2, #0
 8006004:	601a      	str	r2, [r3, #0]
    			queue->tail = 0;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2200      	movs	r2, #0
 800600a:	605a      	str	r2, [r3, #4]
            if((queue->tail >= queue->head) && (queue->tail != 0)  && (queue->head != 0))
 800600c:	e01c      	b.n	8006048 <Queue_LiveDequeue+0xb8>
            }
        }
        else
        {
            free(queue->data[queue->tail]);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	685a      	ldr	r2, [r3, #4]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	3202      	adds	r2, #2
 8006016:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800601a:	4618      	mov	r0, r3
 800601c:	f00e f848 	bl	80140b0 <free>
            queue->data[queue->tail] = NULL;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	685a      	ldr	r2, [r3, #4]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	3202      	adds	r2, #2
 8006028:	2100      	movs	r1, #0
 800602a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            queue->tail++;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	1c5a      	adds	r2, r3, #1
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	605a      	str	r2, [r3, #4]
            if(queue->tail > (MAX_LIVE_QUEUE_SIZE-1))
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	2b09      	cmp	r3, #9
 800603e:	dd04      	ble.n	800604a <Queue_LiveDequeue+0xba>
    		{
    			queue->tail=0;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2200      	movs	r2, #0
 8006044:	605a      	str	r2, [r3, #4]
    		}
        }
}
 8006046:	e000      	b.n	800604a <Queue_LiveDequeue+0xba>
            if((queue->tail >= queue->head) && (queue->tail != 0)  && (queue->head != 0))
 8006048:	bf00      	nop
}
 800604a:	bf00      	nop
 800604c:	3708      	adds	r7, #8
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}

08006052 <Queue_IsLiveQueueEmpty>:
 Change History:
 Author            	Date                Remarks
 KloudQ Team        22/05/19			initial code
******************************************************************************/
uint32_t Queue_IsLiveQueueEmpty(strctQUEUE * queue)
{
 8006052:	b480      	push	{r7}
 8006054:	b083      	sub	sp, #12
 8006056:	af00      	add	r7, sp, #0
 8006058:	6078      	str	r0, [r7, #4]
	if((queue->head == queue->tail) && (queue->data[queue->tail] == NULL))
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	429a      	cmp	r2, r3
 8006064:	d109      	bne.n	800607a <Queue_IsLiveQueueEmpty+0x28>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	685a      	ldr	r2, [r3, #4]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	3202      	adds	r2, #2
 800606e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d101      	bne.n	800607a <Queue_IsLiveQueueEmpty+0x28>
		return 1;
 8006076:	2301      	movs	r3, #1
 8006078:	e000      	b.n	800607c <Queue_IsLiveQueueEmpty+0x2a>
	else
		return 0;
 800607a:	2300      	movs	r3, #0
	//	return((queue->head) == (queue->tail));
}
 800607c:	4618      	mov	r0, r3
 800607e:	370c      	adds	r7, #12
 8006080:	46bd      	mov	sp, r7
 8006082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006086:	4770      	bx	lr

08006088 <Queue_InitBuffQ>:
 Change History:
 Author            	Date                Remarks
 KloudQ Team        22/05/19			initial code
******************************************************************************/
void Queue_InitBuffQ(strctBuffQUEUE *queue)
{
 8006088:	b480      	push	{r7}
 800608a:	b083      	sub	sp, #12
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
    queue->head = 0;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2200      	movs	r2, #0
 8006094:	601a      	str	r2, [r3, #0]
    queue->tail = 0;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2200      	movs	r2, #0
 800609a:	605a      	str	r2, [r3, #4]
}
 800609c:	bf00      	nop
 800609e:	370c      	adds	r7, #12
 80060a0:	46bd      	mov	sp, r7
 80060a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a6:	4770      	bx	lr

080060a8 <Queue_BuffEnequeue>:
 Change History:
 Author            	Date                Remarks
 KloudQ Team        22/05/19			initial code
******************************************************************************/
void Queue_BuffEnequeue(strctBuffQUEUE * queue,char * data)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b082      	sub	sp, #8
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
 80060b0:	6039      	str	r1, [r7, #0]


	/* if data is completely transfered, reset the queue */
	if(queue->head <= queue->tail)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681a      	ldr	r2, [r3, #0]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	429a      	cmp	r2, r3
 80060bc:	dc05      	bgt.n	80060ca <Queue_BuffEnequeue+0x22>
	{
		queue->head = 0;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2200      	movs	r2, #0
 80060c2:	601a      	str	r2, [r3, #0]
		queue->tail = 0;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2200      	movs	r2, #0
 80060c8:	605a      	str	r2, [r3, #4]
	}

	/* If queue has data clear it */
	if(queue->data[queue->head] != NULL)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681a      	ldr	r2, [r3, #0]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	3202      	adds	r2, #2
 80060d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d00f      	beq.n	80060fa <Queue_BuffEnequeue+0x52>
	{
		free(queue->data[queue->head]);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	3202      	adds	r2, #2
 80060e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060e6:	4618      	mov	r0, r3
 80060e8:	f00d ffe2 	bl	80140b0 <free>
		queue->data[queue->head] = NULL;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681a      	ldr	r2, [r3, #0]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	3202      	adds	r2, #2
 80060f4:	2100      	movs	r1, #0
 80060f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

	if(data != NULL) /*malloc successfully done*/
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d00b      	beq.n	8006118 <Queue_BuffEnequeue+0x70>
	{
		/* Write data to queue head */
		queue->data[queue->head]= data;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681a      	ldr	r2, [r3, #0]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	3202      	adds	r2, #2
 8006108:	6839      	ldr	r1, [r7, #0]
 800610a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		/* move to head to next location */
		queue->head++;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	1c5a      	adds	r2, r3, #1
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	601a      	str	r2, [r3, #0]
	}

	/* If queue is full */
	if(queue->head > (MAX_BUFF_QUEUE_SIZE - 1))
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	2b08      	cmp	r3, #8
 800611e:	dd02      	ble.n	8006126 <Queue_BuffEnequeue+0x7e>
	{
		queue->head = (MAX_BUFF_QUEUE_SIZE - 1);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2208      	movs	r2, #8
 8006124:	601a      	str	r2, [r3, #0]
	}
}
 8006126:	bf00      	nop
 8006128:	3708      	adds	r7, #8
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}

0800612e <Queue_BuffDequeue>:
 Change History:
 Author            	Date                Remarks
 KloudQ Team        22/05/19			initial code
******************************************************************************/
void Queue_BuffDequeue(strctBuffQUEUE * queue)
{
 800612e:	b580      	push	{r7, lr}
 8006130:	b082      	sub	sp, #8
 8006132:	af00      	add	r7, sp, #0
 8006134:	6078      	str	r0, [r7, #4]

    /* After data is uploaded free the pointer in queue->data */
        if(((queue->tail == 0) && (queue->head == 0)) || (queue->tail == queue->head))
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d103      	bne.n	8006146 <Queue_BuffDequeue+0x18>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d005      	beq.n	8006152 <Queue_BuffDequeue+0x24>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	685a      	ldr	r2, [r3, #4]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	429a      	cmp	r2, r3
 8006150:	d12c      	bne.n	80061ac <Queue_BuffDequeue+0x7e>
        {
        	if((queue->tail >= queue->head) && (queue->tail != 0)  && (queue->head != 0))
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	685a      	ldr	r2, [r3, #4]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	429a      	cmp	r2, r3
 800615c:	db43      	blt.n	80061e6 <Queue_BuffDequeue+0xb8>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d03f      	beq.n	80061e6 <Queue_BuffDequeue+0xb8>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d03b      	beq.n	80061e6 <Queue_BuffDequeue+0xb8>
            {
    			if(queue->data[queue->tail] != NULL)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	685a      	ldr	r2, [r3, #4]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	3202      	adds	r2, #2
 8006176:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d00f      	beq.n	800619e <Queue_BuffDequeue+0x70>
				{
					free(queue->data[queue->tail]);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	685a      	ldr	r2, [r3, #4]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	3202      	adds	r2, #2
 8006186:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800618a:	4618      	mov	r0, r3
 800618c:	f00d ff90 	bl	80140b0 <free>
					queue->data[queue->tail] = NULL;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	685a      	ldr	r2, [r3, #4]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	3202      	adds	r2, #2
 8006198:	2100      	movs	r1, #0
 800619a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				}
    			queue->head = 0;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2200      	movs	r2, #0
 80061a2:	601a      	str	r2, [r3, #0]
				queue->tail = 0;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2200      	movs	r2, #0
 80061a8:	605a      	str	r2, [r3, #4]
        	if((queue->tail >= queue->head) && (queue->tail != 0)  && (queue->head != 0))
 80061aa:	e01c      	b.n	80061e6 <Queue_BuffDequeue+0xb8>
            }
        }
        else
        {
            free(queue->data[queue->tail]);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	685a      	ldr	r2, [r3, #4]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	3202      	adds	r2, #2
 80061b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061b8:	4618      	mov	r0, r3
 80061ba:	f00d ff79 	bl	80140b0 <free>
            queue->data[queue->tail] = NULL;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	685a      	ldr	r2, [r3, #4]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	3202      	adds	r2, #2
 80061c6:	2100      	movs	r1, #0
 80061c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            queue->tail++;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	1c5a      	adds	r2, r3, #1
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	605a      	str	r2, [r3, #4]
            if(queue->tail > (MAX_BUFF_QUEUE_SIZE-1))
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	2b08      	cmp	r3, #8
 80061dc:	dd04      	ble.n	80061e8 <Queue_BuffDequeue+0xba>
    		{
    			queue->tail=0;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2200      	movs	r2, #0
 80061e2:	605a      	str	r2, [r3, #4]
    		}
        }
}
 80061e4:	e000      	b.n	80061e8 <Queue_BuffDequeue+0xba>
        	if((queue->tail >= queue->head) && (queue->tail != 0)  && (queue->head != 0))
 80061e6:	bf00      	nop
}
 80061e8:	bf00      	nop
 80061ea:	3708      	adds	r7, #8
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}

080061f0 <Queue_IsBuffQueueEmpty>:



uint32_t Queue_IsBuffQueueEmpty(strctBuffQUEUE * queue)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b083      	sub	sp, #12
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
	if((queue->head == queue->tail) && (queue->data[queue->tail] == NULL))
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681a      	ldr	r2, [r3, #0]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	429a      	cmp	r2, r3
 8006202:	d109      	bne.n	8006218 <Queue_IsBuffQueueEmpty+0x28>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	685a      	ldr	r2, [r3, #4]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	3202      	adds	r2, #2
 800620c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d101      	bne.n	8006218 <Queue_IsBuffQueueEmpty+0x28>
		return 1;
 8006214:	2301      	movs	r3, #1
 8006216:	e000      	b.n	800621a <Queue_IsBuffQueueEmpty+0x2a>
	else
		return 0;
 8006218:	2300      	movs	r3, #0
}
 800621a:	4618      	mov	r0, r3
 800621c:	370c      	adds	r7, #12
 800621e:	46bd      	mov	sp, r7
 8006220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006224:	4770      	bx	lr
	...

08006228 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800622c:	4b10      	ldr	r3, [pc, #64]	; (8006270 <MX_RTC_Init+0x48>)
 800622e:	4a11      	ldr	r2, [pc, #68]	; (8006274 <MX_RTC_Init+0x4c>)
 8006230:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8006232:	4b0f      	ldr	r3, [pc, #60]	; (8006270 <MX_RTC_Init+0x48>)
 8006234:	2200      	movs	r2, #0
 8006236:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8006238:	4b0d      	ldr	r3, [pc, #52]	; (8006270 <MX_RTC_Init+0x48>)
 800623a:	227f      	movs	r2, #127	; 0x7f
 800623c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 249;
 800623e:	4b0c      	ldr	r3, [pc, #48]	; (8006270 <MX_RTC_Init+0x48>)
 8006240:	22f9      	movs	r2, #249	; 0xf9
 8006242:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8006244:	4b0a      	ldr	r3, [pc, #40]	; (8006270 <MX_RTC_Init+0x48>)
 8006246:	2200      	movs	r2, #0
 8006248:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800624a:	4b09      	ldr	r3, [pc, #36]	; (8006270 <MX_RTC_Init+0x48>)
 800624c:	2200      	movs	r2, #0
 800624e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8006250:	4b07      	ldr	r3, [pc, #28]	; (8006270 <MX_RTC_Init+0x48>)
 8006252:	2200      	movs	r2, #0
 8006254:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8006256:	4b06      	ldr	r3, [pc, #24]	; (8006270 <MX_RTC_Init+0x48>)
 8006258:	2200      	movs	r2, #0
 800625a:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800625c:	4804      	ldr	r0, [pc, #16]	; (8006270 <MX_RTC_Init+0x48>)
 800625e:	f00a fd93 	bl	8010d88 <HAL_RTC_Init>
 8006262:	4603      	mov	r3, r0
 8006264:	2b00      	cmp	r3, #0
 8006266:	d001      	beq.n	800626c <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8006268:	f7fe f98f 	bl	800458a <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800626c:	bf00      	nop
 800626e:	bd80      	pop	{r7, pc}
 8006270:	20003e60 	.word	0x20003e60
 8006274:	40002800 	.word	0x40002800

08006278 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b09a      	sub	sp, #104	; 0x68
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006280:	f107 0308 	add.w	r3, r7, #8
 8006284:	2260      	movs	r2, #96	; 0x60
 8006286:	2100      	movs	r1, #0
 8006288:	4618      	mov	r0, r3
 800628a:	f00d ff27 	bl	80140dc <memset>
  if(rtcHandle->Instance==RTC)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a0f      	ldr	r2, [pc, #60]	; (80062d0 <HAL_RTC_MspInit+0x58>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d117      	bne.n	80062c8 <HAL_RTC_MspInit+0x50>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8006298:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800629c:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800629e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80062a2:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80062a4:	f107 0308 	add.w	r3, r7, #8
 80062a8:	4618      	mov	r0, r3
 80062aa:	f00a f837 	bl	801031c <HAL_RCCEx_PeriphCLKConfig>
 80062ae:	4603      	mov	r3, r0
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d001      	beq.n	80062b8 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80062b4:	f7fe f969 	bl	800458a <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80062b8:	4b06      	ldr	r3, [pc, #24]	; (80062d4 <HAL_RTC_MspInit+0x5c>)
 80062ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062be:	4a05      	ldr	r2, [pc, #20]	; (80062d4 <HAL_RTC_MspInit+0x5c>)
 80062c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80062c8:	bf00      	nop
 80062ca:	3768      	adds	r7, #104	; 0x68
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}
 80062d0:	40002800 	.word	0x40002800
 80062d4:	40021000 	.word	0x40021000

080062d8 <LL_USART_ReceiveData8>:
{
 80062d8:	b480      	push	{r7}
 80062da:	b083      	sub	sp, #12
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	b2db      	uxtb	r3, r3
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	370c      	adds	r7, #12
 80062ec:	46bd      	mov	sp, r7
 80062ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f2:	4770      	bx	lr

080062f4 <GSM_CharReception_Callback>:
 Author           	Date                Remarks
 KloudQ Team       11-04-18
******************************************************************************/

void GSM_CharReception_Callback(void)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	af00      	add	r7, sp, #0
	u8gsmResponse =LL_USART_ReceiveData8(USART1);
 80062f8:	4810      	ldr	r0, [pc, #64]	; (800633c <GSM_CharReception_Callback+0x48>)
 80062fa:	f7ff ffed 	bl	80062d8 <LL_USART_ReceiveData8>
 80062fe:	4603      	mov	r3, r0
 8006300:	461a      	mov	r2, r3
 8006302:	4b0f      	ldr	r3, [pc, #60]	; (8006340 <GSM_CharReception_Callback+0x4c>)
 8006304:	701a      	strb	r2, [r3, #0]
	gsmInstance.as8GSM_Response_Buff[gsmInstance.u8GSM_Response_Character_Counter++] = u8gsmResponse;
 8006306:	4b0f      	ldr	r3, [pc, #60]	; (8006344 <GSM_CharReception_Callback+0x50>)
 8006308:	f8d3 3fa8 	ldr.w	r3, [r3, #4008]	; 0xfa8
 800630c:	1c5a      	adds	r2, r3, #1
 800630e:	490d      	ldr	r1, [pc, #52]	; (8006344 <GSM_CharReception_Callback+0x50>)
 8006310:	f8c1 2fa8 	str.w	r2, [r1, #4008]	; 0xfa8
 8006314:	4a0a      	ldr	r2, [pc, #40]	; (8006340 <GSM_CharReception_Callback+0x4c>)
 8006316:	7811      	ldrb	r1, [r2, #0]
 8006318:	4a0a      	ldr	r2, [pc, #40]	; (8006344 <GSM_CharReception_Callback+0x50>)
 800631a:	4413      	add	r3, r2
 800631c:	460a      	mov	r2, r1
 800631e:	f883 24f7 	strb.w	r2, [r3, #1271]	; 0x4f7
	gu32GSMCharacterTimeout = FIVEHUNDRED_MS;
 8006322:	4b09      	ldr	r3, [pc, #36]	; (8006348 <GSM_CharReception_Callback+0x54>)
 8006324:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8006328:	601a      	str	r2, [r3, #0]

	if(u8GSMCharRcv == 0)
 800632a:	4b08      	ldr	r3, [pc, #32]	; (800634c <GSM_CharReception_Callback+0x58>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d102      	bne.n	8006338 <GSM_CharReception_Callback+0x44>
		u8GSMCharRcv = 1;
 8006332:	4b06      	ldr	r3, [pc, #24]	; (800634c <GSM_CharReception_Callback+0x58>)
 8006334:	2201      	movs	r2, #1
 8006336:	601a      	str	r2, [r3, #0]
}
 8006338:	bf00      	nop
 800633a:	bd80      	pop	{r7, pc}
 800633c:	40013800 	.word	0x40013800
 8006340:	20001980 	.word	0x20001980
 8006344:	20002b1c 	.word	0x20002b1c
 8006348:	20002884 	.word	0x20002884
 800634c:	2000197c 	.word	0x2000197c

08006350 <SerialFlashFSM>:
 Change History:
 Author           	Date                Remarks
 KloudQ Team      03-05-2021			100229
******************************************************************************/
void SerialFlashFSM(void)
{
 8006350:	b5b0      	push	{r4, r5, r7, lr}
 8006352:	b090      	sub	sp, #64	; 0x40
 8006354:	af00      	add	r7, sp, #0
	static uint16_t u16writeDataSize = 0;
	uint16_t u16tempVar = 0;
 8006356:	2300      	movs	r3, #0
 8006358:	87fb      	strh	r3, [r7, #62]	; 0x3e
	uint8_t u8Flash_Busy_status = 0;
 800635a:	2300      	movs	r3, #0
 800635c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t DataToWrite[5];
	char model_number[50];

	if(FlashStr.u32SerialFlashDelay != 0)
 8006360:	4bb3      	ldr	r3, [pc, #716]	; (8006630 <SerialFlashFSM+0x2e0>)
 8006362:	691b      	ldr	r3, [r3, #16]
 8006364:	2b00      	cmp	r3, #0
 8006366:	f040 835a 	bne.w	8006a1e <SerialFlashFSM+0x6ce>
		return;

	switch(FlashStr.enmCurrentOperation)
 800636a:	4bb1      	ldr	r3, [pc, #708]	; (8006630 <SerialFlashFSM+0x2e0>)
 800636c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006370:	331a      	adds	r3, #26
 8006372:	781b      	ldrb	r3, [r3, #0]
 8006374:	b2db      	uxtb	r3, r3
 8006376:	2b03      	cmp	r3, #3
 8006378:	f200 834a 	bhi.w	8006a10 <SerialFlashFSM+0x6c0>
 800637c:	a201      	add	r2, pc, #4	; (adr r2, 8006384 <SerialFlashFSM+0x34>)
 800637e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006382:	bf00      	nop
 8006384:	08006395 	.word	0x08006395
 8006388:	080064dd 	.word	0x080064dd
 800638c:	08006859 	.word	0x08006859
 8006390:	080069b9 	.word	0x080069b9
	{
		case enmFLASH_MEMORY_IDEAL:
		{
			FlashStr.u32SerialFlashDelay = FIVEHUNDRED_MS;
 8006394:	4ba6      	ldr	r3, [pc, #664]	; (8006630 <SerialFlashFSM+0x2e0>)
 8006396:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800639a:	611a      	str	r2, [r3, #16]

			if((Queue_IsBuffQueueEmpty(&gsmBuffPayload) == 1) && (g_stAdcData.u32PwrSupplyVtg > 9)&&(g_u8HttpConEstablishedFlag != 0))
 800639c:	48a5      	ldr	r0, [pc, #660]	; (8006634 <SerialFlashFSM+0x2e4>)
 800639e:	f7ff ff27 	bl	80061f0 <Queue_IsBuffQueueEmpty>
 80063a2:	4603      	mov	r3, r0
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d160      	bne.n	800646a <SerialFlashFSM+0x11a>
 80063a8:	4ba3      	ldr	r3, [pc, #652]	; (8006638 <SerialFlashFSM+0x2e8>)
 80063aa:	edd3 7a02 	vldr	s15, [r3, #8]
 80063ae:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 80063b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80063b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063ba:	dd56      	ble.n	800646a <SerialFlashFSM+0x11a>
 80063bc:	4b9f      	ldr	r3, [pc, #636]	; (800663c <SerialFlashFSM+0x2ec>)
 80063be:	781b      	ldrb	r3, [r3, #0]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d052      	beq.n	800646a <SerialFlashFSM+0x11a>
			{
				if((FlashStr.u32FlashReadAddress < FlashStr.u32FlashWriteAddress))// && (FlashStr.u32FlashWriteAddress != 0)
 80063c4:	4b9a      	ldr	r3, [pc, #616]	; (8006630 <SerialFlashFSM+0x2e0>)
 80063c6:	685a      	ldr	r2, [r3, #4]
 80063c8:	4b99      	ldr	r3, [pc, #612]	; (8006630 <SerialFlashFSM+0x2e0>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	429a      	cmp	r2, r3
 80063ce:	d234      	bcs.n	800643a <SerialFlashFSM+0xea>
				{
					if((FlashStr.u32FlashReadAddress + g_u32FlashPayloadMaxSize) < SFLASH_SIZE)
 80063d0:	4b97      	ldr	r3, [pc, #604]	; (8006630 <SerialFlashFSM+0x2e0>)
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80063d8:	441a      	add	r2, r3
 80063da:	4b99      	ldr	r3, [pc, #612]	; (8006640 <SerialFlashFSM+0x2f0>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	429a      	cmp	r2, r3
 80063e0:	d20c      	bcs.n	80063fc <SerialFlashFSM+0xac>
					{
						FlashStr.enmCurrentOperation = enmFLASH_MEMORY_READ;
 80063e2:	4b93      	ldr	r3, [pc, #588]	; (8006630 <SerialFlashFSM+0x2e0>)
 80063e4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80063e8:	331a      	adds	r3, #26
 80063ea:	2202      	movs	r2, #2
 80063ec:	701a      	strb	r2, [r3, #0]
						FlashStr.enmCurrentReadState = enmFlashReadStatusReg;
 80063ee:	4b90      	ldr	r3, [pc, #576]	; (8006630 <SerialFlashFSM+0x2e0>)
 80063f0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80063f4:	331c      	adds	r3, #28
 80063f6:	2200      	movs	r2, #0
 80063f8:	701a      	strb	r2, [r3, #0]
				if((FlashStr.u32FlashReadAddress < FlashStr.u32FlashWriteAddress))// && (FlashStr.u32FlashWriteAddress != 0)
 80063fa:	e06e      	b.n	80064da <SerialFlashFSM+0x18a>
					}
					else
					{
						SFlash_Read(FlashStr.u32FlashReadAddress, (char *)FlashStr.cSFlashTransmitData, (SFLASH_SIZE - FlashStr.u32FlashReadAddress));
 80063fc:	4b8c      	ldr	r3, [pc, #560]	; (8006630 <SerialFlashFSM+0x2e0>)
 80063fe:	6858      	ldr	r0, [r3, #4]
 8006400:	4b8f      	ldr	r3, [pc, #572]	; (8006640 <SerialFlashFSM+0x2f0>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	b29a      	uxth	r2, r3
 8006406:	4b8a      	ldr	r3, [pc, #552]	; (8006630 <SerialFlashFSM+0x2e0>)
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	b29b      	uxth	r3, r3
 800640c:	1ad3      	subs	r3, r2, r3
 800640e:	b29b      	uxth	r3, r3
 8006410:	461a      	mov	r2, r3
 8006412:	498c      	ldr	r1, [pc, #560]	; (8006644 <SerialFlashFSM+0x2f4>)
 8006414:	f000 fb8a 	bl	8006b2c <SFlash_Read>
						FlashStr.u32FlashReadAddress = SFLASH_SIZE;
 8006418:	4b89      	ldr	r3, [pc, #548]	; (8006640 <SerialFlashFSM+0x2f0>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a84      	ldr	r2, [pc, #528]	; (8006630 <SerialFlashFSM+0x2e0>)
 800641e:	6053      	str	r3, [r2, #4]
						FlashStr.enmCurrentOperation = enmFLASH_MEMORY_READ;
 8006420:	4b83      	ldr	r3, [pc, #524]	; (8006630 <SerialFlashFSM+0x2e0>)
 8006422:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006426:	331a      	adds	r3, #26
 8006428:	2202      	movs	r2, #2
 800642a:	701a      	strb	r2, [r3, #0]
						FlashStr.enmCurrentReadState = enmFlashReadArrangeData;
 800642c:	4b80      	ldr	r3, [pc, #512]	; (8006630 <SerialFlashFSM+0x2e0>)
 800642e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006432:	331c      	adds	r3, #28
 8006434:	2202      	movs	r2, #2
 8006436:	701a      	strb	r2, [r3, #0]
				if((FlashStr.u32FlashReadAddress < FlashStr.u32FlashWriteAddress))// && (FlashStr.u32FlashWriteAddress != 0)
 8006438:	e04f      	b.n	80064da <SerialFlashFSM+0x18a>
					}
				}
				else if(GSMQueueFullFlag == 1)
 800643a:	4b83      	ldr	r3, [pc, #524]	; (8006648 <SerialFlashFSM+0x2f8>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	2b01      	cmp	r3, #1
 8006440:	d10f      	bne.n	8006462 <SerialFlashFSM+0x112>
				{
					FlashStr.enmCurrentOperation = enmFLASH_MEMORY_WRITE;
 8006442:	4b7b      	ldr	r3, [pc, #492]	; (8006630 <SerialFlashFSM+0x2e0>)
 8006444:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006448:	331a      	adds	r3, #26
 800644a:	2201      	movs	r2, #1
 800644c:	701a      	strb	r2, [r3, #0]
					FlashStr.enmCurrentWriteState = enmFlashWrCopyData;
 800644e:	4b78      	ldr	r3, [pc, #480]	; (8006630 <SerialFlashFSM+0x2e0>)
 8006450:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006454:	331b      	adds	r3, #27
 8006456:	2200      	movs	r2, #0
 8006458:	701a      	strb	r2, [r3, #0]
					GSMQueueFullFlag = 0;
 800645a:	4b7b      	ldr	r3, [pc, #492]	; (8006648 <SerialFlashFSM+0x2f8>)
 800645c:	2200      	movs	r2, #0
 800645e:	601a      	str	r2, [r3, #0]
				if((FlashStr.u32FlashReadAddress < FlashStr.u32FlashWriteAddress))// && (FlashStr.u32FlashWriteAddress != 0)
 8006460:	e03b      	b.n	80064da <SerialFlashFSM+0x18a>

				}
				else
				{
					/* Reading is complete */
					if(FlashStr.u32FlashReadAddress != 0 || FlashStr.u32FlashWriteAddress != 0)
 8006462:	4b73      	ldr	r3, [pc, #460]	; (8006630 <SerialFlashFSM+0x2e0>)
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	2b00      	cmp	r3, #0
				if((FlashStr.u32FlashReadAddress < FlashStr.u32FlashWriteAddress))// && (FlashStr.u32FlashWriteAddress != 0)
 8006468:	e037      	b.n	80064da <SerialFlashFSM+0x18a>
//						FlashStr.enmCurrentOperation = enmFLASH_MEMORY_ERASE;
					}
				}
			}
			/* Memory Write states */
			else if(GSMQueueFullFlag == 1)
 800646a:	4b77      	ldr	r3, [pc, #476]	; (8006648 <SerialFlashFSM+0x2f8>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	2b01      	cmp	r3, #1
 8006470:	d10f      	bne.n	8006492 <SerialFlashFSM+0x142>
			{
				FlashStr.enmCurrentOperation = enmFLASH_MEMORY_WRITE;
 8006472:	4b6f      	ldr	r3, [pc, #444]	; (8006630 <SerialFlashFSM+0x2e0>)
 8006474:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006478:	331a      	adds	r3, #26
 800647a:	2201      	movs	r2, #1
 800647c:	701a      	strb	r2, [r3, #0]
				FlashStr.enmCurrentWriteState = enmFlashWrCopyData;
 800647e:	4b6c      	ldr	r3, [pc, #432]	; (8006630 <SerialFlashFSM+0x2e0>)
 8006480:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006484:	331b      	adds	r3, #27
 8006486:	2200      	movs	r2, #0
 8006488:	701a      	strb	r2, [r3, #0]
				GSMQueueFullFlag = 0;
 800648a:	4b6f      	ldr	r3, [pc, #444]	; (8006648 <SerialFlashFSM+0x2f8>)
 800648c:	2200      	movs	r2, #0
 800648e:	601a      	str	r2, [r3, #0]
			else if(((FlashStr.u32FlashReadAddress != 0) && (FlashStr.u32FlashWriteAddress != 0)) && ((FlashStr.u32FlashReadAddress >= FlashStr.u32FlashWriteAddress) || (FlashStr.u32FlashReadAddress >= SFLASH_SIZE) || (FlashStr.u32FlashWriteAddress >= SFLASH_SIZE)))
			{
				FlashStr.enmCurrentOperation = enmFLASH_MEMORY_ERASE;
			}
		}
		break;
 8006490:	e2c7      	b.n	8006a22 <SerialFlashFSM+0x6d2>
			else if(((FlashStr.u32FlashReadAddress != 0) && (FlashStr.u32FlashWriteAddress != 0)) && ((FlashStr.u32FlashReadAddress >= FlashStr.u32FlashWriteAddress) || (FlashStr.u32FlashReadAddress >= SFLASH_SIZE) || (FlashStr.u32FlashWriteAddress >= SFLASH_SIZE)))
 8006492:	4b67      	ldr	r3, [pc, #412]	; (8006630 <SerialFlashFSM+0x2e0>)
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	2b00      	cmp	r3, #0
 8006498:	f000 82c3 	beq.w	8006a22 <SerialFlashFSM+0x6d2>
 800649c:	4b64      	ldr	r3, [pc, #400]	; (8006630 <SerialFlashFSM+0x2e0>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	f000 82be 	beq.w	8006a22 <SerialFlashFSM+0x6d2>
 80064a6:	4b62      	ldr	r3, [pc, #392]	; (8006630 <SerialFlashFSM+0x2e0>)
 80064a8:	685a      	ldr	r2, [r3, #4]
 80064aa:	4b61      	ldr	r3, [pc, #388]	; (8006630 <SerialFlashFSM+0x2e0>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	429a      	cmp	r2, r3
 80064b0:	d20c      	bcs.n	80064cc <SerialFlashFSM+0x17c>
 80064b2:	4b5f      	ldr	r3, [pc, #380]	; (8006630 <SerialFlashFSM+0x2e0>)
 80064b4:	685a      	ldr	r2, [r3, #4]
 80064b6:	4b62      	ldr	r3, [pc, #392]	; (8006640 <SerialFlashFSM+0x2f0>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	429a      	cmp	r2, r3
 80064bc:	d206      	bcs.n	80064cc <SerialFlashFSM+0x17c>
 80064be:	4b5c      	ldr	r3, [pc, #368]	; (8006630 <SerialFlashFSM+0x2e0>)
 80064c0:	681a      	ldr	r2, [r3, #0]
 80064c2:	4b5f      	ldr	r3, [pc, #380]	; (8006640 <SerialFlashFSM+0x2f0>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	429a      	cmp	r2, r3
 80064c8:	f0c0 82ab 	bcc.w	8006a22 <SerialFlashFSM+0x6d2>
				FlashStr.enmCurrentOperation = enmFLASH_MEMORY_ERASE;
 80064cc:	4b58      	ldr	r3, [pc, #352]	; (8006630 <SerialFlashFSM+0x2e0>)
 80064ce:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80064d2:	331a      	adds	r3, #26
 80064d4:	2203      	movs	r2, #3
 80064d6:	701a      	strb	r2, [r3, #0]
		break;
 80064d8:	e2a3      	b.n	8006a22 <SerialFlashFSM+0x6d2>
 80064da:	e2a2      	b.n	8006a22 <SerialFlashFSM+0x6d2>
		case enmFLASH_MEMORY_WRITE:
		{
			switch(FlashStr.enmCurrentWriteState)
 80064dc:	4b54      	ldr	r3, [pc, #336]	; (8006630 <SerialFlashFSM+0x2e0>)
 80064de:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80064e2:	331b      	adds	r3, #27
 80064e4:	781b      	ldrb	r3, [r3, #0]
 80064e6:	b2db      	uxtb	r3, r3
 80064e8:	2b04      	cmp	r3, #4
 80064ea:	f200 81ac 	bhi.w	8006846 <SerialFlashFSM+0x4f6>
 80064ee:	a201      	add	r2, pc, #4	; (adr r2, 80064f4 <SerialFlashFSM+0x1a4>)
 80064f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064f4:	08006509 	.word	0x08006509
 80064f8:	0800666d 	.word	0x0800666d
 80064fc:	080066a3 	.word	0x080066a3
 8006500:	080066bb 	.word	0x080066bb
 8006504:	080066ef 	.word	0x080066ef
			{
				case enmFlashWrCopyData:
				{
					if((Queue_IsLiveQueueEmpty(&gsmLivePayload) == FALSE )&& (gsmLivePayload.data[gsmLivePayload.tail] != NULL))
 8006508:	4850      	ldr	r0, [pc, #320]	; (800664c <SerialFlashFSM+0x2fc>)
 800650a:	f7ff fda2 	bl	8006052 <Queue_IsLiveQueueEmpty>
 800650e:	4603      	mov	r3, r0
 8006510:	2b00      	cmp	r3, #0
 8006512:	f040 80a3 	bne.w	800665c <SerialFlashFSM+0x30c>
 8006516:	4b4d      	ldr	r3, [pc, #308]	; (800664c <SerialFlashFSM+0x2fc>)
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	4a4c      	ldr	r2, [pc, #304]	; (800664c <SerialFlashFSM+0x2fc>)
 800651c:	3302      	adds	r3, #2
 800651e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006522:	2b00      	cmp	r3, #0
 8006524:	f000 809a 	beq.w	800665c <SerialFlashFSM+0x30c>
					{
						if((FlashStr.u32FlashWriteAddress + GSM_PAYLOAD_MAX_SIZE) < SFLASH_SIZE)
 8006528:	4b41      	ldr	r3, [pc, #260]	; (8006630 <SerialFlashFSM+0x2e0>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f503 6200 	add.w	r2, r3, #2048	; 0x800
 8006530:	4b43      	ldr	r3, [pc, #268]	; (8006640 <SerialFlashFSM+0x2f0>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	429a      	cmp	r2, r3
 8006536:	d26e      	bcs.n	8006616 <SerialFlashFSM+0x2c6>
						{
							memset((char *)FlashStr.cSFlashWriteData, 0x00, (sizeof(FlashStr.cSFlashWriteData) * sizeof(char)));
 8006538:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800653c:	2100      	movs	r1, #0
 800653e:	4844      	ldr	r0, [pc, #272]	; (8006650 <SerialFlashFSM+0x300>)
 8006540:	f00d fdcc 	bl	80140dc <memset>
							strcpy((char *)FlashStr.cSFlashWriteData, (char *)gsmLivePayload.data[gsmLivePayload.tail]);
 8006544:	4b41      	ldr	r3, [pc, #260]	; (800664c <SerialFlashFSM+0x2fc>)
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	4a40      	ldr	r2, [pc, #256]	; (800664c <SerialFlashFSM+0x2fc>)
 800654a:	3302      	adds	r3, #2
 800654c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006550:	4619      	mov	r1, r3
 8006552:	483f      	ldr	r0, [pc, #252]	; (8006650 <SerialFlashFSM+0x300>)
 8006554:	f00e fb2a 	bl	8014bac <strcpy>
#if(DEBUGENABLE == TRUE)
		strcat(DebugBuff,"Write to Flash : ");
		strcat(DebugBuff,(char * )FlashStr.cSFlashWriteData);
		strcat(DebugBuff,"\r\n");
#endif						
							Queue_LiveDequeue(&gsmLivePayload);
 8006558:	483c      	ldr	r0, [pc, #240]	; (800664c <SerialFlashFSM+0x2fc>)
 800655a:	f7ff fd19 	bl	8005f90 <Queue_LiveDequeue>

							u16writeDataSize = strlen((const char *)FlashStr.cSFlashWriteData);
 800655e:	483c      	ldr	r0, [pc, #240]	; (8006650 <SerialFlashFSM+0x300>)
 8006560:	f7fa fa40 	bl	80009e4 <strlen>
 8006564:	4603      	mov	r3, r0
 8006566:	b29a      	uxth	r2, r3
 8006568:	4b3a      	ldr	r3, [pc, #232]	; (8006654 <SerialFlashFSM+0x304>)
 800656a:	801a      	strh	r2, [r3, #0]
							memset(model_number, 0, sizeof(model_number));
 800656c:	1d3b      	adds	r3, r7, #4
 800656e:	2232      	movs	r2, #50	; 0x32
 8006570:	2100      	movs	r1, #0
 8006572:	4618      	mov	r0, r3
 8006574:	f00d fdb2 	bl	80140dc <memset>
							strcpy(model_number, MODEL_NUMBER);
 8006578:	1d3b      	adds	r3, r7, #4
 800657a:	4a37      	ldr	r2, [pc, #220]	; (8006658 <SerialFlashFSM+0x308>)
 800657c:	461c      	mov	r4, r3
 800657e:	4615      	mov	r5, r2
 8006580:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006582:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006584:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006588:	c403      	stmia	r4!, {r0, r1}
 800658a:	8022      	strh	r2, [r4, #0]
 800658c:	3402      	adds	r4, #2
 800658e:	0c13      	lsrs	r3, r2, #16
 8006590:	7023      	strb	r3, [r4, #0]

							if(strstr((char *)FlashStr.cSFlashWriteData, model_number) != NULL)
 8006592:	1d3b      	adds	r3, r7, #4
 8006594:	4619      	mov	r1, r3
 8006596:	482e      	ldr	r0, [pc, #184]	; (8006650 <SerialFlashFSM+0x300>)
 8006598:	f00e fb35 	bl	8014c06 <strstr>
 800659c:	4603      	mov	r3, r0
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d032      	beq.n	8006608 <SerialFlashFSM+0x2b8>
							{

//								char *ptr=NULL;
//								ptr = strstr(FlashStr.cSFlashWriteData,",DATA,");
								if(FlashStr.cSFlashWriteData[u16writeDataSize - 3] != '9')
 80065a2:	4b2c      	ldr	r3, [pc, #176]	; (8006654 <SerialFlashFSM+0x304>)
 80065a4:	881b      	ldrh	r3, [r3, #0]
 80065a6:	3b03      	subs	r3, #3
 80065a8:	4a21      	ldr	r2, [pc, #132]	; (8006630 <SerialFlashFSM+0x2e0>)
 80065aa:	4413      	add	r3, r2
 80065ac:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 80065b0:	3316      	adds	r3, #22
 80065b2:	781b      	ldrb	r3, [r3, #0]
 80065b4:	2b39      	cmp	r3, #57	; 0x39
 80065b6:	d01a      	beq.n	80065ee <SerialFlashFSM+0x29e>
//									ptr[1]='S';
//									ptr[2]='T';
//									ptr[3]='D';
//									ptr[4]='T';
									// 9 is added to identify history pay load
									FlashStr.cSFlashWriteData[u16writeDataSize - 3] = '9';
 80065b8:	4b26      	ldr	r3, [pc, #152]	; (8006654 <SerialFlashFSM+0x304>)
 80065ba:	881b      	ldrh	r3, [r3, #0]
 80065bc:	3b03      	subs	r3, #3
 80065be:	4a1c      	ldr	r2, [pc, #112]	; (8006630 <SerialFlashFSM+0x2e0>)
 80065c0:	4413      	add	r3, r2
 80065c2:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 80065c6:	3316      	adds	r3, #22
 80065c8:	2239      	movs	r2, #57	; 0x39
 80065ca:	701a      	strb	r2, [r3, #0]
									u16writeDataSize = strlen((const char *)FlashStr.cSFlashWriteData);
 80065cc:	4820      	ldr	r0, [pc, #128]	; (8006650 <SerialFlashFSM+0x300>)
 80065ce:	f7fa fa09 	bl	80009e4 <strlen>
 80065d2:	4603      	mov	r3, r0
 80065d4:	b29a      	uxth	r2, r3
 80065d6:	4b1f      	ldr	r3, [pc, #124]	; (8006654 <SerialFlashFSM+0x304>)
 80065d8:	801a      	strh	r2, [r3, #0]
									FlashStr.u16FlashWriteIndex = 0;
 80065da:	4b15      	ldr	r3, [pc, #84]	; (8006630 <SerialFlashFSM+0x2e0>)
 80065dc:	2200      	movs	r2, #0
 80065de:	819a      	strh	r2, [r3, #12]
									FlashStr.enmCurrentWriteState = enmFlashWriteStatusReg;
 80065e0:	4b13      	ldr	r3, [pc, #76]	; (8006630 <SerialFlashFSM+0x2e0>)
 80065e2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80065e6:	331b      	adds	r3, #27
 80065e8:	2201      	movs	r2, #1
 80065ea:	701a      	strb	r2, [r3, #0]
						if((FlashStr.u32FlashWriteAddress + GSM_PAYLOAD_MAX_SIZE) < SFLASH_SIZE)
 80065ec:	e03d      	b.n	800666a <SerialFlashFSM+0x31a>
		strcat(DebugBuff,"buff sys as 9 \r\n");
#endif						
								}
								else
								{
									FlashStr.enmCurrentOperation = enmFLASH_MEMORY_WRITE;
 80065ee:	4b10      	ldr	r3, [pc, #64]	; (8006630 <SerialFlashFSM+0x2e0>)
 80065f0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80065f4:	331a      	adds	r3, #26
 80065f6:	2201      	movs	r2, #1
 80065f8:	701a      	strb	r2, [r3, #0]
									FlashStr.enmCurrentWriteState = enmFlashWrCopyData;
 80065fa:	4b0d      	ldr	r3, [pc, #52]	; (8006630 <SerialFlashFSM+0x2e0>)
 80065fc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006600:	331b      	adds	r3, #27
 8006602:	2200      	movs	r2, #0
 8006604:	701a      	strb	r2, [r3, #0]
						if((FlashStr.u32FlashWriteAddress + GSM_PAYLOAD_MAX_SIZE) < SFLASH_SIZE)
 8006606:	e030      	b.n	800666a <SerialFlashFSM+0x31a>
								}
							}
							else
							{
								FlashStr.enmCurrentOperation = enmFLASH_MEMORY_IDEAL;
 8006608:	4b09      	ldr	r3, [pc, #36]	; (8006630 <SerialFlashFSM+0x2e0>)
 800660a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800660e:	331a      	adds	r3, #26
 8006610:	2200      	movs	r2, #0
 8006612:	701a      	strb	r2, [r3, #0]
						if((FlashStr.u32FlashWriteAddress + GSM_PAYLOAD_MAX_SIZE) < SFLASH_SIZE)
 8006614:	e029      	b.n	800666a <SerialFlashFSM+0x31a>
							}
						}
						else
						{
							/* Memory Full */
							FlashStr.bitFlagMemoryFull = 1;
 8006616:	4b06      	ldr	r3, [pc, #24]	; (8006630 <SerialFlashFSM+0x2e0>)
 8006618:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800661c:	3317      	adds	r3, #23
 800661e:	2201      	movs	r2, #1
 8006620:	701a      	strb	r2, [r3, #0]
							FlashStr.enmCurrentOperation = enmFLASH_MEMORY_IDEAL;
 8006622:	4b03      	ldr	r3, [pc, #12]	; (8006630 <SerialFlashFSM+0x2e0>)
 8006624:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006628:	331a      	adds	r3, #26
 800662a:	2200      	movs	r2, #0
 800662c:	701a      	strb	r2, [r3, #0]
						if((FlashStr.u32FlashWriteAddress + GSM_PAYLOAD_MAX_SIZE) < SFLASH_SIZE)
 800662e:	e01c      	b.n	800666a <SerialFlashFSM+0x31a>
 8006630:	20003e84 	.word	0x20003e84
 8006634:	20002abc 	.word	0x20002abc
 8006638:	20005f5c 	.word	0x20005f5c
 800663c:	200018de 	.word	0x200018de
 8006640:	2000198c 	.word	0x2000198c
 8006644:	20003e99 	.word	0x20003e99
 8006648:	20001978 	.word	0x20001978
 800664c:	20002aec 	.word	0x20002aec
 8006650:	2000569a 	.word	0x2000569a
 8006654:	20001990 	.word	0x20001990
 8006658:	08018b78 	.word	0x08018b78
						}
					}
					else
					{
						FlashStr.enmCurrentOperation = enmFLASH_MEMORY_IDEAL;
 800665c:	4ba6      	ldr	r3, [pc, #664]	; (80068f8 <SerialFlashFSM+0x5a8>)
 800665e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006662:	331a      	adds	r3, #26
 8006664:	2200      	movs	r2, #0
 8006666:	701a      	strb	r2, [r3, #0]
					}
				}break;
 8006668:	e0f5      	b.n	8006856 <SerialFlashFSM+0x506>
 800666a:	e0f4      	b.n	8006856 <SerialFlashFSM+0x506>
				case  enmFlashWriteStatusReg:
				{
					u8Flash_Busy_status = SFlash_Read_Status_Register();
 800666c:	f000 f9e8 	bl	8006a40 <SFlash_Read_Status_Register>
 8006670:	4603      	mov	r3, r0
 8006672:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
					if(u8Flash_Busy_status == 1)
 8006676:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800667a:	2b01      	cmp	r3, #1
 800667c:	d10a      	bne.n	8006694 <SerialFlashFSM+0x344>
					{
						/* Flash is busy */
						FlashStr.u32SerialFlashDelay = FIVEHUNDRED_MS;
 800667e:	4b9e      	ldr	r3, [pc, #632]	; (80068f8 <SerialFlashFSM+0x5a8>)
 8006680:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8006684:	611a      	str	r2, [r3, #16]
						FlashStr.enmCurrentWriteState = enmFlashWriteStatusReg;
 8006686:	4b9c      	ldr	r3, [pc, #624]	; (80068f8 <SerialFlashFSM+0x5a8>)
 8006688:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800668c:	331b      	adds	r3, #27
 800668e:	2201      	movs	r2, #1
 8006690:	701a      	strb	r2, [r3, #0]
					else
					{
						FlashStr.enmCurrentWriteState = enmFlashWriteEnable;
					}

				}break;
 8006692:	e0e0      	b.n	8006856 <SerialFlashFSM+0x506>
						FlashStr.enmCurrentWriteState = enmFlashWriteEnable;
 8006694:	4b98      	ldr	r3, [pc, #608]	; (80068f8 <SerialFlashFSM+0x5a8>)
 8006696:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800669a:	331b      	adds	r3, #27
 800669c:	2202      	movs	r2, #2
 800669e:	701a      	strb	r2, [r3, #0]
				}break;
 80066a0:	e0d9      	b.n	8006856 <SerialFlashFSM+0x506>
				case enmFlashWriteEnable:
				{
					SFlash_Write_Enable();
 80066a2:	f000 f9eb 	bl	8006a7c <SFlash_Write_Enable>
					FlashStr.enmCurrentWriteState = enmFlashWriteEnableCheck;
 80066a6:	4b94      	ldr	r3, [pc, #592]	; (80068f8 <SerialFlashFSM+0x5a8>)
 80066a8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80066ac:	331b      	adds	r3, #27
 80066ae:	2203      	movs	r2, #3
 80066b0:	701a      	strb	r2, [r3, #0]
					FlashStr.u32SerialFlashDelay = TWENTY_MS;
 80066b2:	4b91      	ldr	r3, [pc, #580]	; (80068f8 <SerialFlashFSM+0x5a8>)
 80066b4:	2214      	movs	r2, #20
 80066b6:	611a      	str	r2, [r3, #16]
				}
				break;
 80066b8:	e0cd      	b.n	8006856 <SerialFlashFSM+0x506>
				case enmFlashWriteEnableCheck:
				{
					u8Flash_Busy_status = SFlash_Read_Status_Register();
 80066ba:	f000 f9c1 	bl	8006a40 <SFlash_Read_Status_Register>
 80066be:	4603      	mov	r3, r0
 80066c0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
					if(u8Flash_Busy_status == 2)
 80066c4:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80066c8:	2b02      	cmp	r3, #2
 80066ca:	d106      	bne.n	80066da <SerialFlashFSM+0x38a>
						FlashStr.enmCurrentWriteState = enmFlashWriteData;
 80066cc:	4b8a      	ldr	r3, [pc, #552]	; (80068f8 <SerialFlashFSM+0x5a8>)
 80066ce:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80066d2:	331b      	adds	r3, #27
 80066d4:	2204      	movs	r2, #4
 80066d6:	701a      	strb	r2, [r3, #0]
 80066d8:	e005      	b.n	80066e6 <SerialFlashFSM+0x396>
					else
						FlashStr.enmCurrentWriteState = enmFlashWriteEnable;
 80066da:	4b87      	ldr	r3, [pc, #540]	; (80068f8 <SerialFlashFSM+0x5a8>)
 80066dc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80066e0:	331b      	adds	r3, #27
 80066e2:	2202      	movs	r2, #2
 80066e4:	701a      	strb	r2, [r3, #0]
					FlashStr.u32SerialFlashDelay = TWENTY_MS;
 80066e6:	4b84      	ldr	r3, [pc, #528]	; (80068f8 <SerialFlashFSM+0x5a8>)
 80066e8:	2214      	movs	r2, #20
 80066ea:	611a      	str	r2, [r3, #16]
				}
				break;
 80066ec:	e0b3      	b.n	8006856 <SerialFlashFSM+0x506>

				case enmFlashWriteData:
				{
					u16tempVar = FlashStr.u32FlashWriteAddress / 256;
 80066ee:	4b82      	ldr	r3, [pc, #520]	; (80068f8 <SerialFlashFSM+0x5a8>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	0a1b      	lsrs	r3, r3, #8
 80066f4:	87fb      	strh	r3, [r7, #62]	; 0x3e
					u16tempVar *= 256;
 80066f6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80066f8:	021b      	lsls	r3, r3, #8
 80066fa:	87fb      	strh	r3, [r7, #62]	; 0x3e
					u16tempVar = FlashStr.u32FlashWriteAddress - u16tempVar;
 80066fc:	4b7e      	ldr	r3, [pc, #504]	; (80068f8 <SerialFlashFSM+0x5a8>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	b29a      	uxth	r2, r3
 8006702:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006704:	1ad3      	subs	r3, r2, r3
 8006706:	87fb      	strh	r3, [r7, #62]	; 0x3e
					FlashStr.u16FlashPageEmptyByte = 256 - u16tempVar;
 8006708:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800670a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800670e:	b29a      	uxth	r2, r3
 8006710:	4b79      	ldr	r3, [pc, #484]	; (80068f8 <SerialFlashFSM+0x5a8>)
 8006712:	811a      	strh	r2, [r3, #8]
					if(u16writeDataSize > FlashStr.u16FlashPageEmptyByte)
 8006714:	4b78      	ldr	r3, [pc, #480]	; (80068f8 <SerialFlashFSM+0x5a8>)
 8006716:	891a      	ldrh	r2, [r3, #8]
 8006718:	4b78      	ldr	r3, [pc, #480]	; (80068fc <SerialFlashFSM+0x5ac>)
 800671a:	881b      	ldrh	r3, [r3, #0]
 800671c:	429a      	cmp	r2, r3
 800671e:	d204      	bcs.n	800672a <SerialFlashFSM+0x3da>
					{
						// Multiple write cycles
						FlashStr.u16FlashByteWriten = FlashStr.u16FlashPageEmptyByte;
 8006720:	4b75      	ldr	r3, [pc, #468]	; (80068f8 <SerialFlashFSM+0x5a8>)
 8006722:	891a      	ldrh	r2, [r3, #8]
 8006724:	4b74      	ldr	r3, [pc, #464]	; (80068f8 <SerialFlashFSM+0x5a8>)
 8006726:	815a      	strh	r2, [r3, #10]
 8006728:	e003      	b.n	8006732 <SerialFlashFSM+0x3e2>
					}
					else
					{
						// Last write cycle
						FlashStr.u16FlashByteWriten = u16writeDataSize;
 800672a:	4b74      	ldr	r3, [pc, #464]	; (80068fc <SerialFlashFSM+0x5ac>)
 800672c:	881a      	ldrh	r2, [r3, #0]
 800672e:	4b72      	ldr	r3, [pc, #456]	; (80068f8 <SerialFlashFSM+0x5a8>)
 8006730:	815a      	strh	r2, [r3, #10]
						//FlashStr.enmCurrentOperation = enmFLASH_MEMORY_IDEAL;
					}

					memset(DataToWrite, 0, sizeof(DataToWrite));
 8006732:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006736:	2205      	movs	r2, #5
 8006738:	2100      	movs	r1, #0
 800673a:	4618      	mov	r0, r3
 800673c:	f00d fcce 	bl	80140dc <memset>
					DataToWrite[0] = SFLASH_WRITE_PAGE_CODE;
 8006740:	2302      	movs	r3, #2
 8006742:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
					DataToWrite[1] = (uint8_t)(FlashStr.u32FlashWriteAddress >> 16);
 8006746:	4b6c      	ldr	r3, [pc, #432]	; (80068f8 <SerialFlashFSM+0x5a8>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	0c1b      	lsrs	r3, r3, #16
 800674c:	b2db      	uxtb	r3, r3
 800674e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
					DataToWrite[2] = (uint8_t)(FlashStr.u32FlashWriteAddress >> 8);
 8006752:	4b69      	ldr	r3, [pc, #420]	; (80068f8 <SerialFlashFSM+0x5a8>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	0a1b      	lsrs	r3, r3, #8
 8006758:	b2db      	uxtb	r3, r3
 800675a:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
					DataToWrite[3] = (uint8_t)(FlashStr.u32FlashWriteAddress >> 0);
 800675e:	4b66      	ldr	r3, [pc, #408]	; (80068f8 <SerialFlashFSM+0x5a8>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	b2db      	uxtb	r3, r3
 8006764:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					SFlash_Chip_Select(ENABLE);
 8006768:	2001      	movs	r0, #1
 800676a:	f000 f9c3 	bl	8006af4 <SFlash_Chip_Select>
					HAL_Delay(1);
 800676e:	2001      	movs	r0, #1
 8006770:	f002 fbae 	bl	8008ed0 <HAL_Delay>
				  	HAL_SPI_Transmit_IT(&hspi2, (uint8_t *) DataToWrite, 4);
 8006774:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006778:	2204      	movs	r2, #4
 800677a:	4619      	mov	r1, r3
 800677c:	4860      	ldr	r0, [pc, #384]	; (8006900 <SerialFlashFSM+0x5b0>)
 800677e:	f00b f9c9 	bl	8011b14 <HAL_SPI_Transmit_IT>
				  	HAL_SPI_Transmit_IT(&hspi2, (uint8_t *) &FlashStr.cSFlashWriteData[FlashStr.u16FlashWriteIndex], FlashStr.u16FlashByteWriten);
 8006782:	4b5d      	ldr	r3, [pc, #372]	; (80068f8 <SerialFlashFSM+0x5a8>)
 8006784:	899b      	ldrh	r3, [r3, #12]
 8006786:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 800678a:	3310      	adds	r3, #16
 800678c:	4a5a      	ldr	r2, [pc, #360]	; (80068f8 <SerialFlashFSM+0x5a8>)
 800678e:	4413      	add	r3, r2
 8006790:	3306      	adds	r3, #6
 8006792:	4a59      	ldr	r2, [pc, #356]	; (80068f8 <SerialFlashFSM+0x5a8>)
 8006794:	8952      	ldrh	r2, [r2, #10]
 8006796:	4619      	mov	r1, r3
 8006798:	4859      	ldr	r0, [pc, #356]	; (8006900 <SerialFlashFSM+0x5b0>)
 800679a:	f00b f9bb 	bl	8011b14 <HAL_SPI_Transmit_IT>
				  	HAL_Delay(100);
 800679e:	2064      	movs	r0, #100	; 0x64
 80067a0:	f002 fb96 	bl	8008ed0 <HAL_Delay>
					SFlash_Chip_Select(DISABLE);
 80067a4:	2000      	movs	r0, #0
 80067a6:	f000 f9a5 	bl	8006af4 <SFlash_Chip_Select>

					FlashStr.u32FlashWriteAddress += FlashStr.u16FlashByteWriten;
 80067aa:	4b53      	ldr	r3, [pc, #332]	; (80068f8 <SerialFlashFSM+0x5a8>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a52      	ldr	r2, [pc, #328]	; (80068f8 <SerialFlashFSM+0x5a8>)
 80067b0:	8952      	ldrh	r2, [r2, #10]
 80067b2:	4413      	add	r3, r2
 80067b4:	4a50      	ldr	r2, [pc, #320]	; (80068f8 <SerialFlashFSM+0x5a8>)
 80067b6:	6013      	str	r3, [r2, #0]
					FlashStr.u16FlashWriteIndex += FlashStr.u16FlashByteWriten;
 80067b8:	4b4f      	ldr	r3, [pc, #316]	; (80068f8 <SerialFlashFSM+0x5a8>)
 80067ba:	899a      	ldrh	r2, [r3, #12]
 80067bc:	4b4e      	ldr	r3, [pc, #312]	; (80068f8 <SerialFlashFSM+0x5a8>)
 80067be:	895b      	ldrh	r3, [r3, #10]
 80067c0:	4413      	add	r3, r2
 80067c2:	b29a      	uxth	r2, r3
 80067c4:	4b4c      	ldr	r3, [pc, #304]	; (80068f8 <SerialFlashFSM+0x5a8>)
 80067c6:	819a      	strh	r2, [r3, #12]
					FlashStr.u16FlashPageEmptyByte -= FlashStr.u16FlashByteWriten;
 80067c8:	4b4b      	ldr	r3, [pc, #300]	; (80068f8 <SerialFlashFSM+0x5a8>)
 80067ca:	891a      	ldrh	r2, [r3, #8]
 80067cc:	4b4a      	ldr	r3, [pc, #296]	; (80068f8 <SerialFlashFSM+0x5a8>)
 80067ce:	895b      	ldrh	r3, [r3, #10]
 80067d0:	1ad3      	subs	r3, r2, r3
 80067d2:	b29a      	uxth	r2, r3
 80067d4:	4b48      	ldr	r3, [pc, #288]	; (80068f8 <SerialFlashFSM+0x5a8>)
 80067d6:	811a      	strh	r2, [r3, #8]
					u16writeDataSize -= FlashStr.u16FlashByteWriten;
 80067d8:	4b48      	ldr	r3, [pc, #288]	; (80068fc <SerialFlashFSM+0x5ac>)
 80067da:	881a      	ldrh	r2, [r3, #0]
 80067dc:	4b46      	ldr	r3, [pc, #280]	; (80068f8 <SerialFlashFSM+0x5a8>)
 80067de:	895b      	ldrh	r3, [r3, #10]
 80067e0:	1ad3      	subs	r3, r2, r3
 80067e2:	b29a      	uxth	r2, r3
 80067e4:	4b45      	ldr	r3, [pc, #276]	; (80068fc <SerialFlashFSM+0x5ac>)
 80067e6:	801a      	strh	r2, [r3, #0]
					if(FlashStr.u16FlashPageEmptyByte >= u16writeDataSize)	// Write is over write next queue
 80067e8:	4b43      	ldr	r3, [pc, #268]	; (80068f8 <SerialFlashFSM+0x5a8>)
 80067ea:	891a      	ldrh	r2, [r3, #8]
 80067ec:	4b43      	ldr	r3, [pc, #268]	; (80068fc <SerialFlashFSM+0x5ac>)
 80067ee:	881b      	ldrh	r3, [r3, #0]
 80067f0:	429a      	cmp	r2, r3
 80067f2:	d321      	bcc.n	8006838 <SerialFlashFSM+0x4e8>
					{
						/**/
						HAL_Delay(5);
 80067f4:	2005      	movs	r0, #5
 80067f6:	f002 fb6b 	bl	8008ed0 <HAL_Delay>
						SFlash_Write_Disable();
 80067fa:	f000 f95d 	bl	8006ab8 <SFlash_Write_Disable>
						FlashStr.enmCurrentWriteState = enmFlashWrCopyData ;
 80067fe:	4b3e      	ldr	r3, [pc, #248]	; (80068f8 <SerialFlashFSM+0x5a8>)
 8006800:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006804:	331b      	adds	r3, #27
 8006806:	2200      	movs	r2, #0
 8006808:	701a      	strb	r2, [r3, #0]
						memset((char *)FlashStr.cSFlashWriteData, 0x00, (sizeof(FlashStr.cSFlashWriteData) * sizeof(char)));
 800680a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800680e:	2100      	movs	r1, #0
 8006810:	483c      	ldr	r0, [pc, #240]	; (8006904 <SerialFlashFSM+0x5b4>)
 8006812:	f00d fc63 	bl	80140dc <memset>

						if(Queue_IsLiveQueueEmpty(&gsmLivePayload) == TRUE)
 8006816:	483c      	ldr	r0, [pc, #240]	; (8006908 <SerialFlashFSM+0x5b8>)
 8006818:	f7ff fc1b 	bl	8006052 <Queue_IsLiveQueueEmpty>
 800681c:	4603      	mov	r3, r0
 800681e:	2b01      	cmp	r3, #1
 8006820:	d118      	bne.n	8006854 <SerialFlashFSM+0x504>
						{
							//TODO check this is last cycle
							/*	Writing SFlash Write address into Inernal Flash*/
							g_stEepromBuffMemAdd.u32BuffFlashWriteAddress = FlashStr.u32FlashWriteAddress;
 8006822:	4b35      	ldr	r3, [pc, #212]	; (80068f8 <SerialFlashFSM+0x5a8>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a39      	ldr	r2, [pc, #228]	; (800690c <SerialFlashFSM+0x5bc>)
 8006828:	6053      	str	r3, [r2, #4]
							g_stEepromBuffMemAdd.u32BuffFlashReadAddress =FlashStr.u32FlashReadAddress;
 800682a:	4b33      	ldr	r3, [pc, #204]	; (80068f8 <SerialFlashFSM+0x5a8>)
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	4a37      	ldr	r2, [pc, #220]	; (800690c <SerialFlashFSM+0x5bc>)
 8006830:	6013      	str	r3, [r2, #0]
							EEPROM_WriteBuffMemData();
 8006832:	f7fb f877 	bl	8001924 <EEPROM_WriteBuffMemData>
					else
					{
						FlashStr.enmCurrentWriteState = enmFlashWriteEnable;
					}
				}
				break;
 8006836:	e00d      	b.n	8006854 <SerialFlashFSM+0x504>
						FlashStr.enmCurrentWriteState = enmFlashWriteEnable;
 8006838:	4b2f      	ldr	r3, [pc, #188]	; (80068f8 <SerialFlashFSM+0x5a8>)
 800683a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800683e:	331b      	adds	r3, #27
 8006840:	2202      	movs	r2, #2
 8006842:	701a      	strb	r2, [r3, #0]
				break;
 8006844:	e006      	b.n	8006854 <SerialFlashFSM+0x504>
				default:
					FlashStr.enmCurrentOperation = enmFLASH_MEMORY_IDEAL;
 8006846:	4b2c      	ldr	r3, [pc, #176]	; (80068f8 <SerialFlashFSM+0x5a8>)
 8006848:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800684c:	331a      	adds	r3, #26
 800684e:	2200      	movs	r2, #0
 8006850:	701a      	strb	r2, [r3, #0]
					break;
 8006852:	e000      	b.n	8006856 <SerialFlashFSM+0x506>
				break;
 8006854:	bf00      	nop
			}
		}
		break;
 8006856:	e0e5      	b.n	8006a24 <SerialFlashFSM+0x6d4>

		case enmFLASH_MEMORY_READ:
		{
			switch(FlashStr.enmCurrentReadState)
 8006858:	4b27      	ldr	r3, [pc, #156]	; (80068f8 <SerialFlashFSM+0x5a8>)
 800685a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800685e:	331c      	adds	r3, #28
 8006860:	781b      	ldrb	r3, [r3, #0]
 8006862:	b2db      	uxtb	r3, r3
 8006864:	2b02      	cmp	r3, #2
 8006866:	d06c      	beq.n	8006942 <SerialFlashFSM+0x5f2>
 8006868:	2b02      	cmp	r3, #2
 800686a:	f300 809d 	bgt.w	80069a8 <SerialFlashFSM+0x658>
 800686e:	2b00      	cmp	r3, #0
 8006870:	d002      	beq.n	8006878 <SerialFlashFSM+0x528>
 8006872:	2b01      	cmp	r3, #1
 8006874:	d01b      	beq.n	80068ae <SerialFlashFSM+0x55e>
 8006876:	e097      	b.n	80069a8 <SerialFlashFSM+0x658>
			{
				case enmFlashReadStatusReg:
				{
					u8Flash_Busy_status = SFlash_Read_Status_Register();
 8006878:	f000 f8e2 	bl	8006a40 <SFlash_Read_Status_Register>
 800687c:	4603      	mov	r3, r0
 800687e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
					if(u8Flash_Busy_status == 1)
 8006882:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8006886:	2b01      	cmp	r3, #1
 8006888:	d10a      	bne.n	80068a0 <SerialFlashFSM+0x550>
					{
						/* Flash is busy */
						FlashStr.u32SerialFlashDelay = FIVEHUNDRED_MS;
 800688a:	4b1b      	ldr	r3, [pc, #108]	; (80068f8 <SerialFlashFSM+0x5a8>)
 800688c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8006890:	611a      	str	r2, [r3, #16]
						FlashStr.enmCurrentReadState = enmFlashReadStatusReg;
 8006892:	4b19      	ldr	r3, [pc, #100]	; (80068f8 <SerialFlashFSM+0x5a8>)
 8006894:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006898:	331c      	adds	r3, #28
 800689a:	2200      	movs	r2, #0
 800689c:	701a      	strb	r2, [r3, #0]
					else
					{
						FlashStr.enmCurrentReadState = enmFlashReadData;
					}
				}
				break;
 800689e:	e08a      	b.n	80069b6 <SerialFlashFSM+0x666>
						FlashStr.enmCurrentReadState = enmFlashReadData;
 80068a0:	4b15      	ldr	r3, [pc, #84]	; (80068f8 <SerialFlashFSM+0x5a8>)
 80068a2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80068a6:	331c      	adds	r3, #28
 80068a8:	2201      	movs	r2, #1
 80068aa:	701a      	strb	r2, [r3, #0]
				break;
 80068ac:	e083      	b.n	80069b6 <SerialFlashFSM+0x666>
						FlashStr.u32FlashReadAddress = 0;
					}
					else
#endif
					{
						FlashStr.bitFlagReadInProgress = 1;
 80068ae:	4b12      	ldr	r3, [pc, #72]	; (80068f8 <SerialFlashFSM+0x5a8>)
 80068b0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80068b4:	3319      	adds	r3, #25
 80068b6:	2201      	movs	r2, #1
 80068b8:	701a      	strb	r2, [r3, #0]
						memset((char *)FlashStr.cSFlashTransmitData, 0, sizeof(FlashStr.cSFlashTransmitData));
 80068ba:	f640 0201 	movw	r2, #2049	; 0x801
 80068be:	2100      	movs	r1, #0
 80068c0:	4813      	ldr	r0, [pc, #76]	; (8006910 <SerialFlashFSM+0x5c0>)
 80068c2:	f00d fc0b 	bl	80140dc <memset>
						if(FlashStr.u32FlashWriteAddress < (FlashStr.u32FlashReadAddress + g_u32FlashPayloadMaxSize))
 80068c6:	4b0c      	ldr	r3, [pc, #48]	; (80068f8 <SerialFlashFSM+0x5a8>)
 80068c8:	681a      	ldr	r2, [r3, #0]
 80068ca:	4b0b      	ldr	r3, [pc, #44]	; (80068f8 <SerialFlashFSM+0x5a8>)
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80068d2:	440b      	add	r3, r1
 80068d4:	429a      	cmp	r2, r3
 80068d6:	d21d      	bcs.n	8006914 <SerialFlashFSM+0x5c4>
							SFlash_Read(FlashStr.u32FlashReadAddress, (char *)FlashStr.cSFlashTransmitData, (FlashStr.u32FlashWriteAddress - FlashStr.u32FlashReadAddress));
 80068d8:	4b07      	ldr	r3, [pc, #28]	; (80068f8 <SerialFlashFSM+0x5a8>)
 80068da:	6858      	ldr	r0, [r3, #4]
 80068dc:	4b06      	ldr	r3, [pc, #24]	; (80068f8 <SerialFlashFSM+0x5a8>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	b29a      	uxth	r2, r3
 80068e2:	4b05      	ldr	r3, [pc, #20]	; (80068f8 <SerialFlashFSM+0x5a8>)
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	b29b      	uxth	r3, r3
 80068e8:	1ad3      	subs	r3, r2, r3
 80068ea:	b29b      	uxth	r3, r3
 80068ec:	461a      	mov	r2, r3
 80068ee:	4908      	ldr	r1, [pc, #32]	; (8006910 <SerialFlashFSM+0x5c0>)
 80068f0:	f000 f91c 	bl	8006b2c <SFlash_Read>
 80068f4:	e017      	b.n	8006926 <SerialFlashFSM+0x5d6>
 80068f6:	bf00      	nop
 80068f8:	20003e84 	.word	0x20003e84
 80068fc:	20001990 	.word	0x20001990
 8006900:	20005ea4 	.word	0x20005ea4
 8006904:	2000569a 	.word	0x2000569a
 8006908:	20002aec 	.word	0x20002aec
 800690c:	200028c0 	.word	0x200028c0
 8006910:	20003e99 	.word	0x20003e99
						else
							SFlash_Read(FlashStr.u32FlashReadAddress, (char *)FlashStr.cSFlashTransmitData, g_u32FlashPayloadMaxSize);
 8006914:	4b45      	ldr	r3, [pc, #276]	; (8006a2c <SerialFlashFSM+0x6dc>)
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	f44f 7200 	mov.w	r2, #512	; 0x200
 800691c:	b292      	uxth	r2, r2
 800691e:	4944      	ldr	r1, [pc, #272]	; (8006a30 <SerialFlashFSM+0x6e0>)
 8006920:	4618      	mov	r0, r3
 8006922:	f000 f903 	bl	8006b2c <SFlash_Read>
						FlashStr.u32FlashReadAddress += g_u32FlashPayloadMaxSize;
 8006926:	4b41      	ldr	r3, [pc, #260]	; (8006a2c <SerialFlashFSM+0x6dc>)
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800692e:	4413      	add	r3, r2
 8006930:	4a3e      	ldr	r2, [pc, #248]	; (8006a2c <SerialFlashFSM+0x6dc>)
 8006932:	6053      	str	r3, [r2, #4]
						FlashStr.enmCurrentReadState = enmFlashReadArrangeData;
 8006934:	4b3d      	ldr	r3, [pc, #244]	; (8006a2c <SerialFlashFSM+0x6dc>)
 8006936:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800693a:	331c      	adds	r3, #28
 800693c:	2202      	movs	r2, #2
 800693e:	701a      	strb	r2, [r3, #0]
					}
				}
				break;
 8006940:	e039      	b.n	80069b6 <SerialFlashFSM+0x666>

				case enmFlashReadArrangeData:
				{
					SFlash_Arrange_Read_Data();
 8006942:	f000 f92f 	bl	8006ba4 <SFlash_Arrange_Read_Data>
//						}
//						FlashStr.bitFlagSFlashData = 1;
//					}

					//TODO check this state
					if(FlashStr.u32FlashReadAddress >= FlashStr.u32FlashWriteAddress)
 8006946:	4b39      	ldr	r3, [pc, #228]	; (8006a2c <SerialFlashFSM+0x6dc>)
 8006948:	685a      	ldr	r2, [r3, #4]
 800694a:	4b38      	ldr	r3, [pc, #224]	; (8006a2c <SerialFlashFSM+0x6dc>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	429a      	cmp	r2, r3
 8006950:	d31d      	bcc.n	800698e <SerialFlashFSM+0x63e>
					{
					  if(strlen((char *)FlashStr.cSFlashHalfReadData) != 0)
 8006952:	4b38      	ldr	r3, [pc, #224]	; (8006a34 <SerialFlashFSM+0x6e4>)
 8006954:	781b      	ldrb	r3, [r3, #0]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d019      	beq.n	800698e <SerialFlashFSM+0x63e>
					  {
						  Queue_BuffEnequeue(&gsmBuffPayload,(char *)getSFlashDataString((char *)FlashStr.cSFlashHalfReadData, g_u32FlashPayloadMaxSize+1));
 800695a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800695e:	b29b      	uxth	r3, r3
 8006960:	3301      	adds	r3, #1
 8006962:	b29b      	uxth	r3, r3
 8006964:	4619      	mov	r1, r3
 8006966:	4833      	ldr	r0, [pc, #204]	; (8006a34 <SerialFlashFSM+0x6e4>)
 8006968:	f000 f9f8 	bl	8006d5c <getSFlashDataString>
 800696c:	4603      	mov	r3, r0
 800696e:	4619      	mov	r1, r3
 8006970:	4831      	ldr	r0, [pc, #196]	; (8006a38 <SerialFlashFSM+0x6e8>)
 8006972:	f7ff fb99 	bl	80060a8 <Queue_BuffEnequeue>
						  FlashStr.bitFlagSFlashData = 1;
 8006976:	4b2d      	ldr	r3, [pc, #180]	; (8006a2c <SerialFlashFSM+0x6dc>)
 8006978:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800697c:	3318      	adds	r3, #24
 800697e:	2201      	movs	r2, #1
 8006980:	701a      	strb	r2, [r3, #0]
						  FlashStr.u8BufferQueueCounts++;
 8006982:	4b2a      	ldr	r3, [pc, #168]	; (8006a2c <SerialFlashFSM+0x6dc>)
 8006984:	7d1b      	ldrb	r3, [r3, #20]
 8006986:	3301      	adds	r3, #1
 8006988:	b2da      	uxtb	r2, r3
 800698a:	4b28      	ldr	r3, [pc, #160]	; (8006a2c <SerialFlashFSM+0x6dc>)
 800698c:	751a      	strb	r2, [r3, #20]
					  }
					}


					FlashStr.enmCurrentOperation = enmFLASH_MEMORY_IDEAL;
 800698e:	4b27      	ldr	r3, [pc, #156]	; (8006a2c <SerialFlashFSM+0x6dc>)
 8006990:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006994:	331a      	adds	r3, #26
 8006996:	2200      	movs	r2, #0
 8006998:	701a      	strb	r2, [r3, #0]
					FlashStr.enmCurrentReadState = enmFlashReadStatusReg;
 800699a:	4b24      	ldr	r3, [pc, #144]	; (8006a2c <SerialFlashFSM+0x6dc>)
 800699c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80069a0:	331c      	adds	r3, #28
 80069a2:	2200      	movs	r2, #0
 80069a4:	701a      	strb	r2, [r3, #0]
				}
				break;
 80069a6:	e006      	b.n	80069b6 <SerialFlashFSM+0x666>

				default:
					FlashStr.enmCurrentOperation = enmFLASH_MEMORY_IDEAL;
 80069a8:	4b20      	ldr	r3, [pc, #128]	; (8006a2c <SerialFlashFSM+0x6dc>)
 80069aa:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80069ae:	331a      	adds	r3, #26
 80069b0:	2200      	movs	r2, #0
 80069b2:	701a      	strb	r2, [r3, #0]
					break;
 80069b4:	bf00      	nop
			}
		}
		break;
 80069b6:	e035      	b.n	8006a24 <SerialFlashFSM+0x6d4>

		case enmFLASH_MEMORY_ERASE:
		{
				FlashStr.bitFlagReadInProgress = 0;
 80069b8:	4b1c      	ldr	r3, [pc, #112]	; (8006a2c <SerialFlashFSM+0x6dc>)
 80069ba:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80069be:	3319      	adds	r3, #25
 80069c0:	2200      	movs	r2, #0
 80069c2:	701a      	strb	r2, [r3, #0]
				SFlash_Chip_Erase();
 80069c4:	f000 f9ea 	bl	8006d9c <SFlash_Chip_Erase>
				FlashStr.bitFlagMemoryFull = 0;
 80069c8:	4b18      	ldr	r3, [pc, #96]	; (8006a2c <SerialFlashFSM+0x6dc>)
 80069ca:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80069ce:	3317      	adds	r3, #23
 80069d0:	2200      	movs	r2, #0
 80069d2:	701a      	strb	r2, [r3, #0]
				FlashStr.u16FlashPageEmptyByte = 0;
 80069d4:	4b15      	ldr	r3, [pc, #84]	; (8006a2c <SerialFlashFSM+0x6dc>)
 80069d6:	2200      	movs	r2, #0
 80069d8:	811a      	strh	r2, [r3, #8]

				/*	Writing SFlash address into EEPROM*/
				FlashStr.u32FlashWriteAddress = 0;
 80069da:	4b14      	ldr	r3, [pc, #80]	; (8006a2c <SerialFlashFSM+0x6dc>)
 80069dc:	2200      	movs	r2, #0
 80069de:	601a      	str	r2, [r3, #0]
				FlashStr.u32FlashReadAddress = 0;
 80069e0:	4b12      	ldr	r3, [pc, #72]	; (8006a2c <SerialFlashFSM+0x6dc>)
 80069e2:	2200      	movs	r2, #0
 80069e4:	605a      	str	r2, [r3, #4]

				g_stEepromBuffMemAdd.u32BuffFlashWriteAddress = FlashStr.u32FlashWriteAddress;
 80069e6:	4b11      	ldr	r3, [pc, #68]	; (8006a2c <SerialFlashFSM+0x6dc>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a14      	ldr	r2, [pc, #80]	; (8006a3c <SerialFlashFSM+0x6ec>)
 80069ec:	6053      	str	r3, [r2, #4]
				g_stEepromBuffMemAdd.u32BuffFlashReadAddress =FlashStr.u32FlashReadAddress;
 80069ee:	4b0f      	ldr	r3, [pc, #60]	; (8006a2c <SerialFlashFSM+0x6dc>)
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	4a12      	ldr	r2, [pc, #72]	; (8006a3c <SerialFlashFSM+0x6ec>)
 80069f4:	6013      	str	r3, [r2, #0]
				EEPROM_WriteBuffMemData();
 80069f6:	f7fa ff95 	bl	8001924 <EEPROM_WriteBuffMemData>

			  FlashStr.u32SerialFlashDelay =FIVEHUNDRED_MS;//TWO_MIN;
 80069fa:	4b0c      	ldr	r3, [pc, #48]	; (8006a2c <SerialFlashFSM+0x6dc>)
 80069fc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8006a00:	611a      	str	r2, [r3, #16]
			  FlashStr.enmCurrentOperation = enmFLASH_MEMORY_IDEAL;
 8006a02:	4b0a      	ldr	r3, [pc, #40]	; (8006a2c <SerialFlashFSM+0x6dc>)
 8006a04:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006a08:	331a      	adds	r3, #26
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	701a      	strb	r2, [r3, #0]
		}
		break;
 8006a0e:	e009      	b.n	8006a24 <SerialFlashFSM+0x6d4>

		default:
			FlashStr.enmCurrentOperation = enmFLASH_MEMORY_IDEAL;
 8006a10:	4b06      	ldr	r3, [pc, #24]	; (8006a2c <SerialFlashFSM+0x6dc>)
 8006a12:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006a16:	331a      	adds	r3, #26
 8006a18:	2200      	movs	r2, #0
 8006a1a:	701a      	strb	r2, [r3, #0]
			break;
 8006a1c:	e002      	b.n	8006a24 <SerialFlashFSM+0x6d4>
		return;
 8006a1e:	bf00      	nop
 8006a20:	e000      	b.n	8006a24 <SerialFlashFSM+0x6d4>
		break;
 8006a22:	bf00      	nop
	}
}
 8006a24:	3740      	adds	r7, #64	; 0x40
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bdb0      	pop	{r4, r5, r7, pc}
 8006a2a:	bf00      	nop
 8006a2c:	20003e84 	.word	0x20003e84
 8006a30:	20003e99 	.word	0x20003e99
 8006a34:	2000469a 	.word	0x2000469a
 8006a38:	20002abc 	.word	0x20002abc
 8006a3c:	200028c0 	.word	0x200028c0

08006a40 <SFlash_Read_Status_Register>:
 Change History:
 Author           	Date                Remarks
 KloudQ Team      03-05-2021			100229
******************************************************************************/
uint8_t SFlash_Read_Status_Register(void)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b082      	sub	sp, #8
 8006a44:	af00      	add	r7, sp, #0
	uint8_t tx_var[3], rx_var[3];
//	SFlash_Chip_Select(DISABLE);
//	HAL_Delay(1);
	tx_var[0] = SFLASH_STATUS_REG_READ_CODE;
 8006a46:	2305      	movs	r3, #5
 8006a48:	713b      	strb	r3, [r7, #4]
	SFlash_Chip_Select(ENABLE);
 8006a4a:	2001      	movs	r0, #1
 8006a4c:	f000 f852 	bl	8006af4 <SFlash_Chip_Select>
	HAL_Delay(1);
 8006a50:	2001      	movs	r0, #1
 8006a52:	f002 fa3d 	bl	8008ed0 <HAL_Delay>
	HAL_SPI_TransmitReceive_IT(&hspi2, tx_var, rx_var, 2);
 8006a56:	463a      	mov	r2, r7
 8006a58:	1d39      	adds	r1, r7, #4
 8006a5a:	2302      	movs	r3, #2
 8006a5c:	4806      	ldr	r0, [pc, #24]	; (8006a78 <SFlash_Read_Status_Register+0x38>)
 8006a5e:	f00b f9a5 	bl	8011dac <HAL_SPI_TransmitReceive_IT>
	/* wait till operation complete */
	HAL_Delay(5);
 8006a62:	2005      	movs	r0, #5
 8006a64:	f002 fa34 	bl	8008ed0 <HAL_Delay>
	SFlash_Chip_Select(DISABLE);
 8006a68:	2000      	movs	r0, #0
 8006a6a:	f000 f843 	bl	8006af4 <SFlash_Chip_Select>

	return rx_var[1];
 8006a6e:	787b      	ldrb	r3, [r7, #1]
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	3708      	adds	r7, #8
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}
 8006a78:	20005ea4 	.word	0x20005ea4

08006a7c <SFlash_Write_Enable>:
 Change History:
 Author           Date                Remarks
 100229			23-03-2020
************************************************************************************/
void SFlash_Write_Enable(void)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b082      	sub	sp, #8
 8006a80:	af00      	add	r7, sp, #0
	uint8_t tx_var[2];
	tx_var[0] = SFLASH_WRITE_EN_CODE;	//0x06;
 8006a82:	2306      	movs	r3, #6
 8006a84:	713b      	strb	r3, [r7, #4]
	SFlash_Chip_Select(ENABLE);
 8006a86:	2001      	movs	r0, #1
 8006a88:	f000 f834 	bl	8006af4 <SFlash_Chip_Select>
	HAL_Delay(1);
 8006a8c:	2001      	movs	r0, #1
 8006a8e:	f002 fa1f 	bl	8008ed0 <HAL_Delay>
	HAL_SPI_Transmit_IT(&hspi2, (uint8_t *)tx_var, 1);
 8006a92:	1d3b      	adds	r3, r7, #4
 8006a94:	2201      	movs	r2, #1
 8006a96:	4619      	mov	r1, r3
 8006a98:	4806      	ldr	r0, [pc, #24]	; (8006ab4 <SFlash_Write_Enable+0x38>)
 8006a9a:	f00b f83b 	bl	8011b14 <HAL_SPI_Transmit_IT>
	HAL_Delay(5);
 8006a9e:	2005      	movs	r0, #5
 8006aa0:	f002 fa16 	bl	8008ed0 <HAL_Delay>
	SFlash_Chip_Select(DISABLE);
 8006aa4:	2000      	movs	r0, #0
 8006aa6:	f000 f825 	bl	8006af4 <SFlash_Chip_Select>

}
 8006aaa:	bf00      	nop
 8006aac:	3708      	adds	r7, #8
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}
 8006ab2:	bf00      	nop
 8006ab4:	20005ea4 	.word	0x20005ea4

08006ab8 <SFlash_Write_Disable>:
 Change History:
 Author           Date                Remarks
 100229			23-03-2020
************************************************************************************/
void SFlash_Write_Disable(void)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b082      	sub	sp, #8
 8006abc:	af00      	add	r7, sp, #0
	uint8_t tx_var[2];
	tx_var[0] = SFLASH_WRITE_DIS_CODE;	//0x04;
 8006abe:	2304      	movs	r3, #4
 8006ac0:	713b      	strb	r3, [r7, #4]
	SFlash_Chip_Select(ENABLE);
 8006ac2:	2001      	movs	r0, #1
 8006ac4:	f000 f816 	bl	8006af4 <SFlash_Chip_Select>
	HAL_Delay(1);
 8006ac8:	2001      	movs	r0, #1
 8006aca:	f002 fa01 	bl	8008ed0 <HAL_Delay>
	HAL_SPI_Transmit_IT(&hspi2, (uint8_t *) tx_var,1);
 8006ace:	1d3b      	adds	r3, r7, #4
 8006ad0:	2201      	movs	r2, #1
 8006ad2:	4619      	mov	r1, r3
 8006ad4:	4806      	ldr	r0, [pc, #24]	; (8006af0 <SFlash_Write_Disable+0x38>)
 8006ad6:	f00b f81d 	bl	8011b14 <HAL_SPI_Transmit_IT>
	SFlash_Chip_Select(DISABLE);
 8006ada:	2000      	movs	r0, #0
 8006adc:	f000 f80a 	bl	8006af4 <SFlash_Chip_Select>
	HAL_Delay(5);
 8006ae0:	2005      	movs	r0, #5
 8006ae2:	f002 f9f5 	bl	8008ed0 <HAL_Delay>
}
 8006ae6:	bf00      	nop
 8006ae8:	3708      	adds	r7, #8
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}
 8006aee:	bf00      	nop
 8006af0:	20005ea4 	.word	0x20005ea4

08006af4 <SFlash_Chip_Select>:
 Change History:
 Author           Date                Remarks
 100229			03-05-2021
************************************************************************************/
void SFlash_Chip_Select(uint8_t state)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b082      	sub	sp, #8
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	4603      	mov	r3, r0
 8006afc:	71fb      	strb	r3, [r7, #7]
	if(state == ENABLE)
 8006afe:	79fb      	ldrb	r3, [r7, #7]
 8006b00:	2b01      	cmp	r3, #1
 8006b02:	d105      	bne.n	8006b10 <SFlash_Chip_Select+0x1c>
	{
		HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);		// CE LOW
 8006b04:	2200      	movs	r2, #0
 8006b06:	2101      	movs	r1, #1
 8006b08:	4807      	ldr	r0, [pc, #28]	; (8006b28 <SFlash_Chip_Select+0x34>)
 8006b0a:	f006 fe13 	bl	800d734 <HAL_GPIO_WritePin>
	}
	else if(state == DISABLE)
	{
		HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);		// CE High
	}
}
 8006b0e:	e007      	b.n	8006b20 <SFlash_Chip_Select+0x2c>
	else if(state == DISABLE)
 8006b10:	79fb      	ldrb	r3, [r7, #7]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d104      	bne.n	8006b20 <SFlash_Chip_Select+0x2c>
		HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);		// CE High
 8006b16:	2201      	movs	r2, #1
 8006b18:	2101      	movs	r1, #1
 8006b1a:	4803      	ldr	r0, [pc, #12]	; (8006b28 <SFlash_Chip_Select+0x34>)
 8006b1c:	f006 fe0a 	bl	800d734 <HAL_GPIO_WritePin>
}
 8006b20:	bf00      	nop
 8006b22:	3708      	adds	r7, #8
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}
 8006b28:	48000400 	.word	0x48000400

08006b2c <SFlash_Read>:
 Change History:
 Author           	Date                Remarks
 KloudQ Team      03-05-2021			100229
******************************************************************************/
void SFlash_Read(uint32_t address, char * ptr_read_data, uint16_t size)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b088      	sub	sp, #32
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	60f8      	str	r0, [r7, #12]
 8006b34:	60b9      	str	r1, [r7, #8]
 8006b36:	4613      	mov	r3, r2
 8006b38:	80fb      	strh	r3, [r7, #6]
	char tx_var[10];
	memset(tx_var, 0, sizeof(tx_var));
 8006b3a:	f107 0314 	add.w	r3, r7, #20
 8006b3e:	220a      	movs	r2, #10
 8006b40:	2100      	movs	r1, #0
 8006b42:	4618      	mov	r0, r3
 8006b44:	f00d faca 	bl	80140dc <memset>
	tx_var[0] = SFLASH_READ_HSPEED_CODE;
 8006b48:	230b      	movs	r3, #11
 8006b4a:	753b      	strb	r3, [r7, #20]
	tx_var[1] = (uint8_t)(address >> 16);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	0c1b      	lsrs	r3, r3, #16
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	757b      	strb	r3, [r7, #21]
	tx_var[2] = (uint8_t)(address >> 8);
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	0a1b      	lsrs	r3, r3, #8
 8006b58:	b2db      	uxtb	r3, r3
 8006b5a:	75bb      	strb	r3, [r7, #22]
	tx_var[3] = (uint8_t)(address >> 0);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	b2db      	uxtb	r3, r3
 8006b60:	75fb      	strb	r3, [r7, #23]
	tx_var[4] = 0;
 8006b62:	2300      	movs	r3, #0
 8006b64:	763b      	strb	r3, [r7, #24]
	SFlash_Chip_Select(ENABLE);
 8006b66:	2001      	movs	r0, #1
 8006b68:	f7ff ffc4 	bl	8006af4 <SFlash_Chip_Select>
	HAL_Delay(1);
 8006b6c:	2001      	movs	r0, #1
 8006b6e:	f002 f9af 	bl	8008ed0 <HAL_Delay>
	HAL_SPI_Transmit_IT(&hspi2, (uint8_t *)tx_var, 5);
 8006b72:	f107 0314 	add.w	r3, r7, #20
 8006b76:	2205      	movs	r2, #5
 8006b78:	4619      	mov	r1, r3
 8006b7a:	4809      	ldr	r0, [pc, #36]	; (8006ba0 <SFlash_Read+0x74>)
 8006b7c:	f00a ffca 	bl	8011b14 <HAL_SPI_Transmit_IT>
	HAL_SPI_Receive_IT(&hspi2, (uint8_t *)ptr_read_data, size);
 8006b80:	88fb      	ldrh	r3, [r7, #6]
 8006b82:	461a      	mov	r2, r3
 8006b84:	68b9      	ldr	r1, [r7, #8]
 8006b86:	4806      	ldr	r0, [pc, #24]	; (8006ba0 <SFlash_Read+0x74>)
 8006b88:	f00b f860 	bl	8011c4c <HAL_SPI_Receive_IT>
	HAL_Delay(150);
 8006b8c:	2096      	movs	r0, #150	; 0x96
 8006b8e:	f002 f99f 	bl	8008ed0 <HAL_Delay>
	SFlash_Chip_Select(DISABLE);
 8006b92:	2000      	movs	r0, #0
 8006b94:	f7ff ffae 	bl	8006af4 <SFlash_Chip_Select>
}
 8006b98:	bf00      	nop
 8006b9a:	3720      	adds	r7, #32
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}
 8006ba0:	20005ea4 	.word	0x20005ea4

08006ba4 <SFlash_Arrange_Read_Data>:
 Change History:
 Author           	Date                Remarks
 KloudQ Team      04-05-2021			100229
******************************************************************************/
void SFlash_Arrange_Read_Data(void)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	f6ad 0d18 	subw	sp, sp, #2072	; 0x818
 8006baa:	af00      	add	r7, sp, #0
	char temparray[GSM_PAYLOAD_MAX_SIZE+1]={0};
 8006bac:	1d3b      	adds	r3, r7, #4
 8006bae:	2200      	movs	r2, #0
 8006bb0:	601a      	str	r2, [r3, #0]
 8006bb2:	3304      	adds	r3, #4
 8006bb4:	f240 72fd 	movw	r2, #2045	; 0x7fd
 8006bb8:	2100      	movs	r1, #0
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f00d fa8e 	bl	80140dc <memset>
//	char ctempUploadArray1[GSM_PAYLOAD_MAX_SIZE]={0};
	//const char endstart[] = "#*";
	const char endstart[] = "*";
 8006bc0:	463b      	mov	r3, r7
 8006bc2:	222a      	movs	r2, #42	; 0x2a
 8006bc4:	801a      	strh	r2, [r3, #0]
	char *ptrchar = FlashStr.cSFlashHalfReadData;
 8006bc6:	4b61      	ldr	r3, [pc, #388]	; (8006d4c <SFlash_Arrange_Read_Data+0x1a8>)
 8006bc8:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
	char *ptrDataStartchar = FlashStr.cSFlashHalfReadData;
 8006bcc:	4b5f      	ldr	r3, [pc, #380]	; (8006d4c <SFlash_Arrange_Read_Data+0x1a8>)
 8006bce:	f8c7 3810 	str.w	r3, [r7, #2064]	; 0x810
	char *ptrendchar;
	uint16_t size = 0,u16BuffQueueIndex=0;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	f8a7 3808 	strh.w	r3, [r7, #2056]	; 0x808
 8006bd8:	2300      	movs	r3, #0
 8006bda:	f8a7 380a 	strh.w	r3, [r7, #2058]	; 0x80a

	if(strlen(FlashStr.cSFlashHalfReadData) == 0)
 8006bde:	4b5b      	ldr	r3, [pc, #364]	; (8006d4c <SFlash_Arrange_Read_Data+0x1a8>)
 8006be0:	781b      	ldrb	r3, [r3, #0]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d10b      	bne.n	8006bfe <SFlash_Arrange_Read_Data+0x5a>
		memcpy(FlashStr.cSFlashHalfReadData, FlashStr.cSFlashTransmitData, sizeof(FlashStr.cSFlashTransmitData));
 8006be6:	4b5a      	ldr	r3, [pc, #360]	; (8006d50 <SFlash_Arrange_Read_Data+0x1ac>)
 8006be8:	4a59      	ldr	r2, [pc, #356]	; (8006d50 <SFlash_Arrange_Read_Data+0x1ac>)
 8006bea:	f603 0316 	addw	r3, r3, #2070	; 0x816
 8006bee:	f102 0115 	add.w	r1, r2, #21
 8006bf2:	f640 0201 	movw	r2, #2049	; 0x801
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f00d fa62 	bl	80140c0 <memcpy>
 8006bfc:	e003      	b.n	8006c06 <SFlash_Arrange_Read_Data+0x62>
	else
		strcat(FlashStr.cSFlashHalfReadData, FlashStr.cSFlashTransmitData);
 8006bfe:	4955      	ldr	r1, [pc, #340]	; (8006d54 <SFlash_Arrange_Read_Data+0x1b0>)
 8006c00:	4852      	ldr	r0, [pc, #328]	; (8006d4c <SFlash_Arrange_Read_Data+0x1a8>)
 8006c02:	f00d ffb7 	bl	8014b74 <strcat>


	FlashStr.u8BufferQueueCounts = 0;
 8006c06:	4b52      	ldr	r3, [pc, #328]	; (8006d50 <SFlash_Arrange_Read_Data+0x1ac>)
 8006c08:	2200      	movs	r2, #0
 8006c0a:	751a      	strb	r2, [r3, #20]

	ptrendchar = ptrchar;
 8006c0c:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8006c10:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
	while( ptrchar != NULL)
 8006c14:	e04d      	b.n	8006cb2 <SFlash_Arrange_Read_Data+0x10e>
	{
		ptrchar = strstr(ptrchar, endstart);
 8006c16:	463b      	mov	r3, r7
 8006c18:	4619      	mov	r1, r3
 8006c1a:	f8d7 0814 	ldr.w	r0, [r7, #2068]	; 0x814
 8006c1e:	f00d fff2 	bl	8014c06 <strstr>
 8006c22:	f8c7 0814 	str.w	r0, [r7, #2068]	; 0x814
		if(ptrchar != NULL)
 8006c26:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d041      	beq.n	8006cb2 <SFlash_Arrange_Read_Data+0x10e>
		{
			/*******************************************************/
			//TODO Fill in Queue
			ptrendchar = ptrchar;
 8006c2e:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8006c32:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
			size = ptrchar - ptrDataStartchar;
 8006c36:	f8d7 2814 	ldr.w	r2, [r7, #2068]	; 0x814
 8006c3a:	f8d7 3810 	ldr.w	r3, [r7, #2064]	; 0x810
 8006c3e:	1ad3      	subs	r3, r2, r3
 8006c40:	f8a7 3808 	strh.w	r3, [r7, #2056]	; 0x808
			memset(temparray, 0, sizeof(temparray));
 8006c44:	1d3b      	adds	r3, r7, #4
 8006c46:	f640 0201 	movw	r2, #2049	; 0x801
 8006c4a:	2100      	movs	r1, #0
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	f00d fa45 	bl	80140dc <memset>
			memcpy(temparray,ptrDataStartchar,size);
 8006c52:	f8b7 2808 	ldrh.w	r2, [r7, #2056]	; 0x808
 8006c56:	1d3b      	adds	r3, r7, #4
 8006c58:	f8d7 1810 	ldr.w	r1, [r7, #2064]	; 0x810
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f00d fa2f 	bl	80140c0 <memcpy>
//			size++;
			if(strlen(temparray) > 0 && u16BuffQueueIndex < MAX_BUFF_QUEUE_SIZE)
 8006c62:	1d3b      	adds	r3, r7, #4
 8006c64:	781b      	ldrb	r3, [r3, #0]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d015      	beq.n	8006c96 <SFlash_Arrange_Read_Data+0xf2>
 8006c6a:	f8b7 380a 	ldrh.w	r3, [r7, #2058]	; 0x80a
 8006c6e:	2b08      	cmp	r3, #8
 8006c70:	d811      	bhi.n	8006c96 <SFlash_Arrange_Read_Data+0xf2>
			{
				Queue_BuffEnequeue(&gsmBuffPayload,(char *)getSFlashDataString((char *)temparray, size));
 8006c72:	f8b7 2808 	ldrh.w	r2, [r7, #2056]	; 0x808
 8006c76:	1d3b      	adds	r3, r7, #4
 8006c78:	4611      	mov	r1, r2
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f000 f86e 	bl	8006d5c <getSFlashDataString>
 8006c80:	4603      	mov	r3, r0
 8006c82:	4619      	mov	r1, r3
 8006c84:	4834      	ldr	r0, [pc, #208]	; (8006d58 <SFlash_Arrange_Read_Data+0x1b4>)
 8006c86:	f7ff fa0f 	bl	80060a8 <Queue_BuffEnequeue>
				FlashStr.u8BufferQueueCounts++;
 8006c8a:	4b31      	ldr	r3, [pc, #196]	; (8006d50 <SFlash_Arrange_Read_Data+0x1ac>)
 8006c8c:	7d1b      	ldrb	r3, [r3, #20]
 8006c8e:	3301      	adds	r3, #1
 8006c90:	b2da      	uxtb	r2, r3
 8006c92:	4b2f      	ldr	r3, [pc, #188]	; (8006d50 <SFlash_Arrange_Read_Data+0x1ac>)
 8006c94:	751a      	strb	r2, [r3, #20]
			}

			u16BuffQueueIndex++;
 8006c96:	f8b7 380a 	ldrh.w	r3, [r7, #2058]	; 0x80a
 8006c9a:	3301      	adds	r3, #1
 8006c9c:	f8a7 380a 	strh.w	r3, [r7, #2058]	; 0x80a

			ptrDataStartchar = ptrchar;
 8006ca0:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8006ca4:	f8c7 3810 	str.w	r3, [r7, #2064]	; 0x810
			++ptrchar;
 8006ca8:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8006cac:	3301      	adds	r3, #1
 8006cae:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
	while( ptrchar != NULL)
 8006cb2:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d1ad      	bne.n	8006c16 <SFlash_Arrange_Read_Data+0x72>
			/*****************************************************/
		}
	}
	FlashStr.bitFlagSFlashData = 1;
 8006cba:	4b25      	ldr	r3, [pc, #148]	; (8006d50 <SFlash_Arrange_Read_Data+0x1ac>)
 8006cbc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006cc0:	3318      	adds	r3, #24
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	701a      	strb	r2, [r3, #0]

//	++ptrendchar;
	size = ptrendchar - FlashStr.cSFlashHalfReadData;
 8006cc6:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8006cca:	4a20      	ldr	r2, [pc, #128]	; (8006d4c <SFlash_Arrange_Read_Data+0x1a8>)
 8006ccc:	1a9b      	subs	r3, r3, r2
 8006cce:	f8a7 3808 	strh.w	r3, [r7, #2056]	; 0x808
	if(size > sizeof(FlashStr.cSFlashHalfReadData))
 8006cd2:	f8b7 3808 	ldrh.w	r3, [r7, #2056]	; 0x808
 8006cd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cda:	d903      	bls.n	8006ce4 <SFlash_Arrange_Read_Data+0x140>
		size = sizeof (FlashStr.cSFlashHalfReadData) - 1;
 8006cdc:	f640 73ff 	movw	r3, #4095	; 0xfff
 8006ce0:	f8a7 3808 	strh.w	r3, [r7, #2056]	; 0x808
	memset(FlashStr.cSFlashTransmitData, 0x00, sizeof(FlashStr.cSFlashTransmitData));
 8006ce4:	f640 0201 	movw	r2, #2049	; 0x801
 8006ce8:	2100      	movs	r1, #0
 8006cea:	481a      	ldr	r0, [pc, #104]	; (8006d54 <SFlash_Arrange_Read_Data+0x1b0>)
 8006cec:	f00d f9f6 	bl	80140dc <memset>
//	memcpy(FlashStr.cSFlashTransmitData, FlashStr.cSFlashHalfReadData, size);
	memset(temparray, 0, sizeof(temparray));
 8006cf0:	1d3b      	adds	r3, r7, #4
 8006cf2:	f640 0201 	movw	r2, #2049	; 0x801
 8006cf6:	2100      	movs	r1, #0
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f00d f9ef 	bl	80140dc <memset>
	if(strlen(ptrendchar) < sizeof(temparray) )
 8006cfe:	f8d7 080c 	ldr.w	r0, [r7, #2060]	; 0x80c
 8006d02:	f7f9 fe6f 	bl	80009e4 <strlen>
 8006d06:	4603      	mov	r3, r0
 8006d08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d0c:	d818      	bhi.n	8006d40 <SFlash_Arrange_Read_Data+0x19c>
	{
		strcpy(temparray, ptrendchar);
 8006d0e:	1d3b      	adds	r3, r7, #4
 8006d10:	f8d7 180c 	ldr.w	r1, [r7, #2060]	; 0x80c
 8006d14:	4618      	mov	r0, r3
 8006d16:	f00d ff49 	bl	8014bac <strcpy>
		memset(FlashStr.cSFlashHalfReadData, 0, sizeof(FlashStr.cSFlashHalfReadData));
 8006d1a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006d1e:	2100      	movs	r1, #0
 8006d20:	480a      	ldr	r0, [pc, #40]	; (8006d4c <SFlash_Arrange_Read_Data+0x1a8>)
 8006d22:	f00d f9db 	bl	80140dc <memset>
		if(strlen(temparray) < sizeof(FlashStr.cSFlashHalfReadData) )
 8006d26:	1d3b      	adds	r3, r7, #4
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f7f9 fe5b 	bl	80009e4 <strlen>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d34:	d204      	bcs.n	8006d40 <SFlash_Arrange_Read_Data+0x19c>
		{
			strcpy(FlashStr.cSFlashHalfReadData, temparray);
 8006d36:	1d3b      	adds	r3, r7, #4
 8006d38:	4619      	mov	r1, r3
 8006d3a:	4804      	ldr	r0, [pc, #16]	; (8006d4c <SFlash_Arrange_Read_Data+0x1a8>)
 8006d3c:	f00d ff36 	bl	8014bac <strcpy>
		}
	}
	/* Single payload is copied in queue */

}
 8006d40:	bf00      	nop
 8006d42:	f607 0718 	addw	r7, r7, #2072	; 0x818
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}
 8006d4a:	bf00      	nop
 8006d4c:	2000469a 	.word	0x2000469a
 8006d50:	20003e84 	.word	0x20003e84
 8006d54:	20003e99 	.word	0x20003e99
 8006d58:	20002abc 	.word	0x20002abc

08006d5c <getSFlashDataString>:
 Change History:
 Author           Date                Remarks
 100229			03-05-2021
************************************************************************************/
char * getSFlashDataString(char * chrptr, uint16_t memory_size)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b084      	sub	sp, #16
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
 8006d64:	460b      	mov	r3, r1
 8006d66:	807b      	strh	r3, [r7, #2]
//	char * sflashPayload = malloc(sizeof(char) * SFLASH_PAYLOAD_MAX_SIZE);
	char * sflashPayload = malloc(sizeof(char) * memory_size);
 8006d68:	887b      	ldrh	r3, [r7, #2]
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	f00d f998 	bl	80140a0 <malloc>
 8006d70:	4603      	mov	r3, r0
 8006d72:	60fb      	str	r3, [r7, #12]
	if(sflashPayload != NULL)
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d00a      	beq.n	8006d90 <getSFlashDataString+0x34>
	{
		memset((char *)sflashPayload, 0x00, (sizeof(sflashPayload) * sizeof(char)));
 8006d7a:	2204      	movs	r2, #4
 8006d7c:	2100      	movs	r1, #0
 8006d7e:	68f8      	ldr	r0, [r7, #12]
 8006d80:	f00d f9ac 	bl	80140dc <memset>
		strcpy((char *)sflashPayload, (char *)chrptr);
 8006d84:	6879      	ldr	r1, [r7, #4]
 8006d86:	68f8      	ldr	r0, [r7, #12]
 8006d88:	f00d ff10 	bl	8014bac <strcpy>
		return sflashPayload;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	e000      	b.n	8006d92 <getSFlashDataString+0x36>
	}
	return NULL;
 8006d90:	2300      	movs	r3, #0
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3710      	adds	r7, #16
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}
	...

08006d9c <SFlash_Chip_Erase>:
 Change History:
 Author           	Date                Remarks
 KloudQ Team      03-05-2021			100229
******************************************************************************/
void SFlash_Chip_Erase(void)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b082      	sub	sp, #8
 8006da0:	af00      	add	r7, sp, #0
	uint8_t var = SFLASH_CHIP_ERASE_CODE;
 8006da2:	2360      	movs	r3, #96	; 0x60
 8006da4:	71fb      	strb	r3, [r7, #7]
	SFlash_Write_Enable();
 8006da6:	f7ff fe69 	bl	8006a7c <SFlash_Write_Enable>
	SFlash_Chip_Select(ENABLE);
 8006daa:	2001      	movs	r0, #1
 8006dac:	f7ff fea2 	bl	8006af4 <SFlash_Chip_Select>
	HAL_Delay(1);
 8006db0:	2001      	movs	r0, #1
 8006db2:	f002 f88d 	bl	8008ed0 <HAL_Delay>
	HAL_SPI_Transmit_IT(&hspi2, &var, 1);
 8006db6:	1dfb      	adds	r3, r7, #7
 8006db8:	2201      	movs	r2, #1
 8006dba:	4619      	mov	r1, r3
 8006dbc:	4808      	ldr	r0, [pc, #32]	; (8006de0 <SFlash_Chip_Erase+0x44>)
 8006dbe:	f00a fea9 	bl	8011b14 <HAL_SPI_Transmit_IT>
	HAL_Delay(200);		// Time to erase full chip 100 ms
 8006dc2:	20c8      	movs	r0, #200	; 0xc8
 8006dc4:	f002 f884 	bl	8008ed0 <HAL_Delay>
	SFlash_Chip_Select(DISABLE);
 8006dc8:	2000      	movs	r0, #0
 8006dca:	f7ff fe93 	bl	8006af4 <SFlash_Chip_Select>
	HAL_Delay(200);		// Time to erase full chip 100 ms
 8006dce:	20c8      	movs	r0, #200	; 0xc8
 8006dd0:	f002 f87e 	bl	8008ed0 <HAL_Delay>
	SFlash_Write_Disable();
 8006dd4:	f7ff fe70 	bl	8006ab8 <SFlash_Write_Disable>
}
 8006dd8:	bf00      	nop
 8006dda:	3708      	adds	r7, #8
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd80      	pop	{r7, pc}
 8006de0:	20005ea4 	.word	0x20005ea4

08006de4 <SFlash_Read_Device_ID>:
 Change History:
 Author           	Date                Remarks
 KloudQ Team      03-05-2021			100229
******************************************************************************/
void SFlash_Read_Device_ID(void)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b088      	sub	sp, #32
 8006de8:	af00      	add	r7, sp, #0
	uint8_t tx_var[10], rx_var[10];
	uint32_t address = 0;
 8006dea:	2300      	movs	r3, #0
 8006dec:	61fb      	str	r3, [r7, #28]
	//uint8_t read_status = 0;

	//read_status =
	SFlash_Read_Status_Register();
 8006dee:	f7ff fe27 	bl	8006a40 <SFlash_Read_Status_Register>

	memset(tx_var, 0, sizeof(tx_var));
 8006df2:	f107 0310 	add.w	r3, r7, #16
 8006df6:	220a      	movs	r2, #10
 8006df8:	2100      	movs	r1, #0
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f00d f96e 	bl	80140dc <memset>
	memset(rx_var, 0, sizeof(rx_var));
 8006e00:	1d3b      	adds	r3, r7, #4
 8006e02:	220a      	movs	r2, #10
 8006e04:	2100      	movs	r1, #0
 8006e06:	4618      	mov	r0, r3
 8006e08:	f00d f968 	bl	80140dc <memset>
	tx_var[0] = SFLASH_READ_DEVICE_ID;	//0x9F;	//
 8006e0c:	2390      	movs	r3, #144	; 0x90
 8006e0e:	743b      	strb	r3, [r7, #16]

	tx_var[1] = (uint8_t)(address >> 16);
 8006e10:	69fb      	ldr	r3, [r7, #28]
 8006e12:	0c1b      	lsrs	r3, r3, #16
 8006e14:	b2db      	uxtb	r3, r3
 8006e16:	747b      	strb	r3, [r7, #17]
	tx_var[2] = (uint8_t)(address >> 8);
 8006e18:	69fb      	ldr	r3, [r7, #28]
 8006e1a:	0a1b      	lsrs	r3, r3, #8
 8006e1c:	b2db      	uxtb	r3, r3
 8006e1e:	74bb      	strb	r3, [r7, #18]
	tx_var[3] = (uint8_t)(address >> 0);
 8006e20:	69fb      	ldr	r3, [r7, #28]
 8006e22:	b2db      	uxtb	r3, r3
 8006e24:	74fb      	strb	r3, [r7, #19]
	SFlash_Chip_Select(ENABLE);
 8006e26:	2001      	movs	r0, #1
 8006e28:	f7ff fe64 	bl	8006af4 <SFlash_Chip_Select>
	HAL_Delay(1);
 8006e2c:	2001      	movs	r0, #1
 8006e2e:	f002 f84f 	bl	8008ed0 <HAL_Delay>
	HAL_SPI_Transmit_IT(&hspi2, (uint8_t *)tx_var, 4); //HAL_SPI_Transmit(&hspi2, (uint8_t *)tx_var, 4,20);//HAL_SPI_Transmit_IT(&hspi2, (uint8_t *)tx_var, 4);
 8006e32:	f107 0310 	add.w	r3, r7, #16
 8006e36:	2204      	movs	r2, #4
 8006e38:	4619      	mov	r1, r3
 8006e3a:	4813      	ldr	r0, [pc, #76]	; (8006e88 <SFlash_Read_Device_ID+0xa4>)
 8006e3c:	f00a fe6a 	bl	8011b14 <HAL_SPI_Transmit_IT>
	HAL_SPI_Receive_IT(&hspi2, (uint8_t *)rx_var, 2);//HAL_SPI_Receive(&hspi2, (uint8_t *)rx_var, 2,20);//HAL_SPI_Receive_IT(&hspi2, (uint8_t *)rx_var, 2);
 8006e40:	1d3b      	adds	r3, r7, #4
 8006e42:	2202      	movs	r2, #2
 8006e44:	4619      	mov	r1, r3
 8006e46:	4810      	ldr	r0, [pc, #64]	; (8006e88 <SFlash_Read_Device_ID+0xa4>)
 8006e48:	f00a ff00 	bl	8011c4c <HAL_SPI_Receive_IT>
	HAL_Delay(3);
 8006e4c:	2003      	movs	r0, #3
 8006e4e:	f002 f83f 	bl	8008ed0 <HAL_Delay>
	SFlash_Chip_Select(DISABLE);
 8006e52:	2000      	movs	r0, #0
 8006e54:	f7ff fe4e 	bl	8006af4 <SFlash_Chip_Select>
	switch(rx_var[1])
 8006e58:	797b      	ldrb	r3, [r7, #5]
 8006e5a:	2b16      	cmp	r3, #22
 8006e5c:	d002      	beq.n	8006e64 <SFlash_Read_Device_ID+0x80>
 8006e5e:	2b17      	cmp	r3, #23
 8006e60:	d004      	beq.n	8006e6c <SFlash_Read_Device_ID+0x88>
 8006e62:	e008      	b.n	8006e76 <SFlash_Read_Device_ID+0x92>
	{
		case 0x16:
			SFLASH_SIZE = SFLASH_SIZE_64Mbit; /* 64 Mbit memory */
 8006e64:	4b09      	ldr	r3, [pc, #36]	; (8006e8c <SFlash_Read_Device_ID+0xa8>)
 8006e66:	4a0a      	ldr	r2, [pc, #40]	; (8006e90 <SFlash_Read_Device_ID+0xac>)
 8006e68:	601a      	str	r2, [r3, #0]
			break;
 8006e6a:	e008      	b.n	8006e7e <SFlash_Read_Device_ID+0x9a>
		case 0x17:
			SFLASH_SIZE = SFLASH_SIZE_128Mbit; /* 128 Mbit memory */
 8006e6c:	4b07      	ldr	r3, [pc, #28]	; (8006e8c <SFlash_Read_Device_ID+0xa8>)
 8006e6e:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8006e72:	601a      	str	r2, [r3, #0]
			break;
 8006e74:	e003      	b.n	8006e7e <SFlash_Read_Device_ID+0x9a>
		default:
			SFLASH_SIZE = 0; /* Chip problem or absent */
 8006e76:	4b05      	ldr	r3, [pc, #20]	; (8006e8c <SFlash_Read_Device_ID+0xa8>)
 8006e78:	2200      	movs	r2, #0
 8006e7a:	601a      	str	r2, [r3, #0]
			break;
 8006e7c:	bf00      	nop
	}
}
 8006e7e:	bf00      	nop
 8006e80:	3720      	adds	r7, #32
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}
 8006e86:	bf00      	nop
 8006e88:	20005ea4 	.word	0x20005ea4
 8006e8c:	2000198c 	.word	0x2000198c
 8006e90:	007fffff 	.word	0x007fffff

08006e94 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b083      	sub	sp, #12
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
	g_u32SpiTxCmpltFlag = 1;
 8006e9c:	4b04      	ldr	r3, [pc, #16]	; (8006eb0 <HAL_SPI_TxCpltCallback+0x1c>)
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	601a      	str	r2, [r3, #0]
}
 8006ea2:	bf00      	nop
 8006ea4:	370c      	adds	r7, #12
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eac:	4770      	bx	lr
 8006eae:	bf00      	nop
 8006eb0:	20001988 	.word	0x20001988

08006eb4 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b083      	sub	sp, #12
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
	g_u32SpiRxCmpltFlag = 1;
 8006ebc:	4b04      	ldr	r3, [pc, #16]	; (8006ed0 <HAL_SPI_RxCpltCallback+0x1c>)
 8006ebe:	2201      	movs	r2, #1
 8006ec0:	601a      	str	r2, [r3, #0]
}
 8006ec2:	bf00      	nop
 8006ec4:	370c      	adds	r7, #12
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ecc:	4770      	bx	lr
 8006ece:	bf00      	nop
 8006ed0:	20001984 	.word	0x20001984

08006ed4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
 void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b083      	sub	sp, #12
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
	 g_u32SpiTxCmpltFlag = 1;
 8006edc:	4b05      	ldr	r3, [pc, #20]	; (8006ef4 <HAL_SPI_TxRxCpltCallback+0x20>)
 8006ede:	2201      	movs	r2, #1
 8006ee0:	601a      	str	r2, [r3, #0]
	 g_u32SpiRxCmpltFlag = 1;
 8006ee2:	4b05      	ldr	r3, [pc, #20]	; (8006ef8 <HAL_SPI_TxRxCpltCallback+0x24>)
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	601a      	str	r2, [r3, #0]

}
 8006ee8:	bf00      	nop
 8006eea:	370c      	adds	r7, #12
 8006eec:	46bd      	mov	sp, r7
 8006eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef2:	4770      	bx	lr
 8006ef4:	20001988 	.word	0x20001988
 8006ef8:	20001984 	.word	0x20001984

08006efc <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8006f00:	4b1b      	ldr	r3, [pc, #108]	; (8006f70 <MX_SPI2_Init+0x74>)
 8006f02:	4a1c      	ldr	r2, [pc, #112]	; (8006f74 <MX_SPI2_Init+0x78>)
 8006f04:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8006f06:	4b1a      	ldr	r3, [pc, #104]	; (8006f70 <MX_SPI2_Init+0x74>)
 8006f08:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006f0c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8006f0e:	4b18      	ldr	r3, [pc, #96]	; (8006f70 <MX_SPI2_Init+0x74>)
 8006f10:	2200      	movs	r2, #0
 8006f12:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8006f14:	4b16      	ldr	r3, [pc, #88]	; (8006f70 <MX_SPI2_Init+0x74>)
 8006f16:	f44f 7240 	mov.w	r2, #768	; 0x300
 8006f1a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006f1c:	4b14      	ldr	r3, [pc, #80]	; (8006f70 <MX_SPI2_Init+0x74>)
 8006f1e:	2200      	movs	r2, #0
 8006f20:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006f22:	4b13      	ldr	r3, [pc, #76]	; (8006f70 <MX_SPI2_Init+0x74>)
 8006f24:	2200      	movs	r2, #0
 8006f26:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8006f28:	4b11      	ldr	r3, [pc, #68]	; (8006f70 <MX_SPI2_Init+0x74>)
 8006f2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f2e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8006f30:	4b0f      	ldr	r3, [pc, #60]	; (8006f70 <MX_SPI2_Init+0x74>)
 8006f32:	2208      	movs	r2, #8
 8006f34:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006f36:	4b0e      	ldr	r3, [pc, #56]	; (8006f70 <MX_SPI2_Init+0x74>)
 8006f38:	2200      	movs	r2, #0
 8006f3a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8006f3c:	4b0c      	ldr	r3, [pc, #48]	; (8006f70 <MX_SPI2_Init+0x74>)
 8006f3e:	2200      	movs	r2, #0
 8006f40:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006f42:	4b0b      	ldr	r3, [pc, #44]	; (8006f70 <MX_SPI2_Init+0x74>)
 8006f44:	2200      	movs	r2, #0
 8006f46:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8006f48:	4b09      	ldr	r3, [pc, #36]	; (8006f70 <MX_SPI2_Init+0x74>)
 8006f4a:	2207      	movs	r2, #7
 8006f4c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8006f4e:	4b08      	ldr	r3, [pc, #32]	; (8006f70 <MX_SPI2_Init+0x74>)
 8006f50:	2200      	movs	r2, #0
 8006f52:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8006f54:	4b06      	ldr	r3, [pc, #24]	; (8006f70 <MX_SPI2_Init+0x74>)
 8006f56:	2208      	movs	r2, #8
 8006f58:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8006f5a:	4805      	ldr	r0, [pc, #20]	; (8006f70 <MX_SPI2_Init+0x74>)
 8006f5c:	f00a fbee 	bl	801173c <HAL_SPI_Init>
 8006f60:	4603      	mov	r3, r0
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d001      	beq.n	8006f6a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8006f66:	f7fd fb10 	bl	800458a <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8006f6a:	bf00      	nop
 8006f6c:	bd80      	pop	{r7, pc}
 8006f6e:	bf00      	nop
 8006f70:	20005ea4 	.word	0x20005ea4
 8006f74:	40003800 	.word	0x40003800

08006f78 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b08a      	sub	sp, #40	; 0x28
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f80:	f107 0314 	add.w	r3, r7, #20
 8006f84:	2200      	movs	r2, #0
 8006f86:	601a      	str	r2, [r3, #0]
 8006f88:	605a      	str	r2, [r3, #4]
 8006f8a:	609a      	str	r2, [r3, #8]
 8006f8c:	60da      	str	r2, [r3, #12]
 8006f8e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a1b      	ldr	r2, [pc, #108]	; (8007004 <HAL_SPI_MspInit+0x8c>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d130      	bne.n	8006ffc <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8006f9a:	4b1b      	ldr	r3, [pc, #108]	; (8007008 <HAL_SPI_MspInit+0x90>)
 8006f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f9e:	4a1a      	ldr	r2, [pc, #104]	; (8007008 <HAL_SPI_MspInit+0x90>)
 8006fa0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006fa4:	6593      	str	r3, [r2, #88]	; 0x58
 8006fa6:	4b18      	ldr	r3, [pc, #96]	; (8007008 <HAL_SPI_MspInit+0x90>)
 8006fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006faa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006fae:	613b      	str	r3, [r7, #16]
 8006fb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006fb2:	4b15      	ldr	r3, [pc, #84]	; (8007008 <HAL_SPI_MspInit+0x90>)
 8006fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fb6:	4a14      	ldr	r2, [pc, #80]	; (8007008 <HAL_SPI_MspInit+0x90>)
 8006fb8:	f043 0302 	orr.w	r3, r3, #2
 8006fbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006fbe:	4b12      	ldr	r3, [pc, #72]	; (8007008 <HAL_SPI_MspInit+0x90>)
 8006fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fc2:	f003 0302 	and.w	r3, r3, #2
 8006fc6:	60fb      	str	r3, [r7, #12]
 8006fc8:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8006fca:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8006fce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006fd0:	2302      	movs	r3, #2
 8006fd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006fd8:	2303      	movs	r3, #3
 8006fda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006fdc:	2305      	movs	r3, #5
 8006fde:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006fe0:	f107 0314 	add.w	r3, r7, #20
 8006fe4:	4619      	mov	r1, r3
 8006fe6:	4809      	ldr	r0, [pc, #36]	; (800700c <HAL_SPI_MspInit+0x94>)
 8006fe8:	f006 f82e 	bl	800d048 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 4, 0);
 8006fec:	2200      	movs	r2, #0
 8006fee:	2104      	movs	r1, #4
 8006ff0:	2024      	movs	r0, #36	; 0x24
 8006ff2:	f005 f8d5 	bl	800c1a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8006ff6:	2024      	movs	r0, #36	; 0x24
 8006ff8:	f005 f8fe 	bl	800c1f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8006ffc:	bf00      	nop
 8006ffe:	3728      	adds	r7, #40	; 0x28
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}
 8007004:	40003800 	.word	0x40003800
 8007008:	40021000 	.word	0x40021000
 800700c:	48000400 	.word	0x48000400

08007010 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007010:	b480      	push	{r7}
 8007012:	b083      	sub	sp, #12
 8007014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007016:	4b0f      	ldr	r3, [pc, #60]	; (8007054 <HAL_MspInit+0x44>)
 8007018:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800701a:	4a0e      	ldr	r2, [pc, #56]	; (8007054 <HAL_MspInit+0x44>)
 800701c:	f043 0301 	orr.w	r3, r3, #1
 8007020:	6613      	str	r3, [r2, #96]	; 0x60
 8007022:	4b0c      	ldr	r3, [pc, #48]	; (8007054 <HAL_MspInit+0x44>)
 8007024:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007026:	f003 0301 	and.w	r3, r3, #1
 800702a:	607b      	str	r3, [r7, #4]
 800702c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800702e:	4b09      	ldr	r3, [pc, #36]	; (8007054 <HAL_MspInit+0x44>)
 8007030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007032:	4a08      	ldr	r2, [pc, #32]	; (8007054 <HAL_MspInit+0x44>)
 8007034:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007038:	6593      	str	r3, [r2, #88]	; 0x58
 800703a:	4b06      	ldr	r3, [pc, #24]	; (8007054 <HAL_MspInit+0x44>)
 800703c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800703e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007042:	603b      	str	r3, [r7, #0]
 8007044:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007046:	bf00      	nop
 8007048:	370c      	adds	r7, #12
 800704a:	46bd      	mov	sp, r7
 800704c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007050:	4770      	bx	lr
 8007052:	bf00      	nop
 8007054:	40021000 	.word	0x40021000

08007058 <LL_USART_IsActiveFlag_RXNE>:
{
 8007058:	b480      	push	{r7}
 800705a:	b083      	sub	sp, #12
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	69db      	ldr	r3, [r3, #28]
 8007064:	f003 0320 	and.w	r3, r3, #32
 8007068:	2b20      	cmp	r3, #32
 800706a:	d101      	bne.n	8007070 <LL_USART_IsActiveFlag_RXNE+0x18>
 800706c:	2301      	movs	r3, #1
 800706e:	e000      	b.n	8007072 <LL_USART_IsActiveFlag_RXNE+0x1a>
 8007070:	2300      	movs	r3, #0
}
 8007072:	4618      	mov	r0, r3
 8007074:	370c      	adds	r7, #12
 8007076:	46bd      	mov	sp, r7
 8007078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707c:	4770      	bx	lr

0800707e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800707e:	b480      	push	{r7}
 8007080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007082:	e7fe      	b.n	8007082 <NMI_Handler+0x4>

08007084 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007084:	b480      	push	{r7}
 8007086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007088:	e7fe      	b.n	8007088 <HardFault_Handler+0x4>

0800708a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800708a:	b480      	push	{r7}
 800708c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800708e:	e7fe      	b.n	800708e <MemManage_Handler+0x4>

08007090 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007090:	b480      	push	{r7}
 8007092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007094:	e7fe      	b.n	8007094 <BusFault_Handler+0x4>

08007096 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007096:	b480      	push	{r7}
 8007098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800709a:	e7fe      	b.n	800709a <UsageFault_Handler+0x4>

0800709c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800709c:	b480      	push	{r7}
 800709e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80070a0:	bf00      	nop
 80070a2:	46bd      	mov	sp, r7
 80070a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a8:	4770      	bx	lr

080070aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80070aa:	b480      	push	{r7}
 80070ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80070ae:	bf00      	nop
 80070b0:	46bd      	mov	sp, r7
 80070b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b6:	4770      	bx	lr

080070b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80070b8:	b480      	push	{r7}
 80070ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80070bc:	bf00      	nop
 80070be:	46bd      	mov	sp, r7
 80070c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c4:	4770      	bx	lr

080070c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80070c6:	b580      	push	{r7, lr}
 80070c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80070ca:	f001 fee1 	bl	8008e90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80070ce:	bf00      	nop
 80070d0:	bd80      	pop	{r7, pc}

080070d2 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80070d2:	b580      	push	{r7, lr}
 80070d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DI_EXTI4_Pin);
 80070d6:	2010      	movs	r0, #16
 80070d8:	f006 fb84 	bl	800d7e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80070dc:	bf00      	nop
 80070de:	bd80      	pop	{r7, pc}

080070e0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80070e4:	4802      	ldr	r0, [pc, #8]	; (80070f0 <DMA1_Channel1_IRQHandler+0x10>)
 80070e6:	f005 fb68 	bl	800c7ba <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80070ea:	bf00      	nop
 80070ec:	bd80      	pop	{r7, pc}
 80070ee:	bf00      	nop
 80070f0:	20002930 	.word	0x20002930

080070f4 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80070f8:	4802      	ldr	r0, [pc, #8]	; (8007104 <ADC1_IRQHandler+0x10>)
 80070fa:	f002 fd8f 	bl	8009c1c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 80070fe:	bf00      	nop
 8007100:	bd80      	pop	{r7, pc}
 8007102:	bf00      	nop
 8007104:	200028cc 	.word	0x200028cc

08007108 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800710c:	4802      	ldr	r0, [pc, #8]	; (8007118 <CAN1_TX_IRQHandler+0x10>)
 800710e:	f004 fd0d 	bl	800bb2c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8007112:	bf00      	nop
 8007114:	bd80      	pop	{r7, pc}
 8007116:	bf00      	nop
 8007118:	200029a0 	.word	0x200029a0

0800711c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8007120:	4802      	ldr	r0, [pc, #8]	; (800712c <CAN1_RX0_IRQHandler+0x10>)
 8007122:	f004 fd03 	bl	800bb2c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8007126:	bf00      	nop
 8007128:	bd80      	pop	{r7, pc}
 800712a:	bf00      	nop
 800712c:	200029a0 	.word	0x200029a0

08007130 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8007134:	4802      	ldr	r0, [pc, #8]	; (8007140 <CAN1_RX1_IRQHandler+0x10>)
 8007136:	f004 fcf9 	bl	800bb2c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800713a:	bf00      	nop
 800713c:	bd80      	pop	{r7, pc}
 800713e:	bf00      	nop
 8007140:	200029a0 	.word	0x200029a0

08007144 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8007148:	4802      	ldr	r0, [pc, #8]	; (8007154 <CAN1_SCE_IRQHandler+0x10>)
 800714a:	f004 fcef 	bl	800bb2c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 800714e:	bf00      	nop
 8007150:	bd80      	pop	{r7, pc}
 8007152:	bf00      	nop
 8007154:	200029a0 	.word	0x200029a0

08007158 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DI_EXTI5_Pin);
 800715c:	2020      	movs	r0, #32
 800715e:	f006 fb41 	bl	800d7e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8007162:	bf00      	nop
 8007164:	bd80      	pop	{r7, pc}
	...

08007168 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800716c:	4802      	ldr	r0, [pc, #8]	; (8007178 <I2C1_EV_IRQHandler+0x10>)
 800716e:	f006 feb5 	bl	800dedc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8007172:	bf00      	nop
 8007174:	bd80      	pop	{r7, pc}
 8007176:	bf00      	nop
 8007178:	20003dfc 	.word	0x20003dfc

0800717c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8007180:	4802      	ldr	r0, [pc, #8]	; (800718c <I2C1_ER_IRQHandler+0x10>)
 8007182:	f006 fec5 	bl	800df10 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8007186:	bf00      	nop
 8007188:	bd80      	pop	{r7, pc}
 800718a:	bf00      	nop
 800718c:	20003dfc 	.word	0x20003dfc

08007190 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8007194:	4802      	ldr	r0, [pc, #8]	; (80071a0 <SPI2_IRQHandler+0x10>)
 8007196:	f00a fec3 	bl	8011f20 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800719a:	bf00      	nop
 800719c:	bd80      	pop	{r7, pc}
 800719e:	bf00      	nop
 80071a0:	20005ea4 	.word	0x20005ea4

080071a4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
		if(LL_USART_IsActiveFlag_RXNE(USART1)!=RESET)
 80071a8:	4804      	ldr	r0, [pc, #16]	; (80071bc <USART1_IRQHandler+0x18>)
 80071aa:	f7ff ff55 	bl	8007058 <LL_USART_IsActiveFlag_RXNE>
 80071ae:	4603      	mov	r3, r0
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d001      	beq.n	80071b8 <USART1_IRQHandler+0x14>
		{
			/* RXNE flag will be cleared by reading of RDR register (done in call) */
			/* Call function in charge of handling Character reception */
			GSM_CharReception_Callback();
 80071b4:	f7ff f89e 	bl	80062f4 <GSM_CharReception_Callback>
		}
  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80071b8:	bf00      	nop
 80071ba:	bd80      	pop	{r7, pc}
 80071bc:	40013800 	.word	0x40013800

080071c0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	if(LL_USART_IsActiveFlag_RXNE(USART2)!=RESET)
 80071c4:	4804      	ldr	r0, [pc, #16]	; (80071d8 <USART2_IRQHandler+0x18>)
 80071c6:	f7ff ff47 	bl	8007058 <LL_USART_IsActiveFlag_RXNE>
 80071ca:	4603      	mov	r3, r0
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d001      	beq.n	80071d4 <USART2_IRQHandler+0x14>
		{
			/* RXNE flag will be cleared by reading of RDR register (done in call) */
			/* Call function in charge of handling Character reception */
		RS232_Callback();
 80071d0:	f000 fc8e 	bl	8007af0 <RS232_Callback>
		}
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80071d4:	bf00      	nop
 80071d6:	bd80      	pop	{r7, pc}
 80071d8:	40004400 	.word	0x40004400

080071dc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80071dc:	b480      	push	{r7}
 80071de:	af00      	add	r7, sp, #0

  /* USER CODE END USART3_IRQn 0 */
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80071e0:	bf00      	nop
 80071e2:	46bd      	mov	sp, r7
 80071e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e8:	4770      	bx	lr
	...

080071ec <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80071f0:	4802      	ldr	r0, [pc, #8]	; (80071fc <TIM7_IRQHandler+0x10>)
 80071f2:	f00b fd21 	bl	8012c38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80071f6:	bf00      	nop
 80071f8:	bd80      	pop	{r7, pc}
 80071fa:	bf00      	nop
 80071fc:	20005f08 	.word	0x20005f08

08007200 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8007200:	b480      	push	{r7}
 8007202:	af00      	add	r7, sp, #0
  return 1;
 8007204:	2301      	movs	r3, #1
}
 8007206:	4618      	mov	r0, r3
 8007208:	46bd      	mov	sp, r7
 800720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720e:	4770      	bx	lr

08007210 <_kill>:

int _kill(int pid, int sig)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b082      	sub	sp, #8
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
 8007218:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800721a:	f00c fefd 	bl	8014018 <__errno>
 800721e:	4603      	mov	r3, r0
 8007220:	2216      	movs	r2, #22
 8007222:	601a      	str	r2, [r3, #0]
  return -1;
 8007224:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007228:	4618      	mov	r0, r3
 800722a:	3708      	adds	r7, #8
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}

08007230 <_exit>:

void _exit (int status)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b082      	sub	sp, #8
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8007238:	f04f 31ff 	mov.w	r1, #4294967295
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f7ff ffe7 	bl	8007210 <_kill>
  while (1) {}    /* Make sure we hang here */
 8007242:	e7fe      	b.n	8007242 <_exit+0x12>

08007244 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b086      	sub	sp, #24
 8007248:	af00      	add	r7, sp, #0
 800724a:	60f8      	str	r0, [r7, #12]
 800724c:	60b9      	str	r1, [r7, #8]
 800724e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007250:	2300      	movs	r3, #0
 8007252:	617b      	str	r3, [r7, #20]
 8007254:	e00a      	b.n	800726c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8007256:	f3af 8000 	nop.w
 800725a:	4601      	mov	r1, r0
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	1c5a      	adds	r2, r3, #1
 8007260:	60ba      	str	r2, [r7, #8]
 8007262:	b2ca      	uxtb	r2, r1
 8007264:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	3301      	adds	r3, #1
 800726a:	617b      	str	r3, [r7, #20]
 800726c:	697a      	ldr	r2, [r7, #20]
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	429a      	cmp	r2, r3
 8007272:	dbf0      	blt.n	8007256 <_read+0x12>
  }

  return len;
 8007274:	687b      	ldr	r3, [r7, #4]
}
 8007276:	4618      	mov	r0, r3
 8007278:	3718      	adds	r7, #24
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}

0800727e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800727e:	b580      	push	{r7, lr}
 8007280:	b086      	sub	sp, #24
 8007282:	af00      	add	r7, sp, #0
 8007284:	60f8      	str	r0, [r7, #12]
 8007286:	60b9      	str	r1, [r7, #8]
 8007288:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800728a:	2300      	movs	r3, #0
 800728c:	617b      	str	r3, [r7, #20]
 800728e:	e009      	b.n	80072a4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	1c5a      	adds	r2, r3, #1
 8007294:	60ba      	str	r2, [r7, #8]
 8007296:	781b      	ldrb	r3, [r3, #0]
 8007298:	4618      	mov	r0, r3
 800729a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	3301      	adds	r3, #1
 80072a2:	617b      	str	r3, [r7, #20]
 80072a4:	697a      	ldr	r2, [r7, #20]
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	429a      	cmp	r2, r3
 80072aa:	dbf1      	blt.n	8007290 <_write+0x12>
  }
  return len;
 80072ac:	687b      	ldr	r3, [r7, #4]
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3718      	adds	r7, #24
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}

080072b6 <_close>:

int _close(int file)
{
 80072b6:	b480      	push	{r7}
 80072b8:	b083      	sub	sp, #12
 80072ba:	af00      	add	r7, sp, #0
 80072bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80072be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80072c2:	4618      	mov	r0, r3
 80072c4:	370c      	adds	r7, #12
 80072c6:	46bd      	mov	sp, r7
 80072c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072cc:	4770      	bx	lr

080072ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80072ce:	b480      	push	{r7}
 80072d0:	b083      	sub	sp, #12
 80072d2:	af00      	add	r7, sp, #0
 80072d4:	6078      	str	r0, [r7, #4]
 80072d6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80072de:	605a      	str	r2, [r3, #4]
  return 0;
 80072e0:	2300      	movs	r3, #0
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	370c      	adds	r7, #12
 80072e6:	46bd      	mov	sp, r7
 80072e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ec:	4770      	bx	lr

080072ee <_isatty>:

int _isatty(int file)
{
 80072ee:	b480      	push	{r7}
 80072f0:	b083      	sub	sp, #12
 80072f2:	af00      	add	r7, sp, #0
 80072f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80072f6:	2301      	movs	r3, #1
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	370c      	adds	r7, #12
 80072fc:	46bd      	mov	sp, r7
 80072fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007302:	4770      	bx	lr

08007304 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007304:	b480      	push	{r7}
 8007306:	b085      	sub	sp, #20
 8007308:	af00      	add	r7, sp, #0
 800730a:	60f8      	str	r0, [r7, #12]
 800730c:	60b9      	str	r1, [r7, #8]
 800730e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8007310:	2300      	movs	r3, #0
}
 8007312:	4618      	mov	r0, r3
 8007314:	3714      	adds	r7, #20
 8007316:	46bd      	mov	sp, r7
 8007318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731c:	4770      	bx	lr
	...

08007320 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b086      	sub	sp, #24
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007328:	4a14      	ldr	r2, [pc, #80]	; (800737c <_sbrk+0x5c>)
 800732a:	4b15      	ldr	r3, [pc, #84]	; (8007380 <_sbrk+0x60>)
 800732c:	1ad3      	subs	r3, r2, r3
 800732e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007334:	4b13      	ldr	r3, [pc, #76]	; (8007384 <_sbrk+0x64>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d102      	bne.n	8007342 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800733c:	4b11      	ldr	r3, [pc, #68]	; (8007384 <_sbrk+0x64>)
 800733e:	4a12      	ldr	r2, [pc, #72]	; (8007388 <_sbrk+0x68>)
 8007340:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007342:	4b10      	ldr	r3, [pc, #64]	; (8007384 <_sbrk+0x64>)
 8007344:	681a      	ldr	r2, [r3, #0]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	4413      	add	r3, r2
 800734a:	693a      	ldr	r2, [r7, #16]
 800734c:	429a      	cmp	r2, r3
 800734e:	d207      	bcs.n	8007360 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007350:	f00c fe62 	bl	8014018 <__errno>
 8007354:	4603      	mov	r3, r0
 8007356:	220c      	movs	r2, #12
 8007358:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800735a:	f04f 33ff 	mov.w	r3, #4294967295
 800735e:	e009      	b.n	8007374 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007360:	4b08      	ldr	r3, [pc, #32]	; (8007384 <_sbrk+0x64>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007366:	4b07      	ldr	r3, [pc, #28]	; (8007384 <_sbrk+0x64>)
 8007368:	681a      	ldr	r2, [r3, #0]
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	4413      	add	r3, r2
 800736e:	4a05      	ldr	r2, [pc, #20]	; (8007384 <_sbrk+0x64>)
 8007370:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007372:	68fb      	ldr	r3, [r7, #12]
}
 8007374:	4618      	mov	r0, r3
 8007376:	3718      	adds	r7, #24
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}
 800737c:	20010000 	.word	0x20010000
 8007380:	00000400 	.word	0x00000400
 8007384:	20001994 	.word	0x20001994
 8007388:	20006620 	.word	0x20006620

0800738c <systemReset>:
 Change History:
 Author            	Date                Remarks
 KloudQ Team        23/05/2020			initial definition
******************************************************************************/
void systemReset(void)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	af00      	add	r7, sp, #0
	while(1)
	{
		HAL_GPIO_TogglePin(GPS_LED_GPIO_Port, GPS_LED_Pin);
 8007390:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007394:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007398:	f006 f9fc 	bl	800d794 <HAL_GPIO_TogglePin>
		HAL_Delay(50);
 800739c:	2032      	movs	r0, #50	; 0x32
 800739e:	f001 fd97 	bl	8008ed0 <HAL_Delay>
		HAL_GPIO_TogglePin(GPS_LED_GPIO_Port, GPS_LED_Pin);
 80073a2:	e7f5      	b.n	8007390 <systemReset+0x4>

080073a4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80073a4:	b480      	push	{r7}
 80073a6:	af00      	add	r7, sp, #0
#if defined(USER_VECT_TAB_ADDRESS)
  /* Configure the Vector Table location -------------------------------------*/
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
 80073a8:	4b08      	ldr	r3, [pc, #32]	; (80073cc <SystemInit+0x28>)
 80073aa:	f04f 2208 	mov.w	r2, #134219776	; 0x8000800
 80073ae:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80073b0:	4b06      	ldr	r3, [pc, #24]	; (80073cc <SystemInit+0x28>)
 80073b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073b6:	4a05      	ldr	r2, [pc, #20]	; (80073cc <SystemInit+0x28>)
 80073b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80073bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80073c0:	bf00      	nop
 80073c2:	46bd      	mov	sp, r7
 80073c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c8:	4770      	bx	lr
 80073ca:	bf00      	nop
 80073cc:	e000ed00 	.word	0xe000ed00

080073d0 <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b084      	sub	sp, #16
 80073d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80073d6:	1d3b      	adds	r3, r7, #4
 80073d8:	2200      	movs	r2, #0
 80073da:	601a      	str	r2, [r3, #0]
 80073dc:	605a      	str	r2, [r3, #4]
 80073de:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80073e0:	4b14      	ldr	r3, [pc, #80]	; (8007434 <MX_TIM7_Init+0x64>)
 80073e2:	4a15      	ldr	r2, [pc, #84]	; (8007438 <MX_TIM7_Init+0x68>)
 80073e4:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 1;
 80073e6:	4b13      	ldr	r3, [pc, #76]	; (8007434 <MX_TIM7_Init+0x64>)
 80073e8:	2201      	movs	r2, #1
 80073ea:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80073ec:	4b11      	ldr	r3, [pc, #68]	; (8007434 <MX_TIM7_Init+0x64>)
 80073ee:	2200      	movs	r2, #0
 80073f0:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 39999;
 80073f2:	4b10      	ldr	r3, [pc, #64]	; (8007434 <MX_TIM7_Init+0x64>)
 80073f4:	f649 423f 	movw	r2, #39999	; 0x9c3f
 80073f8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80073fa:	4b0e      	ldr	r3, [pc, #56]	; (8007434 <MX_TIM7_Init+0x64>)
 80073fc:	2200      	movs	r2, #0
 80073fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8007400:	480c      	ldr	r0, [pc, #48]	; (8007434 <MX_TIM7_Init+0x64>)
 8007402:	f00b fab9 	bl	8012978 <HAL_TIM_Base_Init>
 8007406:	4603      	mov	r3, r0
 8007408:	2b00      	cmp	r3, #0
 800740a:	d001      	beq.n	8007410 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 800740c:	f7fd f8bd 	bl	800458a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007410:	2300      	movs	r3, #0
 8007412:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007414:	2300      	movs	r3, #0
 8007416:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8007418:	1d3b      	adds	r3, r7, #4
 800741a:	4619      	mov	r1, r3
 800741c:	4805      	ldr	r0, [pc, #20]	; (8007434 <MX_TIM7_Init+0x64>)
 800741e:	f00b fdad 	bl	8012f7c <HAL_TIMEx_MasterConfigSynchronization>
 8007422:	4603      	mov	r3, r0
 8007424:	2b00      	cmp	r3, #0
 8007426:	d001      	beq.n	800742c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8007428:	f7fd f8af 	bl	800458a <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800742c:	bf00      	nop
 800742e:	3710      	adds	r7, #16
 8007430:	46bd      	mov	sp, r7
 8007432:	bd80      	pop	{r7, pc}
 8007434:	20005f08 	.word	0x20005f08
 8007438:	40001400 	.word	0x40001400

0800743c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b084      	sub	sp, #16
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a0d      	ldr	r2, [pc, #52]	; (8007480 <HAL_TIM_Base_MspInit+0x44>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d113      	bne.n	8007476 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800744e:	4b0d      	ldr	r3, [pc, #52]	; (8007484 <HAL_TIM_Base_MspInit+0x48>)
 8007450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007452:	4a0c      	ldr	r2, [pc, #48]	; (8007484 <HAL_TIM_Base_MspInit+0x48>)
 8007454:	f043 0320 	orr.w	r3, r3, #32
 8007458:	6593      	str	r3, [r2, #88]	; 0x58
 800745a:	4b0a      	ldr	r3, [pc, #40]	; (8007484 <HAL_TIM_Base_MspInit+0x48>)
 800745c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800745e:	f003 0320 	and.w	r3, r3, #32
 8007462:	60fb      	str	r3, [r7, #12]
 8007464:	68fb      	ldr	r3, [r7, #12]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8007466:	2200      	movs	r2, #0
 8007468:	2100      	movs	r1, #0
 800746a:	2037      	movs	r0, #55	; 0x37
 800746c:	f004 fe98 	bl	800c1a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8007470:	2037      	movs	r0, #55	; 0x37
 8007472:	f004 fec1 	bl	800c1f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8007476:	bf00      	nop
 8007478:	3710      	adds	r7, #16
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}
 800747e:	bf00      	nop
 8007480:	40001400 	.word	0x40001400
 8007484:	40021000 	.word	0x40021000

08007488 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007488:	b480      	push	{r7}
 800748a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800748c:	4b04      	ldr	r3, [pc, #16]	; (80074a0 <__NVIC_GetPriorityGrouping+0x18>)
 800748e:	68db      	ldr	r3, [r3, #12]
 8007490:	0a1b      	lsrs	r3, r3, #8
 8007492:	f003 0307 	and.w	r3, r3, #7
}
 8007496:	4618      	mov	r0, r3
 8007498:	46bd      	mov	sp, r7
 800749a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749e:	4770      	bx	lr
 80074a0:	e000ed00 	.word	0xe000ed00

080074a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b083      	sub	sp, #12
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	4603      	mov	r3, r0
 80074ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80074ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	db0b      	blt.n	80074ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80074b6:	79fb      	ldrb	r3, [r7, #7]
 80074b8:	f003 021f 	and.w	r2, r3, #31
 80074bc:	4907      	ldr	r1, [pc, #28]	; (80074dc <__NVIC_EnableIRQ+0x38>)
 80074be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80074c2:	095b      	lsrs	r3, r3, #5
 80074c4:	2001      	movs	r0, #1
 80074c6:	fa00 f202 	lsl.w	r2, r0, r2
 80074ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80074ce:	bf00      	nop
 80074d0:	370c      	adds	r7, #12
 80074d2:	46bd      	mov	sp, r7
 80074d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d8:	4770      	bx	lr
 80074da:	bf00      	nop
 80074dc:	e000e100 	.word	0xe000e100

080074e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80074e0:	b480      	push	{r7}
 80074e2:	b083      	sub	sp, #12
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	4603      	mov	r3, r0
 80074e8:	6039      	str	r1, [r7, #0]
 80074ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80074ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	db0a      	blt.n	800750a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	b2da      	uxtb	r2, r3
 80074f8:	490c      	ldr	r1, [pc, #48]	; (800752c <__NVIC_SetPriority+0x4c>)
 80074fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80074fe:	0112      	lsls	r2, r2, #4
 8007500:	b2d2      	uxtb	r2, r2
 8007502:	440b      	add	r3, r1
 8007504:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007508:	e00a      	b.n	8007520 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	b2da      	uxtb	r2, r3
 800750e:	4908      	ldr	r1, [pc, #32]	; (8007530 <__NVIC_SetPriority+0x50>)
 8007510:	79fb      	ldrb	r3, [r7, #7]
 8007512:	f003 030f 	and.w	r3, r3, #15
 8007516:	3b04      	subs	r3, #4
 8007518:	0112      	lsls	r2, r2, #4
 800751a:	b2d2      	uxtb	r2, r2
 800751c:	440b      	add	r3, r1
 800751e:	761a      	strb	r2, [r3, #24]
}
 8007520:	bf00      	nop
 8007522:	370c      	adds	r7, #12
 8007524:	46bd      	mov	sp, r7
 8007526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752a:	4770      	bx	lr
 800752c:	e000e100 	.word	0xe000e100
 8007530:	e000ed00 	.word	0xe000ed00

08007534 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007534:	b480      	push	{r7}
 8007536:	b089      	sub	sp, #36	; 0x24
 8007538:	af00      	add	r7, sp, #0
 800753a:	60f8      	str	r0, [r7, #12]
 800753c:	60b9      	str	r1, [r7, #8]
 800753e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	f003 0307 	and.w	r3, r3, #7
 8007546:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007548:	69fb      	ldr	r3, [r7, #28]
 800754a:	f1c3 0307 	rsb	r3, r3, #7
 800754e:	2b04      	cmp	r3, #4
 8007550:	bf28      	it	cs
 8007552:	2304      	movcs	r3, #4
 8007554:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007556:	69fb      	ldr	r3, [r7, #28]
 8007558:	3304      	adds	r3, #4
 800755a:	2b06      	cmp	r3, #6
 800755c:	d902      	bls.n	8007564 <NVIC_EncodePriority+0x30>
 800755e:	69fb      	ldr	r3, [r7, #28]
 8007560:	3b03      	subs	r3, #3
 8007562:	e000      	b.n	8007566 <NVIC_EncodePriority+0x32>
 8007564:	2300      	movs	r3, #0
 8007566:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007568:	f04f 32ff 	mov.w	r2, #4294967295
 800756c:	69bb      	ldr	r3, [r7, #24]
 800756e:	fa02 f303 	lsl.w	r3, r2, r3
 8007572:	43da      	mvns	r2, r3
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	401a      	ands	r2, r3
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800757c:	f04f 31ff 	mov.w	r1, #4294967295
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	fa01 f303 	lsl.w	r3, r1, r3
 8007586:	43d9      	mvns	r1, r3
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800758c:	4313      	orrs	r3, r2
         );
}
 800758e:	4618      	mov	r0, r3
 8007590:	3724      	adds	r7, #36	; 0x24
 8007592:	46bd      	mov	sp, r7
 8007594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007598:	4770      	bx	lr

0800759a <LL_USART_Enable>:
{
 800759a:	b480      	push	{r7}
 800759c:	b083      	sub	sp, #12
 800759e:	af00      	add	r7, sp, #0
 80075a0:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f043 0201 	orr.w	r2, r3, #1
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	601a      	str	r2, [r3, #0]
}
 80075ae:	bf00      	nop
 80075b0:	370c      	adds	r7, #12
 80075b2:	46bd      	mov	sp, r7
 80075b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b8:	4770      	bx	lr

080075ba <LL_USART_DisableOverrunDetect>:
{
 80075ba:	b480      	push	{r7}
 80075bc:	b083      	sub	sp, #12
 80075be:	af00      	add	r7, sp, #0
 80075c0:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_OVRDIS);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	689b      	ldr	r3, [r3, #8]
 80075c6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	609a      	str	r2, [r3, #8]
}
 80075ce:	bf00      	nop
 80075d0:	370c      	adds	r7, #12
 80075d2:	46bd      	mov	sp, r7
 80075d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d8:	4770      	bx	lr

080075da <LL_USART_ConfigAsyncMode>:
{
 80075da:	b480      	push	{r7}
 80075dc:	b083      	sub	sp, #12
 80075de:	af00      	add	r7, sp, #0
 80075e0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	685b      	ldr	r3, [r3, #4]
 80075e6:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	689b      	ldr	r3, [r3, #8]
 80075f2:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	609a      	str	r2, [r3, #8]
}
 80075fa:	bf00      	nop
 80075fc:	370c      	adds	r7, #12
 80075fe:	46bd      	mov	sp, r7
 8007600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007604:	4770      	bx	lr
	...

08007608 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8007608:	b480      	push	{r7}
 800760a:	b085      	sub	sp, #20
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8007610:	4b08      	ldr	r3, [pc, #32]	; (8007634 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007612:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007614:	4907      	ldr	r1, [pc, #28]	; (8007634 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	4313      	orrs	r3, r2
 800761a:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800761c:	4b05      	ldr	r3, [pc, #20]	; (8007634 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800761e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	4013      	ands	r3, r2
 8007624:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007626:	68fb      	ldr	r3, [r7, #12]
}
 8007628:	bf00      	nop
 800762a:	3714      	adds	r7, #20
 800762c:	46bd      	mov	sp, r7
 800762e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007632:	4770      	bx	lr
 8007634:	40021000 	.word	0x40021000

08007638 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8007638:	b480      	push	{r7}
 800763a:	b085      	sub	sp, #20
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8007640:	4b08      	ldr	r3, [pc, #32]	; (8007664 <LL_APB1_GRP1_EnableClock+0x2c>)
 8007642:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007644:	4907      	ldr	r1, [pc, #28]	; (8007664 <LL_APB1_GRP1_EnableClock+0x2c>)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	4313      	orrs	r3, r2
 800764a:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800764c:	4b05      	ldr	r3, [pc, #20]	; (8007664 <LL_APB1_GRP1_EnableClock+0x2c>)
 800764e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	4013      	ands	r3, r2
 8007654:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007656:	68fb      	ldr	r3, [r7, #12]
}
 8007658:	bf00      	nop
 800765a:	3714      	adds	r7, #20
 800765c:	46bd      	mov	sp, r7
 800765e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007662:	4770      	bx	lr
 8007664:	40021000 	.word	0x40021000

08007668 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8007668:	b480      	push	{r7}
 800766a:	b085      	sub	sp, #20
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8007670:	4b08      	ldr	r3, [pc, #32]	; (8007694 <LL_APB2_GRP1_EnableClock+0x2c>)
 8007672:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007674:	4907      	ldr	r1, [pc, #28]	; (8007694 <LL_APB2_GRP1_EnableClock+0x2c>)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	4313      	orrs	r3, r2
 800767a:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800767c:	4b05      	ldr	r3, [pc, #20]	; (8007694 <LL_APB2_GRP1_EnableClock+0x2c>)
 800767e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	4013      	ands	r3, r2
 8007684:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007686:	68fb      	ldr	r3, [r7, #12]
}
 8007688:	bf00      	nop
 800768a:	3714      	adds	r7, #20
 800768c:	46bd      	mov	sp, r7
 800768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007692:	4770      	bx	lr
 8007694:	40021000 	.word	0x40021000

08007698 <MX_USART1_UART_Init>:
/* USER CODE END 0 */

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b0a6      	sub	sp, #152	; 0x98
 800769c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800769e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80076a2:	2200      	movs	r2, #0
 80076a4:	601a      	str	r2, [r3, #0]
 80076a6:	605a      	str	r2, [r3, #4]
 80076a8:	609a      	str	r2, [r3, #8]
 80076aa:	60da      	str	r2, [r3, #12]
 80076ac:	611a      	str	r2, [r3, #16]
 80076ae:	615a      	str	r2, [r3, #20]
 80076b0:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80076b2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80076b6:	2200      	movs	r2, #0
 80076b8:	601a      	str	r2, [r3, #0]
 80076ba:	605a      	str	r2, [r3, #4]
 80076bc:	609a      	str	r2, [r3, #8]
 80076be:	60da      	str	r2, [r3, #12]
 80076c0:	611a      	str	r2, [r3, #16]
 80076c2:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80076c4:	1d3b      	adds	r3, r7, #4
 80076c6:	2260      	movs	r2, #96	; 0x60
 80076c8:	2100      	movs	r1, #0
 80076ca:	4618      	mov	r0, r3
 80076cc:	f00c fd06 	bl	80140dc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80076d0:	2301      	movs	r3, #1
 80076d2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80076d4:	2300      	movs	r3, #0
 80076d6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80076d8:	1d3b      	adds	r3, r7, #4
 80076da:	4618      	mov	r0, r3
 80076dc:	f008 fe1e 	bl	801031c <HAL_RCCEx_PeriphCLKConfig>
 80076e0:	4603      	mov	r3, r0
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d001      	beq.n	80076ea <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80076e6:	f7fc ff50 	bl	800458a <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 80076ea:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80076ee:	f7ff ffbb 	bl	8007668 <LL_APB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80076f2:	2001      	movs	r0, #1
 80076f4:	f7ff ff88 	bl	8007608 <LL_AHB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 80076f8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80076fc:	667b      	str	r3, [r7, #100]	; 0x64
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80076fe:	2302      	movs	r3, #2
 8007700:	66bb      	str	r3, [r7, #104]	; 0x68
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8007702:	2303      	movs	r3, #3
 8007704:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007706:	2300      	movs	r3, #0
 8007708:	673b      	str	r3, [r7, #112]	; 0x70
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800770a:	2300      	movs	r3, #0
 800770c:	677b      	str	r3, [r7, #116]	; 0x74
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800770e:	2307      	movs	r3, #7
 8007710:	67bb      	str	r3, [r7, #120]	; 0x78
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007712:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8007716:	4619      	mov	r1, r3
 8007718:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800771c:	f00b feac 	bl	8013478 <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0));
 8007720:	f7ff feb2 	bl	8007488 <__NVIC_GetPriorityGrouping>
 8007724:	4603      	mov	r3, r0
 8007726:	2200      	movs	r2, #0
 8007728:	2102      	movs	r1, #2
 800772a:	4618      	mov	r0, r3
 800772c:	f7ff ff02 	bl	8007534 <NVIC_EncodePriority>
 8007730:	4603      	mov	r3, r0
 8007732:	4619      	mov	r1, r3
 8007734:	2025      	movs	r0, #37	; 0x25
 8007736:	f7ff fed3 	bl	80074e0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 800773a:	2025      	movs	r0, #37	; 0x25
 800773c:	f7ff feb2 	bl	80074a4 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8007740:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8007744:	67fb      	str	r3, [r7, #124]	; 0x7c
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8007746:	2300      	movs	r3, #0
 8007748:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800774c:	2300      	movs	r3, #0
 800774e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8007752:	2300      	movs	r3, #0
 8007754:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8007758:	230c      	movs	r3, #12
 800775a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800775e:	2300      	movs	r3, #0
 8007760:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8007764:	2300      	movs	r3, #0
 8007766:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  LL_USART_Init(USART1, &USART_InitStruct);
 800776a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800776e:	4619      	mov	r1, r3
 8007770:	4807      	ldr	r0, [pc, #28]	; (8007790 <MX_USART1_UART_Init+0xf8>)
 8007772:	f00c fb47 	bl	8013e04 <LL_USART_Init>
  LL_USART_DisableOverrunDetect(USART1);
 8007776:	4806      	ldr	r0, [pc, #24]	; (8007790 <MX_USART1_UART_Init+0xf8>)
 8007778:	f7ff ff1f 	bl	80075ba <LL_USART_DisableOverrunDetect>
  LL_USART_ConfigAsyncMode(USART1);
 800777c:	4804      	ldr	r0, [pc, #16]	; (8007790 <MX_USART1_UART_Init+0xf8>)
 800777e:	f7ff ff2c 	bl	80075da <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8007782:	4803      	ldr	r0, [pc, #12]	; (8007790 <MX_USART1_UART_Init+0xf8>)
 8007784:	f7ff ff09 	bl	800759a <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8007788:	bf00      	nop
 800778a:	3798      	adds	r7, #152	; 0x98
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}
 8007790:	40013800 	.word	0x40013800

08007794 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b0a6      	sub	sp, #152	; 0x98
 8007798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800779a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800779e:	2200      	movs	r2, #0
 80077a0:	601a      	str	r2, [r3, #0]
 80077a2:	605a      	str	r2, [r3, #4]
 80077a4:	609a      	str	r2, [r3, #8]
 80077a6:	60da      	str	r2, [r3, #12]
 80077a8:	611a      	str	r2, [r3, #16]
 80077aa:	615a      	str	r2, [r3, #20]
 80077ac:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80077ae:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80077b2:	2200      	movs	r2, #0
 80077b4:	601a      	str	r2, [r3, #0]
 80077b6:	605a      	str	r2, [r3, #4]
 80077b8:	609a      	str	r2, [r3, #8]
 80077ba:	60da      	str	r2, [r3, #12]
 80077bc:	611a      	str	r2, [r3, #16]
 80077be:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80077c0:	1d3b      	adds	r3, r7, #4
 80077c2:	2260      	movs	r2, #96	; 0x60
 80077c4:	2100      	movs	r1, #0
 80077c6:	4618      	mov	r0, r3
 80077c8:	f00c fc88 	bl	80140dc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80077cc:	2302      	movs	r3, #2
 80077ce:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80077d0:	2300      	movs	r3, #0
 80077d2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80077d4:	1d3b      	adds	r3, r7, #4
 80077d6:	4618      	mov	r0, r3
 80077d8:	f008 fda0 	bl	801031c <HAL_RCCEx_PeriphCLKConfig>
 80077dc:	4603      	mov	r3, r0
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d001      	beq.n	80077e6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80077e2:	f7fc fed2 	bl	800458a <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 80077e6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80077ea:	f7ff ff25 	bl	8007638 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80077ee:	2001      	movs	r0, #1
 80077f0:	f7ff ff0a 	bl	8007608 <LL_AHB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 80077f4:	230c      	movs	r3, #12
 80077f6:	667b      	str	r3, [r7, #100]	; 0x64
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80077f8:	2302      	movs	r3, #2
 80077fa:	66bb      	str	r3, [r7, #104]	; 0x68
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80077fc:	2303      	movs	r3, #3
 80077fe:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007800:	2300      	movs	r3, #0
 8007802:	673b      	str	r3, [r7, #112]	; 0x70
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007804:	2300      	movs	r3, #0
 8007806:	677b      	str	r3, [r7, #116]	; 0x74
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8007808:	2307      	movs	r3, #7
 800780a:	67bb      	str	r3, [r7, #120]	; 0x78
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800780c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8007810:	4619      	mov	r1, r3
 8007812:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007816:	f00b fe2f 	bl	8013478 <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800781a:	f7ff fe35 	bl	8007488 <__NVIC_GetPriorityGrouping>
 800781e:	4603      	mov	r3, r0
 8007820:	2200      	movs	r2, #0
 8007822:	2100      	movs	r1, #0
 8007824:	4618      	mov	r0, r3
 8007826:	f7ff fe85 	bl	8007534 <NVIC_EncodePriority>
 800782a:	4603      	mov	r3, r0
 800782c:	4619      	mov	r1, r3
 800782e:	2026      	movs	r0, #38	; 0x26
 8007830:	f7ff fe56 	bl	80074e0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8007834:	2026      	movs	r0, #38	; 0x26
 8007836:	f7ff fe35 	bl	80074a4 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 9600;
 800783a:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800783e:	67fb      	str	r3, [r7, #124]	; 0x7c
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8007840:	2300      	movs	r3, #0
 8007842:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8007846:	2300      	movs	r3, #0
 8007848:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800784c:	2300      	movs	r3, #0
 800784e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8007852:	230c      	movs	r3, #12
 8007854:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8007858:	2300      	movs	r3, #0
 800785a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800785e:	2300      	movs	r3, #0
 8007860:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  LL_USART_Init(USART2, &USART_InitStruct);
 8007864:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8007868:	4619      	mov	r1, r3
 800786a:	4806      	ldr	r0, [pc, #24]	; (8007884 <MX_USART2_UART_Init+0xf0>)
 800786c:	f00c faca 	bl	8013e04 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8007870:	4804      	ldr	r0, [pc, #16]	; (8007884 <MX_USART2_UART_Init+0xf0>)
 8007872:	f7ff feb2 	bl	80075da <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8007876:	4803      	ldr	r0, [pc, #12]	; (8007884 <MX_USART2_UART_Init+0xf0>)
 8007878:	f7ff fe8f 	bl	800759a <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800787c:	bf00      	nop
 800787e:	3798      	adds	r7, #152	; 0x98
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}
 8007884:	40004400 	.word	0x40004400

08007888 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b0a6      	sub	sp, #152	; 0x98
 800788c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800788e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8007892:	2200      	movs	r2, #0
 8007894:	601a      	str	r2, [r3, #0]
 8007896:	605a      	str	r2, [r3, #4]
 8007898:	609a      	str	r2, [r3, #8]
 800789a:	60da      	str	r2, [r3, #12]
 800789c:	611a      	str	r2, [r3, #16]
 800789e:	615a      	str	r2, [r3, #20]
 80078a0:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80078a2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80078a6:	2200      	movs	r2, #0
 80078a8:	601a      	str	r2, [r3, #0]
 80078aa:	605a      	str	r2, [r3, #4]
 80078ac:	609a      	str	r2, [r3, #8]
 80078ae:	60da      	str	r2, [r3, #12]
 80078b0:	611a      	str	r2, [r3, #16]
 80078b2:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80078b4:	1d3b      	adds	r3, r7, #4
 80078b6:	2260      	movs	r2, #96	; 0x60
 80078b8:	2100      	movs	r1, #0
 80078ba:	4618      	mov	r0, r3
 80078bc:	f00c fc0e 	bl	80140dc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80078c0:	2304      	movs	r3, #4
 80078c2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80078c4:	2300      	movs	r3, #0
 80078c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80078c8:	1d3b      	adds	r3, r7, #4
 80078ca:	4618      	mov	r0, r3
 80078cc:	f008 fd26 	bl	801031c <HAL_RCCEx_PeriphCLKConfig>
 80078d0:	4603      	mov	r3, r0
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d001      	beq.n	80078da <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80078d6:	f7fc fe58 	bl	800458a <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 80078da:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80078de:	f7ff feab 	bl	8007638 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80078e2:	2002      	movs	r0, #2
 80078e4:	f7ff fe90 	bl	8007608 <LL_AHB2_GRP1_EnableClock>
  /**USART3 GPIO Configuration
  PB10   ------> USART3_TX
  PB11   ------> USART3_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11;
 80078e8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80078ec:	667b      	str	r3, [r7, #100]	; 0x64
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80078ee:	2302      	movs	r3, #2
 80078f0:	66bb      	str	r3, [r7, #104]	; 0x68
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80078f2:	2303      	movs	r3, #3
 80078f4:	66fb      	str	r3, [r7, #108]	; 0x6c
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80078f6:	2300      	movs	r3, #0
 80078f8:	673b      	str	r3, [r7, #112]	; 0x70
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80078fa:	2300      	movs	r3, #0
 80078fc:	677b      	str	r3, [r7, #116]	; 0x74
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80078fe:	2307      	movs	r3, #7
 8007900:	67bb      	str	r3, [r7, #120]	; 0x78
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007902:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8007906:	4619      	mov	r1, r3
 8007908:	481d      	ldr	r0, [pc, #116]	; (8007980 <MX_USART3_UART_Init+0xf8>)
 800790a:	f00b fdb5 	bl	8013478 <LL_GPIO_Init>

  /* USART3 interrupt Init */
  NVIC_SetPriority(USART3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800790e:	f7ff fdbb 	bl	8007488 <__NVIC_GetPriorityGrouping>
 8007912:	4603      	mov	r3, r0
 8007914:	2200      	movs	r2, #0
 8007916:	2100      	movs	r1, #0
 8007918:	4618      	mov	r0, r3
 800791a:	f7ff fe0b 	bl	8007534 <NVIC_EncodePriority>
 800791e:	4603      	mov	r3, r0
 8007920:	4619      	mov	r1, r3
 8007922:	2027      	movs	r0, #39	; 0x27
 8007924:	f7ff fddc 	bl	80074e0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART3_IRQn);
 8007928:	2027      	movs	r0, #39	; 0x27
 800792a:	f7ff fdbb 	bl	80074a4 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.BaudRate = 9600;
 800792e:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8007932:	67fb      	str	r3, [r7, #124]	; 0x7c
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8007934:	2300      	movs	r3, #0
 8007936:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800793a:	2300      	movs	r3, #0
 800793c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8007940:	2300      	movs	r3, #0
 8007942:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8007946:	230c      	movs	r3, #12
 8007948:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800794c:	2300      	movs	r3, #0
 800794e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8007952:	2300      	movs	r3, #0
 8007954:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  LL_USART_Init(USART3, &USART_InitStruct);
 8007958:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800795c:	4619      	mov	r1, r3
 800795e:	4809      	ldr	r0, [pc, #36]	; (8007984 <MX_USART3_UART_Init+0xfc>)
 8007960:	f00c fa50 	bl	8013e04 <LL_USART_Init>
  LL_USART_DisableOverrunDetect(USART3);
 8007964:	4807      	ldr	r0, [pc, #28]	; (8007984 <MX_USART3_UART_Init+0xfc>)
 8007966:	f7ff fe28 	bl	80075ba <LL_USART_DisableOverrunDetect>
  LL_USART_ConfigAsyncMode(USART3);
 800796a:	4806      	ldr	r0, [pc, #24]	; (8007984 <MX_USART3_UART_Init+0xfc>)
 800796c:	f7ff fe35 	bl	80075da <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 8007970:	4804      	ldr	r0, [pc, #16]	; (8007984 <MX_USART3_UART_Init+0xfc>)
 8007972:	f7ff fe12 	bl	800759a <LL_USART_Enable>
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8007976:	bf00      	nop
 8007978:	3798      	adds	r7, #152	; 0x98
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}
 800797e:	bf00      	nop
 8007980:	48000400 	.word	0x48000400
 8007984:	40004800 	.word	0x40004800

08007988 <SubRevicedString>:


#include "user_MqttSubSperator.h"

void SubRevicedString()
{//$,054061957514975180815242966,2,3,D1,1,@
 8007988:	b580      	push	{r7, lr}
 800798a:	b0ac      	sub	sp, #176	; 0xb0
 800798c:	af00      	add	r7, sp, #0
	uint16_t key = 0;
 800798e:	2300      	movs	r3, #0
 8007990:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
	char gau8TempSUBRequest[150] = {'0'};
 8007994:	2330      	movs	r3, #48	; 0x30
 8007996:	607b      	str	r3, [r7, #4]
 8007998:	f107 0308 	add.w	r3, r7, #8
 800799c:	2292      	movs	r2, #146	; 0x92
 800799e:	2100      	movs	r1, #0
 80079a0:	4618      	mov	r0, r3
 80079a2:	f00c fb9b 	bl	80140dc <memset>
	char *token = NULL;
 80079a6:	2300      	movs	r3, #0
 80079a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	token = strtok(gau8SUBRequest,",");//$
 80079ac:	4942      	ldr	r1, [pc, #264]	; (8007ab8 <SubRevicedString+0x130>)
 80079ae:	4843      	ldr	r0, [pc, #268]	; (8007abc <SubRevicedString+0x134>)
 80079b0:	f00d ff74 	bl	801589c <strtok>
 80079b4:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
	token = strtok(NULL,",");//HW
 80079b8:	493f      	ldr	r1, [pc, #252]	; (8007ab8 <SubRevicedString+0x130>)
 80079ba:	2000      	movs	r0, #0
 80079bc:	f00d ff6e 	bl	801589c <strtok>
 80079c0:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
	token = strtok(NULL,",");//2way
 80079c4:	493c      	ldr	r1, [pc, #240]	; (8007ab8 <SubRevicedString+0x130>)
 80079c6:	2000      	movs	r0, #0
 80079c8:	f00d ff68 	bl	801589c <strtok>
 80079cc:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
	token = strtok(NULL,",");//Operation
 80079d0:	4939      	ldr	r1, [pc, #228]	; (8007ab8 <SubRevicedString+0x130>)
 80079d2:	2000      	movs	r0, #0
 80079d4:	f00d ff62 	bl	801589c <strtok>
 80079d8:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
	key = atoi(token);
 80079dc:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 80079e0:	f00c fb11 	bl	8014006 <atoi>
 80079e4:	4603      	mov	r3, r0
 80079e6:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
	switch (key)
 80079ea:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 80079ee:	2b08      	cmp	r3, #8
 80079f0:	d154      	bne.n	8007a9c <SubRevicedString+0x114>
	{
		case enmSUBSTRINGINDETIFY_FOTA:
		{
			token = strtok(NULL,",");//Data
 80079f2:	4931      	ldr	r1, [pc, #196]	; (8007ab8 <SubRevicedString+0x130>)
 80079f4:	2000      	movs	r0, #0
 80079f6:	f00d ff51 	bl	801589c <strtok>
 80079fa:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
			memset(gau8TempSUBRequest,0x00,sizeof(gau8TempSUBRequest));
 80079fe:	1d3b      	adds	r3, r7, #4
 8007a00:	2296      	movs	r2, #150	; 0x96
 8007a02:	2100      	movs	r1, #0
 8007a04:	4618      	mov	r0, r3
 8007a06:	f00c fb69 	bl	80140dc <memset>
			memcpy(gau8TempSUBRequest, token, strlen(strtok(token,",")));
 8007a0a:	492b      	ldr	r1, [pc, #172]	; (8007ab8 <SubRevicedString+0x130>)
 8007a0c:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8007a10:	f00d ff44 	bl	801589c <strtok>
 8007a14:	4603      	mov	r3, r0
 8007a16:	4618      	mov	r0, r3
 8007a18:	f7f8 ffe4 	bl	80009e4 <strlen>
 8007a1c:	4602      	mov	r2, r0
 8007a1e:	1d3b      	adds	r3, r7, #4
 8007a20:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8007a24:	4618      	mov	r0, r3
 8007a26:	f00c fb4b 	bl	80140c0 <memcpy>

			const char *URL = strstr(gau8TempSUBRequest,"http");
 8007a2a:	1d3b      	adds	r3, r7, #4
 8007a2c:	4924      	ldr	r1, [pc, #144]	; (8007ac0 <SubRevicedString+0x138>)
 8007a2e:	4618      	mov	r0, r3
 8007a30:	f00d f8e9 	bl	8014c06 <strstr>
 8007a34:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
			const char *BIN = strstr(gau8TempSUBRequest,".bin");
 8007a38:	1d3b      	adds	r3, r7, #4
 8007a3a:	4922      	ldr	r1, [pc, #136]	; (8007ac4 <SubRevicedString+0x13c>)
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	f00d f8e2 	bl	8014c06 <strstr>
 8007a42:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
			const size_t mlen = BIN - URL;
 8007a46:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8007a4a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007a4e:	1ad3      	subs	r3, r2, r3
 8007a50:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			Diagnostic(enmDiagnostic_FOTA_REQ_RX);
 8007a54:	2004      	movs	r0, #4
 8007a56:	f7fd fc2d 	bl	80052b4 <Diagnostic>
			gu32FotaRquestFlag = TRUE;
 8007a5a:	4b1b      	ldr	r3, [pc, #108]	; (8007ac8 <SubRevicedString+0x140>)
 8007a5c:	2201      	movs	r2, #1
 8007a5e:	601a      	str	r2, [r3, #0]
			if((URL != NULL) && (BIN != NULL))
 8007a60:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d015      	beq.n	8007a94 <SubRevicedString+0x10c>
 8007a68:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d011      	beq.n	8007a94 <SubRevicedString+0x10c>
			{
				memset(gau8FotaURL,0x00,sizeof(gau8FotaURL));
 8007a70:	2264      	movs	r2, #100	; 0x64
 8007a72:	2100      	movs	r1, #0
 8007a74:	4815      	ldr	r0, [pc, #84]	; (8007acc <SubRevicedString+0x144>)
 8007a76:	f00c fb31 	bl	80140dc <memset>
				memcpy(gau8FotaURL,URL,mlen+4);
 8007a7a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007a7e:	3304      	adds	r3, #4
 8007a80:	461a      	mov	r2, r3
 8007a82:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007a86:	4811      	ldr	r0, [pc, #68]	; (8007acc <SubRevicedString+0x144>)
 8007a88:	f00c fb1a 	bl	80140c0 <memcpy>
				gu32FotaRquestFlag = TRUE;
 8007a8c:	4b0e      	ldr	r3, [pc, #56]	; (8007ac8 <SubRevicedString+0x140>)
 8007a8e:	2201      	movs	r2, #1
 8007a90:	601a      	str	r2, [r3, #0]
			else
			{
			  SUBTriggerFlag = FALSE;
			}
		}
			break;
 8007a92:	e007      	b.n	8007aa4 <SubRevicedString+0x11c>
			  SUBTriggerFlag = FALSE;
 8007a94:	4b0e      	ldr	r3, [pc, #56]	; (8007ad0 <SubRevicedString+0x148>)
 8007a96:	2200      	movs	r2, #0
 8007a98:	701a      	strb	r2, [r3, #0]
			break;
 8007a9a:	e003      	b.n	8007aa4 <SubRevicedString+0x11c>
////				Diagnostic(enmDiagnostic_IMOBI_REQ_RX);
//			}

			break;
		default:
			SUBTriggerFlag = FALSE;
 8007a9c:	4b0c      	ldr	r3, [pc, #48]	; (8007ad0 <SubRevicedString+0x148>)
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	701a      	strb	r2, [r3, #0]
			break;
 8007aa2:	bf00      	nop
	}


	memset(gau8SUBRequest,0x00,sizeof(gau8SUBRequest));
 8007aa4:	2296      	movs	r2, #150	; 0x96
 8007aa6:	2100      	movs	r1, #0
 8007aa8:	4804      	ldr	r0, [pc, #16]	; (8007abc <SubRevicedString+0x134>)
 8007aaa:	f00c fb17 	bl	80140dc <memset>
}
 8007aae:	bf00      	nop
 8007ab0:	37b0      	adds	r7, #176	; 0xb0
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}
 8007ab6:	bf00      	nop
 8007ab8:	08018b94 	.word	0x08018b94
 8007abc:	20000058 	.word	0x20000058
 8007ac0:	08018b98 	.word	0x08018b98
 8007ac4:	08018ba0 	.word	0x08018ba0
 8007ac8:	20001738 	.word	0x20001738
 8007acc:	20001848 	.word	0x20001848
 8007ad0:	20001735 	.word	0x20001735

08007ad4 <LL_USART_ReceiveData8>:
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b083      	sub	sp, #12
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007ae0:	b29b      	uxth	r3, r3
 8007ae2:	b2db      	uxtb	r3, r3
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	370c      	adds	r7, #12
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aee:	4770      	bx	lr

08007af0 <RS232_Callback>:
uint16_t RS232len = 0;
//#define RS232_RESPONSE_ARRAY_SIZE     (1000)
uint8_t RS232Buffer[1000] = "";
char buff[RS232_RESPONSE_ARRAY_SIZE] = "";
void RS232_Callback(void)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	af00      	add	r7, sp, #0
//	memset(RS232Buffer,0x00,sizeof(RS232Buffer));
	u8RS232Response = LL_USART_ReceiveData8(USART2);
 8007af4:	480d      	ldr	r0, [pc, #52]	; (8007b2c <RS232_Callback+0x3c>)
 8007af6:	f7ff ffed 	bl	8007ad4 <LL_USART_ReceiveData8>
 8007afa:	4603      	mov	r3, r0
 8007afc:	461a      	mov	r2, r3
 8007afe:	4b0c      	ldr	r3, [pc, #48]	; (8007b30 <RS232_Callback+0x40>)
 8007b00:	701a      	strb	r2, [r3, #0]
//	RS232len = strlen(u8RS232Response);
	RS232Buffer[u8RS232_Response_Character_Counter++]=u8RS232Response;
 8007b02:	4b0c      	ldr	r3, [pc, #48]	; (8007b34 <RS232_Callback+0x44>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	1c5a      	adds	r2, r3, #1
 8007b08:	490a      	ldr	r1, [pc, #40]	; (8007b34 <RS232_Callback+0x44>)
 8007b0a:	600a      	str	r2, [r1, #0]
 8007b0c:	4a08      	ldr	r2, [pc, #32]	; (8007b30 <RS232_Callback+0x40>)
 8007b0e:	7811      	ldrb	r1, [r2, #0]
 8007b10:	4a09      	ldr	r2, [pc, #36]	; (8007b38 <RS232_Callback+0x48>)
 8007b12:	54d1      	strb	r1, [r2, r3]
//	gu32RS232CharacterTimeout = FIVEHUNDRED_MS;
	gu32RS232CharacterTimeout = HUNDRED_MS;
 8007b14:	4b09      	ldr	r3, [pc, #36]	; (8007b3c <RS232_Callback+0x4c>)
 8007b16:	2264      	movs	r2, #100	; 0x64
 8007b18:	601a      	str	r2, [r3, #0]

	if(!u8RS232CharRcv)
 8007b1a:	4b09      	ldr	r3, [pc, #36]	; (8007b40 <RS232_Callback+0x50>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d102      	bne.n	8007b28 <RS232_Callback+0x38>
	{

		u8RS232CharRcv = 1;
 8007b22:	4b07      	ldr	r3, [pc, #28]	; (8007b40 <RS232_Callback+0x50>)
 8007b24:	2201      	movs	r2, #1
 8007b26:	601a      	str	r2, [r3, #0]
//		if(u8RS232_Response_Character_Counter==100)
//			u8RS232_Response_Character_Counter=0;
	}// End of if(!u8RS232CharRcv)
}
 8007b28:	bf00      	nop
 8007b2a:	bd80      	pop	{r7, pc}
 8007b2c:	40004400 	.word	0x40004400
 8007b30:	2000199c 	.word	0x2000199c
 8007b34:	20005f54 	.word	0x20005f54
 8007b38:	200019a0 	.word	0x200019a0
 8007b3c:	200028b4 	.word	0x200028b4
 8007b40:	20001998 	.word	0x20001998

08007b44 <RS232>:

void RS232(void)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	af00      	add	r7, sp, #0

	  if((gu32RS232CharacterTimeout == 0) && (u8RS232CharRcv == 1))
 8007b48:	4b12      	ldr	r3, [pc, #72]	; (8007b94 <RS232+0x50>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d11e      	bne.n	8007b8e <RS232+0x4a>
 8007b50:	4b11      	ldr	r3, [pc, #68]	; (8007b98 <RS232+0x54>)
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	2b01      	cmp	r3, #1
 8007b56:	d11a      	bne.n	8007b8e <RS232+0x4a>
	  {
		  memset(buff,0x00,sizeof(buff));
 8007b58:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007b5c:	2100      	movs	r1, #0
 8007b5e:	480f      	ldr	r0, [pc, #60]	; (8007b9c <RS232+0x58>)
 8007b60:	f00c fabc 	bl	80140dc <memset>
		  memcpy(buff,RS232Buffer, strlen((char*)RS232Buffer));
 8007b64:	480e      	ldr	r0, [pc, #56]	; (8007ba0 <RS232+0x5c>)
 8007b66:	f7f8 ff3d 	bl	80009e4 <strlen>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	461a      	mov	r2, r3
 8007b6e:	490c      	ldr	r1, [pc, #48]	; (8007ba0 <RS232+0x5c>)
 8007b70:	480a      	ldr	r0, [pc, #40]	; (8007b9c <RS232+0x58>)
 8007b72:	f00c faa5 	bl	80140c0 <memcpy>
		  memset(RS232Buffer,0x00,sizeof(RS232Buffer));
 8007b76:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007b7a:	2100      	movs	r1, #0
 8007b7c:	4808      	ldr	r0, [pc, #32]	; (8007ba0 <RS232+0x5c>)
 8007b7e:	f00c faad 	bl	80140dc <memset>
		  u8RS232_Response_Character_Counter = 0;
 8007b82:	4b08      	ldr	r3, [pc, #32]	; (8007ba4 <RS232+0x60>)
 8007b84:	2200      	movs	r2, #0
 8007b86:	601a      	str	r2, [r3, #0]
		  u8RS232CharRcv = 0;
 8007b88:	4b03      	ldr	r3, [pc, #12]	; (8007b98 <RS232+0x54>)
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	601a      	str	r2, [r3, #0]
//		  if(u8RS232_Counter==strlen(RS232Buffer))
//		  {
//			  u8RS232_Response_Character_Counter=0;
//		  }
	  }
}
 8007b8e:	bf00      	nop
 8007b90:	bd80      	pop	{r7, pc}
 8007b92:	bf00      	nop
 8007b94:	200028b4 	.word	0x200028b4
 8007b98:	20001998 	.word	0x20001998
 8007b9c:	20001d88 	.word	0x20001d88
 8007ba0:	200019a0 	.word	0x200019a0
 8007ba4:	20005f54 	.word	0x20005f54

08007ba8 <Adc_FSM>:
 Author            	Date                Remarks
 KloudQ Team        21/01/19			Updated function name as per guidelines, Added info header
******************************************************************************/

void Adc_FSM (void)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b082      	sub	sp, #8
 8007bac:	af00      	add	r7, sp, #0
	static	uint32_t s_u32AdcRawDataTotal[8],s_u32AdcRawData[8];
	static uint32_t s_u32AdcState=ADC_STAE_START_READING;
	static uint32_t s_u32AdcSamplingIndex = 0;
	uint8_t i=0;
 8007bae:	2300      	movs	r3, #0
 8007bb0:	71fb      	strb	r3, [r7, #7]
	float f32TempVar = 0;
 8007bb2:	f04f 0300 	mov.w	r3, #0
 8007bb6:	603b      	str	r3, [r7, #0]
	//uint32_t u32TempValue=0;
	switch(s_u32AdcState)
 8007bb8:	4b79      	ldr	r3, [pc, #484]	; (8007da0 <Adc_FSM+0x1f8>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	3b01      	subs	r3, #1
 8007bbe:	2b03      	cmp	r3, #3
 8007bc0:	f200 80de 	bhi.w	8007d80 <Adc_FSM+0x1d8>
 8007bc4:	a201      	add	r2, pc, #4	; (adr r2, 8007bcc <Adc_FSM+0x24>)
 8007bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bca:	bf00      	nop
 8007bcc:	08007bdd 	.word	0x08007bdd
 8007bd0:	08007bfb 	.word	0x08007bfb
 8007bd4:	08007c6b 	.word	0x08007c6b
 8007bd8:	08007d69 	.word	0x08007d69
	{
		case ADC_STAE_START_READING:
		{
			s_u32AdcConvCpltFlag = 0;
 8007bdc:	4b71      	ldr	r3, [pc, #452]	; (8007da4 <Adc_FSM+0x1fc>)
 8007bde:	2200      	movs	r2, #0
 8007be0:	601a      	str	r2, [r3, #0]
			HAL_ADC_Start_DMA(&hadc1, (uint32_t*)s_u32AdcRawData, 4);
 8007be2:	2204      	movs	r2, #4
 8007be4:	4970      	ldr	r1, [pc, #448]	; (8007da8 <Adc_FSM+0x200>)
 8007be6:	4871      	ldr	r0, [pc, #452]	; (8007dac <Adc_FSM+0x204>)
 8007be8:	f001 ff16 	bl	8009a18 <HAL_ADC_Start_DMA>
			gu32ADCRestartTimer = 0;
 8007bec:	4b70      	ldr	r3, [pc, #448]	; (8007db0 <Adc_FSM+0x208>)
 8007bee:	2200      	movs	r2, #0
 8007bf0:	601a      	str	r2, [r3, #0]
			s_u32AdcState = ADC_STATE_WAIT;
 8007bf2:	4b6b      	ldr	r3, [pc, #428]	; (8007da0 <Adc_FSM+0x1f8>)
 8007bf4:	2202      	movs	r2, #2
 8007bf6:	601a      	str	r2, [r3, #0]
		}break;
 8007bf8:	e0ce      	b.n	8007d98 <Adc_FSM+0x1f0>
		case ADC_STATE_WAIT:
		{
			if(s_u32AdcConvCpltFlag != 0)
 8007bfa:	4b6a      	ldr	r3, [pc, #424]	; (8007da4 <Adc_FSM+0x1fc>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	f000 80c5 	beq.w	8007d8e <Adc_FSM+0x1e6>
			{
				s_u32AdcConvCpltFlag = 0;
 8007c04:	4b67      	ldr	r3, [pc, #412]	; (8007da4 <Adc_FSM+0x1fc>)
 8007c06:	2200      	movs	r2, #0
 8007c08:	601a      	str	r2, [r3, #0]
				for(i=0;i<4;i++)
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	71fb      	strb	r3, [r7, #7]
 8007c0e:	e00f      	b.n	8007c30 <Adc_FSM+0x88>
				{
					s_u32AdcRawDataTotal[i] += s_u32AdcRawData[i];
 8007c10:	79fb      	ldrb	r3, [r7, #7]
 8007c12:	4a68      	ldr	r2, [pc, #416]	; (8007db4 <Adc_FSM+0x20c>)
 8007c14:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007c18:	79fb      	ldrb	r3, [r7, #7]
 8007c1a:	4a63      	ldr	r2, [pc, #396]	; (8007da8 <Adc_FSM+0x200>)
 8007c1c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007c20:	79fb      	ldrb	r3, [r7, #7]
 8007c22:	440a      	add	r2, r1
 8007c24:	4963      	ldr	r1, [pc, #396]	; (8007db4 <Adc_FSM+0x20c>)
 8007c26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				for(i=0;i<4;i++)
 8007c2a:	79fb      	ldrb	r3, [r7, #7]
 8007c2c:	3301      	adds	r3, #1
 8007c2e:	71fb      	strb	r3, [r7, #7]
 8007c30:	79fb      	ldrb	r3, [r7, #7]
 8007c32:	2b03      	cmp	r3, #3
 8007c34:	d9ec      	bls.n	8007c10 <Adc_FSM+0x68>
				}

				for(i=0;i<4;i++)
 8007c36:	2300      	movs	r3, #0
 8007c38:	71fb      	strb	r3, [r7, #7]
 8007c3a:	e007      	b.n	8007c4c <Adc_FSM+0xa4>
				{
					s_u32AdcRawData[i] = 0;
 8007c3c:	79fb      	ldrb	r3, [r7, #7]
 8007c3e:	4a5a      	ldr	r2, [pc, #360]	; (8007da8 <Adc_FSM+0x200>)
 8007c40:	2100      	movs	r1, #0
 8007c42:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for(i=0;i<4;i++)
 8007c46:	79fb      	ldrb	r3, [r7, #7]
 8007c48:	3301      	adds	r3, #1
 8007c4a:	71fb      	strb	r3, [r7, #7]
 8007c4c:	79fb      	ldrb	r3, [r7, #7]
 8007c4e:	2b03      	cmp	r3, #3
 8007c50:	d9f4      	bls.n	8007c3c <Adc_FSM+0x94>
				}

				s_u32AdcSamplingIndex++;
 8007c52:	4b59      	ldr	r3, [pc, #356]	; (8007db8 <Adc_FSM+0x210>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	3301      	adds	r3, #1
 8007c58:	4a57      	ldr	r2, [pc, #348]	; (8007db8 <Adc_FSM+0x210>)
 8007c5a:	6013      	str	r3, [r2, #0]
				gu32ADCRestartTimer = TEN_MS;
 8007c5c:	4b54      	ldr	r3, [pc, #336]	; (8007db0 <Adc_FSM+0x208>)
 8007c5e:	220a      	movs	r2, #10
 8007c60:	601a      	str	r2, [r3, #0]
				s_u32AdcState = ADC_STATE_CALC;
 8007c62:	4b4f      	ldr	r3, [pc, #316]	; (8007da0 <Adc_FSM+0x1f8>)
 8007c64:	2203      	movs	r2, #3
 8007c66:	601a      	str	r2, [r3, #0]
			}
		}break;
 8007c68:	e091      	b.n	8007d8e <Adc_FSM+0x1e6>
		case ADC_STATE_CALC:
		{
			if(s_u32AdcSamplingIndex >= ADC_AVG_SAMPLE_COUNT)
 8007c6a:	4b53      	ldr	r3, [pc, #332]	; (8007db8 <Adc_FSM+0x210>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	2bf9      	cmp	r3, #249	; 0xf9
 8007c70:	d972      	bls.n	8007d58 <Adc_FSM+0x1b0>
			{
				s_u32AdcSamplingIndex = 0;
 8007c72:	4b51      	ldr	r3, [pc, #324]	; (8007db8 <Adc_FSM+0x210>)
 8007c74:	2200      	movs	r2, #0
 8007c76:	601a      	str	r2, [r3, #0]
				//Avg All AIRawData
				for(i=0;i<5;i++)
 8007c78:	2300      	movs	r3, #0
 8007c7a:	71fb      	strb	r3, [r7, #7]
 8007c7c:	e00e      	b.n	8007c9c <Adc_FSM+0xf4>
				{
					s_u32AdcRawDataTotal[i] /= ADC_AVG_SAMPLE_COUNT;
 8007c7e:	79fb      	ldrb	r3, [r7, #7]
 8007c80:	4a4c      	ldr	r2, [pc, #304]	; (8007db4 <Adc_FSM+0x20c>)
 8007c82:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007c86:	79fb      	ldrb	r3, [r7, #7]
 8007c88:	494c      	ldr	r1, [pc, #304]	; (8007dbc <Adc_FSM+0x214>)
 8007c8a:	fba1 1202 	umull	r1, r2, r1, r2
 8007c8e:	0912      	lsrs	r2, r2, #4
 8007c90:	4948      	ldr	r1, [pc, #288]	; (8007db4 <Adc_FSM+0x20c>)
 8007c92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				for(i=0;i<5;i++)
 8007c96:	79fb      	ldrb	r3, [r7, #7]
 8007c98:	3301      	adds	r3, #1
 8007c9a:	71fb      	strb	r3, [r7, #7]
 8007c9c:	79fb      	ldrb	r3, [r7, #7]
 8007c9e:	2b04      	cmp	r3, #4
 8007ca0:	d9ed      	bls.n	8007c7e <Adc_FSM+0xd6>
				}

				/*1 ADC BATT*/
				f32TempVar = 0;
 8007ca2:	f04f 0300 	mov.w	r3, #0
 8007ca6:	603b      	str	r3, [r7, #0]
				f32TempVar = ((float)s_u32AdcRawDataTotal[0]*(float)3.3)*(float)1.5;
 8007ca8:	4b42      	ldr	r3, [pc, #264]	; (8007db4 <Adc_FSM+0x20c>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	ee07 3a90 	vmov	s15, r3
 8007cb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cb4:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8007dc0 <Adc_FSM+0x218>
 8007cb8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007cbc:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8007cc0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007cc4:	edc7 7a00 	vstr	s15, [r7]
				f32TempVar /= (float)4095;
 8007cc8:	ed97 7a00 	vldr	s14, [r7]
 8007ccc:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007dc4 <Adc_FSM+0x21c>
 8007cd0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007cd4:	edc7 7a00 	vstr	s15, [r7]
				g_stAdcData.u32IntBatVtg =  f32TempVar;//*(float)1000.0;//Volt to Mili Volt
 8007cd8:	4a3b      	ldr	r2, [pc, #236]	; (8007dc8 <Adc_FSM+0x220>)
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	60d3      	str	r3, [r2, #12]

				/*2&3 AI1 And AI2 Raw data*/
				g_stAdcData.u32AI1RawData = s_u32AdcRawDataTotal[2];
 8007cde:	4b35      	ldr	r3, [pc, #212]	; (8007db4 <Adc_FSM+0x20c>)
 8007ce0:	689b      	ldr	r3, [r3, #8]
 8007ce2:	4a39      	ldr	r2, [pc, #228]	; (8007dc8 <Adc_FSM+0x220>)
 8007ce4:	6013      	str	r3, [r2, #0]

				g_stAdcData.u32AI2RawData = s_u32AdcRawDataTotal[1];
 8007ce6:	4b33      	ldr	r3, [pc, #204]	; (8007db4 <Adc_FSM+0x20c>)
 8007ce8:	685b      	ldr	r3, [r3, #4]
 8007cea:	4a37      	ldr	r2, [pc, #220]	; (8007dc8 <Adc_FSM+0x220>)
 8007cec:	6053      	str	r3, [r2, #4]

				/*4 Vin */
				f32TempVar = 0;
 8007cee:	f04f 0300 	mov.w	r3, #0
 8007cf2:	603b      	str	r3, [r7, #0]
				s_u32AdcRawDataTotal[3] += (uint32_t)80;
 8007cf4:	4b2f      	ldr	r3, [pc, #188]	; (8007db4 <Adc_FSM+0x20c>)
 8007cf6:	68db      	ldr	r3, [r3, #12]
 8007cf8:	3350      	adds	r3, #80	; 0x50
 8007cfa:	4a2e      	ldr	r2, [pc, #184]	; (8007db4 <Adc_FSM+0x20c>)
 8007cfc:	60d3      	str	r3, [r2, #12]
				/*
				 As per Discuss with milind vaze we need add 80 ADC Count for match the reading as diode Drop*/
				f32TempVar = (float)(s_u32AdcRawDataTotal[3])*(float)3.3*(float)37.58536585;
 8007cfe:	4b2d      	ldr	r3, [pc, #180]	; (8007db4 <Adc_FSM+0x20c>)
 8007d00:	68db      	ldr	r3, [r3, #12]
 8007d02:	ee07 3a90 	vmov	s15, r3
 8007d06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d0a:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8007dc0 <Adc_FSM+0x218>
 8007d0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007d12:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8007dcc <Adc_FSM+0x224>
 8007d16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007d1a:	edc7 7a00 	vstr	s15, [r7]
				f32TempVar /= (float)4095;
 8007d1e:	ed97 7a00 	vldr	s14, [r7]
 8007d22:	eddf 6a28 	vldr	s13, [pc, #160]	; 8007dc4 <Adc_FSM+0x21c>
 8007d26:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007d2a:	edc7 7a00 	vstr	s15, [r7]
//				f32TempVar += (float)1.5; //Diode Drop
				g_stAdcData.u32PwrSupplyVtg = f32TempVar;
 8007d2e:	4a26      	ldr	r2, [pc, #152]	; (8007dc8 <Adc_FSM+0x220>)
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	6093      	str	r3, [r2, #8]




				for(i=0;i<4;i++)
 8007d34:	2300      	movs	r3, #0
 8007d36:	71fb      	strb	r3, [r7, #7]
 8007d38:	e007      	b.n	8007d4a <Adc_FSM+0x1a2>
				{
					s_u32AdcRawDataTotal[i] = 0;
 8007d3a:	79fb      	ldrb	r3, [r7, #7]
 8007d3c:	4a1d      	ldr	r2, [pc, #116]	; (8007db4 <Adc_FSM+0x20c>)
 8007d3e:	2100      	movs	r1, #0
 8007d40:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for(i=0;i<4;i++)
 8007d44:	79fb      	ldrb	r3, [r7, #7]
 8007d46:	3301      	adds	r3, #1
 8007d48:	71fb      	strb	r3, [r7, #7]
 8007d4a:	79fb      	ldrb	r3, [r7, #7]
 8007d4c:	2b03      	cmp	r3, #3
 8007d4e:	d9f4      	bls.n	8007d3a <Adc_FSM+0x192>
				}
				s_u32AdcState = ADC_STAE_IDLE;
 8007d50:	4b13      	ldr	r3, [pc, #76]	; (8007da0 <Adc_FSM+0x1f8>)
 8007d52:	2204      	movs	r2, #4
 8007d54:	601a      	str	r2, [r3, #0]
				if(gu32ADCRestartTimer == 0)
				{
					s_u32AdcState = ADC_STAE_START_READING;
				}
			}
		}break;
 8007d56:	e01c      	b.n	8007d92 <Adc_FSM+0x1ea>
				if(gu32ADCRestartTimer == 0)
 8007d58:	4b15      	ldr	r3, [pc, #84]	; (8007db0 <Adc_FSM+0x208>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d118      	bne.n	8007d92 <Adc_FSM+0x1ea>
					s_u32AdcState = ADC_STAE_START_READING;
 8007d60:	4b0f      	ldr	r3, [pc, #60]	; (8007da0 <Adc_FSM+0x1f8>)
 8007d62:	2201      	movs	r2, #1
 8007d64:	601a      	str	r2, [r3, #0]
		}break;
 8007d66:	e014      	b.n	8007d92 <Adc_FSM+0x1ea>
		case ADC_STAE_IDLE:
		{
			if(gu32ADCRestartTimer == 0)
 8007d68:	4b11      	ldr	r3, [pc, #68]	; (8007db0 <Adc_FSM+0x208>)
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d112      	bne.n	8007d96 <Adc_FSM+0x1ee>
			{
				s_u32AdcState = ADC_STAE_START_READING;
 8007d70:	4b0b      	ldr	r3, [pc, #44]	; (8007da0 <Adc_FSM+0x1f8>)
 8007d72:	2201      	movs	r2, #1
 8007d74:	601a      	str	r2, [r3, #0]
				gu32ADCRestartTimer = TEN_SEC;
 8007d76:	4b0e      	ldr	r3, [pc, #56]	; (8007db0 <Adc_FSM+0x208>)
 8007d78:	f242 7210 	movw	r2, #10000	; 0x2710
 8007d7c:	601a      	str	r2, [r3, #0]
			}
		}break;
 8007d7e:	e00a      	b.n	8007d96 <Adc_FSM+0x1ee>
		default:
		{
			HAL_ADC_Stop_DMA(&hadc1);
 8007d80:	480a      	ldr	r0, [pc, #40]	; (8007dac <Adc_FSM+0x204>)
 8007d82:	f001 fedb 	bl	8009b3c <HAL_ADC_Stop_DMA>
			s_u32AdcState = ADC_STAE_START_READING;
 8007d86:	4b06      	ldr	r3, [pc, #24]	; (8007da0 <Adc_FSM+0x1f8>)
 8007d88:	2201      	movs	r2, #1
 8007d8a:	601a      	str	r2, [r3, #0]
		}
	}
}
 8007d8c:	e004      	b.n	8007d98 <Adc_FSM+0x1f0>
		}break;
 8007d8e:	bf00      	nop
 8007d90:	e002      	b.n	8007d98 <Adc_FSM+0x1f0>
		}break;
 8007d92:	bf00      	nop
 8007d94:	e000      	b.n	8007d98 <Adc_FSM+0x1f0>
		}break;
 8007d96:	bf00      	nop
}
 8007d98:	bf00      	nop
 8007d9a:	3708      	adds	r7, #8
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}
 8007da0:	20000ff8 	.word	0x20000ff8
 8007da4:	20002170 	.word	0x20002170
 8007da8:	20002174 	.word	0x20002174
 8007dac:	200028cc 	.word	0x200028cc
 8007db0:	20002890 	.word	0x20002890
 8007db4:	20002194 	.word	0x20002194
 8007db8:	200021b4 	.word	0x200021b4
 8007dbc:	10624dd3 	.word	0x10624dd3
 8007dc0:	40533333 	.word	0x40533333
 8007dc4:	457ff000 	.word	0x457ff000
 8007dc8:	20005f5c 	.word	0x20005f5c
 8007dcc:	4216576a 	.word	0x4216576a

08007dd0 <HAL_ADC_ConvCpltCallback>:
 Change History:
 Author            	Date                Remarks
 KloudQ Team        21/01/19			Added info header
******************************************************************************/
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b082      	sub	sp, #8
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop_DMA(&hadc1);
 8007dd8:	4804      	ldr	r0, [pc, #16]	; (8007dec <HAL_ADC_ConvCpltCallback+0x1c>)
 8007dda:	f001 feaf 	bl	8009b3c <HAL_ADC_Stop_DMA>
	s_u32AdcConvCpltFlag = (uint32_t)1;
 8007dde:	4b04      	ldr	r3, [pc, #16]	; (8007df0 <HAL_ADC_ConvCpltCallback+0x20>)
 8007de0:	2201      	movs	r2, #1
 8007de2:	601a      	str	r2, [r3, #0]
}
 8007de4:	bf00      	nop
 8007de6:	3708      	adds	r7, #8
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}
 8007dec:	200028cc 	.word	0x200028cc
 8007df0:	20002170 	.word	0x20002170

08007df4 <canFilterConfig>:
 KloudQ Team        22/03/2020			initial Definitions
 kloudq				27/03/2020			Bit Calculation Added
 kloudq				20/04/2021			Added support for STM32L433 MCU
******************************************************************************/
void canFilterConfig(void)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	af00      	add	r7, sp, #0
	hcan1.Instance = CAN1;
 8007df8:	4b73      	ldr	r3, [pc, #460]	; (8007fc8 <canFilterConfig+0x1d4>)
 8007dfa:	4a74      	ldr	r2, [pc, #464]	; (8007fcc <canFilterConfig+0x1d8>)
 8007dfc:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 10;
 8007dfe:	4b72      	ldr	r3, [pc, #456]	; (8007fc8 <canFilterConfig+0x1d4>)
 8007e00:	220a      	movs	r2, #10
 8007e02:	605a      	str	r2, [r3, #4]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 8007e04:	4b70      	ldr	r3, [pc, #448]	; (8007fc8 <canFilterConfig+0x1d4>)
 8007e06:	2200      	movs	r2, #0
 8007e08:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = ENABLE;
 8007e0a:	4b6f      	ldr	r3, [pc, #444]	; (8007fc8 <canFilterConfig+0x1d4>)
 8007e0c:	2201      	movs	r2, #1
 8007e0e:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = ENABLE;//DISABLE;
 8007e10:	4b6d      	ldr	r3, [pc, #436]	; (8007fc8 <canFilterConfig+0x1d4>)
 8007e12:	2201      	movs	r2, #1
 8007e14:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = ENABLE;//DISABLE;
 8007e16:	4b6c      	ldr	r3, [pc, #432]	; (8007fc8 <canFilterConfig+0x1d4>)
 8007e18:	2201      	movs	r2, #1
 8007e1a:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;//ENABLE;//
 8007e1c:	4b6a      	ldr	r3, [pc, #424]	; (8007fc8 <canFilterConfig+0x1d4>)
 8007e1e:	2200      	movs	r2, #0
 8007e20:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = ENABLE;//DISABLE;
 8007e22:	4b69      	ldr	r3, [pc, #420]	; (8007fc8 <canFilterConfig+0x1d4>)
 8007e24:	2201      	movs	r2, #1
 8007e26:	775a      	strb	r2, [r3, #29]

	hcan1.Init.Mode = CAN_MODE_NORMAL;
 8007e28:	4b67      	ldr	r3, [pc, #412]	; (8007fc8 <canFilterConfig+0x1d4>)
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	609a      	str	r2, [r3, #8]
//	hcan1.Init.Mode = CAN_MODE_SILENT;

	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8007e2e:	4b66      	ldr	r3, [pc, #408]	; (8007fc8 <canFilterConfig+0x1d4>)
 8007e30:	2200      	movs	r2, #0
 8007e32:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8007e34:	4b64      	ldr	r3, [pc, #400]	; (8007fc8 <canFilterConfig+0x1d4>)
 8007e36:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8007e3a:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8007e3c:	4b62      	ldr	r3, [pc, #392]	; (8007fc8 <canFilterConfig+0x1d4>)
 8007e3e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007e42:	615a      	str	r2, [r3, #20]

	switch(gu32CanConfigurationArray[0])
 8007e44:	4b62      	ldr	r3, [pc, #392]	; (8007fd0 <canFilterConfig+0x1dc>)
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007e4c:	d021      	beq.n	8007e92 <canFilterConfig+0x9e>
 8007e4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007e52:	d843      	bhi.n	8007edc <canFilterConfig+0xe8>
 8007e54:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8007e58:	d01f      	beq.n	8007e9a <canFilterConfig+0xa6>
 8007e5a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8007e5e:	d83d      	bhi.n	8007edc <canFilterConfig+0xe8>
 8007e60:	2bfa      	cmp	r3, #250	; 0xfa
 8007e62:	d01e      	beq.n	8007ea2 <canFilterConfig+0xae>
 8007e64:	2bfa      	cmp	r3, #250	; 0xfa
 8007e66:	d839      	bhi.n	8007edc <canFilterConfig+0xe8>
 8007e68:	2b7d      	cmp	r3, #125	; 0x7d
 8007e6a:	d01e      	beq.n	8007eaa <canFilterConfig+0xb6>
 8007e6c:	2b7d      	cmp	r3, #125	; 0x7d
 8007e6e:	d835      	bhi.n	8007edc <canFilterConfig+0xe8>
 8007e70:	2b64      	cmp	r3, #100	; 0x64
 8007e72:	d01e      	beq.n	8007eb2 <canFilterConfig+0xbe>
 8007e74:	2b64      	cmp	r3, #100	; 0x64
 8007e76:	d831      	bhi.n	8007edc <canFilterConfig+0xe8>
 8007e78:	2b53      	cmp	r3, #83	; 0x53
 8007e7a:	d01e      	beq.n	8007eba <canFilterConfig+0xc6>
 8007e7c:	2b53      	cmp	r3, #83	; 0x53
 8007e7e:	d82d      	bhi.n	8007edc <canFilterConfig+0xe8>
 8007e80:	2b32      	cmp	r3, #50	; 0x32
 8007e82:	d01e      	beq.n	8007ec2 <canFilterConfig+0xce>
 8007e84:	2b32      	cmp	r3, #50	; 0x32
 8007e86:	d829      	bhi.n	8007edc <canFilterConfig+0xe8>
 8007e88:	2b0a      	cmp	r3, #10
 8007e8a:	d022      	beq.n	8007ed2 <canFilterConfig+0xde>
 8007e8c:	2b14      	cmp	r3, #20
 8007e8e:	d01c      	beq.n	8007eca <canFilterConfig+0xd6>
 8007e90:	e024      	b.n	8007edc <canFilterConfig+0xe8>
  	{
  		case 1000:
  			hcan1.Init.Prescaler = 5;
 8007e92:	4b4d      	ldr	r3, [pc, #308]	; (8007fc8 <canFilterConfig+0x1d4>)
 8007e94:	2205      	movs	r2, #5
 8007e96:	605a      	str	r2, [r3, #4]
  		break;
 8007e98:	e024      	b.n	8007ee4 <canFilterConfig+0xf0>

  		case 500:
  			hcan1.Init.Prescaler = 10;
 8007e9a:	4b4b      	ldr	r3, [pc, #300]	; (8007fc8 <canFilterConfig+0x1d4>)
 8007e9c:	220a      	movs	r2, #10
 8007e9e:	605a      	str	r2, [r3, #4]
  		break;
 8007ea0:	e020      	b.n	8007ee4 <canFilterConfig+0xf0>

  		case 250:
  			hcan1.Init.Prescaler = 20;
 8007ea2:	4b49      	ldr	r3, [pc, #292]	; (8007fc8 <canFilterConfig+0x1d4>)
 8007ea4:	2214      	movs	r2, #20
 8007ea6:	605a      	str	r2, [r3, #4]
  		break;
 8007ea8:	e01c      	b.n	8007ee4 <canFilterConfig+0xf0>

  		case 125:
  			hcan1.Init.Prescaler = 40;
 8007eaa:	4b47      	ldr	r3, [pc, #284]	; (8007fc8 <canFilterConfig+0x1d4>)
 8007eac:	2228      	movs	r2, #40	; 0x28
 8007eae:	605a      	str	r2, [r3, #4]
  		break;
 8007eb0:	e018      	b.n	8007ee4 <canFilterConfig+0xf0>

  		case 100:
  			hcan1.Init.Prescaler = 50;
 8007eb2:	4b45      	ldr	r3, [pc, #276]	; (8007fc8 <canFilterConfig+0x1d4>)
 8007eb4:	2232      	movs	r2, #50	; 0x32
 8007eb6:	605a      	str	r2, [r3, #4]
  		break;
 8007eb8:	e014      	b.n	8007ee4 <canFilterConfig+0xf0>

  		case 83:
  			hcan1.Init.Prescaler = 60;
 8007eba:	4b43      	ldr	r3, [pc, #268]	; (8007fc8 <canFilterConfig+0x1d4>)
 8007ebc:	223c      	movs	r2, #60	; 0x3c
 8007ebe:	605a      	str	r2, [r3, #4]
  		break;
 8007ec0:	e010      	b.n	8007ee4 <canFilterConfig+0xf0>

  		case 50:
  			hcan1.Init.Prescaler = 100;
 8007ec2:	4b41      	ldr	r3, [pc, #260]	; (8007fc8 <canFilterConfig+0x1d4>)
 8007ec4:	2264      	movs	r2, #100	; 0x64
 8007ec6:	605a      	str	r2, [r3, #4]
  		break;
 8007ec8:	e00c      	b.n	8007ee4 <canFilterConfig+0xf0>

  		case 20:
  			hcan1.Init.Prescaler = 250;
 8007eca:	4b3f      	ldr	r3, [pc, #252]	; (8007fc8 <canFilterConfig+0x1d4>)
 8007ecc:	22fa      	movs	r2, #250	; 0xfa
 8007ece:	605a      	str	r2, [r3, #4]
  		break;
 8007ed0:	e008      	b.n	8007ee4 <canFilterConfig+0xf0>

  		case 10:
  			hcan1.Init.Prescaler = 500;
 8007ed2:	4b3d      	ldr	r3, [pc, #244]	; (8007fc8 <canFilterConfig+0x1d4>)
 8007ed4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8007ed8:	605a      	str	r2, [r3, #4]
  		break;
 8007eda:	e003      	b.n	8007ee4 <canFilterConfig+0xf0>

  		default:
  			/* Illegal BaudRate Configured . Use Default 500 Kbps */
  			hcan1.Init.Prescaler = 10;
 8007edc:	4b3a      	ldr	r3, [pc, #232]	; (8007fc8 <canFilterConfig+0x1d4>)
 8007ede:	220a      	movs	r2, #10
 8007ee0:	605a      	str	r2, [r3, #4]
  		break;
 8007ee2:	bf00      	nop
  	}

  	if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8007ee4:	4838      	ldr	r0, [pc, #224]	; (8007fc8 <canFilterConfig+0x1d4>)
 8007ee6:	f003 f8cb 	bl	800b080 <HAL_CAN_Init>
 8007eea:	4603      	mov	r3, r0
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d004      	beq.n	8007efa <canFilterConfig+0x106>
  		assertError(enmTORERRORS_CAN1_INIT,enmERRORSTATE_ACTIVE);
 8007ef0:	2101      	movs	r1, #1
 8007ef2:	2001      	movs	r0, #1
 8007ef4:	f7fa f80a 	bl	8001f0c <assertError>
 8007ef8:	e003      	b.n	8007f02 <canFilterConfig+0x10e>
  	else
  		 assertError(enmTORERRORS_CAN1_INIT,enmERRORSTATE_NOERROR);
 8007efa:	2100      	movs	r1, #0
 8007efc:	2001      	movs	r0, #1
 8007efe:	f7fa f805 	bl	8001f0c <assertError>

  	/*##-2- Configure the CAN Filter ###########################################*/
  	  sFilterConfig.FilterBank = 0;
 8007f02:	4b34      	ldr	r3, [pc, #208]	; (8007fd4 <canFilterConfig+0x1e0>)
 8007f04:	2200      	movs	r2, #0
 8007f06:	615a      	str	r2, [r3, #20]
  	  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8007f08:	4b32      	ldr	r3, [pc, #200]	; (8007fd4 <canFilterConfig+0x1e0>)
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	619a      	str	r2, [r3, #24]
  	  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8007f0e:	4b31      	ldr	r3, [pc, #196]	; (8007fd4 <canFilterConfig+0x1e0>)
 8007f10:	2201      	movs	r2, #1
 8007f12:	61da      	str	r2, [r3, #28]
  	  sFilterConfig.FilterIdHigh = 0x0000;
 8007f14:	4b2f      	ldr	r3, [pc, #188]	; (8007fd4 <canFilterConfig+0x1e0>)
 8007f16:	2200      	movs	r2, #0
 8007f18:	601a      	str	r2, [r3, #0]
  	  sFilterConfig.FilterIdLow = 0x0000;
 8007f1a:	4b2e      	ldr	r3, [pc, #184]	; (8007fd4 <canFilterConfig+0x1e0>)
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	605a      	str	r2, [r3, #4]
  	  sFilterConfig.FilterMaskIdHigh = 0x0000;
 8007f20:	4b2c      	ldr	r3, [pc, #176]	; (8007fd4 <canFilterConfig+0x1e0>)
 8007f22:	2200      	movs	r2, #0
 8007f24:	609a      	str	r2, [r3, #8]
  	  sFilterConfig.FilterMaskIdLow = 0x0000;
 8007f26:	4b2b      	ldr	r3, [pc, #172]	; (8007fd4 <canFilterConfig+0x1e0>)
 8007f28:	2200      	movs	r2, #0
 8007f2a:	60da      	str	r2, [r3, #12]
  	  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8007f2c:	4b29      	ldr	r3, [pc, #164]	; (8007fd4 <canFilterConfig+0x1e0>)
 8007f2e:	2200      	movs	r2, #0
 8007f30:	611a      	str	r2, [r3, #16]
  	  sFilterConfig.FilterActivation = ENABLE;
 8007f32:	4b28      	ldr	r3, [pc, #160]	; (8007fd4 <canFilterConfig+0x1e0>)
 8007f34:	2201      	movs	r2, #1
 8007f36:	621a      	str	r2, [r3, #32]
  	  sFilterConfig.SlaveStartFilterBank = 14;
 8007f38:	4b26      	ldr	r3, [pc, #152]	; (8007fd4 <canFilterConfig+0x1e0>)
 8007f3a:	220e      	movs	r2, #14
 8007f3c:	625a      	str	r2, [r3, #36]	; 0x24

  	if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 8007f3e:	4925      	ldr	r1, [pc, #148]	; (8007fd4 <canFilterConfig+0x1e0>)
 8007f40:	4821      	ldr	r0, [pc, #132]	; (8007fc8 <canFilterConfig+0x1d4>)
 8007f42:	f003 fae5 	bl	800b510 <HAL_CAN_ConfigFilter>
 8007f46:	4603      	mov	r3, r0
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d004      	beq.n	8007f56 <canFilterConfig+0x162>
  		assertError(enmTORERRORS_CAN1_CONFIGFILTER,enmERRORSTATE_ACTIVE);
 8007f4c:	2101      	movs	r1, #1
 8007f4e:	2002      	movs	r0, #2
 8007f50:	f7f9 ffdc 	bl	8001f0c <assertError>
 8007f54:	e003      	b.n	8007f5e <canFilterConfig+0x16a>
  	else
  		assertError(enmTORERRORS_CAN1_CONFIGFILTER,enmERRORSTATE_NOERROR);
 8007f56:	2100      	movs	r1, #0
 8007f58:	2002      	movs	r0, #2
 8007f5a:	f7f9 ffd7 	bl	8001f0c <assertError>

  	/*##-3- Start the CAN peripheral ###########################################*/
  	  if (HAL_CAN_Start(&hcan1) != HAL_OK)
 8007f5e:	481a      	ldr	r0, [pc, #104]	; (8007fc8 <canFilterConfig+0x1d4>)
 8007f60:	f003 fc06 	bl	800b770 <HAL_CAN_Start>
 8007f64:	4603      	mov	r3, r0
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d001      	beq.n	8007f6e <canFilterConfig+0x17a>
  	  {
  	    /* Start Error */
  	    Error_Handler();
 8007f6a:	f7fc fb0e 	bl	800458a <Error_Handler>
  	  }

  	/*##-4- Activate CAN RX notification #######################################*/
  	  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8007f6e:	2102      	movs	r1, #2
 8007f70:	4815      	ldr	r0, [pc, #84]	; (8007fc8 <canFilterConfig+0x1d4>)
 8007f72:	f003 fda9 	bl	800bac8 <HAL_CAN_ActivateNotification>
 8007f76:	4603      	mov	r3, r0
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d003      	beq.n	8007f84 <canFilterConfig+0x190>
  	  {
  		/* Notification Error */
  		  assertError(enmTORERRORS_CAN1_CONFIGFILTER,enmERRORSTATE_ACTIVE);
 8007f7c:	2101      	movs	r1, #1
 8007f7e:	2002      	movs	r0, #2
 8007f80:	f7f9 ffc4 	bl	8001f0c <assertError>
  	  }

  	  /*##-5- Configure Transmission process #####################################*/
  	TxHeader.StdId = 0x321;
 8007f84:	4b14      	ldr	r3, [pc, #80]	; (8007fd8 <canFilterConfig+0x1e4>)
 8007f86:	f240 3221 	movw	r2, #801	; 0x321
 8007f8a:	601a      	str	r2, [r3, #0]
  	TxHeader.ExtId = 0x01;
 8007f8c:	4b12      	ldr	r3, [pc, #72]	; (8007fd8 <canFilterConfig+0x1e4>)
 8007f8e:	2201      	movs	r2, #1
 8007f90:	605a      	str	r2, [r3, #4]
  	TxHeader.RTR = CAN_RTR_DATA;
 8007f92:	4b11      	ldr	r3, [pc, #68]	; (8007fd8 <canFilterConfig+0x1e4>)
 8007f94:	2200      	movs	r2, #0
 8007f96:	60da      	str	r2, [r3, #12]
  	TxHeader.IDE = CAN_ID_STD;
 8007f98:	4b0f      	ldr	r3, [pc, #60]	; (8007fd8 <canFilterConfig+0x1e4>)
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	609a      	str	r2, [r3, #8]
  	TxHeader.DLC = 2;
 8007f9e:	4b0e      	ldr	r3, [pc, #56]	; (8007fd8 <canFilterConfig+0x1e4>)
 8007fa0:	2202      	movs	r2, #2
 8007fa2:	611a      	str	r2, [r3, #16]
  	TxHeader.TransmitGlobalTime = DISABLE;
 8007fa4:	4b0c      	ldr	r3, [pc, #48]	; (8007fd8 <canFilterConfig+0x1e4>)
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	751a      	strb	r2, [r3, #20]

  	memset(u32CanIdsReceived,0x00,sizeof(u32CanIdsReceived));
 8007faa:	f44f 7248 	mov.w	r2, #800	; 0x320
 8007fae:	2100      	movs	r1, #0
 8007fb0:	480a      	ldr	r0, [pc, #40]	; (8007fdc <canFilterConfig+0x1e8>)
 8007fb2:	f00c f893 	bl	80140dc <memset>
  	memset(unCanReceivedMsgs,0x00,sizeof(unCanReceivedMsgs));
 8007fb6:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8007fba:	2100      	movs	r1, #0
 8007fbc:	4808      	ldr	r0, [pc, #32]	; (8007fe0 <canFilterConfig+0x1ec>)
 8007fbe:	f00c f88d 	bl	80140dc <memset>
}
 8007fc2:	bf00      	nop
 8007fc4:	bd80      	pop	{r7, pc}
 8007fc6:	bf00      	nop
 8007fc8:	200029a0 	.word	0x200029a0
 8007fcc:	40006400 	.word	0x40006400
 8007fd0:	2000131c 	.word	0x2000131c
 8007fd4:	20002978 	.word	0x20002978
 8007fd8:	200065c0 	.word	0x200065c0
 8007fdc:	20000ffc 	.word	0x20000ffc
 8007fe0:	20005f6c 	.word	0x20005f6c

08007fe4 <HAL_CAN_RxFifo0MsgPendingCallback>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b082      	sub	sp, #8
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
	/* LED Only for testing/ Indication . Can be removed in production if not required  */
//	HAL_GPIO_TogglePin(COMM_LED_uC_GPIO_Port,COMM_LED_uC_Pin);
	HAL_GPIO_TogglePin(Comm_LED_GPIO_Port,Comm_LED_Pin);
 8007fec:	2108      	movs	r1, #8
 8007fee:	4841      	ldr	r0, [pc, #260]	; (80080f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 8007ff0:	f005 fbd0 	bl	800d794 <HAL_GPIO_TogglePin>
	/* Get RX message */
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8007ff4:	4b40      	ldr	r3, [pc, #256]	; (80080f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 8007ff6:	4a41      	ldr	r2, [pc, #260]	; (80080fc <HAL_CAN_RxFifo0MsgPendingCallback+0x118>)
 8007ff8:	2100      	movs	r1, #0
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f003 fc46 	bl	800b88c <HAL_CAN_GetRxMessage>
 8008000:	4603      	mov	r3, r0
 8008002:	2b00      	cmp	r3, #0
 8008004:	d001      	beq.n	800800a <HAL_CAN_RxFifo0MsgPendingCallback+0x26>
	{
		/* Reception Error */
		Error_Handler();
 8008006:	f7fc fac0 	bl	800458a <Error_Handler>
	}
	/* Parse the incoming data only if array location is available
	 * Added on 3/3/21 - For payload overwrite issue */
	if(unCan1939ReceivedId[u32CanRxMsgLoopCounter].u32J1939CommandId == 0)
 800800a:	4b3d      	ldr	r3, [pc, #244]	; (8008100 <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	4a3d      	ldr	r2, [pc, #244]	; (8008104 <HAL_CAN_RxFifo0MsgPendingCallback+0x120>)
 8008010:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d161      	bne.n	80080dc <HAL_CAN_RxFifo0MsgPendingCallback+0xf8>
	{
		if(RxHeader.IDE == CAN_ID_EXT)
 8008018:	4b38      	ldr	r3, [pc, #224]	; (80080fc <HAL_CAN_RxFifo0MsgPendingCallback+0x118>)
 800801a:	689b      	ldr	r3, [r3, #8]
 800801c:	2b04      	cmp	r3, #4
 800801e:	d107      	bne.n	8008030 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>
		{
			//u32CanIdsReceived[u32CanRxMsgLoopCounter] = RxHeader.ExtId;
			unCan1939ReceivedId[u32CanRxMsgLoopCounter].u32J1939CommandId = RxHeader.ExtId;
 8008020:	4b37      	ldr	r3, [pc, #220]	; (8008100 <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	4a35      	ldr	r2, [pc, #212]	; (80080fc <HAL_CAN_RxFifo0MsgPendingCallback+0x118>)
 8008026:	6852      	ldr	r2, [r2, #4]
 8008028:	4936      	ldr	r1, [pc, #216]	; (8008104 <HAL_CAN_RxFifo0MsgPendingCallback+0x120>)
 800802a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800802e:	e00a      	b.n	8008046 <HAL_CAN_RxFifo0MsgPendingCallback+0x62>
		}
		else if(RxHeader.IDE == CAN_ID_STD)
 8008030:	4b32      	ldr	r3, [pc, #200]	; (80080fc <HAL_CAN_RxFifo0MsgPendingCallback+0x118>)
 8008032:	689b      	ldr	r3, [r3, #8]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d106      	bne.n	8008046 <HAL_CAN_RxFifo0MsgPendingCallback+0x62>
		{
			//u32CanIdsReceived[u32CanRxMsgLoopCounter] = RxHeader.StdId;
			unCan1939ReceivedId[u32CanRxMsgLoopCounter].u32J1939CommandId = RxHeader.StdId;
 8008038:	4b31      	ldr	r3, [pc, #196]	; (8008100 <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	4a2f      	ldr	r2, [pc, #188]	; (80080fc <HAL_CAN_RxFifo0MsgPendingCallback+0x118>)
 800803e:	6812      	ldr	r2, [r2, #0]
 8008040:	4930      	ldr	r1, [pc, #192]	; (8008104 <HAL_CAN_RxFifo0MsgPendingCallback+0x120>)
 8008042:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
//		unCanReceivedMsgs[u32CanRxMsgLoopCounter].u8CanMsgByte7 = (RxData[7]);
//		if(unCan1939ReceivedId[u32CanRxMsgLoopCounter].u32J1939CommandId == 0xF00400)
//		{
//			unCanReceivedMsgs[u32CanRxMsgLoopCounter].u8CanMsgByte0 = (RxData[7]);
//		}
		unCanReceivedMsgs[u32CanRxMsgLoopCounter].u8CanMsgByte0 = (RxData[7]);
 8008046:	4b2e      	ldr	r3, [pc, #184]	; (8008100 <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>)
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	4a2b      	ldr	r2, [pc, #172]	; (80080f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 800804c:	79d1      	ldrb	r1, [r2, #7]
 800804e:	4a2e      	ldr	r2, [pc, #184]	; (8008108 <HAL_CAN_RxFifo0MsgPendingCallback+0x124>)
 8008050:	00db      	lsls	r3, r3, #3
 8008052:	4413      	add	r3, r2
 8008054:	460a      	mov	r2, r1
 8008056:	71da      	strb	r2, [r3, #7]
		unCanReceivedMsgs[u32CanRxMsgLoopCounter].u8CanMsgByte1 = (RxData[6]);
 8008058:	4b29      	ldr	r3, [pc, #164]	; (8008100 <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	4a26      	ldr	r2, [pc, #152]	; (80080f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 800805e:	7991      	ldrb	r1, [r2, #6]
 8008060:	4a29      	ldr	r2, [pc, #164]	; (8008108 <HAL_CAN_RxFifo0MsgPendingCallback+0x124>)
 8008062:	00db      	lsls	r3, r3, #3
 8008064:	4413      	add	r3, r2
 8008066:	460a      	mov	r2, r1
 8008068:	719a      	strb	r2, [r3, #6]
		unCanReceivedMsgs[u32CanRxMsgLoopCounter].u8CanMsgByte2 = (RxData[5]);
 800806a:	4b25      	ldr	r3, [pc, #148]	; (8008100 <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	4a22      	ldr	r2, [pc, #136]	; (80080f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 8008070:	7951      	ldrb	r1, [r2, #5]
 8008072:	4a25      	ldr	r2, [pc, #148]	; (8008108 <HAL_CAN_RxFifo0MsgPendingCallback+0x124>)
 8008074:	00db      	lsls	r3, r3, #3
 8008076:	4413      	add	r3, r2
 8008078:	460a      	mov	r2, r1
 800807a:	715a      	strb	r2, [r3, #5]
		unCanReceivedMsgs[u32CanRxMsgLoopCounter].u8CanMsgByte3 = (RxData[4]);
 800807c:	4b20      	ldr	r3, [pc, #128]	; (8008100 <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	4a1d      	ldr	r2, [pc, #116]	; (80080f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 8008082:	7911      	ldrb	r1, [r2, #4]
 8008084:	4a20      	ldr	r2, [pc, #128]	; (8008108 <HAL_CAN_RxFifo0MsgPendingCallback+0x124>)
 8008086:	00db      	lsls	r3, r3, #3
 8008088:	4413      	add	r3, r2
 800808a:	460a      	mov	r2, r1
 800808c:	711a      	strb	r2, [r3, #4]
		unCanReceivedMsgs[u32CanRxMsgLoopCounter].u8CanMsgByte4 = (RxData[3]);
 800808e:	4b1c      	ldr	r3, [pc, #112]	; (8008100 <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	4a19      	ldr	r2, [pc, #100]	; (80080f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 8008094:	78d1      	ldrb	r1, [r2, #3]
 8008096:	4a1c      	ldr	r2, [pc, #112]	; (8008108 <HAL_CAN_RxFifo0MsgPendingCallback+0x124>)
 8008098:	00db      	lsls	r3, r3, #3
 800809a:	4413      	add	r3, r2
 800809c:	460a      	mov	r2, r1
 800809e:	70da      	strb	r2, [r3, #3]
		unCanReceivedMsgs[u32CanRxMsgLoopCounter].u8CanMsgByte5 = (RxData[2]);
 80080a0:	4b17      	ldr	r3, [pc, #92]	; (8008100 <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	4a14      	ldr	r2, [pc, #80]	; (80080f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 80080a6:	7891      	ldrb	r1, [r2, #2]
 80080a8:	4a17      	ldr	r2, [pc, #92]	; (8008108 <HAL_CAN_RxFifo0MsgPendingCallback+0x124>)
 80080aa:	00db      	lsls	r3, r3, #3
 80080ac:	4413      	add	r3, r2
 80080ae:	460a      	mov	r2, r1
 80080b0:	709a      	strb	r2, [r3, #2]
		unCanReceivedMsgs[u32CanRxMsgLoopCounter].u8CanMsgByte6 = (RxData[1]);
 80080b2:	4b13      	ldr	r3, [pc, #76]	; (8008100 <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	4a10      	ldr	r2, [pc, #64]	; (80080f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 80080b8:	7851      	ldrb	r1, [r2, #1]
 80080ba:	4a13      	ldr	r2, [pc, #76]	; (8008108 <HAL_CAN_RxFifo0MsgPendingCallback+0x124>)
 80080bc:	00db      	lsls	r3, r3, #3
 80080be:	4413      	add	r3, r2
 80080c0:	460a      	mov	r2, r1
 80080c2:	705a      	strb	r2, [r3, #1]
		unCanReceivedMsgs[u32CanRxMsgLoopCounter].u8CanMsgByte7 = (RxData[0]);
 80080c4:	4b0e      	ldr	r3, [pc, #56]	; (8008100 <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	4a0b      	ldr	r2, [pc, #44]	; (80080f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 80080ca:	7811      	ldrb	r1, [r2, #0]
 80080cc:	4a0e      	ldr	r2, [pc, #56]	; (8008108 <HAL_CAN_RxFifo0MsgPendingCallback+0x124>)
 80080ce:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]

		u32CanRxMsgLoopCounter++;
 80080d2:	4b0b      	ldr	r3, [pc, #44]	; (8008100 <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	3301      	adds	r3, #1
 80080d8:	4a09      	ldr	r2, [pc, #36]	; (8008100 <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>)
 80080da:	6013      	str	r3, [r2, #0]

	}

	if(u32CanRxMsgLoopCounter >= CAN_BUFFER_LENGTH)
 80080dc:	4b08      	ldr	r3, [pc, #32]	; (8008100 <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	2bc7      	cmp	r3, #199	; 0xc7
 80080e2:	d902      	bls.n	80080ea <HAL_CAN_RxFifo0MsgPendingCallback+0x106>
		u32CanRxMsgLoopCounter = 0;
 80080e4:	4b06      	ldr	r3, [pc, #24]	; (8008100 <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>)
 80080e6:	2200      	movs	r2, #0
 80080e8:	601a      	str	r2, [r3, #0]

}
 80080ea:	bf00      	nop
 80080ec:	3708      	adds	r7, #8
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}
 80080f2:	bf00      	nop
 80080f4:	48000400 	.word	0x48000400
 80080f8:	200065b8 	.word	0x200065b8
 80080fc:	200065d8 	.word	0x200065d8
 8008100:	200021b8 	.word	0x200021b8
 8008104:	200024e8 	.word	0x200024e8
 8008108:	20005f6c 	.word	0x20005f6c

0800810c <HAL_CAN_ErrorCallback>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b082      	sub	sp, #8
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
	canTestVariable = hcan->ErrorCode;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008118:	4a05      	ldr	r2, [pc, #20]	; (8008130 <HAL_CAN_ErrorCallback+0x24>)
 800811a:	6013      	str	r3, [r2, #0]
	HAL_CAN_DeInit(&hcan1);
 800811c:	4805      	ldr	r0, [pc, #20]	; (8008134 <HAL_CAN_ErrorCallback+0x28>)
 800811e:	f003 f9c5 	bl	800b4ac <HAL_CAN_DeInit>
	canFilterConfig();
 8008122:	f7ff fe67 	bl	8007df4 <canFilterConfig>
}
 8008126:	bf00      	nop
 8008128:	3708      	adds	r7, #8
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}
 800812e:	bf00      	nop
 8008130:	200021bc 	.word	0x200021bc
 8008134:	200029a0 	.word	0x200029a0

08008138 <isCommandIdConfigured>:
* </table><br><br>
* <hr>
*
*******************************************************************************/
uint32_t isCommandIdConfigured(uint32_t canId)
{
 8008138:	b480      	push	{r7}
 800813a:	b083      	sub	sp, #12
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
	static uint32_t LoopCounter = 0;
	static uint32_t u32PositioninConfigArray = 0;

	if(LoopCounter == 0)
 8008140:	4b1b      	ldr	r3, [pc, #108]	; (80081b0 <isCommandIdConfigured+0x78>)
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d105      	bne.n	8008154 <isCommandIdConfigured+0x1c>
	{
		u32IdSearchFlag = 1;
 8008148:	4b1a      	ldr	r3, [pc, #104]	; (80081b4 <isCommandIdConfigured+0x7c>)
 800814a:	2201      	movs	r2, #1
 800814c:	601a      	str	r2, [r3, #0]
		u32PositioninConfigArray = 0;
 800814e:	4b1a      	ldr	r3, [pc, #104]	; (80081b8 <isCommandIdConfigured+0x80>)
 8008150:	2200      	movs	r2, #0
 8008152:	601a      	str	r2, [r3, #0]
	}

	if(u32IdSearchFlag == 1)
 8008154:	4b17      	ldr	r3, [pc, #92]	; (80081b4 <isCommandIdConfigured+0x7c>)
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	2b01      	cmp	r3, #1
 800815a:	d121      	bne.n	80081a0 <isCommandIdConfigured+0x68>
	{
		if(gu32CanConfigurationArrayPGN[LoopCounter] == canId)
 800815c:	4b14      	ldr	r3, [pc, #80]	; (80081b0 <isCommandIdConfigured+0x78>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	4a16      	ldr	r2, [pc, #88]	; (80081bc <isCommandIdConfigured+0x84>)
 8008162:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008166:	687a      	ldr	r2, [r7, #4]
 8008168:	429a      	cmp	r2, r3
 800816a:	d10a      	bne.n	8008182 <isCommandIdConfigured+0x4a>
		{
			/*
			 * If Received CanID is found in configuration Array
			 * then parse the frame else ignore .
			 */
			u32PositioninConfigArray = LoopCounter;
 800816c:	4b10      	ldr	r3, [pc, #64]	; (80081b0 <isCommandIdConfigured+0x78>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	4a11      	ldr	r2, [pc, #68]	; (80081b8 <isCommandIdConfigured+0x80>)
 8008172:	6013      	str	r3, [r2, #0]
			u32IdSearchFlag = 2;
 8008174:	4b0f      	ldr	r3, [pc, #60]	; (80081b4 <isCommandIdConfigured+0x7c>)
 8008176:	2202      	movs	r2, #2
 8008178:	601a      	str	r2, [r3, #0]
			LoopCounter = 0;
 800817a:	4b0d      	ldr	r3, [pc, #52]	; (80081b0 <isCommandIdConfigured+0x78>)
 800817c:	2200      	movs	r2, #0
 800817e:	601a      	str	r2, [r3, #0]
 8008180:	e00e      	b.n	80081a0 <isCommandIdConfigured+0x68>
		}
		else
		{
			LoopCounter++;
 8008182:	4b0b      	ldr	r3, [pc, #44]	; (80081b0 <isCommandIdConfigured+0x78>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	3301      	adds	r3, #1
 8008188:	4a09      	ldr	r2, [pc, #36]	; (80081b0 <isCommandIdConfigured+0x78>)
 800818a:	6013      	str	r3, [r2, #0]
			if (LoopCounter == MAX_CAN_IDS_SUPPORTED)
 800818c:	4b08      	ldr	r3, [pc, #32]	; (80081b0 <isCommandIdConfigured+0x78>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	2b32      	cmp	r3, #50	; 0x32
 8008192:	d105      	bne.n	80081a0 <isCommandIdConfigured+0x68>
			{
				LoopCounter = 0;
 8008194:	4b06      	ldr	r3, [pc, #24]	; (80081b0 <isCommandIdConfigured+0x78>)
 8008196:	2200      	movs	r2, #0
 8008198:	601a      	str	r2, [r3, #0]
				u32IdSearchFlag = 2;
 800819a:	4b06      	ldr	r3, [pc, #24]	; (80081b4 <isCommandIdConfigured+0x7c>)
 800819c:	2202      	movs	r2, #2
 800819e:	601a      	str	r2, [r3, #0]
			}
		}
	}
	return u32PositioninConfigArray;
 80081a0:	4b05      	ldr	r3, [pc, #20]	; (80081b8 <isCommandIdConfigured+0x80>)
 80081a2:	681b      	ldr	r3, [r3, #0]
}
 80081a4:	4618      	mov	r0, r3
 80081a6:	370c      	adds	r7, #12
 80081a8:	46bd      	mov	sp, r7
 80081aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ae:	4770      	bx	lr
 80081b0:	2000280c 	.word	0x2000280c
 80081b4:	200021c0 	.word	0x200021c0
 80081b8:	20002810 	.word	0x20002810
 80081bc:	200013e8 	.word	0x200013e8

080081c0 <parseCanMessageQueue>:
*
*******************************************************************************/
uint32_t temp = 0;
uint32_t gu32CanIdParserCounter = 0;
void parseCanMessageQueue(void)
 {
 80081c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80081c4:	b08c      	sub	sp, #48	; 0x30
 80081c6:	af00      	add	r7, sp, #0
	static uint32_t u32CanMsgID = 0;
	static uint32_t u32ParserState = 0;
	static uint32_t u32IdStatus = 0;

	if(unCan1939ReceivedId[gu32CanIdParserCounter].u32J1939CommandId != 0)
 80081c8:	4b96      	ldr	r3, [pc, #600]	; (8008424 <parseCanMessageQueue+0x264>)
 80081ca:	681a      	ldr	r2, [r3, #0]
 80081cc:	4b96      	ldr	r3, [pc, #600]	; (8008428 <parseCanMessageQueue+0x268>)
 80081ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	f000 8199 	beq.w	800850a <parseCanMessageQueue+0x34a>
	{
		if(u32ParserState == 0)
 80081d8:	4b94      	ldr	r3, [pc, #592]	; (800842c <parseCanMessageQueue+0x26c>)
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d10e      	bne.n	80081fe <parseCanMessageQueue+0x3e>
		{
			/* Message Available. Parse The Message */
			u32CanMsgID = unCan1939ReceivedId[gu32CanIdParserCounter].u16J1939PGN;
 80081e0:	4b90      	ldr	r3, [pc, #576]	; (8008424 <parseCanMessageQueue+0x264>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	4a90      	ldr	r2, [pc, #576]	; (8008428 <parseCanMessageQueue+0x268>)
 80081e6:	009b      	lsls	r3, r3, #2
 80081e8:	4413      	add	r3, r2
 80081ea:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80081ee:	b29b      	uxth	r3, r3
 80081f0:	461a      	mov	r2, r3
 80081f2:	4b8f      	ldr	r3, [pc, #572]	; (8008430 <parseCanMessageQueue+0x270>)
 80081f4:	601a      	str	r2, [r3, #0]
			u32ParserState = 1;
 80081f6:	4b8d      	ldr	r3, [pc, #564]	; (800842c <parseCanMessageQueue+0x26c>)
 80081f8:	2201      	movs	r2, #1
 80081fa:	601a      	str	r2, [r3, #0]
 80081fc:	e18a      	b.n	8008514 <parseCanMessageQueue+0x354>
		}
		else if(u32ParserState == 1)
 80081fe:	4b8b      	ldr	r3, [pc, #556]	; (800842c <parseCanMessageQueue+0x26c>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	2b01      	cmp	r3, #1
 8008204:	f040 8186 	bne.w	8008514 <parseCanMessageQueue+0x354>
		{
			/* In Process */
			if(u32IdSearchFlag == 2)
 8008208:	4b8a      	ldr	r3, [pc, #552]	; (8008434 <parseCanMessageQueue+0x274>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	2b02      	cmp	r3, #2
 800820e:	f040 8173 	bne.w	80084f8 <parseCanMessageQueue+0x338>
			{
				/* Search Process Completed */
				if(u32IdStatus != 0)
 8008212:	4b89      	ldr	r3, [pc, #548]	; (8008438 <parseCanMessageQueue+0x278>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	2b00      	cmp	r3, #0
 8008218:	f000 8118 	beq.w	800844c <parseCanMessageQueue+0x28c>
				{

					gu64CanMessageArray[u32IdStatus] =  ((uint64_t)unCanReceivedMsgs[gu32CanIdParserCounter].u8CanMsgByte7 << 56)|
 800821c:	4b81      	ldr	r3, [pc, #516]	; (8008424 <parseCanMessageQueue+0x264>)
 800821e:	681a      	ldr	r2, [r3, #0]
 8008220:	4b86      	ldr	r3, [pc, #536]	; (800843c <parseCanMessageQueue+0x27c>)
 8008222:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
 8008226:	b2da      	uxtb	r2, r3
 8008228:	f04f 0300 	mov.w	r3, #0
 800822c:	f04f 0400 	mov.w	r4, #0
 8008230:	f04f 0500 	mov.w	r5, #0
 8008234:	0615      	lsls	r5, r2, #24
 8008236:	2400      	movs	r4, #0
														((uint64_t)unCanReceivedMsgs[gu32CanIdParserCounter].u8CanMsgByte6 << 48)|
 8008238:	4b7a      	ldr	r3, [pc, #488]	; (8008424 <parseCanMessageQueue+0x264>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	4a7f      	ldr	r2, [pc, #508]	; (800843c <parseCanMessageQueue+0x27c>)
 800823e:	00db      	lsls	r3, r3, #3
 8008240:	4413      	add	r3, r2
 8008242:	785b      	ldrb	r3, [r3, #1]
 8008244:	b2da      	uxtb	r2, r3
 8008246:	f04f 0300 	mov.w	r3, #0
 800824a:	f04f 0000 	mov.w	r0, #0
 800824e:	f04f 0100 	mov.w	r1, #0
 8008252:	0411      	lsls	r1, r2, #16
 8008254:	2000      	movs	r0, #0
					gu64CanMessageArray[u32IdStatus] =  ((uint64_t)unCanReceivedMsgs[gu32CanIdParserCounter].u8CanMsgByte7 << 56)|
 8008256:	ea44 0800 	orr.w	r8, r4, r0
 800825a:	ea45 0901 	orr.w	r9, r5, r1
														((uint64_t)unCanReceivedMsgs[gu32CanIdParserCounter].u8CanMsgByte5 << 40)|
 800825e:	4b71      	ldr	r3, [pc, #452]	; (8008424 <parseCanMessageQueue+0x264>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	4a76      	ldr	r2, [pc, #472]	; (800843c <parseCanMessageQueue+0x27c>)
 8008264:	00db      	lsls	r3, r3, #3
 8008266:	4413      	add	r3, r2
 8008268:	789b      	ldrb	r3, [r3, #2]
 800826a:	b2da      	uxtb	r2, r3
 800826c:	f04f 0300 	mov.w	r3, #0
 8008270:	f04f 0000 	mov.w	r0, #0
 8008274:	f04f 0100 	mov.w	r1, #0
 8008278:	0211      	lsls	r1, r2, #8
 800827a:	2000      	movs	r0, #0
														((uint64_t)unCanReceivedMsgs[gu32CanIdParserCounter].u8CanMsgByte6 << 48)|
 800827c:	ea48 0a00 	orr.w	sl, r8, r0
 8008280:	ea49 0b01 	orr.w	fp, r9, r1
														((uint64_t)unCanReceivedMsgs[gu32CanIdParserCounter].u8CanMsgByte4 << 32)|
 8008284:	4b67      	ldr	r3, [pc, #412]	; (8008424 <parseCanMessageQueue+0x264>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	4a6c      	ldr	r2, [pc, #432]	; (800843c <parseCanMessageQueue+0x27c>)
 800828a:	00db      	lsls	r3, r3, #3
 800828c:	4413      	add	r3, r2
 800828e:	78db      	ldrb	r3, [r3, #3]
 8008290:	b2da      	uxtb	r2, r3
 8008292:	f04f 0300 	mov.w	r3, #0
 8008296:	f04f 0000 	mov.w	r0, #0
 800829a:	f04f 0100 	mov.w	r1, #0
 800829e:	0011      	movs	r1, r2
 80082a0:	2000      	movs	r0, #0
														((uint64_t)unCanReceivedMsgs[gu32CanIdParserCounter].u8CanMsgByte5 << 40)|
 80082a2:	ea4a 0300 	orr.w	r3, sl, r0
 80082a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80082a8:	ea4b 0301 	orr.w	r3, fp, r1
 80082ac:	62fb      	str	r3, [r7, #44]	; 0x2c
														((uint64_t)unCanReceivedMsgs[gu32CanIdParserCounter].u8CanMsgByte3 << 24)|
 80082ae:	4b5d      	ldr	r3, [pc, #372]	; (8008424 <parseCanMessageQueue+0x264>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	4a62      	ldr	r2, [pc, #392]	; (800843c <parseCanMessageQueue+0x27c>)
 80082b4:	00db      	lsls	r3, r3, #3
 80082b6:	4413      	add	r3, r2
 80082b8:	791b      	ldrb	r3, [r3, #4]
 80082ba:	b2da      	uxtb	r2, r3
 80082bc:	f04f 0300 	mov.w	r3, #0
 80082c0:	0a11      	lsrs	r1, r2, #8
 80082c2:	6279      	str	r1, [r7, #36]	; 0x24
 80082c4:	0613      	lsls	r3, r2, #24
 80082c6:	623b      	str	r3, [r7, #32]
														((uint64_t)unCanReceivedMsgs[gu32CanIdParserCounter].u8CanMsgByte4 << 32)|
 80082c8:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 80082cc:	4623      	mov	r3, r4
 80082ce:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80082d2:	4602      	mov	r2, r0
 80082d4:	4313      	orrs	r3, r2
 80082d6:	61bb      	str	r3, [r7, #24]
 80082d8:	462b      	mov	r3, r5
 80082da:	460a      	mov	r2, r1
 80082dc:	4313      	orrs	r3, r2
 80082de:	61fb      	str	r3, [r7, #28]
														((uint64_t)unCanReceivedMsgs[gu32CanIdParserCounter].u8CanMsgByte2 << 16)|
 80082e0:	4b50      	ldr	r3, [pc, #320]	; (8008424 <parseCanMessageQueue+0x264>)
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	4a55      	ldr	r2, [pc, #340]	; (800843c <parseCanMessageQueue+0x27c>)
 80082e6:	00db      	lsls	r3, r3, #3
 80082e8:	4413      	add	r3, r2
 80082ea:	795b      	ldrb	r3, [r3, #5]
 80082ec:	b2d8      	uxtb	r0, r3
 80082ee:	f04f 0100 	mov.w	r1, #0
 80082f2:	f04f 0200 	mov.w	r2, #0
 80082f6:	f04f 0300 	mov.w	r3, #0
 80082fa:	040b      	lsls	r3, r1, #16
 80082fc:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 8008300:	0402      	lsls	r2, r0, #16
														((uint64_t)unCanReceivedMsgs[gu32CanIdParserCounter].u8CanMsgByte3 << 24)|
 8008302:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8008306:	4621      	mov	r1, r4
 8008308:	4311      	orrs	r1, r2
 800830a:	6139      	str	r1, [r7, #16]
 800830c:	4629      	mov	r1, r5
 800830e:	4319      	orrs	r1, r3
 8008310:	6179      	str	r1, [r7, #20]
														((uint64_t)unCanReceivedMsgs[gu32CanIdParserCounter].u8CanMsgByte1 << 8) |
 8008312:	4b44      	ldr	r3, [pc, #272]	; (8008424 <parseCanMessageQueue+0x264>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	4a49      	ldr	r2, [pc, #292]	; (800843c <parseCanMessageQueue+0x27c>)
 8008318:	00db      	lsls	r3, r3, #3
 800831a:	4413      	add	r3, r2
 800831c:	799b      	ldrb	r3, [r3, #6]
 800831e:	b2d8      	uxtb	r0, r3
 8008320:	f04f 0100 	mov.w	r1, #0
 8008324:	f04f 0200 	mov.w	r2, #0
 8008328:	f04f 0300 	mov.w	r3, #0
 800832c:	020b      	lsls	r3, r1, #8
 800832e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008332:	0202      	lsls	r2, r0, #8
														((uint64_t)unCanReceivedMsgs[gu32CanIdParserCounter].u8CanMsgByte2 << 16)|
 8008334:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8008338:	4621      	mov	r1, r4
 800833a:	4311      	orrs	r1, r2
 800833c:	60b9      	str	r1, [r7, #8]
 800833e:	4629      	mov	r1, r5
 8008340:	4319      	orrs	r1, r3
 8008342:	60f9      	str	r1, [r7, #12]
														((uint64_t)unCanReceivedMsgs[gu32CanIdParserCounter].u8CanMsgByte0);
 8008344:	4b37      	ldr	r3, [pc, #220]	; (8008424 <parseCanMessageQueue+0x264>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	4a3c      	ldr	r2, [pc, #240]	; (800843c <parseCanMessageQueue+0x27c>)
 800834a:	00db      	lsls	r3, r3, #3
 800834c:	4413      	add	r3, r2
 800834e:	79db      	ldrb	r3, [r3, #7]
 8008350:	b2da      	uxtb	r2, r3
 8008352:	f04f 0300 	mov.w	r3, #0
					gu64CanMessageArray[u32IdStatus] =  ((uint64_t)unCanReceivedMsgs[gu32CanIdParserCounter].u8CanMsgByte7 << 56)|
 8008356:	4938      	ldr	r1, [pc, #224]	; (8008438 <parseCanMessageQueue+0x278>)
 8008358:	6809      	ldr	r1, [r1, #0]
														((uint64_t)unCanReceivedMsgs[gu32CanIdParserCounter].u8CanMsgByte1 << 8) |
 800835a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800835e:	4620      	mov	r0, r4
 8008360:	4310      	orrs	r0, r2
 8008362:	6038      	str	r0, [r7, #0]
 8008364:	4628      	mov	r0, r5
 8008366:	4318      	orrs	r0, r3
 8008368:	6078      	str	r0, [r7, #4]
					gu64CanMessageArray[u32IdStatus] =  ((uint64_t)unCanReceivedMsgs[gu32CanIdParserCounter].u8CanMsgByte7 << 56)|
 800836a:	4a35      	ldr	r2, [pc, #212]	; (8008440 <parseCanMessageQueue+0x280>)
 800836c:	00cb      	lsls	r3, r1, #3
 800836e:	4413      	add	r3, r2
 8008370:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008374:	e9c3 1200 	strd	r1, r2, [r3]

					gu64CanMessageIDPGN[u32IdStatus] = unCan1939ReceivedId[gu32CanIdParserCounter].u32J1939CommandId;
 8008378:	4b2a      	ldr	r3, [pc, #168]	; (8008424 <parseCanMessageQueue+0x264>)
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	4a2a      	ldr	r2, [pc, #168]	; (8008428 <parseCanMessageQueue+0x268>)
 800837e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008382:	4a2d      	ldr	r2, [pc, #180]	; (8008438 <parseCanMessageQueue+0x278>)
 8008384:	6811      	ldr	r1, [r2, #0]
 8008386:	461a      	mov	r2, r3
 8008388:	f04f 0300 	mov.w	r3, #0
 800838c:	482d      	ldr	r0, [pc, #180]	; (8008444 <parseCanMessageQueue+0x284>)
 800838e:	00c9      	lsls	r1, r1, #3
 8008390:	4401      	add	r1, r0
 8008392:	e9c1 2300 	strd	r2, r3, [r1]

					// Reset Array Value for new Message
					unCanReceivedMsgs[gu32CanIdParserCounter].u8CanMsgByte7 = 0;
 8008396:	4b23      	ldr	r3, [pc, #140]	; (8008424 <parseCanMessageQueue+0x264>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	4a28      	ldr	r2, [pc, #160]	; (800843c <parseCanMessageQueue+0x27c>)
 800839c:	2100      	movs	r1, #0
 800839e:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
					unCanReceivedMsgs[gu32CanIdParserCounter].u8CanMsgByte6 = 0;
 80083a2:	4b20      	ldr	r3, [pc, #128]	; (8008424 <parseCanMessageQueue+0x264>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	4a25      	ldr	r2, [pc, #148]	; (800843c <parseCanMessageQueue+0x27c>)
 80083a8:	00db      	lsls	r3, r3, #3
 80083aa:	4413      	add	r3, r2
 80083ac:	2200      	movs	r2, #0
 80083ae:	705a      	strb	r2, [r3, #1]
					unCanReceivedMsgs[gu32CanIdParserCounter].u8CanMsgByte5 = 0;
 80083b0:	4b1c      	ldr	r3, [pc, #112]	; (8008424 <parseCanMessageQueue+0x264>)
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	4a21      	ldr	r2, [pc, #132]	; (800843c <parseCanMessageQueue+0x27c>)
 80083b6:	00db      	lsls	r3, r3, #3
 80083b8:	4413      	add	r3, r2
 80083ba:	2200      	movs	r2, #0
 80083bc:	709a      	strb	r2, [r3, #2]
					unCanReceivedMsgs[gu32CanIdParserCounter].u8CanMsgByte4 = 0;
 80083be:	4b19      	ldr	r3, [pc, #100]	; (8008424 <parseCanMessageQueue+0x264>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	4a1e      	ldr	r2, [pc, #120]	; (800843c <parseCanMessageQueue+0x27c>)
 80083c4:	00db      	lsls	r3, r3, #3
 80083c6:	4413      	add	r3, r2
 80083c8:	2200      	movs	r2, #0
 80083ca:	70da      	strb	r2, [r3, #3]
					unCanReceivedMsgs[gu32CanIdParserCounter].u8CanMsgByte3 = 0;
 80083cc:	4b15      	ldr	r3, [pc, #84]	; (8008424 <parseCanMessageQueue+0x264>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	4a1a      	ldr	r2, [pc, #104]	; (800843c <parseCanMessageQueue+0x27c>)
 80083d2:	00db      	lsls	r3, r3, #3
 80083d4:	4413      	add	r3, r2
 80083d6:	2200      	movs	r2, #0
 80083d8:	711a      	strb	r2, [r3, #4]
					unCanReceivedMsgs[gu32CanIdParserCounter].u8CanMsgByte2 = 0;
 80083da:	4b12      	ldr	r3, [pc, #72]	; (8008424 <parseCanMessageQueue+0x264>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	4a17      	ldr	r2, [pc, #92]	; (800843c <parseCanMessageQueue+0x27c>)
 80083e0:	00db      	lsls	r3, r3, #3
 80083e2:	4413      	add	r3, r2
 80083e4:	2200      	movs	r2, #0
 80083e6:	715a      	strb	r2, [r3, #5]
					unCanReceivedMsgs[gu32CanIdParserCounter].u8CanMsgByte1 = 0;
 80083e8:	4b0e      	ldr	r3, [pc, #56]	; (8008424 <parseCanMessageQueue+0x264>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	4a13      	ldr	r2, [pc, #76]	; (800843c <parseCanMessageQueue+0x27c>)
 80083ee:	00db      	lsls	r3, r3, #3
 80083f0:	4413      	add	r3, r2
 80083f2:	2200      	movs	r2, #0
 80083f4:	719a      	strb	r2, [r3, #6]
					unCanReceivedMsgs[gu32CanIdParserCounter].u8CanMsgByte0 = 0;
 80083f6:	4b0b      	ldr	r3, [pc, #44]	; (8008424 <parseCanMessageQueue+0x264>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	4a10      	ldr	r2, [pc, #64]	; (800843c <parseCanMessageQueue+0x27c>)
 80083fc:	00db      	lsls	r3, r3, #3
 80083fe:	4413      	add	r3, r2
 8008400:	2200      	movs	r2, #0
 8008402:	71da      	strb	r2, [r3, #7]
					u32CanIdsReceived[gu32CanIdParserCounter] = 0;
 8008404:	4b07      	ldr	r3, [pc, #28]	; (8008424 <parseCanMessageQueue+0x264>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	4a0f      	ldr	r2, [pc, #60]	; (8008448 <parseCanMessageQueue+0x288>)
 800840a:	2100      	movs	r1, #0
 800840c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					unCan1939ReceivedId[gu32CanIdParserCounter].u32J1939CommandId = 0;
 8008410:	4b04      	ldr	r3, [pc, #16]	; (8008424 <parseCanMessageQueue+0x264>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	4a04      	ldr	r2, [pc, #16]	; (8008428 <parseCanMessageQueue+0x268>)
 8008416:	2100      	movs	r1, #0
 8008418:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					u32IdStatus = 0;
 800841c:	4b06      	ldr	r3, [pc, #24]	; (8008438 <parseCanMessageQueue+0x278>)
 800841e:	2200      	movs	r2, #0
 8008420:	601a      	str	r2, [r3, #0]
 8008422:	e05a      	b.n	80084da <parseCanMessageQueue+0x31a>
 8008424:	20002808 	.word	0x20002808
 8008428:	200024e8 	.word	0x200024e8
 800842c:	20002814 	.word	0x20002814
 8008430:	20002818 	.word	0x20002818
 8008434:	200021c0 	.word	0x200021c0
 8008438:	2000281c 	.word	0x2000281c
 800843c:	20005f6c 	.word	0x20005f6c
 8008440:	200021c8 	.word	0x200021c8
 8008444:	20002358 	.word	0x20002358
 8008448:	20000ffc 	.word	0x20000ffc
				}
				else if(u32IdStatus == 0)
 800844c:	4b37      	ldr	r3, [pc, #220]	; (800852c <parseCanMessageQueue+0x36c>)
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d142      	bne.n	80084da <parseCanMessageQueue+0x31a>
				{
					/* Command Id is not Configured . Discard the Message*/
//					gu64CanMessageArray[gu32CanIdParserCounter] = 0; // change by VEDANT on 21/11/22
					//u64CanMessageReceived[gu32CanIdParserCounter] = 0;
					unCanReceivedMsgs[gu32CanIdParserCounter].u8CanMsgByte7 = 0;
 8008454:	4b36      	ldr	r3, [pc, #216]	; (8008530 <parseCanMessageQueue+0x370>)
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4a36      	ldr	r2, [pc, #216]	; (8008534 <parseCanMessageQueue+0x374>)
 800845a:	2100      	movs	r1, #0
 800845c:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
					unCanReceivedMsgs[gu32CanIdParserCounter].u8CanMsgByte6 = 0;
 8008460:	4b33      	ldr	r3, [pc, #204]	; (8008530 <parseCanMessageQueue+0x370>)
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	4a33      	ldr	r2, [pc, #204]	; (8008534 <parseCanMessageQueue+0x374>)
 8008466:	00db      	lsls	r3, r3, #3
 8008468:	4413      	add	r3, r2
 800846a:	2200      	movs	r2, #0
 800846c:	705a      	strb	r2, [r3, #1]
					unCanReceivedMsgs[gu32CanIdParserCounter].u8CanMsgByte5 = 0;
 800846e:	4b30      	ldr	r3, [pc, #192]	; (8008530 <parseCanMessageQueue+0x370>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	4a30      	ldr	r2, [pc, #192]	; (8008534 <parseCanMessageQueue+0x374>)
 8008474:	00db      	lsls	r3, r3, #3
 8008476:	4413      	add	r3, r2
 8008478:	2200      	movs	r2, #0
 800847a:	709a      	strb	r2, [r3, #2]
					unCanReceivedMsgs[gu32CanIdParserCounter].u8CanMsgByte4 = 0;
 800847c:	4b2c      	ldr	r3, [pc, #176]	; (8008530 <parseCanMessageQueue+0x370>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4a2c      	ldr	r2, [pc, #176]	; (8008534 <parseCanMessageQueue+0x374>)
 8008482:	00db      	lsls	r3, r3, #3
 8008484:	4413      	add	r3, r2
 8008486:	2200      	movs	r2, #0
 8008488:	70da      	strb	r2, [r3, #3]
					unCanReceivedMsgs[gu32CanIdParserCounter].u8CanMsgByte3 = 0;
 800848a:	4b29      	ldr	r3, [pc, #164]	; (8008530 <parseCanMessageQueue+0x370>)
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	4a29      	ldr	r2, [pc, #164]	; (8008534 <parseCanMessageQueue+0x374>)
 8008490:	00db      	lsls	r3, r3, #3
 8008492:	4413      	add	r3, r2
 8008494:	2200      	movs	r2, #0
 8008496:	711a      	strb	r2, [r3, #4]
					unCanReceivedMsgs[gu32CanIdParserCounter].u8CanMsgByte2 = 0;
 8008498:	4b25      	ldr	r3, [pc, #148]	; (8008530 <parseCanMessageQueue+0x370>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	4a25      	ldr	r2, [pc, #148]	; (8008534 <parseCanMessageQueue+0x374>)
 800849e:	00db      	lsls	r3, r3, #3
 80084a0:	4413      	add	r3, r2
 80084a2:	2200      	movs	r2, #0
 80084a4:	715a      	strb	r2, [r3, #5]
					unCanReceivedMsgs[gu32CanIdParserCounter].u8CanMsgByte1 = 0;
 80084a6:	4b22      	ldr	r3, [pc, #136]	; (8008530 <parseCanMessageQueue+0x370>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	4a22      	ldr	r2, [pc, #136]	; (8008534 <parseCanMessageQueue+0x374>)
 80084ac:	00db      	lsls	r3, r3, #3
 80084ae:	4413      	add	r3, r2
 80084b0:	2200      	movs	r2, #0
 80084b2:	719a      	strb	r2, [r3, #6]
					unCanReceivedMsgs[gu32CanIdParserCounter].u8CanMsgByte0 = 0;
 80084b4:	4b1e      	ldr	r3, [pc, #120]	; (8008530 <parseCanMessageQueue+0x370>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	4a1e      	ldr	r2, [pc, #120]	; (8008534 <parseCanMessageQueue+0x374>)
 80084ba:	00db      	lsls	r3, r3, #3
 80084bc:	4413      	add	r3, r2
 80084be:	2200      	movs	r2, #0
 80084c0:	71da      	strb	r2, [r3, #7]
					u32CanIdsReceived[gu32CanIdParserCounter] = 0;
 80084c2:	4b1b      	ldr	r3, [pc, #108]	; (8008530 <parseCanMessageQueue+0x370>)
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	4a1c      	ldr	r2, [pc, #112]	; (8008538 <parseCanMessageQueue+0x378>)
 80084c8:	2100      	movs	r1, #0
 80084ca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					unCan1939ReceivedId[gu32CanIdParserCounter].u32J1939CommandId = 0;
 80084ce:	4b18      	ldr	r3, [pc, #96]	; (8008530 <parseCanMessageQueue+0x370>)
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	4a1a      	ldr	r2, [pc, #104]	; (800853c <parseCanMessageQueue+0x37c>)
 80084d4:	2100      	movs	r1, #0
 80084d6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				}
				u32IdSearchFlag = 0;
 80084da:	4b19      	ldr	r3, [pc, #100]	; (8008540 <parseCanMessageQueue+0x380>)
 80084dc:	2200      	movs	r2, #0
 80084de:	601a      	str	r2, [r3, #0]
				u32ParserState = 0;
 80084e0:	4b18      	ldr	r3, [pc, #96]	; (8008544 <parseCanMessageQueue+0x384>)
 80084e2:	2200      	movs	r2, #0
 80084e4:	601a      	str	r2, [r3, #0]
				u32CanMsgID = 0;
 80084e6:	4b18      	ldr	r3, [pc, #96]	; (8008548 <parseCanMessageQueue+0x388>)
 80084e8:	2200      	movs	r2, #0
 80084ea:	601a      	str	r2, [r3, #0]
				gu32CanIdParserCounter++;
 80084ec:	4b10      	ldr	r3, [pc, #64]	; (8008530 <parseCanMessageQueue+0x370>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	3301      	adds	r3, #1
 80084f2:	4a0f      	ldr	r2, [pc, #60]	; (8008530 <parseCanMessageQueue+0x370>)
 80084f4:	6013      	str	r3, [r2, #0]
 80084f6:	e00d      	b.n	8008514 <parseCanMessageQueue+0x354>
			}
			else
				u32IdStatus = isCommandIdConfigured(u32CanMsgID);
 80084f8:	4b13      	ldr	r3, [pc, #76]	; (8008548 <parseCanMessageQueue+0x388>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	4618      	mov	r0, r3
 80084fe:	f7ff fe1b 	bl	8008138 <isCommandIdConfigured>
 8008502:	4603      	mov	r3, r0
 8008504:	4a09      	ldr	r2, [pc, #36]	; (800852c <parseCanMessageQueue+0x36c>)
 8008506:	6013      	str	r3, [r2, #0]
 8008508:	e004      	b.n	8008514 <parseCanMessageQueue+0x354>
		}
	}
	else
	{
		gu32CanIdParserCounter++;
 800850a:	4b09      	ldr	r3, [pc, #36]	; (8008530 <parseCanMessageQueue+0x370>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	3301      	adds	r3, #1
 8008510:	4a07      	ldr	r2, [pc, #28]	; (8008530 <parseCanMessageQueue+0x370>)
 8008512:	6013      	str	r3, [r2, #0]
	}
	if(gu32CanIdParserCounter >= CAN_BUFFER_LENGTH)
 8008514:	4b06      	ldr	r3, [pc, #24]	; (8008530 <parseCanMessageQueue+0x370>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	2bc7      	cmp	r3, #199	; 0xc7
 800851a:	d902      	bls.n	8008522 <parseCanMessageQueue+0x362>
		gu32CanIdParserCounter = 0;
 800851c:	4b04      	ldr	r3, [pc, #16]	; (8008530 <parseCanMessageQueue+0x370>)
 800851e:	2200      	movs	r2, #0
 8008520:	601a      	str	r2, [r3, #0]
}
 8008522:	bf00      	nop
 8008524:	3730      	adds	r7, #48	; 0x30
 8008526:	46bd      	mov	sp, r7
 8008528:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800852c:	2000281c 	.word	0x2000281c
 8008530:	20002808 	.word	0x20002808
 8008534:	20005f6c 	.word	0x20005f6c
 8008538:	20000ffc 	.word	0x20000ffc
 800853c:	200024e8 	.word	0x200024e8
 8008540:	200021c0 	.word	0x200021c0
 8008544:	20002814 	.word	0x20002814
 8008548:	20002818 	.word	0x20002818

0800854c <HAL_GPIO_EXTI_Callback>:

_Bool boolInginitionStatus1 = FALSE;
_Bool boolInginitionStatus2 = FALSE;

 void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)             //interrupt handler
 {
 800854c:	b580      	push	{r7, lr}
 800854e:	b082      	sub	sp, #8
 8008550:	af00      	add	r7, sp, #0
 8008552:	4603      	mov	r3, r0
 8008554:	80fb      	strh	r3, [r7, #6]
 		if(GPIO_Pin == DI_EXTI4_Pin)                         //check interrupt for DI EXTI4 pin
 8008556:	88fb      	ldrh	r3, [r7, #6]
 8008558:	2b10      	cmp	r3, #16
 800855a:	d114      	bne.n	8008586 <HAL_GPIO_EXTI_Callback+0x3a>
 		{
 			if(HAL_GPIO_ReadPin(GPIOB, DI_EXTI4_Pin) == HIGH)            //check pin state
 800855c:	2110      	movs	r1, #16
 800855e:	4818      	ldr	r0, [pc, #96]	; (80085c0 <HAL_GPIO_EXTI_Callback+0x74>)
 8008560:	f005 f8c2 	bl	800d6e8 <HAL_GPIO_ReadPin>
 8008564:	4603      	mov	r3, r0
 8008566:	2b01      	cmp	r3, #1
 8008568:	d103      	bne.n	8008572 <HAL_GPIO_EXTI_Callback+0x26>
 			{
 				boolInginitionStatus1 = FALSE;
 800856a:	4b16      	ldr	r3, [pc, #88]	; (80085c4 <HAL_GPIO_EXTI_Callback+0x78>)
 800856c:	2200      	movs	r2, #0
 800856e:	701a      	strb	r2, [r3, #0]
 8008570:	e009      	b.n	8008586 <HAL_GPIO_EXTI_Callback+0x3a>
 		    }
 			else if(HAL_GPIO_ReadPin(GPIOB, DI_EXTI4_Pin) == LOW)
 8008572:	2110      	movs	r1, #16
 8008574:	4812      	ldr	r0, [pc, #72]	; (80085c0 <HAL_GPIO_EXTI_Callback+0x74>)
 8008576:	f005 f8b7 	bl	800d6e8 <HAL_GPIO_ReadPin>
 800857a:	4603      	mov	r3, r0
 800857c:	2b00      	cmp	r3, #0
 800857e:	d102      	bne.n	8008586 <HAL_GPIO_EXTI_Callback+0x3a>
 			{
 				boolInginitionStatus1 = TRUE;
 8008580:	4b10      	ldr	r3, [pc, #64]	; (80085c4 <HAL_GPIO_EXTI_Callback+0x78>)
 8008582:	2201      	movs	r2, #1
 8008584:	701a      	strb	r2, [r3, #0]
// 					gu32PayloadQueueEnqueue = TEN_SEC;
// 				}
 			}
 		}

 		if(GPIO_Pin == DI_EXTI5_Pin)                         //check interrupt for DI EXTI4 pin
 8008586:	88fb      	ldrh	r3, [r7, #6]
 8008588:	2b20      	cmp	r3, #32
 800858a:	d114      	bne.n	80085b6 <HAL_GPIO_EXTI_Callback+0x6a>
 		{
 			if(HAL_GPIO_ReadPin(GPIOB, DI_EXTI5_Pin) == HIGH)            //check pin state
 800858c:	2120      	movs	r1, #32
 800858e:	480c      	ldr	r0, [pc, #48]	; (80085c0 <HAL_GPIO_EXTI_Callback+0x74>)
 8008590:	f005 f8aa 	bl	800d6e8 <HAL_GPIO_ReadPin>
 8008594:	4603      	mov	r3, r0
 8008596:	2b01      	cmp	r3, #1
 8008598:	d103      	bne.n	80085a2 <HAL_GPIO_EXTI_Callback+0x56>
 			{
 				boolInginitionStatus2 = FALSE;
 800859a:	4b0b      	ldr	r3, [pc, #44]	; (80085c8 <HAL_GPIO_EXTI_Callback+0x7c>)
 800859c:	2200      	movs	r2, #0
 800859e:	701a      	strb	r2, [r3, #0]
// 				{
// 					gu32PayloadQueueEnqueue = TEN_SEC;
// 				}
 			}
 		}
 }
 80085a0:	e009      	b.n	80085b6 <HAL_GPIO_EXTI_Callback+0x6a>
 			else if(HAL_GPIO_ReadPin(GPIOB, DI_EXTI5_Pin) == LOW)
 80085a2:	2120      	movs	r1, #32
 80085a4:	4806      	ldr	r0, [pc, #24]	; (80085c0 <HAL_GPIO_EXTI_Callback+0x74>)
 80085a6:	f005 f89f 	bl	800d6e8 <HAL_GPIO_ReadPin>
 80085aa:	4603      	mov	r3, r0
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d102      	bne.n	80085b6 <HAL_GPIO_EXTI_Callback+0x6a>
 				boolInginitionStatus2 = TRUE;
 80085b0:	4b05      	ldr	r3, [pc, #20]	; (80085c8 <HAL_GPIO_EXTI_Callback+0x7c>)
 80085b2:	2201      	movs	r2, #1
 80085b4:	701a      	strb	r2, [r3, #0]
 }
 80085b6:	bf00      	nop
 80085b8:	3708      	adds	r7, #8
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bd80      	pop	{r7, pc}
 80085be:	bf00      	nop
 80085c0:	48000400 	.word	0x48000400
 80085c4:	20002820 	.word	0x20002820
 80085c8:	20002821 	.word	0x20002821

080085cc <FLASH_If_Init>:
  * @brief  Unlocks Flash for write access
  * @param  None
  * @retval None
  */
void FLASH_If_Init(void)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	af00      	add	r7, sp, #0
  HAL_FLASH_Unlock();
 80085d0:	f004 fa5a 	bl	800ca88 <HAL_FLASH_Unlock>

  /* Clear pending flags (if any) */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 80085d4:	4b05      	ldr	r3, [pc, #20]	; (80085ec <FLASH_If_Init+0x20>)
 80085d6:	699b      	ldr	r3, [r3, #24]
 80085d8:	4a04      	ldr	r2, [pc, #16]	; (80085ec <FLASH_If_Init+0x20>)
 80085da:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80085de:	6193      	str	r3, [r2, #24]
 80085e0:	4b02      	ldr	r3, [pc, #8]	; (80085ec <FLASH_If_Init+0x20>)
 80085e2:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
 80085e6:	611a      	str	r2, [r3, #16]
}
 80085e8:	bf00      	nop
 80085ea:	bd80      	pop	{r7, pc}
 80085ec:	40022000 	.word	0x40022000

080085f0 <WriteDatatoFlash>:
 Change History:
 Author           	Date                Remarks
 KloudQ Team      26-07-2021			Initial Definition
******************************************************************************/
uint32_t WriteDatatoFlash(uint8_t *data,uint32_t writeCycle)
{
 80085f0:	b590      	push	{r4, r7, lr}
 80085f2:	b083      	sub	sp, #12
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
 80085f8:	6039      	str	r1, [r7, #0]
	u32FotaChunckLength = gsmInstance.u32FotaFileSizeBytes;
 80085fa:	4b0d      	ldr	r3, [pc, #52]	; (8008630 <WriteDatatoFlash+0x40>)
 80085fc:	f8d3 3fa0 	ldr.w	r3, [r3, #4000]	; 0xfa0
 8008600:	4a0c      	ldr	r2, [pc, #48]	; (8008634 <WriteDatatoFlash+0x44>)
 8008602:	6013      	str	r3, [r2, #0]
	if(FLASH_If_Write((uint64_t *)data,u32FotaChunckLength,getNewFirmwareStorageLocation(),writeCycle) == FLASHIF_OK)
 8008604:	4b0b      	ldr	r3, [pc, #44]	; (8008634 <WriteDatatoFlash+0x44>)
 8008606:	681c      	ldr	r4, [r3, #0]
 8008608:	f000 f95c 	bl	80088c4 <getNewFirmwareStorageLocation>
 800860c:	4603      	mov	r3, r0
 800860e:	461a      	mov	r2, r3
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	4621      	mov	r1, r4
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f000 f80f 	bl	8008638 <FLASH_If_Write>
 800861a:	4603      	mov	r3, r0
 800861c:	2b00      	cmp	r3, #0
 800861e:	d101      	bne.n	8008624 <WriteDatatoFlash+0x34>
//	if(FLASH_If_Write((uint64_t *)data,u32FotaChunckLength,enmBOOTSEGMENT_Y_JUMP,writeCycle) == FLASHIF_OK)

		return SUCCESS;
 8008620:	2301      	movs	r3, #1
 8008622:	e000      	b.n	8008626 <WriteDatatoFlash+0x36>
	else
		return FAIL;
 8008624:	2300      	movs	r3, #0
}
 8008626:	4618      	mov	r0, r3
 8008628:	370c      	adds	r7, #12
 800862a:	46bd      	mov	sp, r7
 800862c:	bd90      	pop	{r4, r7, pc}
 800862e:	bf00      	nop
 8008630:	20002b1c 	.word	0x20002b1c
 8008634:	20001908 	.word	0x20001908

08008638 <FLASH_If_Write>:
  * @retval 0: Data successfully written to Flash memory
  *         1: Error occurred while writing data in Flash memory
  *         2: Written Data in flash memory is different from expected one
  */
uint32_t FLASH_If_Write(uint64_t* Data ,uint32_t DataSize,enmBootMemorySegment BootMemoryRegion, uint32_t writeCycle)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b086      	sub	sp, #24
 800863c:	af00      	add	r7, sp, #0
 800863e:	60f8      	str	r0, [r7, #12]
 8008640:	60b9      	str	r1, [r7, #8]
 8008642:	603b      	str	r3, [r7, #0]
 8008644:	4613      	mov	r3, r2
 8008646:	71fb      	strb	r3, [r7, #7]

   uint32_t sofar=0,numofwords = 0;
 8008648:	2300      	movs	r3, #0
 800864a:	617b      	str	r3, [r7, #20]
 800864c:	2300      	movs	r3, #0
 800864e:	613b      	str	r3, [r7, #16]

  numofwords = ((DataSize/8)+((DataSize%8)!=0));
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	08db      	lsrs	r3, r3, #3
 8008654:	68ba      	ldr	r2, [r7, #8]
 8008656:	f002 0207 	and.w	r2, r2, #7
 800865a:	2a00      	cmp	r2, #0
 800865c:	bf14      	ite	ne
 800865e:	2201      	movne	r2, #1
 8008660:	2200      	moveq	r2, #0
 8008662:	b2d2      	uxtb	r2, r2
 8008664:	4413      	add	r3, r2
 8008666:	613b      	str	r3, [r7, #16]

  if(BootMemoryRegion == enmBOOTSEGMENT_X_JUMP )
 8008668:	79fb      	ldrb	r3, [r7, #7]
 800866a:	2b02      	cmp	r3, #2
 800866c:	d147      	bne.n	80086fe <FLASH_If_Write+0xc6>
  {
	  if(writeCycle == 1)
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	2b01      	cmp	r3, #1
 8008672:	d104      	bne.n	800867e <FLASH_If_Write+0x46>
	  		  u32MemoryDestination = FLASH_X_START_ADDR;
 8008674:	4b4a      	ldr	r3, [pc, #296]	; (80087a0 <FLASH_If_Write+0x168>)
 8008676:	f04f 2208 	mov.w	r2, #134219776	; 0x8000800
 800867a:	601a      	str	r2, [r3, #0]
 800867c:	e003      	b.n	8008686 <FLASH_If_Write+0x4e>
	  else
		  u32MemoryDestination = u32LastMemoryWriteLocation;
 800867e:	4b49      	ldr	r3, [pc, #292]	; (80087a4 <FLASH_If_Write+0x16c>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	4a47      	ldr	r2, [pc, #284]	; (80087a0 <FLASH_If_Write+0x168>)
 8008684:	6013      	str	r3, [r2, #0]

	  /* Unlock the Flash to enable the flash control register access *************/
	  FLASH_If_Init();
 8008686:	f7ff ffa1 	bl	80085cc <FLASH_If_Init>

	 /* Program the user Flash area word by word
	  (area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR) ***********/
	  while (sofar<numofwords)
 800868a:	e02c      	b.n	80086e6 <FLASH_If_Write+0xae>
	  {
		  if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, u32MemoryDestination,*(uint64_t*)(Data+sofar)) == HAL_OK)
 800868c:	4b44      	ldr	r3, [pc, #272]	; (80087a0 <FLASH_If_Write+0x168>)
 800868e:	6819      	ldr	r1, [r3, #0]
 8008690:	697b      	ldr	r3, [r7, #20]
 8008692:	00db      	lsls	r3, r3, #3
 8008694:	68fa      	ldr	r2, [r7, #12]
 8008696:	4413      	add	r3, r2
 8008698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800869c:	2000      	movs	r0, #0
 800869e:	f004 f979 	bl	800c994 <HAL_FLASH_Program>
 80086a2:	4603      	mov	r3, r0
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d11a      	bne.n	80086de <FLASH_If_Write+0xa6>
		  {
			  /* Check the written value */
			  if (*(uint64_t*)u32MemoryDestination != *(uint64_t*)(Data+sofar))
 80086a8:	4b3d      	ldr	r3, [pc, #244]	; (80087a0 <FLASH_If_Write+0x168>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 80086b0:	697b      	ldr	r3, [r7, #20]
 80086b2:	00db      	lsls	r3, r3, #3
 80086b4:	68fa      	ldr	r2, [r7, #12]
 80086b6:	4413      	add	r3, r2
 80086b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086bc:	4299      	cmp	r1, r3
 80086be:	bf08      	it	eq
 80086c0:	4290      	cmpeq	r0, r2
 80086c2:	d003      	beq.n	80086cc <FLASH_If_Write+0x94>
			  {
				  HAL_FLASH_Lock();
 80086c4:	f004 fa02 	bl	800cacc <HAL_FLASH_Lock>
				  /* Flash content doesn't match SRAM content */
				  return(FLASHIF_WRITEVERIFY_ERROR);
 80086c8:	2305      	movs	r3, #5
 80086ca:	e065      	b.n	8008798 <FLASH_If_Write+0x160>

			  }
			  u32MemoryDestination += 8;  // use StartPageAddress += 2 for half word and 8 for double word
 80086cc:	4b34      	ldr	r3, [pc, #208]	; (80087a0 <FLASH_If_Write+0x168>)
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	3308      	adds	r3, #8
 80086d2:	4a33      	ldr	r2, [pc, #204]	; (80087a0 <FLASH_If_Write+0x168>)
 80086d4:	6013      	str	r3, [r2, #0]
			  sofar++;
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	3301      	adds	r3, #1
 80086da:	617b      	str	r3, [r7, #20]
 80086dc:	e003      	b.n	80086e6 <FLASH_If_Write+0xae>
		  else
		  {
			  /* Error occurred while writing data in Flash memory*/
			  /* Lock the Flash to disable the flash control register access (recommended
				      to protect the FLASH memory against possible unwanted operation) *********/
			  HAL_FLASH_Lock();
 80086de:	f004 f9f5 	bl	800cacc <HAL_FLASH_Lock>
			  return (FLASHIF_WRITING_ERROR);
 80086e2:	2304      	movs	r3, #4
 80086e4:	e058      	b.n	8008798 <FLASH_If_Write+0x160>
	  while (sofar<numofwords)
 80086e6:	697a      	ldr	r2, [r7, #20]
 80086e8:	693b      	ldr	r3, [r7, #16]
 80086ea:	429a      	cmp	r2, r3
 80086ec:	d3ce      	bcc.n	800868c <FLASH_If_Write+0x54>
		  }
		}//end of while (sofar<numofwords)
		  /* Lock the Flash to disable the flash control register access (recommended
		  	      to protect the FLASH memory against possible unwanted operation) *********/
	  	  HAL_FLASH_Lock();
 80086ee:	f004 f9ed 	bl	800cacc <HAL_FLASH_Lock>
	  	 u32LastMemoryWriteLocation = u32MemoryDestination;
 80086f2:	4b2b      	ldr	r3, [pc, #172]	; (80087a0 <FLASH_If_Write+0x168>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	4a2b      	ldr	r2, [pc, #172]	; (80087a4 <FLASH_If_Write+0x16c>)
 80086f8:	6013      	str	r3, [r2, #0]
		  return (FLASHIF_OK);
 80086fa:	2300      	movs	r3, #0
 80086fc:	e04c      	b.n	8008798 <FLASH_If_Write+0x160>
	}//end of if(BootMemoryRegion == enmBOOTSEGMENT_X_JUMP )

  else if(BootMemoryRegion == enmBOOTSEGMENT_Y_JUMP )
 80086fe:	79fb      	ldrb	r3, [r7, #7]
 8008700:	2b03      	cmp	r3, #3
 8008702:	d146      	bne.n	8008792 <FLASH_If_Write+0x15a>
    {
  	  if(writeCycle == 1)
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	2b01      	cmp	r3, #1
 8008708:	d103      	bne.n	8008712 <FLASH_If_Write+0xda>
  	  		  u32MemoryDestination = FLASH_Y_START_ADDR;
 800870a:	4b25      	ldr	r3, [pc, #148]	; (80087a0 <FLASH_If_Write+0x168>)
 800870c:	4a26      	ldr	r2, [pc, #152]	; (80087a8 <FLASH_If_Write+0x170>)
 800870e:	601a      	str	r2, [r3, #0]
 8008710:	e003      	b.n	800871a <FLASH_If_Write+0xe2>
  	  else
  		  u32MemoryDestination = u32LastMemoryWriteLocation;
 8008712:	4b24      	ldr	r3, [pc, #144]	; (80087a4 <FLASH_If_Write+0x16c>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	4a22      	ldr	r2, [pc, #136]	; (80087a0 <FLASH_If_Write+0x168>)
 8008718:	6013      	str	r3, [r2, #0]

  	  /* Unlock the Flash to enable the flash control register access *************/
  	  FLASH_If_Init();
 800871a:	f7ff ff57 	bl	80085cc <FLASH_If_Init>

  	 /* Program the user Flash area word by word
  	  (area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR) ***********/
  	  while (sofar<numofwords)
 800871e:	e02c      	b.n	800877a <FLASH_If_Write+0x142>
  	  {
  		  if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, u32MemoryDestination,*(uint64_t*)(Data+sofar)) == HAL_OK)
 8008720:	4b1f      	ldr	r3, [pc, #124]	; (80087a0 <FLASH_If_Write+0x168>)
 8008722:	6819      	ldr	r1, [r3, #0]
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	00db      	lsls	r3, r3, #3
 8008728:	68fa      	ldr	r2, [r7, #12]
 800872a:	4413      	add	r3, r2
 800872c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008730:	2000      	movs	r0, #0
 8008732:	f004 f92f 	bl	800c994 <HAL_FLASH_Program>
 8008736:	4603      	mov	r3, r0
 8008738:	2b00      	cmp	r3, #0
 800873a:	d11a      	bne.n	8008772 <FLASH_If_Write+0x13a>
  		  {
  			  /* Check the written value */
  			  if (*(uint64_t*)u32MemoryDestination != *(uint64_t*)(Data+sofar))
 800873c:	4b18      	ldr	r3, [pc, #96]	; (80087a0 <FLASH_If_Write+0x168>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008744:	697b      	ldr	r3, [r7, #20]
 8008746:	00db      	lsls	r3, r3, #3
 8008748:	68fa      	ldr	r2, [r7, #12]
 800874a:	4413      	add	r3, r2
 800874c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008750:	4299      	cmp	r1, r3
 8008752:	bf08      	it	eq
 8008754:	4290      	cmpeq	r0, r2
 8008756:	d003      	beq.n	8008760 <FLASH_If_Write+0x128>
  			  {
  				  HAL_FLASH_Lock();
 8008758:	f004 f9b8 	bl	800cacc <HAL_FLASH_Lock>
  				  /* Flash content doesn't match SRAM content */
  				  return(FLASHIF_WRITEVERIFY_ERROR);
 800875c:	2305      	movs	r3, #5
 800875e:	e01b      	b.n	8008798 <FLASH_If_Write+0x160>

  			  }
  			  u32MemoryDestination += 8;  // use StartPageAddress += 2 for half word and 8 for double word
 8008760:	4b0f      	ldr	r3, [pc, #60]	; (80087a0 <FLASH_If_Write+0x168>)
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	3308      	adds	r3, #8
 8008766:	4a0e      	ldr	r2, [pc, #56]	; (80087a0 <FLASH_If_Write+0x168>)
 8008768:	6013      	str	r3, [r2, #0]
  			  sofar++;
 800876a:	697b      	ldr	r3, [r7, #20]
 800876c:	3301      	adds	r3, #1
 800876e:	617b      	str	r3, [r7, #20]
 8008770:	e003      	b.n	800877a <FLASH_If_Write+0x142>
  		  else
  		  {
  			  /* Error occurred while writing data in Flash memory*/
  			  /* Lock the Flash to disable the flash control register access (recommended
  				      to protect the FLASH memory against possible unwanted operation) *********/
  			  HAL_FLASH_Lock();
 8008772:	f004 f9ab 	bl	800cacc <HAL_FLASH_Lock>
  			  return (FLASHIF_WRITING_ERROR);
 8008776:	2304      	movs	r3, #4
 8008778:	e00e      	b.n	8008798 <FLASH_If_Write+0x160>
  	  while (sofar<numofwords)
 800877a:	697a      	ldr	r2, [r7, #20]
 800877c:	693b      	ldr	r3, [r7, #16]
 800877e:	429a      	cmp	r2, r3
 8008780:	d3ce      	bcc.n	8008720 <FLASH_If_Write+0xe8>
  		  }
  		}//end of while (sofar<numofwords)
  		  /* Lock the Flash to disable the flash control register access (recommended
  		  	      to protect the FLASH memory against possible unwanted operation) *********/
  	  	  HAL_FLASH_Lock();
 8008782:	f004 f9a3 	bl	800cacc <HAL_FLASH_Lock>
  	  	 u32LastMemoryWriteLocation = u32MemoryDestination;
 8008786:	4b06      	ldr	r3, [pc, #24]	; (80087a0 <FLASH_If_Write+0x168>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	4a06      	ldr	r2, [pc, #24]	; (80087a4 <FLASH_If_Write+0x16c>)
 800878c:	6013      	str	r3, [r2, #0]
  		  return (FLASHIF_OK);
 800878e:	2300      	movs	r3, #0
 8008790:	e002      	b.n	8008798 <FLASH_If_Write+0x160>
  	}//end of else if(BootMemoryRegion == enmBOOTSEGMENT_y_JUMP )
  else
  {
	  HAL_FLASH_Lock();
 8008792:	f004 f99b 	bl	800cacc <HAL_FLASH_Lock>
	  return (FLASHIF_WRITING_ERROR);
 8008796:	2304      	movs	r3, #4
  }


}
 8008798:	4618      	mov	r0, r3
 800879a:	3718      	adds	r7, #24
 800879c:	46bd      	mov	sp, r7
 800879e:	bd80      	pop	{r7, pc}
 80087a0:	20002824 	.word	0x20002824
 80087a4:	20002828 	.word	0x20002828
 80087a8:	08020000 	.word	0x08020000

080087ac <GetPage>:


uint32_t GetPage(uint32_t Addr)
{
 80087ac:	b480      	push	{r7}
 80087ae:	b085      	sub	sp, #20
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
  uint32_t page = 0;
 80087b4:	2300      	movs	r3, #0
 80087b6:	60fb      	str	r3, [r7, #12]

  page = (Addr - FLASH_BASE) / FLASH_PAGE_SIZE;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 80087be:	0adb      	lsrs	r3, r3, #11
 80087c0:	60fb      	str	r3, [r7, #12]
  return page;
 80087c2:	68fb      	ldr	r3, [r7, #12]
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	3714      	adds	r7, #20
 80087c8:	46bd      	mov	sp, r7
 80087ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ce:	4770      	bx	lr

080087d0 <FLASH_If_Erase>:

uint32_t  FLASH_If_Erase(uint32_t state, enmBootMemorySegment BootMemoryRegion)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b086      	sub	sp, #24
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
 80087d8:	460b      	mov	r3, r1
 80087da:	70fb      	strb	r3, [r7, #3]
	uint32_t FirstPage = 0,EndPage = 0, NbOfPages = 0,PAGEError = 0;
 80087dc:	2300      	movs	r3, #0
 80087de:	617b      	str	r3, [r7, #20]
 80087e0:	2300      	movs	r3, #0
 80087e2:	613b      	str	r3, [r7, #16]
 80087e4:	2300      	movs	r3, #0
 80087e6:	60fb      	str	r3, [r7, #12]
 80087e8:	2300      	movs	r3, #0
 80087ea:	60bb      	str	r3, [r7, #8]
	static FLASH_EraseInitTypeDef EraseInitStruct;

	if(BootMemoryRegion == enmBOOTSEGMENT_X_JUMP )
 80087ec:	78fb      	ldrb	r3, [r7, #3]
 80087ee:	2b02      	cmp	r3, #2
 80087f0:	d12b      	bne.n	800884a <FLASH_If_Erase+0x7a>
	{
		/* Get the 1st page to erase */
		FirstPage = GetPage(FLASH_X_START_ADDR);
 80087f2:	f04f 2008 	mov.w	r0, #134219776	; 0x8000800
 80087f6:	f7ff ffd9 	bl	80087ac <GetPage>
 80087fa:	6178      	str	r0, [r7, #20]

		/* Get the last page to erase */
		EndPage = GetPage(FLASH_X_END_ADDR);
 80087fc:	482d      	ldr	r0, [pc, #180]	; (80088b4 <FLASH_If_Erase+0xe4>)
 80087fe:	f7ff ffd5 	bl	80087ac <GetPage>
 8008802:	6138      	str	r0, [r7, #16]

		/* Get the number of pages to erase from 1st page */
//		NbOfPages = ((EndPage - FirstPage))+1;
		NbOfPages = ((EndPage - FirstPage));
 8008804:	693a      	ldr	r2, [r7, #16]
 8008806:	697b      	ldr	r3, [r7, #20]
 8008808:	1ad3      	subs	r3, r2, r3
 800880a:	60fb      	str	r3, [r7, #12]

		/* Fill EraseInit structure*/
		EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 800880c:	4b2a      	ldr	r3, [pc, #168]	; (80088b8 <FLASH_If_Erase+0xe8>)
 800880e:	2200      	movs	r2, #0
 8008810:	601a      	str	r2, [r3, #0]
		EraseInitStruct.Banks     = FLASH_BANK_1;
 8008812:	4b29      	ldr	r3, [pc, #164]	; (80088b8 <FLASH_If_Erase+0xe8>)
 8008814:	2201      	movs	r2, #1
 8008816:	605a      	str	r2, [r3, #4]
		EraseInitStruct.Page		= FirstPage;
 8008818:	4a27      	ldr	r2, [pc, #156]	; (80088b8 <FLASH_If_Erase+0xe8>)
 800881a:	697b      	ldr	r3, [r7, #20]
 800881c:	6093      	str	r3, [r2, #8]
		EraseInitStruct.NbPages	= NbOfPages;
 800881e:	4a26      	ldr	r2, [pc, #152]	; (80088b8 <FLASH_If_Erase+0xe8>)
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	60d3      	str	r3, [r2, #12]

		/* Unlock the Flash to enable the flash control register access *************/
		FLASH_If_Init();
 8008824:	f7ff fed2 	bl	80085cc <FLASH_If_Init>

		if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 8008828:	f107 0308 	add.w	r3, r7, #8
 800882c:	4619      	mov	r1, r3
 800882e:	4822      	ldr	r0, [pc, #136]	; (80088b8 <FLASH_If_Erase+0xe8>)
 8008830:	f004 faa4 	bl	800cd7c <HAL_FLASHEx_Erase>
 8008834:	4603      	mov	r3, r0
 8008836:	2b00      	cmp	r3, #0
 8008838:	d003      	beq.n	8008842 <FLASH_If_Erase+0x72>
		{
			HAL_FLASH_Lock();
 800883a:	f004 f947 	bl	800cacc <HAL_FLASH_Lock>
			return (FLASHIF_ERASE_ERROR);
 800883e:	2302      	movs	r3, #2
 8008840:	e034      	b.n	80088ac <FLASH_If_Erase+0xdc>
		}
		else
		{
			HAL_FLASH_Lock();
 8008842:	f004 f943 	bl	800cacc <HAL_FLASH_Lock>
			return (FLASHIF_ERASE_OK);
 8008846:	2301      	movs	r3, #1
 8008848:	e030      	b.n	80088ac <FLASH_If_Erase+0xdc>
		}
	}// end of if(BootMemoryRegion == enmBOOTSEGMENT_X_JUMP )

	else if(BootMemoryRegion == enmBOOTSEGMENT_Y_JUMP )
 800884a:	78fb      	ldrb	r3, [r7, #3]
 800884c:	2b03      	cmp	r3, #3
 800884e:	d12a      	bne.n	80088a6 <FLASH_If_Erase+0xd6>
	{
		/* Get the 1st page to erase */
		FirstPage = GetPage(FLASH_Y_START_ADDR);
 8008850:	481a      	ldr	r0, [pc, #104]	; (80088bc <FLASH_If_Erase+0xec>)
 8008852:	f7ff ffab 	bl	80087ac <GetPage>
 8008856:	6178      	str	r0, [r7, #20]

		/* Get the last page to erase */
		EndPage = GetPage(FLASH_Y_END_ADDR);
 8008858:	4819      	ldr	r0, [pc, #100]	; (80088c0 <FLASH_If_Erase+0xf0>)
 800885a:	f7ff ffa7 	bl	80087ac <GetPage>
 800885e:	6138      	str	r0, [r7, #16]

		/* Get the number of pages to erase from 1st page */
		NbOfPages = ((EndPage - FirstPage));
 8008860:	693a      	ldr	r2, [r7, #16]
 8008862:	697b      	ldr	r3, [r7, #20]
 8008864:	1ad3      	subs	r3, r2, r3
 8008866:	60fb      	str	r3, [r7, #12]

		/* Fill EraseInit structure*/
		EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8008868:	4b13      	ldr	r3, [pc, #76]	; (80088b8 <FLASH_If_Erase+0xe8>)
 800886a:	2200      	movs	r2, #0
 800886c:	601a      	str	r2, [r3, #0]
		EraseInitStruct.Banks     = FLASH_BANK_1;
 800886e:	4b12      	ldr	r3, [pc, #72]	; (80088b8 <FLASH_If_Erase+0xe8>)
 8008870:	2201      	movs	r2, #1
 8008872:	605a      	str	r2, [r3, #4]
		EraseInitStruct.Page		= FirstPage;
 8008874:	4a10      	ldr	r2, [pc, #64]	; (80088b8 <FLASH_If_Erase+0xe8>)
 8008876:	697b      	ldr	r3, [r7, #20]
 8008878:	6093      	str	r3, [r2, #8]
		EraseInitStruct.NbPages	= NbOfPages;
 800887a:	4a0f      	ldr	r2, [pc, #60]	; (80088b8 <FLASH_If_Erase+0xe8>)
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	60d3      	str	r3, [r2, #12]

		/* Unlock the Flash to enable the flash control register access *************/
		FLASH_If_Init();
 8008880:	f7ff fea4 	bl	80085cc <FLASH_If_Init>

		if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 8008884:	f107 0308 	add.w	r3, r7, #8
 8008888:	4619      	mov	r1, r3
 800888a:	480b      	ldr	r0, [pc, #44]	; (80088b8 <FLASH_If_Erase+0xe8>)
 800888c:	f004 fa76 	bl	800cd7c <HAL_FLASHEx_Erase>
 8008890:	4603      	mov	r3, r0
 8008892:	2b00      	cmp	r3, #0
 8008894:	d003      	beq.n	800889e <FLASH_If_Erase+0xce>
		{
			HAL_FLASH_Lock();
 8008896:	f004 f919 	bl	800cacc <HAL_FLASH_Lock>
			return (FLASHIF_ERASE_ERROR);
 800889a:	2302      	movs	r3, #2
 800889c:	e006      	b.n	80088ac <FLASH_If_Erase+0xdc>
		}
		else
		{
			HAL_FLASH_Lock();
 800889e:	f004 f915 	bl	800cacc <HAL_FLASH_Lock>
			return (FLASHIF_ERASE_OK);
 80088a2:	2301      	movs	r3, #1
 80088a4:	e002      	b.n	80088ac <FLASH_If_Erase+0xdc>
		}
	}// end of if(BootMemoryRegion == enmBOOTSEGMENT_Y_JUMP )
	else
	{
		HAL_FLASH_Lock();
 80088a6:	f004 f911 	bl	800cacc <HAL_FLASH_Lock>
		return (FLASHIF_ERASE_ERROR);
 80088aa:	2302      	movs	r3, #2
	}
}//end of uint32_t  FLASH_If_Erase(uint32_t state, enmBootMemorySegment BootMemoryRegion)
 80088ac:	4618      	mov	r0, r3
 80088ae:	3718      	adds	r7, #24
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bd80      	pop	{r7, pc}
 80088b4:	0801f800 	.word	0x0801f800
 80088b8:	20002830 	.word	0x20002830
 80088bc:	08020000 	.word	0x08020000
 80088c0:	0803f000 	.word	0x0803f000

080088c4 <getNewFirmwareStorageLocation>:
 Change History:
 Author            	Date                Remarks
 KloudQ Team        30/03/2020			initial Definitions
******************************************************************************/
enmBootMemorySegment getNewFirmwareStorageLocation(void)
{
 80088c4:	b480      	push	{r7}
 80088c6:	af00      	add	r7, sp, #0
	if((BOOTMEMORYINFO == BOOT_MEM_X_JUMP) || (BOOTMEMORYINFO == BOOT_MEM_X))
 80088c8:	4b0c      	ldr	r3, [pc, #48]	; (80088fc <getNewFirmwareStorageLocation+0x38>)
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	2b58      	cmp	r3, #88	; 0x58
 80088ce:	d003      	beq.n	80088d8 <getNewFirmwareStorageLocation+0x14>
 80088d0:	4b0a      	ldr	r3, [pc, #40]	; (80088fc <getNewFirmwareStorageLocation+0x38>)
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	2b7e      	cmp	r3, #126	; 0x7e
 80088d6:	d101      	bne.n	80088dc <getNewFirmwareStorageLocation+0x18>
	{
		/* Current Firmware Location is in X-Memory Region .
		   Store New FW in Y Memory Region */
		return enmBOOTSEGMENT_Y_JUMP;
 80088d8:	2303      	movs	r3, #3
 80088da:	e00a      	b.n	80088f2 <getNewFirmwareStorageLocation+0x2e>

	}
	else if((BOOTMEMORYINFO == BOOT_MEM_Y_JUMP) || (BOOTMEMORYINFO == BOOT_MEM_Y))
 80088dc:	4b07      	ldr	r3, [pc, #28]	; (80088fc <getNewFirmwareStorageLocation+0x38>)
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	2b59      	cmp	r3, #89	; 0x59
 80088e2:	d003      	beq.n	80088ec <getNewFirmwareStorageLocation+0x28>
 80088e4:	4b05      	ldr	r3, [pc, #20]	; (80088fc <getNewFirmwareStorageLocation+0x38>)
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	2b7f      	cmp	r3, #127	; 0x7f
 80088ea:	d101      	bne.n	80088f0 <getNewFirmwareStorageLocation+0x2c>
	{
		/* Current Firmware Location is in Y-Memory Region .
		   Store New FW in X Memory Region */
		return enmBOOTSEGMENT_X_JUMP;
 80088ec:	2302      	movs	r3, #2
 80088ee:	e000      	b.n	80088f2 <getNewFirmwareStorageLocation+0x2e>
	}
	else
	{
		/* Illegal Firmware Informations . Abort FOTA Jumping */
		return enmBOOTSEGMENT_Y_JUMP;
 80088f0:	2303      	movs	r3, #3
	}
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	46bd      	mov	sp, r7
 80088f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fa:	4770      	bx	lr
 80088fc:	0803f800 	.word	0x0803f800

08008900 <flashWriteBootSection>:
 KloudQ Team        26/03/2020			initial Definitions
 Kloudq Team		27/03/2020			Wr/Rd Tested , Timeout added
******************************************************************************/
uint32_t gu32DataFromMemory = 0;
uint32_t flashWriteBootSection(enmBootMemorySegment memorySegment)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b084      	sub	sp, #16
 8008904:	af00      	add	r7, sp, #0
 8008906:	4603      	mov	r3, r0
 8008908:	71fb      	strb	r3, [r7, #7]
	uint32_t u32TempDataBuffer = 0;
 800890a:	2300      	movs	r3, #0
 800890c:	60fb      	str	r3, [r7, #12]
	switch(memorySegment)
 800890e:	79fb      	ldrb	r3, [r7, #7]
 8008910:	2b03      	cmp	r3, #3
 8008912:	d863      	bhi.n	80089dc <flashWriteBootSection+0xdc>
 8008914:	a201      	add	r2, pc, #4	; (adr r2, 800891c <flashWriteBootSection+0x1c>)
 8008916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800891a:	bf00      	nop
 800891c:	0800892d 	.word	0x0800892d
 8008920:	08008981 	.word	0x08008981
 8008924:	08008957 	.word	0x08008957
 8008928:	080089ab 	.word	0x080089ab
	{
		case enmBOOTSEGMENT_X:
			/* Will not be used during FOTA */
			if(EraseSinglePage(BOOTMEMORYADDRESS)== FLASHIF_ERASE_OK)
 800892c:	4836      	ldr	r0, [pc, #216]	; (8008a08 <flashWriteBootSection+0x108>)
 800892e:	f000 f86f 	bl	8008a10 <EraseSinglePage>
 8008932:	4603      	mov	r3, r0
 8008934:	2b01      	cmp	r3, #1
 8008936:	d10a      	bne.n	800894e <flashWriteBootSection+0x4e>
			{
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, BOOTMEMORYADDRESS, BOOT_MEM_X);
 8008938:	f04f 027e 	mov.w	r2, #126	; 0x7e
 800893c:	f04f 0300 	mov.w	r3, #0
 8008940:	4931      	ldr	r1, [pc, #196]	; (8008a08 <flashWriteBootSection+0x108>)
 8008942:	2000      	movs	r0, #0
 8008944:	f004 f826 	bl	800c994 <HAL_FLASH_Program>
				u32TempDataBuffer = BOOT_MEM_X;
 8008948:	237e      	movs	r3, #126	; 0x7e
 800894a:	60fb      	str	r3, [r7, #12]
			else
			{
				HAL_FLASH_Lock();
				return 1;/* Memory Write Failed */
			}
			break;
 800894c:	e049      	b.n	80089e2 <flashWriteBootSection+0xe2>
				HAL_FLASH_Lock();
 800894e:	f004 f8bd 	bl	800cacc <HAL_FLASH_Lock>
				return 1;/* Memory Write Failed */
 8008952:	2301      	movs	r3, #1
 8008954:	e053      	b.n	80089fe <flashWriteBootSection+0xfe>
		case enmBOOTSEGMENT_X_JUMP:
			if(EraseSinglePage(BOOTMEMORYADDRESS)== FLASHIF_ERASE_OK)
 8008956:	482c      	ldr	r0, [pc, #176]	; (8008a08 <flashWriteBootSection+0x108>)
 8008958:	f000 f85a 	bl	8008a10 <EraseSinglePage>
 800895c:	4603      	mov	r3, r0
 800895e:	2b01      	cmp	r3, #1
 8008960:	d10a      	bne.n	8008978 <flashWriteBootSection+0x78>
			{
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, BOOTMEMORYADDRESS, BOOT_MEM_X_JUMP);
 8008962:	f04f 0258 	mov.w	r2, #88	; 0x58
 8008966:	f04f 0300 	mov.w	r3, #0
 800896a:	4927      	ldr	r1, [pc, #156]	; (8008a08 <flashWriteBootSection+0x108>)
 800896c:	2000      	movs	r0, #0
 800896e:	f004 f811 	bl	800c994 <HAL_FLASH_Program>
				u32TempDataBuffer = BOOT_MEM_X_JUMP;
 8008972:	2358      	movs	r3, #88	; 0x58
 8008974:	60fb      	str	r3, [r7, #12]
			else
			{
				HAL_FLASH_Lock();
				return 1;/* Memory Write Failed */
			}
			break;
 8008976:	e034      	b.n	80089e2 <flashWriteBootSection+0xe2>
				HAL_FLASH_Lock();
 8008978:	f004 f8a8 	bl	800cacc <HAL_FLASH_Lock>
				return 1;/* Memory Write Failed */
 800897c:	2301      	movs	r3, #1
 800897e:	e03e      	b.n	80089fe <flashWriteBootSection+0xfe>
		case enmBOOTSEGMENT_Y:
			/* Will not be used during FOTA */
			if(EraseSinglePage(BOOTMEMORYADDRESS)== FLASHIF_ERASE_OK)
 8008980:	4821      	ldr	r0, [pc, #132]	; (8008a08 <flashWriteBootSection+0x108>)
 8008982:	f000 f845 	bl	8008a10 <EraseSinglePage>
 8008986:	4603      	mov	r3, r0
 8008988:	2b01      	cmp	r3, #1
 800898a:	d10a      	bne.n	80089a2 <flashWriteBootSection+0xa2>
			{
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, BOOTMEMORYADDRESS, BOOT_MEM_Y);
 800898c:	f04f 027f 	mov.w	r2, #127	; 0x7f
 8008990:	f04f 0300 	mov.w	r3, #0
 8008994:	491c      	ldr	r1, [pc, #112]	; (8008a08 <flashWriteBootSection+0x108>)
 8008996:	2000      	movs	r0, #0
 8008998:	f003 fffc 	bl	800c994 <HAL_FLASH_Program>
				u32TempDataBuffer = BOOT_MEM_Y;
 800899c:	237f      	movs	r3, #127	; 0x7f
 800899e:	60fb      	str	r3, [r7, #12]
			else
			{
				HAL_FLASH_Lock();
				return 1;/* Memory Write Failed */
			}
			break;
 80089a0:	e01f      	b.n	80089e2 <flashWriteBootSection+0xe2>
				HAL_FLASH_Lock();
 80089a2:	f004 f893 	bl	800cacc <HAL_FLASH_Lock>
				return 1;/* Memory Write Failed */
 80089a6:	2301      	movs	r3, #1
 80089a8:	e029      	b.n	80089fe <flashWriteBootSection+0xfe>
		case enmBOOTSEGMENT_Y_JUMP:
			if(EraseSinglePage(BOOTMEMORYADDRESS)== FLASHIF_ERASE_OK)
 80089aa:	4817      	ldr	r0, [pc, #92]	; (8008a08 <flashWriteBootSection+0x108>)
 80089ac:	f000 f830 	bl	8008a10 <EraseSinglePage>
 80089b0:	4603      	mov	r3, r0
 80089b2:	2b01      	cmp	r3, #1
 80089b4:	d10e      	bne.n	80089d4 <flashWriteBootSection+0xd4>
			{
				/* Unlock the Flash to enable the flash control register access *************/
				FLASH_If_Init();
 80089b6:	f7ff fe09 	bl	80085cc <FLASH_If_Init>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, BOOTMEMORYADDRESS, BOOT_MEM_Y_JUMP);
 80089ba:	f04f 0259 	mov.w	r2, #89	; 0x59
 80089be:	f04f 0300 	mov.w	r3, #0
 80089c2:	4911      	ldr	r1, [pc, #68]	; (8008a08 <flashWriteBootSection+0x108>)
 80089c4:	2000      	movs	r0, #0
 80089c6:	f003 ffe5 	bl	800c994 <HAL_FLASH_Program>
				u32TempDataBuffer = BOOT_MEM_Y_JUMP;
 80089ca:	2359      	movs	r3, #89	; 0x59
 80089cc:	60fb      	str	r3, [r7, #12]
				HAL_FLASH_Lock();
 80089ce:	f004 f87d 	bl	800cacc <HAL_FLASH_Lock>
			else
			{
				HAL_FLASH_Lock();
				return 1;/* Memory Write Failed */
			}
			break;
 80089d2:	e006      	b.n	80089e2 <flashWriteBootSection+0xe2>
				HAL_FLASH_Lock();
 80089d4:	f004 f87a 	bl	800cacc <HAL_FLASH_Lock>
				return 1;/* Memory Write Failed */
 80089d8:	2301      	movs	r3, #1
 80089da:	e010      	b.n	80089fe <flashWriteBootSection+0xfe>

		default:
			HAL_FLASH_Lock();
 80089dc:	f004 f876 	bl	800cacc <HAL_FLASH_Lock>
			break;
 80089e0:	bf00      	nop
	}

	HAL_FLASH_Lock();
 80089e2:	f004 f873 	bl	800cacc <HAL_FLASH_Lock>
	/* Verify Correctness of the data written */
	gu32DataFromMemory= *((uint32_t *) BOOTMEMORYADDRESS);
 80089e6:	4b08      	ldr	r3, [pc, #32]	; (8008a08 <flashWriteBootSection+0x108>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	4a08      	ldr	r2, [pc, #32]	; (8008a0c <flashWriteBootSection+0x10c>)
 80089ec:	6013      	str	r3, [r2, #0]
	if(gu32DataFromMemory == u32TempDataBuffer)
 80089ee:	4b07      	ldr	r3, [pc, #28]	; (8008a0c <flashWriteBootSection+0x10c>)
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	68fa      	ldr	r2, [r7, #12]
 80089f4:	429a      	cmp	r2, r3
 80089f6:	d101      	bne.n	80089fc <flashWriteBootSection+0xfc>
		return 0; /* Memory Write Successful */
 80089f8:	2300      	movs	r3, #0
 80089fa:	e000      	b.n	80089fe <flashWriteBootSection+0xfe>
	else
		return 1; /* Memory Write Failed */
 80089fc:	2301      	movs	r3, #1

}
 80089fe:	4618      	mov	r0, r3
 8008a00:	3710      	adds	r7, #16
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd80      	pop	{r7, pc}
 8008a06:	bf00      	nop
 8008a08:	0803f800 	.word	0x0803f800
 8008a0c:	2000282c 	.word	0x2000282c

08008a10 <EraseSinglePage>:

uint32_t EraseSinglePage(uint32_t EraseAddr)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b084      	sub	sp, #16
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PAGEError = 0;
 8008a18:	2300      	movs	r3, #0
 8008a1a:	60fb      	str	r3, [r7, #12]

	/* Fill EraseInit structure*/
	EraseInitStruct.TypeErase	 = FLASH_TYPEERASE_PAGES;
 8008a1c:	4b12      	ldr	r3, [pc, #72]	; (8008a68 <EraseSinglePage+0x58>)
 8008a1e:	2200      	movs	r2, #0
 8008a20:	601a      	str	r2, [r3, #0]
	EraseInitStruct.Banks    	 = FLASH_BANK_1;
 8008a22:	4b11      	ldr	r3, [pc, #68]	; (8008a68 <EraseSinglePage+0x58>)
 8008a24:	2201      	movs	r2, #1
 8008a26:	605a      	str	r2, [r3, #4]
	EraseInitStruct.Page		 = ((EraseAddr - FLASH_BASE) / FLASH_PAGE_SIZE);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8008a2e:	0adb      	lsrs	r3, r3, #11
 8008a30:	4a0d      	ldr	r2, [pc, #52]	; (8008a68 <EraseSinglePage+0x58>)
 8008a32:	6093      	str	r3, [r2, #8]
	EraseInitStruct.NbPages		 = 1;
 8008a34:	4b0c      	ldr	r3, [pc, #48]	; (8008a68 <EraseSinglePage+0x58>)
 8008a36:	2201      	movs	r2, #1
 8008a38:	60da      	str	r2, [r3, #12]

	/* Unlock the Flash to enable the flash control register access *************/
	FLASH_If_Init();
 8008a3a:	f7ff fdc7 	bl	80085cc <FLASH_If_Init>

	if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 8008a3e:	f107 030c 	add.w	r3, r7, #12
 8008a42:	4619      	mov	r1, r3
 8008a44:	4808      	ldr	r0, [pc, #32]	; (8008a68 <EraseSinglePage+0x58>)
 8008a46:	f004 f999 	bl	800cd7c <HAL_FLASHEx_Erase>
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d003      	beq.n	8008a58 <EraseSinglePage+0x48>
	{
		HAL_FLASH_Lock();
 8008a50:	f004 f83c 	bl	800cacc <HAL_FLASH_Lock>
		return (FLASHIF_ERASE_ERROR);
 8008a54:	2302      	movs	r3, #2
 8008a56:	e002      	b.n	8008a5e <EraseSinglePage+0x4e>
	}
	else
	{
		HAL_FLASH_Lock();
 8008a58:	f004 f838 	bl	800cacc <HAL_FLASH_Lock>
		return (FLASHIF_ERASE_OK);
 8008a5c:	2301      	movs	r3, #1
	}
}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	3710      	adds	r7, #16
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}
 8008a66:	bf00      	nop
 8008a68:	20002840 	.word	0x20002840

08008a6c <getrtcStamp>:
 Change History:
 Author           	Date                Remarks
 KloudQ Team      11-04-18
******************************************************************************/
void getrtcStamp(void)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	af00      	add	r7, sp, #0
	HAL_RTC_GetTime(&hrtc,&STime1,RTC_FORMAT_BCD);
 8008a70:	2201      	movs	r2, #1
 8008a72:	4926      	ldr	r1, [pc, #152]	; (8008b0c <getrtcStamp+0xa0>)
 8008a74:	4826      	ldr	r0, [pc, #152]	; (8008b10 <getrtcStamp+0xa4>)
 8008a76:	f008 fbbb 	bl	80111f0 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc,&SDate1,RTC_FORMAT_BCD);
 8008a7a:	2201      	movs	r2, #1
 8008a7c:	4925      	ldr	r1, [pc, #148]	; (8008b14 <getrtcStamp+0xa8>)
 8008a7e:	4824      	ldr	r0, [pc, #144]	; (8008b10 <getrtcStamp+0xa4>)
 8008a80:	f008 fd30 	bl	80114e4 <HAL_RTC_GetDate>

	itoa(BCDToDecimal(SDate1.Year),gau8Year,PAYLOAD_DATA_STRING_RADIX);
 8008a84:	4b23      	ldr	r3, [pc, #140]	; (8008b14 <getrtcStamp+0xa8>)
 8008a86:	78db      	ldrb	r3, [r3, #3]
 8008a88:	4618      	mov	r0, r3
 8008a8a:	f000 f86f 	bl	8008b6c <BCDToDecimal>
 8008a8e:	4603      	mov	r3, r0
 8008a90:	220a      	movs	r2, #10
 8008a92:	4921      	ldr	r1, [pc, #132]	; (8008b18 <getrtcStamp+0xac>)
 8008a94:	4618      	mov	r0, r3
 8008a96:	f00b fb01 	bl	801409c <itoa>
	itoa(BCDToDecimal(SDate1.Month),gau8Month,PAYLOAD_DATA_STRING_RADIX);
 8008a9a:	4b1e      	ldr	r3, [pc, #120]	; (8008b14 <getrtcStamp+0xa8>)
 8008a9c:	785b      	ldrb	r3, [r3, #1]
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	f000 f864 	bl	8008b6c <BCDToDecimal>
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	220a      	movs	r2, #10
 8008aa8:	491c      	ldr	r1, [pc, #112]	; (8008b1c <getrtcStamp+0xb0>)
 8008aaa:	4618      	mov	r0, r3
 8008aac:	f00b faf6 	bl	801409c <itoa>
	itoa(BCDToDecimal(SDate1.Date),gau8Date,PAYLOAD_DATA_STRING_RADIX);
 8008ab0:	4b18      	ldr	r3, [pc, #96]	; (8008b14 <getrtcStamp+0xa8>)
 8008ab2:	789b      	ldrb	r3, [r3, #2]
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	f000 f859 	bl	8008b6c <BCDToDecimal>
 8008aba:	4603      	mov	r3, r0
 8008abc:	220a      	movs	r2, #10
 8008abe:	4918      	ldr	r1, [pc, #96]	; (8008b20 <getrtcStamp+0xb4>)
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	f00b faeb 	bl	801409c <itoa>

	itoa(BCDToDecimal(STime1.Hours),gau8Hour,PAYLOAD_DATA_STRING_RADIX);
 8008ac6:	4b11      	ldr	r3, [pc, #68]	; (8008b0c <getrtcStamp+0xa0>)
 8008ac8:	781b      	ldrb	r3, [r3, #0]
 8008aca:	4618      	mov	r0, r3
 8008acc:	f000 f84e 	bl	8008b6c <BCDToDecimal>
 8008ad0:	4603      	mov	r3, r0
 8008ad2:	220a      	movs	r2, #10
 8008ad4:	4913      	ldr	r1, [pc, #76]	; (8008b24 <getrtcStamp+0xb8>)
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f00b fae0 	bl	801409c <itoa>
	itoa(BCDToDecimal(STime1.Minutes),gau8Minutes,PAYLOAD_DATA_STRING_RADIX);
 8008adc:	4b0b      	ldr	r3, [pc, #44]	; (8008b0c <getrtcStamp+0xa0>)
 8008ade:	785b      	ldrb	r3, [r3, #1]
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	f000 f843 	bl	8008b6c <BCDToDecimal>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	220a      	movs	r2, #10
 8008aea:	490f      	ldr	r1, [pc, #60]	; (8008b28 <getrtcStamp+0xbc>)
 8008aec:	4618      	mov	r0, r3
 8008aee:	f00b fad5 	bl	801409c <itoa>
	itoa(BCDToDecimal(STime1.Seconds),gau8Seconds,PAYLOAD_DATA_STRING_RADIX);
 8008af2:	4b06      	ldr	r3, [pc, #24]	; (8008b0c <getrtcStamp+0xa0>)
 8008af4:	789b      	ldrb	r3, [r3, #2]
 8008af6:	4618      	mov	r0, r3
 8008af8:	f000 f838 	bl	8008b6c <BCDToDecimal>
 8008afc:	4603      	mov	r3, r0
 8008afe:	220a      	movs	r2, #10
 8008b00:	490a      	ldr	r1, [pc, #40]	; (8008b2c <getrtcStamp+0xc0>)
 8008b02:	4618      	mov	r0, r3
 8008b04:	f00b faca 	bl	801409c <itoa>
}
 8008b08:	bf00      	nop
 8008b0a:	bd80      	pop	{r7, pc}
 8008b0c:	200065f8 	.word	0x200065f8
 8008b10:	20003e60 	.word	0x20003e60
 8008b14:	200065f4 	.word	0x200065f4
 8008b18:	200014b4 	.word	0x200014b4
 8008b1c:	200014bc 	.word	0x200014bc
 8008b20:	200014c0 	.word	0x200014c0
 8008b24:	200014c4 	.word	0x200014c4
 8008b28:	200014c8 	.word	0x200014c8
 8008b2c:	200014cc 	.word	0x200014cc

08008b30 <DecimalToBCD>:
 Change History:
 Author           	Date                Remarks
 KloudQ Team      13-10-2020			100133
******************************************************************************/
uint32_t DecimalToBCD (uint32_t Decimal)
{
 8008b30:	b480      	push	{r7}
 8008b32:	b083      	sub	sp, #12
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
   return (((Decimal/10) << 4) | (Decimal % 10));
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	4a0b      	ldr	r2, [pc, #44]	; (8008b68 <DecimalToBCD+0x38>)
 8008b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8008b40:	08db      	lsrs	r3, r3, #3
 8008b42:	0118      	lsls	r0, r3, #4
 8008b44:	6879      	ldr	r1, [r7, #4]
 8008b46:	4b08      	ldr	r3, [pc, #32]	; (8008b68 <DecimalToBCD+0x38>)
 8008b48:	fba3 2301 	umull	r2, r3, r3, r1
 8008b4c:	08da      	lsrs	r2, r3, #3
 8008b4e:	4613      	mov	r3, r2
 8008b50:	009b      	lsls	r3, r3, #2
 8008b52:	4413      	add	r3, r2
 8008b54:	005b      	lsls	r3, r3, #1
 8008b56:	1aca      	subs	r2, r1, r3
 8008b58:	ea40 0302 	orr.w	r3, r0, r2
}
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	370c      	adds	r7, #12
 8008b60:	46bd      	mov	sp, r7
 8008b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b66:	4770      	bx	lr
 8008b68:	cccccccd 	.word	0xcccccccd

08008b6c <BCDToDecimal>:
 Change History:
 Author           	Date                Remarks
 KloudQ Team      13-10-2020			100133
******************************************************************************/
uint32_t BCDToDecimal(uint32_t BCD)
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b083      	sub	sp, #12
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
   return (((BCD >> 4) * 10) + (BCD & 0xF));
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	091a      	lsrs	r2, r3, #4
 8008b78:	4613      	mov	r3, r2
 8008b7a:	009b      	lsls	r3, r3, #2
 8008b7c:	4413      	add	r3, r2
 8008b7e:	005b      	lsls	r3, r3, #1
 8008b80:	461a      	mov	r2, r3
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	f003 030f 	and.w	r3, r3, #15
 8008b88:	4413      	add	r3, r2
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	370c      	adds	r7, #12
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b94:	4770      	bx	lr
	...

08008b98 <HAL_TIM_PeriodElapsedCallback>:
 Change History:
 Author           	Date                Remarks
 System Generated  11-04-18
******************************************************************************/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008b98:	b480      	push	{r7}
 8008b9a:	b083      	sub	sp, #12
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
	/*HP Timer Interrupt : 50 us*/

	if(htim->Instance == TIM7)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	4a63      	ldr	r2, [pc, #396]	; (8008d34 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	f040 80bd 	bne.w	8008d26 <HAL_TIM_PeriodElapsedCallback+0x18e>
	{
		if(gu32I2CMemoryOperationTimeout)gu32I2CMemoryOperationTimeout--;
 8008bac:	4b62      	ldr	r3, [pc, #392]	; (8008d38 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d004      	beq.n	8008bbe <HAL_TIM_PeriodElapsedCallback+0x26>
 8008bb4:	4b60      	ldr	r3, [pc, #384]	; (8008d38 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	3b01      	subs	r3, #1
 8008bba:	4a5f      	ldr	r2, [pc, #380]	; (8008d38 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8008bbc:	6013      	str	r3, [r2, #0]
//
		if(gu32GSMCharacterTimeout)gu32GSMCharacterTimeout--;
 8008bbe:	4b5f      	ldr	r3, [pc, #380]	; (8008d3c <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d004      	beq.n	8008bd0 <HAL_TIM_PeriodElapsedCallback+0x38>
 8008bc6:	4b5d      	ldr	r3, [pc, #372]	; (8008d3c <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	3b01      	subs	r3, #1
 8008bcc:	4a5b      	ldr	r2, [pc, #364]	; (8008d3c <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8008bce:	6013      	str	r3, [r2, #0]
		if(gsmInstance.u32GSMTimer)gsmInstance.u32GSMTimer--;
 8008bd0:	4b5b      	ldr	r3, [pc, #364]	; (8008d40 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8008bd2:	f8d3 3f90 	ldr.w	r3, [r3, #3984]	; 0xf90
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d006      	beq.n	8008be8 <HAL_TIM_PeriodElapsedCallback+0x50>
 8008bda:	4b59      	ldr	r3, [pc, #356]	; (8008d40 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8008bdc:	f8d3 3f90 	ldr.w	r3, [r3, #3984]	; 0xf90
 8008be0:	3b01      	subs	r3, #1
 8008be2:	4a57      	ldr	r2, [pc, #348]	; (8008d40 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8008be4:	f8c2 3f90 	str.w	r3, [r2, #3984]	; 0xf90
		if(gsmInstance.u32GSMResponseTimer)gsmInstance.u32GSMResponseTimer--;
 8008be8:	4b55      	ldr	r3, [pc, #340]	; (8008d40 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8008bea:	f8d3 3fa4 	ldr.w	r3, [r3, #4004]	; 0xfa4
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d006      	beq.n	8008c00 <HAL_TIM_PeriodElapsedCallback+0x68>
 8008bf2:	4b53      	ldr	r3, [pc, #332]	; (8008d40 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8008bf4:	f8d3 3fa4 	ldr.w	r3, [r3, #4004]	; 0xfa4
 8008bf8:	3b01      	subs	r3, #1
 8008bfa:	4a51      	ldr	r2, [pc, #324]	; (8008d40 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8008bfc:	f8c2 3fa4 	str.w	r3, [r2, #4004]	; 0xfa4
		if(gsmInstance.u32GSMHeartbeatTimer)gsmInstance.u32GSMHeartbeatTimer--;
 8008c00:	4b4f      	ldr	r3, [pc, #316]	; (8008d40 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8008c02:	f8d3 3f9c 	ldr.w	r3, [r3, #3996]	; 0xf9c
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d006      	beq.n	8008c18 <HAL_TIM_PeriodElapsedCallback+0x80>
 8008c0a:	4b4d      	ldr	r3, [pc, #308]	; (8008d40 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8008c0c:	f8d3 3f9c 	ldr.w	r3, [r3, #3996]	; 0xf9c
 8008c10:	3b01      	subs	r3, #1
 8008c12:	4a4b      	ldr	r2, [pc, #300]	; (8008d40 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8008c14:	f8c2 3f9c 	str.w	r3, [r2, #3996]	; 0xf9c

		if(gu32PayloadQueueEnqueue)gu32PayloadQueueEnqueue--;
 8008c18:	4b4a      	ldr	r3, [pc, #296]	; (8008d44 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d004      	beq.n	8008c2a <HAL_TIM_PeriodElapsedCallback+0x92>
 8008c20:	4b48      	ldr	r3, [pc, #288]	; (8008d44 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	3b01      	subs	r3, #1
 8008c26:	4a47      	ldr	r2, [pc, #284]	; (8008d44 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8008c28:	6013      	str	r3, [r2, #0]
		if(gu32GEOQueueEnqueue)gu32GEOQueueEnqueue--;
 8008c2a:	4b47      	ldr	r3, [pc, #284]	; (8008d48 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d004      	beq.n	8008c3c <HAL_TIM_PeriodElapsedCallback+0xa4>
 8008c32:	4b45      	ldr	r3, [pc, #276]	; (8008d48 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	3b01      	subs	r3, #1
 8008c38:	4a43      	ldr	r2, [pc, #268]	; (8008d48 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8008c3a:	6013      	str	r3, [r2, #0]
		if(gu32FotaFileReadTimer)gu32FotaFileReadTimer--;
 8008c3c:	4b43      	ldr	r3, [pc, #268]	; (8008d4c <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d004      	beq.n	8008c4e <HAL_TIM_PeriodElapsedCallback+0xb6>
 8008c44:	4b41      	ldr	r3, [pc, #260]	; (8008d4c <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	3b01      	subs	r3, #1
 8008c4a:	4a40      	ldr	r2, [pc, #256]	; (8008d4c <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8008c4c:	6013      	str	r3, [r2, #0]
		if(gu32GSMHangTimer)gu32GSMHangTimer--;
 8008c4e:	4b40      	ldr	r3, [pc, #256]	; (8008d50 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d004      	beq.n	8008c60 <HAL_TIM_PeriodElapsedCallback+0xc8>
 8008c56:	4b3e      	ldr	r3, [pc, #248]	; (8008d50 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	3b01      	subs	r3, #1
 8008c5c:	4a3c      	ldr	r2, [pc, #240]	; (8008d50 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8008c5e:	6013      	str	r3, [r2, #0]
		if(gu16GSMCycleTimeout)gu16GSMCycleTimeout--;
 8008c60:	4b3c      	ldr	r3, [pc, #240]	; (8008d54 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d004      	beq.n	8008c72 <HAL_TIM_PeriodElapsedCallback+0xda>
 8008c68:	4b3a      	ldr	r3, [pc, #232]	; (8008d54 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	3b01      	subs	r3, #1
 8008c6e:	4a39      	ldr	r2, [pc, #228]	; (8008d54 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8008c70:	6013      	str	r3, [r2, #0]

		/* RTC Timer Variables */
		if(gu8rtcUpdateTimer)gu8rtcUpdateTimer--;
 8008c72:	4b39      	ldr	r3, [pc, #228]	; (8008d58 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d004      	beq.n	8008c84 <HAL_TIM_PeriodElapsedCallback+0xec>
 8008c7a:	4b37      	ldr	r3, [pc, #220]	; (8008d58 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	3b01      	subs	r3, #1
 8008c80:	4a35      	ldr	r2, [pc, #212]	; (8008d58 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8008c82:	6013      	str	r3, [r2, #0]

		/*LED*/
		if(gu32LEDDelay)gu32LEDDelay--;
 8008c84:	4b35      	ldr	r3, [pc, #212]	; (8008d5c <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d004      	beq.n	8008c96 <HAL_TIM_PeriodElapsedCallback+0xfe>
 8008c8c:	4b33      	ldr	r3, [pc, #204]	; (8008d5c <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	3b01      	subs	r3, #1
 8008c92:	4a32      	ldr	r2, [pc, #200]	; (8008d5c <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8008c94:	6013      	str	r3, [r2, #0]
		if(gu32ModuleInitTimer)gu32ModuleInitTimer --;
 8008c96:	4b32      	ldr	r3, [pc, #200]	; (8008d60 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d004      	beq.n	8008ca8 <HAL_TIM_PeriodElapsedCallback+0x110>
 8008c9e:	4b30      	ldr	r3, [pc, #192]	; (8008d60 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	3b01      	subs	r3, #1
 8008ca4:	4a2e      	ldr	r2, [pc, #184]	; (8008d60 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8008ca6:	6013      	str	r3, [r2, #0]

		/*CAN*/
		if(gu32CANQueryPollTimer)gu32CANQueryPollTimer--;
 8008ca8:	4b2e      	ldr	r3, [pc, #184]	; (8008d64 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d004      	beq.n	8008cba <HAL_TIM_PeriodElapsedCallback+0x122>
 8008cb0:	4b2c      	ldr	r3, [pc, #176]	; (8008d64 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	3b01      	subs	r3, #1
 8008cb6:	4a2b      	ldr	r2, [pc, #172]	; (8008d64 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8008cb8:	6013      	str	r3, [r2, #0]
		if(gu32CANCommandResponseTimeout) gu32CANCommandResponseTimeout--;
 8008cba:	4b2b      	ldr	r3, [pc, #172]	; (8008d68 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d004      	beq.n	8008ccc <HAL_TIM_PeriodElapsedCallback+0x134>
 8008cc2:	4b29      	ldr	r3, [pc, #164]	; (8008d68 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	3b01      	subs	r3, #1
 8008cc8:	4a27      	ldr	r2, [pc, #156]	; (8008d68 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8008cca:	6013      	str	r3, [r2, #0]

		/*ADC*/
		if(gu32ADCRestartTimer)gu32ADCRestartTimer--;
 8008ccc:	4b27      	ldr	r3, [pc, #156]	; (8008d6c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d004      	beq.n	8008cde <HAL_TIM_PeriodElapsedCallback+0x146>
 8008cd4:	4b25      	ldr	r3, [pc, #148]	; (8008d6c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	3b01      	subs	r3, #1
 8008cda:	4a24      	ldr	r2, [pc, #144]	; (8008d6c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8008cdc:	6013      	str	r3, [r2, #0]
        /* RTC */
		if( gu32rtcBackupTimer) gu32rtcBackupTimer--;
 8008cde:	4b24      	ldr	r3, [pc, #144]	; (8008d70 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d004      	beq.n	8008cf0 <HAL_TIM_PeriodElapsedCallback+0x158>
 8008ce6:	4b22      	ldr	r3, [pc, #136]	; (8008d70 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	3b01      	subs	r3, #1
 8008cec:	4a20      	ldr	r2, [pc, #128]	; (8008d70 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8008cee:	6013      	str	r3, [r2, #0]
		/*Heart Beat*/
		if(gu32HeartBeatDelay)gu32HeartBeatDelay--;
 8008cf0:	4b20      	ldr	r3, [pc, #128]	; (8008d74 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d004      	beq.n	8008d02 <HAL_TIM_PeriodElapsedCallback+0x16a>
 8008cf8:	4b1e      	ldr	r3, [pc, #120]	; (8008d74 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	3b01      	subs	r3, #1
 8008cfe:	4a1d      	ldr	r2, [pc, #116]	; (8008d74 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8008d00:	6013      	str	r3, [r2, #0]
		/*Flash Timer*/
		if(FlashStr.u32SerialFlashDelay)
 8008d02:	4b1d      	ldr	r3, [pc, #116]	; (8008d78 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8008d04:	691b      	ldr	r3, [r3, #16]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d004      	beq.n	8008d14 <HAL_TIM_PeriodElapsedCallback+0x17c>
			FlashStr.u32SerialFlashDelay--;
 8008d0a:	4b1b      	ldr	r3, [pc, #108]	; (8008d78 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8008d0c:	691b      	ldr	r3, [r3, #16]
 8008d0e:	3b01      	subs	r3, #1
 8008d10:	4a19      	ldr	r2, [pc, #100]	; (8008d78 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8008d12:	6113      	str	r3, [r2, #16]
		/*RS232*/
		if(gu32RS232CharacterTimeout)gu32RS232CharacterTimeout--;
 8008d14:	4b19      	ldr	r3, [pc, #100]	; (8008d7c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d004      	beq.n	8008d26 <HAL_TIM_PeriodElapsedCallback+0x18e>
 8008d1c:	4b17      	ldr	r3, [pc, #92]	; (8008d7c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	3b01      	subs	r3, #1
 8008d22:	4a16      	ldr	r2, [pc, #88]	; (8008d7c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8008d24:	6013      	str	r3, [r2, #0]
	} // End of if(htim->Instance == TIM7)
}
 8008d26:	bf00      	nop
 8008d28:	370c      	adds	r7, #12
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d30:	4770      	bx	lr
 8008d32:	bf00      	nop
 8008d34:	40001400 	.word	0x40001400
 8008d38:	20002898 	.word	0x20002898
 8008d3c:	20002884 	.word	0x20002884
 8008d40:	20002b1c 	.word	0x20002b1c
 8008d44:	20002888 	.word	0x20002888
 8008d48:	2000288c 	.word	0x2000288c
 8008d4c:	2000289c 	.word	0x2000289c
 8008d50:	200028a0 	.word	0x200028a0
 8008d54:	200014d0 	.word	0x200014d0
 8008d58:	200014d4 	.word	0x200014d4
 8008d5c:	20002894 	.word	0x20002894
 8008d60:	200028a4 	.word	0x200028a4
 8008d64:	200028a8 	.word	0x200028a8
 8008d68:	200028ac 	.word	0x200028ac
 8008d6c:	20002890 	.word	0x20002890
 8008d70:	200014d8 	.word	0x200014d8
 8008d74:	200028b0 	.word	0x200028b0
 8008d78:	20003e84 	.word	0x20003e84
 8008d7c:	200028b4 	.word	0x200028b4

08008d80 <HAL_TIM_IC_CaptureCallback>:
 100138			   	27-02-19			Falling / Ceiling Logic for RPM with 80 base
 100138				28-02-19			Changed falling - ceiling in 2 parts, 0-50
 	 	 	 	 	 	 	 	 	 	and 51-100 as required by Manitou
******************************************************************************/
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008d80:	b480      	push	{r7}
 8008d82:	b083      	sub	sp, #12
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
}
 8008d88:	bf00      	nop
 8008d8a:	370c      	adds	r7, #12
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d92:	4770      	bx	lr

08008d94 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8008d94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008dcc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8008d98:	f7fe fb04 	bl	80073a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008d9c:	480c      	ldr	r0, [pc, #48]	; (8008dd0 <LoopForever+0x6>)
  ldr r1, =_edata
 8008d9e:	490d      	ldr	r1, [pc, #52]	; (8008dd4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8008da0:	4a0d      	ldr	r2, [pc, #52]	; (8008dd8 <LoopForever+0xe>)
  movs r3, #0
 8008da2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008da4:	e002      	b.n	8008dac <LoopCopyDataInit>

08008da6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008da6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008da8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008daa:	3304      	adds	r3, #4

08008dac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008dac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008dae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008db0:	d3f9      	bcc.n	8008da6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008db2:	4a0a      	ldr	r2, [pc, #40]	; (8008ddc <LoopForever+0x12>)
  ldr r4, =_ebss
 8008db4:	4c0a      	ldr	r4, [pc, #40]	; (8008de0 <LoopForever+0x16>)
  movs r3, #0
 8008db6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008db8:	e001      	b.n	8008dbe <LoopFillZerobss>

08008dba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008dba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008dbc:	3204      	adds	r2, #4

08008dbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008dbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008dc0:	d3fb      	bcc.n	8008dba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8008dc2:	f00b f92f 	bl	8014024 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8008dc6:	f7fb fa55 	bl	8004274 <main>

08008dca <LoopForever>:

LoopForever:
    b LoopForever
 8008dca:	e7fe      	b.n	8008dca <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8008dcc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8008dd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008dd4:	200016d8 	.word	0x200016d8
  ldr r2, =_sidata
 8008dd8:	08019920 	.word	0x08019920
  ldr r2, =_sbss
 8008ddc:	200016d8 	.word	0x200016d8
  ldr r4, =_ebss
 8008de0:	20006620 	.word	0x20006620

08008de4 <COMP_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8008de4:	e7fe      	b.n	8008de4 <COMP_IRQHandler>

08008de6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008de6:	b580      	push	{r7, lr}
 8008de8:	b082      	sub	sp, #8
 8008dea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8008dec:	2300      	movs	r3, #0
 8008dee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008df0:	2003      	movs	r0, #3
 8008df2:	f003 f9b5 	bl	800c160 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8008df6:	200f      	movs	r0, #15
 8008df8:	f000 f80e 	bl	8008e18 <HAL_InitTick>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d002      	beq.n	8008e08 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8008e02:	2301      	movs	r3, #1
 8008e04:	71fb      	strb	r3, [r7, #7]
 8008e06:	e001      	b.n	8008e0c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8008e08:	f7fe f902 	bl	8007010 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8008e0c:	79fb      	ldrb	r3, [r7, #7]
}
 8008e0e:	4618      	mov	r0, r3
 8008e10:	3708      	adds	r7, #8
 8008e12:	46bd      	mov	sp, r7
 8008e14:	bd80      	pop	{r7, pc}
	...

08008e18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b084      	sub	sp, #16
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8008e20:	2300      	movs	r3, #0
 8008e22:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8008e24:	4b17      	ldr	r3, [pc, #92]	; (8008e84 <HAL_InitTick+0x6c>)
 8008e26:	781b      	ldrb	r3, [r3, #0]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d023      	beq.n	8008e74 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8008e2c:	4b16      	ldr	r3, [pc, #88]	; (8008e88 <HAL_InitTick+0x70>)
 8008e2e:	681a      	ldr	r2, [r3, #0]
 8008e30:	4b14      	ldr	r3, [pc, #80]	; (8008e84 <HAL_InitTick+0x6c>)
 8008e32:	781b      	ldrb	r3, [r3, #0]
 8008e34:	4619      	mov	r1, r3
 8008e36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008e3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8008e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e42:	4618      	mov	r0, r3
 8008e44:	f003 fa08 	bl	800c258 <HAL_SYSTICK_Config>
 8008e48:	4603      	mov	r3, r0
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d10f      	bne.n	8008e6e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2b0f      	cmp	r3, #15
 8008e52:	d809      	bhi.n	8008e68 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008e54:	2200      	movs	r2, #0
 8008e56:	6879      	ldr	r1, [r7, #4]
 8008e58:	f04f 30ff 	mov.w	r0, #4294967295
 8008e5c:	f003 f9a0 	bl	800c1a0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8008e60:	4a0a      	ldr	r2, [pc, #40]	; (8008e8c <HAL_InitTick+0x74>)
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	6013      	str	r3, [r2, #0]
 8008e66:	e007      	b.n	8008e78 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8008e68:	2301      	movs	r3, #1
 8008e6a:	73fb      	strb	r3, [r7, #15]
 8008e6c:	e004      	b.n	8008e78 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8008e6e:	2301      	movs	r3, #1
 8008e70:	73fb      	strb	r3, [r7, #15]
 8008e72:	e001      	b.n	8008e78 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8008e74:	2301      	movs	r3, #1
 8008e76:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8008e78:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	3710      	adds	r7, #16
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd80      	pop	{r7, pc}
 8008e82:	bf00      	nop
 8008e84:	200014e0 	.word	0x200014e0
 8008e88:	20000ff4 	.word	0x20000ff4
 8008e8c:	200014dc 	.word	0x200014dc

08008e90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008e90:	b480      	push	{r7}
 8008e92:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8008e94:	4b06      	ldr	r3, [pc, #24]	; (8008eb0 <HAL_IncTick+0x20>)
 8008e96:	781b      	ldrb	r3, [r3, #0]
 8008e98:	461a      	mov	r2, r3
 8008e9a:	4b06      	ldr	r3, [pc, #24]	; (8008eb4 <HAL_IncTick+0x24>)
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	4413      	add	r3, r2
 8008ea0:	4a04      	ldr	r2, [pc, #16]	; (8008eb4 <HAL_IncTick+0x24>)
 8008ea2:	6013      	str	r3, [r2, #0]
}
 8008ea4:	bf00      	nop
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eac:	4770      	bx	lr
 8008eae:	bf00      	nop
 8008eb0:	200014e0 	.word	0x200014e0
 8008eb4:	2000660c 	.word	0x2000660c

08008eb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008eb8:	b480      	push	{r7}
 8008eba:	af00      	add	r7, sp, #0
  return uwTick;
 8008ebc:	4b03      	ldr	r3, [pc, #12]	; (8008ecc <HAL_GetTick+0x14>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
}
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec8:	4770      	bx	lr
 8008eca:	bf00      	nop
 8008ecc:	2000660c 	.word	0x2000660c

08008ed0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b084      	sub	sp, #16
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008ed8:	f7ff ffee 	bl	8008eb8 <HAL_GetTick>
 8008edc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ee8:	d005      	beq.n	8008ef6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8008eea:	4b0a      	ldr	r3, [pc, #40]	; (8008f14 <HAL_Delay+0x44>)
 8008eec:	781b      	ldrb	r3, [r3, #0]
 8008eee:	461a      	mov	r2, r3
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	4413      	add	r3, r2
 8008ef4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008ef6:	bf00      	nop
 8008ef8:	f7ff ffde 	bl	8008eb8 <HAL_GetTick>
 8008efc:	4602      	mov	r2, r0
 8008efe:	68bb      	ldr	r3, [r7, #8]
 8008f00:	1ad3      	subs	r3, r2, r3
 8008f02:	68fa      	ldr	r2, [r7, #12]
 8008f04:	429a      	cmp	r2, r3
 8008f06:	d8f7      	bhi.n	8008ef8 <HAL_Delay+0x28>
  {
  }
}
 8008f08:	bf00      	nop
 8008f0a:	bf00      	nop
 8008f0c:	3710      	adds	r7, #16
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}
 8008f12:	bf00      	nop
 8008f14:	200014e0 	.word	0x200014e0

08008f18 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8008f18:	b480      	push	{r7}
 8008f1a:	b083      	sub	sp, #12
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
 8008f20:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	689b      	ldr	r3, [r3, #8]
 8008f26:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	431a      	orrs	r2, r3
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	609a      	str	r2, [r3, #8]
}
 8008f32:	bf00      	nop
 8008f34:	370c      	adds	r7, #12
 8008f36:	46bd      	mov	sp, r7
 8008f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3c:	4770      	bx	lr

08008f3e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8008f3e:	b480      	push	{r7}
 8008f40:	b083      	sub	sp, #12
 8008f42:	af00      	add	r7, sp, #0
 8008f44:	6078      	str	r0, [r7, #4]
 8008f46:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	689b      	ldr	r3, [r3, #8]
 8008f4c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	431a      	orrs	r2, r3
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	609a      	str	r2, [r3, #8]
}
 8008f58:	bf00      	nop
 8008f5a:	370c      	adds	r7, #12
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f62:	4770      	bx	lr

08008f64 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8008f64:	b480      	push	{r7}
 8008f66:	b083      	sub	sp, #12
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	689b      	ldr	r3, [r3, #8]
 8008f70:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8008f74:	4618      	mov	r0, r3
 8008f76:	370c      	adds	r7, #12
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7e:	4770      	bx	lr

08008f80 <LL_ADC_GetResolution>:
  *         @arg @ref LL_ADC_RESOLUTION_10B
  *         @arg @ref LL_ADC_RESOLUTION_8B
  *         @arg @ref LL_ADC_RESOLUTION_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetResolution(ADC_TypeDef *ADCx)
{
 8008f80:	b480      	push	{r7}
 8008f82:	b083      	sub	sp, #12
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_RES));
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	68db      	ldr	r3, [r3, #12]
 8008f8c:	f003 0318 	and.w	r3, r3, #24
}
 8008f90:	4618      	mov	r0, r3
 8008f92:	370c      	adds	r7, #12
 8008f94:	46bd      	mov	sp, r7
 8008f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9a:	4770      	bx	lr

08008f9c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8008f9c:	b480      	push	{r7}
 8008f9e:	b087      	sub	sp, #28
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	60f8      	str	r0, [r7, #12]
 8008fa4:	60b9      	str	r1, [r7, #8]
 8008fa6:	607a      	str	r2, [r7, #4]
 8008fa8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	3360      	adds	r3, #96	; 0x60
 8008fae:	461a      	mov	r2, r3
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	009b      	lsls	r3, r3, #2
 8008fb4:	4413      	add	r3, r2
 8008fb6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8008fb8:	697b      	ldr	r3, [r7, #20]
 8008fba:	681a      	ldr	r2, [r3, #0]
 8008fbc:	4b08      	ldr	r3, [pc, #32]	; (8008fe0 <LL_ADC_SetOffset+0x44>)
 8008fbe:	4013      	ands	r3, r2
 8008fc0:	687a      	ldr	r2, [r7, #4]
 8008fc2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8008fc6:	683a      	ldr	r2, [r7, #0]
 8008fc8:	430a      	orrs	r2, r1
 8008fca:	4313      	orrs	r3, r2
 8008fcc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008fd0:	697b      	ldr	r3, [r7, #20]
 8008fd2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8008fd4:	bf00      	nop
 8008fd6:	371c      	adds	r7, #28
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fde:	4770      	bx	lr
 8008fe0:	03fff000 	.word	0x03fff000

08008fe4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	b085      	sub	sp, #20
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
 8008fec:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	3360      	adds	r3, #96	; 0x60
 8008ff2:	461a      	mov	r2, r3
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	009b      	lsls	r3, r3, #2
 8008ff8:	4413      	add	r3, r2
 8008ffa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8009004:	4618      	mov	r0, r3
 8009006:	3714      	adds	r7, #20
 8009008:	46bd      	mov	sp, r7
 800900a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900e:	4770      	bx	lr

08009010 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8009010:	b480      	push	{r7}
 8009012:	b087      	sub	sp, #28
 8009014:	af00      	add	r7, sp, #0
 8009016:	60f8      	str	r0, [r7, #12]
 8009018:	60b9      	str	r1, [r7, #8]
 800901a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	3360      	adds	r3, #96	; 0x60
 8009020:	461a      	mov	r2, r3
 8009022:	68bb      	ldr	r3, [r7, #8]
 8009024:	009b      	lsls	r3, r3, #2
 8009026:	4413      	add	r3, r2
 8009028:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800902a:	697b      	ldr	r3, [r7, #20]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	431a      	orrs	r2, r3
 8009036:	697b      	ldr	r3, [r7, #20]
 8009038:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800903a:	bf00      	nop
 800903c:	371c      	adds	r7, #28
 800903e:	46bd      	mov	sp, r7
 8009040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009044:	4770      	bx	lr

08009046 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8009046:	b480      	push	{r7}
 8009048:	b083      	sub	sp, #12
 800904a:	af00      	add	r7, sp, #0
 800904c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	68db      	ldr	r3, [r3, #12]
 8009052:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009056:	2b00      	cmp	r3, #0
 8009058:	d101      	bne.n	800905e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800905a:	2301      	movs	r3, #1
 800905c:	e000      	b.n	8009060 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800905e:	2300      	movs	r3, #0
}
 8009060:	4618      	mov	r0, r3
 8009062:	370c      	adds	r7, #12
 8009064:	46bd      	mov	sp, r7
 8009066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906a:	4770      	bx	lr

0800906c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800906c:	b480      	push	{r7}
 800906e:	b087      	sub	sp, #28
 8009070:	af00      	add	r7, sp, #0
 8009072:	60f8      	str	r0, [r7, #12]
 8009074:	60b9      	str	r1, [r7, #8]
 8009076:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	3330      	adds	r3, #48	; 0x30
 800907c:	461a      	mov	r2, r3
 800907e:	68bb      	ldr	r3, [r7, #8]
 8009080:	0a1b      	lsrs	r3, r3, #8
 8009082:	009b      	lsls	r3, r3, #2
 8009084:	f003 030c 	and.w	r3, r3, #12
 8009088:	4413      	add	r3, r2
 800908a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800908c:	697b      	ldr	r3, [r7, #20]
 800908e:	681a      	ldr	r2, [r3, #0]
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	f003 031f 	and.w	r3, r3, #31
 8009096:	211f      	movs	r1, #31
 8009098:	fa01 f303 	lsl.w	r3, r1, r3
 800909c:	43db      	mvns	r3, r3
 800909e:	401a      	ands	r2, r3
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	0e9b      	lsrs	r3, r3, #26
 80090a4:	f003 011f 	and.w	r1, r3, #31
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	f003 031f 	and.w	r3, r3, #31
 80090ae:	fa01 f303 	lsl.w	r3, r1, r3
 80090b2:	431a      	orrs	r2, r3
 80090b4:	697b      	ldr	r3, [r7, #20]
 80090b6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80090b8:	bf00      	nop
 80090ba:	371c      	adds	r7, #28
 80090bc:	46bd      	mov	sp, r7
 80090be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c2:	4770      	bx	lr

080090c4 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80090c4:	b480      	push	{r7}
 80090c6:	b083      	sub	sp, #12
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090d0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d101      	bne.n	80090dc <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80090d8:	2301      	movs	r3, #1
 80090da:	e000      	b.n	80090de <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80090dc:	2300      	movs	r3, #0
}
 80090de:	4618      	mov	r0, r3
 80090e0:	370c      	adds	r7, #12
 80090e2:	46bd      	mov	sp, r7
 80090e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e8:	4770      	bx	lr

080090ea <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80090ea:	b480      	push	{r7}
 80090ec:	b087      	sub	sp, #28
 80090ee:	af00      	add	r7, sp, #0
 80090f0:	60f8      	str	r0, [r7, #12]
 80090f2:	60b9      	str	r1, [r7, #8]
 80090f4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	3314      	adds	r3, #20
 80090fa:	461a      	mov	r2, r3
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	0e5b      	lsrs	r3, r3, #25
 8009100:	009b      	lsls	r3, r3, #2
 8009102:	f003 0304 	and.w	r3, r3, #4
 8009106:	4413      	add	r3, r2
 8009108:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800910a:	697b      	ldr	r3, [r7, #20]
 800910c:	681a      	ldr	r2, [r3, #0]
 800910e:	68bb      	ldr	r3, [r7, #8]
 8009110:	0d1b      	lsrs	r3, r3, #20
 8009112:	f003 031f 	and.w	r3, r3, #31
 8009116:	2107      	movs	r1, #7
 8009118:	fa01 f303 	lsl.w	r3, r1, r3
 800911c:	43db      	mvns	r3, r3
 800911e:	401a      	ands	r2, r3
 8009120:	68bb      	ldr	r3, [r7, #8]
 8009122:	0d1b      	lsrs	r3, r3, #20
 8009124:	f003 031f 	and.w	r3, r3, #31
 8009128:	6879      	ldr	r1, [r7, #4]
 800912a:	fa01 f303 	lsl.w	r3, r1, r3
 800912e:	431a      	orrs	r2, r3
 8009130:	697b      	ldr	r3, [r7, #20]
 8009132:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8009134:	bf00      	nop
 8009136:	371c      	adds	r7, #28
 8009138:	46bd      	mov	sp, r7
 800913a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913e:	4770      	bx	lr

08009140 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8009140:	b480      	push	{r7}
 8009142:	b085      	sub	sp, #20
 8009144:	af00      	add	r7, sp, #0
 8009146:	60f8      	str	r0, [r7, #12]
 8009148:	60b9      	str	r1, [r7, #8]
 800914a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8009152:	68bb      	ldr	r3, [r7, #8]
 8009154:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009158:	43db      	mvns	r3, r3
 800915a:	401a      	ands	r2, r3
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f003 0318 	and.w	r3, r3, #24
 8009162:	4908      	ldr	r1, [pc, #32]	; (8009184 <LL_ADC_SetChannelSingleDiff+0x44>)
 8009164:	40d9      	lsrs	r1, r3
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	400b      	ands	r3, r1
 800916a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800916e:	431a      	orrs	r2, r3
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8009176:	bf00      	nop
 8009178:	3714      	adds	r7, #20
 800917a:	46bd      	mov	sp, r7
 800917c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009180:	4770      	bx	lr
 8009182:	bf00      	nop
 8009184:	0007ffff 	.word	0x0007ffff

08009188 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8009188:	b480      	push	{r7}
 800918a:	b083      	sub	sp, #12
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	689b      	ldr	r3, [r3, #8]
 8009194:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8009198:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800919c:	687a      	ldr	r2, [r7, #4]
 800919e:	6093      	str	r3, [r2, #8]
}
 80091a0:	bf00      	nop
 80091a2:	370c      	adds	r7, #12
 80091a4:	46bd      	mov	sp, r7
 80091a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091aa:	4770      	bx	lr

080091ac <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80091ac:	b480      	push	{r7}
 80091ae:	b083      	sub	sp, #12
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	689b      	ldr	r3, [r3, #8]
 80091b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80091bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80091c0:	d101      	bne.n	80091c6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80091c2:	2301      	movs	r3, #1
 80091c4:	e000      	b.n	80091c8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80091c6:	2300      	movs	r3, #0
}
 80091c8:	4618      	mov	r0, r3
 80091ca:	370c      	adds	r7, #12
 80091cc:	46bd      	mov	sp, r7
 80091ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d2:	4770      	bx	lr

080091d4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80091d4:	b480      	push	{r7}
 80091d6:	b083      	sub	sp, #12
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	689b      	ldr	r3, [r3, #8]
 80091e0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80091e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80091e8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80091f0:	bf00      	nop
 80091f2:	370c      	adds	r7, #12
 80091f4:	46bd      	mov	sp, r7
 80091f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fa:	4770      	bx	lr

080091fc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80091fc:	b480      	push	{r7}
 80091fe:	b083      	sub	sp, #12
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	689b      	ldr	r3, [r3, #8]
 8009208:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800920c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009210:	d101      	bne.n	8009216 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8009212:	2301      	movs	r3, #1
 8009214:	e000      	b.n	8009218 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8009216:	2300      	movs	r3, #0
}
 8009218:	4618      	mov	r0, r3
 800921a:	370c      	adds	r7, #12
 800921c:	46bd      	mov	sp, r7
 800921e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009222:	4770      	bx	lr

08009224 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8009224:	b480      	push	{r7}
 8009226:	b083      	sub	sp, #12
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	689b      	ldr	r3, [r3, #8]
 8009230:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009234:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8009238:	f043 0201 	orr.w	r2, r3, #1
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8009240:	bf00      	nop
 8009242:	370c      	adds	r7, #12
 8009244:	46bd      	mov	sp, r7
 8009246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924a:	4770      	bx	lr

0800924c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800924c:	b480      	push	{r7}
 800924e:	b083      	sub	sp, #12
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	689b      	ldr	r3, [r3, #8]
 8009258:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800925c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8009260:	f043 0202 	orr.w	r2, r3, #2
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8009268:	bf00      	nop
 800926a:	370c      	adds	r7, #12
 800926c:	46bd      	mov	sp, r7
 800926e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009272:	4770      	bx	lr

08009274 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8009274:	b480      	push	{r7}
 8009276:	b083      	sub	sp, #12
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	689b      	ldr	r3, [r3, #8]
 8009280:	f003 0301 	and.w	r3, r3, #1
 8009284:	2b01      	cmp	r3, #1
 8009286:	d101      	bne.n	800928c <LL_ADC_IsEnabled+0x18>
 8009288:	2301      	movs	r3, #1
 800928a:	e000      	b.n	800928e <LL_ADC_IsEnabled+0x1a>
 800928c:	2300      	movs	r3, #0
}
 800928e:	4618      	mov	r0, r3
 8009290:	370c      	adds	r7, #12
 8009292:	46bd      	mov	sp, r7
 8009294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009298:	4770      	bx	lr

0800929a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800929a:	b480      	push	{r7}
 800929c:	b083      	sub	sp, #12
 800929e:	af00      	add	r7, sp, #0
 80092a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	689b      	ldr	r3, [r3, #8]
 80092a6:	f003 0302 	and.w	r3, r3, #2
 80092aa:	2b02      	cmp	r3, #2
 80092ac:	d101      	bne.n	80092b2 <LL_ADC_IsDisableOngoing+0x18>
 80092ae:	2301      	movs	r3, #1
 80092b0:	e000      	b.n	80092b4 <LL_ADC_IsDisableOngoing+0x1a>
 80092b2:	2300      	movs	r3, #0
}
 80092b4:	4618      	mov	r0, r3
 80092b6:	370c      	adds	r7, #12
 80092b8:	46bd      	mov	sp, r7
 80092ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092be:	4770      	bx	lr

080092c0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80092c0:	b480      	push	{r7}
 80092c2:	b083      	sub	sp, #12
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	689b      	ldr	r3, [r3, #8]
 80092cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80092d0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80092d4:	f043 0204 	orr.w	r2, r3, #4
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80092dc:	bf00      	nop
 80092de:	370c      	adds	r7, #12
 80092e0:	46bd      	mov	sp, r7
 80092e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e6:	4770      	bx	lr

080092e8 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80092e8:	b480      	push	{r7}
 80092ea:	b083      	sub	sp, #12
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	689b      	ldr	r3, [r3, #8]
 80092f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80092f8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80092fc:	f043 0210 	orr.w	r2, r3, #16
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8009304:	bf00      	nop
 8009306:	370c      	adds	r7, #12
 8009308:	46bd      	mov	sp, r7
 800930a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930e:	4770      	bx	lr

08009310 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8009310:	b480      	push	{r7}
 8009312:	b083      	sub	sp, #12
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	689b      	ldr	r3, [r3, #8]
 800931c:	f003 0304 	and.w	r3, r3, #4
 8009320:	2b04      	cmp	r3, #4
 8009322:	d101      	bne.n	8009328 <LL_ADC_REG_IsConversionOngoing+0x18>
 8009324:	2301      	movs	r3, #1
 8009326:	e000      	b.n	800932a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8009328:	2300      	movs	r3, #0
}
 800932a:	4618      	mov	r0, r3
 800932c:	370c      	adds	r7, #12
 800932e:	46bd      	mov	sp, r7
 8009330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009334:	4770      	bx	lr

08009336 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8009336:	b480      	push	{r7}
 8009338:	b083      	sub	sp, #12
 800933a:	af00      	add	r7, sp, #0
 800933c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	689b      	ldr	r3, [r3, #8]
 8009342:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009346:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800934a:	f043 0220 	orr.w	r2, r3, #32
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8009352:	bf00      	nop
 8009354:	370c      	adds	r7, #12
 8009356:	46bd      	mov	sp, r7
 8009358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935c:	4770      	bx	lr

0800935e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800935e:	b480      	push	{r7}
 8009360:	b083      	sub	sp, #12
 8009362:	af00      	add	r7, sp, #0
 8009364:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	689b      	ldr	r3, [r3, #8]
 800936a:	f003 0308 	and.w	r3, r3, #8
 800936e:	2b08      	cmp	r3, #8
 8009370:	d101      	bne.n	8009376 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8009372:	2301      	movs	r3, #1
 8009374:	e000      	b.n	8009378 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8009376:	2300      	movs	r3, #0
}
 8009378:	4618      	mov	r0, r3
 800937a:	370c      	adds	r7, #12
 800937c:	46bd      	mov	sp, r7
 800937e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009382:	4770      	bx	lr

08009384 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b088      	sub	sp, #32
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800938c:	2300      	movs	r3, #0
 800938e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8009390:	2300      	movs	r3, #0
 8009392:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d101      	bne.n	800939e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800939a:	2301      	movs	r3, #1
 800939c:	e330      	b.n	8009a00 <HAL_ADC_Init+0x67c>
  }

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	4a9e      	ldr	r2, [pc, #632]	; (800961c <HAL_ADC_Init+0x298>)
 80093a4:	4293      	cmp	r3, r2
 80093a6:	d004      	beq.n	80093b2 <HAL_ADC_Init+0x2e>
 80093a8:	f240 1199 	movw	r1, #409	; 0x199
 80093ac:	489c      	ldr	r0, [pc, #624]	; (8009620 <HAL_ADC_Init+0x29c>)
 80093ae:	f7fb f8f1 	bl	8004594 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	685b      	ldr	r3, [r3, #4]
 80093b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80093ba:	d049      	beq.n	8009450 <HAL_ADC_Init+0xcc>
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	685b      	ldr	r3, [r3, #4]
 80093c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80093c4:	d044      	beq.n	8009450 <HAL_ADC_Init+0xcc>
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	685b      	ldr	r3, [r3, #4]
 80093ca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80093ce:	d03f      	beq.n	8009450 <HAL_ADC_Init+0xcc>
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	685b      	ldr	r3, [r3, #4]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d03b      	beq.n	8009450 <HAL_ADC_Init+0xcc>
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	685b      	ldr	r3, [r3, #4]
 80093dc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80093e0:	d036      	beq.n	8009450 <HAL_ADC_Init+0xcc>
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	685b      	ldr	r3, [r3, #4]
 80093e6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80093ea:	d031      	beq.n	8009450 <HAL_ADC_Init+0xcc>
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	685b      	ldr	r3, [r3, #4]
 80093f0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80093f4:	d02c      	beq.n	8009450 <HAL_ADC_Init+0xcc>
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	685b      	ldr	r3, [r3, #4]
 80093fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80093fe:	d027      	beq.n	8009450 <HAL_ADC_Init+0xcc>
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	685b      	ldr	r3, [r3, #4]
 8009404:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8009408:	d022      	beq.n	8009450 <HAL_ADC_Init+0xcc>
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	685b      	ldr	r3, [r3, #4]
 800940e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8009412:	d01d      	beq.n	8009450 <HAL_ADC_Init+0xcc>
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	685b      	ldr	r3, [r3, #4]
 8009418:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800941c:	d018      	beq.n	8009450 <HAL_ADC_Init+0xcc>
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	685b      	ldr	r3, [r3, #4]
 8009422:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009426:	d013      	beq.n	8009450 <HAL_ADC_Init+0xcc>
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	685b      	ldr	r3, [r3, #4]
 800942c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8009430:	d00e      	beq.n	8009450 <HAL_ADC_Init+0xcc>
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	685b      	ldr	r3, [r3, #4]
 8009436:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800943a:	d009      	beq.n	8009450 <HAL_ADC_Init+0xcc>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	685b      	ldr	r3, [r3, #4]
 8009440:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8009444:	d004      	beq.n	8009450 <HAL_ADC_Init+0xcc>
 8009446:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800944a:	4875      	ldr	r0, [pc, #468]	; (8009620 <HAL_ADC_Init+0x29c>)
 800944c:	f7fb f8a2 	bl	8004594 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	689b      	ldr	r3, [r3, #8]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d010      	beq.n	800947a <HAL_ADC_Init+0xf6>
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	689b      	ldr	r3, [r3, #8]
 800945c:	2b08      	cmp	r3, #8
 800945e:	d00c      	beq.n	800947a <HAL_ADC_Init+0xf6>
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	689b      	ldr	r3, [r3, #8]
 8009464:	2b10      	cmp	r3, #16
 8009466:	d008      	beq.n	800947a <HAL_ADC_Init+0xf6>
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	689b      	ldr	r3, [r3, #8]
 800946c:	2b18      	cmp	r3, #24
 800946e:	d004      	beq.n	800947a <HAL_ADC_Init+0xf6>
 8009470:	f240 119b 	movw	r1, #411	; 0x19b
 8009474:	486a      	ldr	r0, [pc, #424]	; (8009620 <HAL_ADC_Init+0x29c>)
 8009476:	f7fb f88d 	bl	8004594 <assert_failed>
#if defined(ADC_CFGR_DFSDMCFG) &&defined(DFSDM1_Channel0)
  assert_param(IS_ADC_DFSDMCFG_MODE(hadc));
#endif
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	68db      	ldr	r3, [r3, #12]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d008      	beq.n	8009494 <HAL_ADC_Init+0x110>
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	68db      	ldr	r3, [r3, #12]
 8009486:	2b20      	cmp	r3, #32
 8009488:	d004      	beq.n	8009494 <HAL_ADC_Init+0x110>
 800948a:	f240 119f 	movw	r1, #415	; 0x19f
 800948e:	4864      	ldr	r0, [pc, #400]	; (8009620 <HAL_ADC_Init+0x29c>)
 8009490:	f7fb f880 	bl	8004594 <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	691b      	ldr	r3, [r3, #16]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d008      	beq.n	80094ae <HAL_ADC_Init+0x12a>
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	691b      	ldr	r3, [r3, #16]
 80094a0:	2b01      	cmp	r3, #1
 80094a2:	d004      	beq.n	80094ae <HAL_ADC_Init+0x12a>
 80094a4:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 80094a8:	485d      	ldr	r0, [pc, #372]	; (8009620 <HAL_ADC_Init+0x29c>)
 80094aa:	f7fb f873 	bl	8004594 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	7e5b      	ldrb	r3, [r3, #25]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d008      	beq.n	80094c8 <HAL_ADC_Init+0x144>
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	7e5b      	ldrb	r3, [r3, #25]
 80094ba:	2b01      	cmp	r3, #1
 80094bc:	d004      	beq.n	80094c8 <HAL_ADC_Init+0x144>
 80094be:	f240 11a1 	movw	r1, #417	; 0x1a1
 80094c2:	4857      	ldr	r0, [pc, #348]	; (8009620 <HAL_ADC_Init+0x29c>)
 80094c4:	f7fb f866 	bl	8004594 <assert_failed>
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d013      	beq.n	80094f8 <HAL_ADC_Init+0x174>
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80094d8:	d00e      	beq.n	80094f8 <HAL_ADC_Init+0x174>
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80094e2:	d009      	beq.n	80094f8 <HAL_ADC_Init+0x174>
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80094ec:	d004      	beq.n	80094f8 <HAL_ADC_Init+0x174>
 80094ee:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 80094f2:	484b      	ldr	r0, [pc, #300]	; (8009620 <HAL_ADC_Init+0x29c>)
 80094f4:	f7fb f84e 	bl	8004594 <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc, hadc->Init.ExternalTrigConv));
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009500:	d053      	beq.n	80095aa <HAL_ADC_Init+0x226>
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009506:	f5b3 6f88 	cmp.w	r3, #1088	; 0x440
 800950a:	d04e      	beq.n	80095aa <HAL_ADC_Init+0x226>
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009510:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8009514:	d049      	beq.n	80095aa <HAL_ADC_Init+0x226>
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800951a:	f5b3 6f98 	cmp.w	r3, #1216	; 0x4c0
 800951e:	d044      	beq.n	80095aa <HAL_ADC_Init+0x226>
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009524:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8009528:	d03f      	beq.n	80095aa <HAL_ADC_Init+0x226>
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800952e:	f5b3 6fa8 	cmp.w	r3, #1344	; 0x540
 8009532:	d03a      	beq.n	80095aa <HAL_ADC_Init+0x226>
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009538:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 800953c:	d035      	beq.n	80095aa <HAL_ADC_Init+0x226>
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009542:	f5b3 6fb8 	cmp.w	r3, #1472	; 0x5c0
 8009546:	d030      	beq.n	80095aa <HAL_ADC_Init+0x226>
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800954c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009550:	d02b      	beq.n	80095aa <HAL_ADC_Init+0x226>
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009556:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800955a:	d026      	beq.n	80095aa <HAL_ADC_Init+0x226>
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009560:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 8009564:	d021      	beq.n	80095aa <HAL_ADC_Init+0x226>
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800956a:	f5b3 6fd8 	cmp.w	r3, #1728	; 0x6c0
 800956e:	d01c      	beq.n	80095aa <HAL_ADC_Init+0x226>
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009574:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009578:	d017      	beq.n	80095aa <HAL_ADC_Init+0x226>
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800957e:	f5b3 6fe8 	cmp.w	r3, #1856	; 0x740
 8009582:	d012      	beq.n	80095aa <HAL_ADC_Init+0x226>
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009588:	f5b3 6ff0 	cmp.w	r3, #1920	; 0x780
 800958c:	d00d      	beq.n	80095aa <HAL_ADC_Init+0x226>
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009592:	f5b3 6ff8 	cmp.w	r3, #1984	; 0x7c0
 8009596:	d008      	beq.n	80095aa <HAL_ADC_Init+0x226>
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800959c:	2b00      	cmp	r3, #0
 800959e:	d004      	beq.n	80095aa <HAL_ADC_Init+0x226>
 80095a0:	f240 11a3 	movw	r1, #419	; 0x1a3
 80095a4:	481e      	ldr	r0, [pc, #120]	; (8009620 <HAL_ADC_Init+0x29c>)
 80095a6:	f7fa fff5 	bl	8004594 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d009      	beq.n	80095c8 <HAL_ADC_Init+0x244>
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80095ba:	2b01      	cmp	r3, #1
 80095bc:	d004      	beq.n	80095c8 <HAL_ADC_Init+0x244>
 80095be:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 80095c2:	4817      	ldr	r0, [pc, #92]	; (8009620 <HAL_ADC_Init+0x29c>)
 80095c4:	f7fa ffe6 	bl	8004594 <assert_failed>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	695b      	ldr	r3, [r3, #20]
 80095cc:	2b04      	cmp	r3, #4
 80095ce:	d008      	beq.n	80095e2 <HAL_ADC_Init+0x25e>
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	695b      	ldr	r3, [r3, #20]
 80095d4:	2b08      	cmp	r3, #8
 80095d6:	d004      	beq.n	80095e2 <HAL_ADC_Init+0x25e>
 80095d8:	f240 11a5 	movw	r1, #421	; 0x1a5
 80095dc:	4810      	ldr	r0, [pc, #64]	; (8009620 <HAL_ADC_Init+0x29c>)
 80095de:	f7fa ffd9 	bl	8004594 <assert_failed>
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d009      	beq.n	80095fe <HAL_ADC_Init+0x27a>
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80095f2:	d004      	beq.n	80095fe <HAL_ADC_Init+0x27a>
 80095f4:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
 80095f8:	4809      	ldr	r0, [pc, #36]	; (8009620 <HAL_ADC_Init+0x29c>)
 80095fa:	f7fa ffcb 	bl	8004594 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	7e1b      	ldrb	r3, [r3, #24]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d00e      	beq.n	8009624 <HAL_ADC_Init+0x2a0>
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	7e1b      	ldrb	r3, [r3, #24]
 800960a:	2b01      	cmp	r3, #1
 800960c:	d00a      	beq.n	8009624 <HAL_ADC_Init+0x2a0>
 800960e:	f240 11a7 	movw	r1, #423	; 0x1a7
 8009612:	4803      	ldr	r0, [pc, #12]	; (8009620 <HAL_ADC_Init+0x29c>)
 8009614:	f7fa ffbe 	bl	8004594 <assert_failed>
 8009618:	e004      	b.n	8009624 <HAL_ADC_Init+0x2a0>
 800961a:	bf00      	nop
 800961c:	50040000 	.word	0x50040000
 8009620:	08018ba8 	.word	0x08018ba8
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800962a:	2b00      	cmp	r3, #0
 800962c:	d009      	beq.n	8009642 <HAL_ADC_Init+0x2be>
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009634:	2b01      	cmp	r3, #1
 8009636:	d004      	beq.n	8009642 <HAL_ADC_Init+0x2be>
 8009638:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
 800963c:	483a      	ldr	r0, [pc, #232]	; (8009728 <HAL_ADC_Init+0x3a4>)
 800963e:	f7fa ffa9 	bl	8004594 <assert_failed>

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	691b      	ldr	r3, [r3, #16]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d02d      	beq.n	80096a6 <HAL_ADC_Init+0x322>
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	69db      	ldr	r3, [r3, #28]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d003      	beq.n	800965a <HAL_ADC_Init+0x2d6>
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	69db      	ldr	r3, [r3, #28]
 8009656:	2b10      	cmp	r3, #16
 8009658:	d904      	bls.n	8009664 <HAL_ADC_Init+0x2e0>
 800965a:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 800965e:	4832      	ldr	r0, [pc, #200]	; (8009728 <HAL_ADC_Init+0x3a4>)
 8009660:	f7fa ff98 	bl	8004594 <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f893 3020 	ldrb.w	r3, [r3, #32]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d009      	beq.n	8009682 <HAL_ADC_Init+0x2fe>
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009674:	2b01      	cmp	r3, #1
 8009676:	d004      	beq.n	8009682 <HAL_ADC_Init+0x2fe>
 8009678:	f240 11ad 	movw	r1, #429	; 0x1ad
 800967c:	482a      	ldr	r0, [pc, #168]	; (8009728 <HAL_ADC_Init+0x3a4>)
 800967e:	f7fa ff89 	bl	8004594 <assert_failed>

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009688:	2b01      	cmp	r3, #1
 800968a:	d10c      	bne.n	80096a6 <HAL_ADC_Init+0x322>
    {
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009690:	2b00      	cmp	r3, #0
 8009692:	d003      	beq.n	800969c <HAL_ADC_Init+0x318>
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009698:	2b08      	cmp	r3, #8
 800969a:	d904      	bls.n	80096a6 <HAL_ADC_Init+0x322>
 800969c:	f240 11b1 	movw	r1, #433	; 0x1b1
 80096a0:	4821      	ldr	r0, [pc, #132]	; (8009728 <HAL_ADC_Init+0x3a4>)
 80096a2:	f7fa ff77 	bl	8004594 <assert_failed>
    }
  }

  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80096ac:	2b01      	cmp	r3, #1
 80096ae:	d108      	bne.n	80096c2 <HAL_ADC_Init+0x33e>
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	7e5b      	ldrb	r3, [r3, #25]
 80096b4:	2b01      	cmp	r3, #1
 80096b6:	d104      	bne.n	80096c2 <HAL_ADC_Init+0x33e>
 80096b8:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 80096bc:	481a      	ldr	r0, [pc, #104]	; (8009728 <HAL_ADC_Init+0x3a4>)
 80096be:	f7fa ff69 	bl	8004594 <assert_failed>

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d109      	bne.n	80096de <HAL_ADC_Init+0x35a>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80096ca:	6878      	ldr	r0, [r7, #4]
 80096cc:	f7f8 fa0c 	bl	8001ae8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2200      	movs	r2, #0
 80096d4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	2200      	movs	r2, #0
 80096da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	4618      	mov	r0, r3
 80096e4:	f7ff fd62 	bl	80091ac <LL_ADC_IsDeepPowerDownEnabled>
 80096e8:	4603      	mov	r3, r0
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d004      	beq.n	80096f8 <HAL_ADC_Init+0x374>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	4618      	mov	r0, r3
 80096f4:	f7ff fd48 	bl	8009188 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	4618      	mov	r0, r3
 80096fe:	f7ff fd7d 	bl	80091fc <LL_ADC_IsInternalRegulatorEnabled>
 8009702:	4603      	mov	r3, r0
 8009704:	2b00      	cmp	r3, #0
 8009706:	d11b      	bne.n	8009740 <HAL_ADC_Init+0x3bc>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	4618      	mov	r0, r3
 800970e:	f7ff fd61 	bl	80091d4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8009712:	4b06      	ldr	r3, [pc, #24]	; (800972c <HAL_ADC_Init+0x3a8>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	099b      	lsrs	r3, r3, #6
 8009718:	4a05      	ldr	r2, [pc, #20]	; (8009730 <HAL_ADC_Init+0x3ac>)
 800971a:	fba2 2303 	umull	r2, r3, r2, r3
 800971e:	099b      	lsrs	r3, r3, #6
 8009720:	3301      	adds	r3, #1
 8009722:	005b      	lsls	r3, r3, #1
 8009724:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8009726:	e008      	b.n	800973a <HAL_ADC_Init+0x3b6>
 8009728:	08018ba8 	.word	0x08018ba8
 800972c:	20000ff4 	.word	0x20000ff4
 8009730:	053e2d63 	.word	0x053e2d63
    {
      wait_loop_index--;
 8009734:	68bb      	ldr	r3, [r7, #8]
 8009736:	3b01      	subs	r3, #1
 8009738:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800973a:	68bb      	ldr	r3, [r7, #8]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d1f9      	bne.n	8009734 <HAL_ADC_Init+0x3b0>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	4618      	mov	r0, r3
 8009746:	f7ff fd59 	bl	80091fc <LL_ADC_IsInternalRegulatorEnabled>
 800974a:	4603      	mov	r3, r0
 800974c:	2b00      	cmp	r3, #0
 800974e:	d10d      	bne.n	800976c <HAL_ADC_Init+0x3e8>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009754:	f043 0210 	orr.w	r2, r3, #16
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009760:	f043 0201 	orr.w	r2, r3, #1
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8009768:	2301      	movs	r3, #1
 800976a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	4618      	mov	r0, r3
 8009772:	f7ff fdcd 	bl	8009310 <LL_ADC_REG_IsConversionOngoing>
 8009776:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800977c:	f003 0310 	and.w	r3, r3, #16
 8009780:	2b00      	cmp	r3, #0
 8009782:	f040 8134 	bne.w	80099ee <HAL_ADC_Init+0x66a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8009786:	697b      	ldr	r3, [r7, #20]
 8009788:	2b00      	cmp	r3, #0
 800978a:	f040 8130 	bne.w	80099ee <HAL_ADC_Init+0x66a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009792:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8009796:	f043 0202 	orr.w	r2, r3, #2
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	4618      	mov	r0, r3
 80097a4:	f7ff fd66 	bl	8009274 <LL_ADC_IsEnabled>
 80097a8:	4603      	mov	r3, r0
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d10b      	bne.n	80097c6 <HAL_ADC_Init+0x442>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80097ae:	4896      	ldr	r0, [pc, #600]	; (8009a08 <HAL_ADC_Init+0x684>)
 80097b0:	f7ff fd60 	bl	8009274 <LL_ADC_IsEnabled>
 80097b4:	4603      	mov	r3, r0
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d105      	bne.n	80097c6 <HAL_ADC_Init+0x442>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	685b      	ldr	r3, [r3, #4]
 80097be:	4619      	mov	r1, r3
 80097c0:	4892      	ldr	r0, [pc, #584]	; (8009a0c <HAL_ADC_Init+0x688>)
 80097c2:	f7ff fba9 	bl	8008f18 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	7e5b      	ldrb	r3, [r3, #25]
 80097ca:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80097d0:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80097d6:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80097dc:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80097e4:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80097e6:	4313      	orrs	r3, r2
 80097e8:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80097f0:	2b01      	cmp	r3, #1
 80097f2:	d106      	bne.n	8009802 <HAL_ADC_Init+0x47e>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097f8:	3b01      	subs	r3, #1
 80097fa:	045b      	lsls	r3, r3, #17
 80097fc:	69ba      	ldr	r2, [r7, #24]
 80097fe:	4313      	orrs	r3, r2
 8009800:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009806:	2b00      	cmp	r3, #0
 8009808:	d009      	beq.n	800981e <HAL_ADC_Init+0x49a>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800980e:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009816:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8009818:	69ba      	ldr	r2, [r7, #24]
 800981a:	4313      	orrs	r3, r2
 800981c:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	68da      	ldr	r2, [r3, #12]
 8009824:	4b7a      	ldr	r3, [pc, #488]	; (8009a10 <HAL_ADC_Init+0x68c>)
 8009826:	4013      	ands	r3, r2
 8009828:	687a      	ldr	r2, [r7, #4]
 800982a:	6812      	ldr	r2, [r2, #0]
 800982c:	69b9      	ldr	r1, [r7, #24]
 800982e:	430b      	orrs	r3, r1
 8009830:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	4618      	mov	r0, r3
 8009838:	f7ff fd6a 	bl	8009310 <LL_ADC_REG_IsConversionOngoing>
 800983c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	4618      	mov	r0, r3
 8009844:	f7ff fd8b 	bl	800935e <LL_ADC_INJ_IsConversionOngoing>
 8009848:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800984a:	693b      	ldr	r3, [r7, #16]
 800984c:	2b00      	cmp	r3, #0
 800984e:	f040 80ac 	bne.w	80099aa <HAL_ADC_Init+0x626>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	2b00      	cmp	r3, #0
 8009856:	f040 80a8 	bne.w	80099aa <HAL_ADC_Init+0x626>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800985e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009866:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8009868:	4313      	orrs	r3, r2
 800986a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	68db      	ldr	r3, [r3, #12]
 8009872:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009876:	f023 0302 	bic.w	r3, r3, #2
 800987a:	687a      	ldr	r2, [r7, #4]
 800987c:	6812      	ldr	r2, [r2, #0]
 800987e:	69b9      	ldr	r1, [r7, #24]
 8009880:	430b      	orrs	r3, r1
 8009882:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800988a:	2b01      	cmp	r3, #1
 800988c:	f040 8085 	bne.w	800999a <HAL_ADC_Init+0x616>
      {
        assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009894:	2b00      	cmp	r3, #0
 8009896:	d020      	beq.n	80098da <HAL_ADC_Init+0x556>
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800989c:	2b04      	cmp	r3, #4
 800989e:	d01c      	beq.n	80098da <HAL_ADC_Init+0x556>
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098a4:	2b08      	cmp	r3, #8
 80098a6:	d018      	beq.n	80098da <HAL_ADC_Init+0x556>
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098ac:	2b0c      	cmp	r3, #12
 80098ae:	d014      	beq.n	80098da <HAL_ADC_Init+0x556>
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098b4:	2b10      	cmp	r3, #16
 80098b6:	d010      	beq.n	80098da <HAL_ADC_Init+0x556>
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098bc:	2b14      	cmp	r3, #20
 80098be:	d00c      	beq.n	80098da <HAL_ADC_Init+0x556>
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098c4:	2b18      	cmp	r3, #24
 80098c6:	d008      	beq.n	80098da <HAL_ADC_Init+0x556>
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098cc:	2b1c      	cmp	r3, #28
 80098ce:	d004      	beq.n	80098da <HAL_ADC_Init+0x556>
 80098d0:	f240 2167 	movw	r1, #615	; 0x267
 80098d4:	484f      	ldr	r0, [pc, #316]	; (8009a14 <HAL_ADC_Init+0x690>)
 80098d6:	f7fa fe5d 	bl	8004594 <assert_failed>
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d025      	beq.n	800992e <HAL_ADC_Init+0x5aa>
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098e6:	2b20      	cmp	r3, #32
 80098e8:	d021      	beq.n	800992e <HAL_ADC_Init+0x5aa>
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098ee:	2b40      	cmp	r3, #64	; 0x40
 80098f0:	d01d      	beq.n	800992e <HAL_ADC_Init+0x5aa>
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098f6:	2b60      	cmp	r3, #96	; 0x60
 80098f8:	d019      	beq.n	800992e <HAL_ADC_Init+0x5aa>
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098fe:	2b80      	cmp	r3, #128	; 0x80
 8009900:	d015      	beq.n	800992e <HAL_ADC_Init+0x5aa>
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009906:	2ba0      	cmp	r3, #160	; 0xa0
 8009908:	d011      	beq.n	800992e <HAL_ADC_Init+0x5aa>
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800990e:	2bc0      	cmp	r3, #192	; 0xc0
 8009910:	d00d      	beq.n	800992e <HAL_ADC_Init+0x5aa>
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009916:	2be0      	cmp	r3, #224	; 0xe0
 8009918:	d009      	beq.n	800992e <HAL_ADC_Init+0x5aa>
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800991e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009922:	d004      	beq.n	800992e <HAL_ADC_Init+0x5aa>
 8009924:	f44f 711a 	mov.w	r1, #616	; 0x268
 8009928:	483a      	ldr	r0, [pc, #232]	; (8009a14 <HAL_ADC_Init+0x690>)
 800992a:	f7fa fe33 	bl	8004594 <assert_failed>
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009932:	2b00      	cmp	r3, #0
 8009934:	d009      	beq.n	800994a <HAL_ADC_Init+0x5c6>
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800993a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800993e:	d004      	beq.n	800994a <HAL_ADC_Init+0x5c6>
 8009940:	f240 2169 	movw	r1, #617	; 0x269
 8009944:	4833      	ldr	r0, [pc, #204]	; (8009a14 <HAL_ADC_Init+0x690>)
 8009946:	f7fa fe25 	bl	8004594 <assert_failed>
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800994e:	2b01      	cmp	r3, #1
 8009950:	d00a      	beq.n	8009968 <HAL_ADC_Init+0x5e4>
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009956:	f240 4201 	movw	r2, #1025	; 0x401
 800995a:	4293      	cmp	r3, r2
 800995c:	d004      	beq.n	8009968 <HAL_ADC_Init+0x5e4>
 800995e:	f240 216a 	movw	r1, #618	; 0x26a
 8009962:	482c      	ldr	r0, [pc, #176]	; (8009a14 <HAL_ADC_Init+0x690>)
 8009964:	f7fa fe16 	bl	8004594 <assert_failed>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	691b      	ldr	r3, [r3, #16]
 800996e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009972:	f023 0304 	bic.w	r3, r3, #4
 8009976:	687a      	ldr	r2, [r7, #4]
 8009978:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800997a:	687a      	ldr	r2, [r7, #4]
 800997c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800997e:	4311      	orrs	r1, r2
 8009980:	687a      	ldr	r2, [r7, #4]
 8009982:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8009984:	4311      	orrs	r1, r2
 8009986:	687a      	ldr	r2, [r7, #4]
 8009988:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800998a:	430a      	orrs	r2, r1
 800998c:	431a      	orrs	r2, r3
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	f042 0201 	orr.w	r2, r2, #1
 8009996:	611a      	str	r2, [r3, #16]
 8009998:	e007      	b.n	80099aa <HAL_ADC_Init+0x626>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	691a      	ldr	r2, [r3, #16]
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	f022 0201 	bic.w	r2, r2, #1
 80099a8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	691b      	ldr	r3, [r3, #16]
 80099ae:	2b01      	cmp	r3, #1
 80099b0:	d10c      	bne.n	80099cc <HAL_ADC_Init+0x648>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099b8:	f023 010f 	bic.w	r1, r3, #15
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	69db      	ldr	r3, [r3, #28]
 80099c0:	1e5a      	subs	r2, r3, #1
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	430a      	orrs	r2, r1
 80099c8:	631a      	str	r2, [r3, #48]	; 0x30
 80099ca:	e007      	b.n	80099dc <HAL_ADC_Init+0x658>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	f022 020f 	bic.w	r2, r2, #15
 80099da:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099e0:	f023 0303 	bic.w	r3, r3, #3
 80099e4:	f043 0201 	orr.w	r2, r3, #1
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	655a      	str	r2, [r3, #84]	; 0x54
 80099ec:	e007      	b.n	80099fe <HAL_ADC_Init+0x67a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099f2:	f043 0210 	orr.w	r2, r3, #16
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80099fa:	2301      	movs	r3, #1
 80099fc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80099fe:	7ffb      	ldrb	r3, [r7, #31]
}
 8009a00:	4618      	mov	r0, r3
 8009a02:	3720      	adds	r7, #32
 8009a04:	46bd      	mov	sp, r7
 8009a06:	bd80      	pop	{r7, pc}
 8009a08:	50040000 	.word	0x50040000
 8009a0c:	50040300 	.word	0x50040300
 8009a10:	fff0c007 	.word	0xfff0c007
 8009a14:	08018ba8 	.word	0x08018ba8

08009a18 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b086      	sub	sp, #24
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	60f8      	str	r0, [r7, #12]
 8009a20:	60b9      	str	r1, [r7, #8]
 8009a22:	607a      	str	r2, [r7, #4]
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
#endif

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	4a3f      	ldr	r2, [pc, #252]	; (8009b28 <HAL_ADC_Start_DMA+0x110>)
 8009a2a:	4293      	cmp	r3, r2
 8009a2c:	d004      	beq.n	8009a38 <HAL_ADC_Start_DMA+0x20>
 8009a2e:	f240 71c9 	movw	r1, #1993	; 0x7c9
 8009a32:	483e      	ldr	r0, [pc, #248]	; (8009b2c <HAL_ADC_Start_DMA+0x114>)
 8009a34:	f7fa fdae 	bl	8004594 <assert_failed>

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	f7ff fc67 	bl	8009310 <LL_ADC_REG_IsConversionOngoing>
 8009a42:	4603      	mov	r3, r0
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d167      	bne.n	8009b18 <HAL_ADC_Start_DMA+0x100>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009a4e:	2b01      	cmp	r3, #1
 8009a50:	d101      	bne.n	8009a56 <HAL_ADC_Start_DMA+0x3e>
 8009a52:	2302      	movs	r3, #2
 8009a54:	e063      	b.n	8009b1e <HAL_ADC_Start_DMA+0x106>
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	2201      	movs	r2, #1
 8009a5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8009a5e:	68f8      	ldr	r0, [r7, #12]
 8009a60:	f001 f962 	bl	800ad28 <ADC_Enable>
 8009a64:	4603      	mov	r3, r0
 8009a66:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8009a68:	7dfb      	ldrb	r3, [r7, #23]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d14f      	bne.n	8009b0e <HAL_ADC_Start_DMA+0xf6>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a72:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009a76:	f023 0301 	bic.w	r3, r3, #1
 8009a7a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d006      	beq.n	8009a9c <HAL_ADC_Start_DMA+0x84>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a92:	f023 0206 	bic.w	r2, r3, #6
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	659a      	str	r2, [r3, #88]	; 0x58
 8009a9a:	e002      	b.n	8009aa2 <HAL_ADC_Start_DMA+0x8a>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009aa6:	4a22      	ldr	r2, [pc, #136]	; (8009b30 <HAL_ADC_Start_DMA+0x118>)
 8009aa8:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009aae:	4a21      	ldr	r2, [pc, #132]	; (8009b34 <HAL_ADC_Start_DMA+0x11c>)
 8009ab0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ab6:	4a20      	ldr	r2, [pc, #128]	; (8009b38 <HAL_ADC_Start_DMA+0x120>)
 8009ab8:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	221c      	movs	r2, #28
 8009ac0:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	685a      	ldr	r2, [r3, #4]
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	f042 0210 	orr.w	r2, r2, #16
 8009ad8:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	68da      	ldr	r2, [r3, #12]
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	f042 0201 	orr.w	r2, r2, #1
 8009ae8:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	3340      	adds	r3, #64	; 0x40
 8009af4:	4619      	mov	r1, r3
 8009af6:	68ba      	ldr	r2, [r7, #8]
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	f002 fd71 	bl	800c5e0 <HAL_DMA_Start_IT>
 8009afe:	4603      	mov	r3, r0
 8009b00:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	4618      	mov	r0, r3
 8009b08:	f7ff fbda 	bl	80092c0 <LL_ADC_REG_StartConversion>
 8009b0c:	e006      	b.n	8009b1c <HAL_ADC_Start_DMA+0x104>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	2200      	movs	r2, #0
 8009b12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8009b16:	e001      	b.n	8009b1c <HAL_ADC_Start_DMA+0x104>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8009b18:	2302      	movs	r3, #2
 8009b1a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8009b1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b1e:	4618      	mov	r0, r3
 8009b20:	3718      	adds	r7, #24
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bd80      	pop	{r7, pc}
 8009b26:	bf00      	nop
 8009b28:	50040000 	.word	0x50040000
 8009b2c:	08018ba8 	.word	0x08018ba8
 8009b30:	0800aef3 	.word	0x0800aef3
 8009b34:	0800afcb 	.word	0x0800afcb
 8009b38:	0800afe7 	.word	0x0800afe7

08009b3c <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b084      	sub	sp, #16
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	4a32      	ldr	r2, [pc, #200]	; (8009c14 <HAL_ADC_Stop_DMA+0xd8>)
 8009b4a:	4293      	cmp	r3, r2
 8009b4c:	d004      	beq.n	8009b58 <HAL_ADC_Stop_DMA+0x1c>
 8009b4e:	f640 0154 	movw	r1, #2132	; 0x854
 8009b52:	4831      	ldr	r0, [pc, #196]	; (8009c18 <HAL_ADC_Stop_DMA+0xdc>)
 8009b54:	f7fa fd1e 	bl	8004594 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hadc);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009b5e:	2b01      	cmp	r3, #1
 8009b60:	d101      	bne.n	8009b66 <HAL_ADC_Stop_DMA+0x2a>
 8009b62:	2302      	movs	r3, #2
 8009b64:	e051      	b.n	8009c0a <HAL_ADC_Stop_DMA+0xce>
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2201      	movs	r2, #1
 8009b6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8009b6e:	2103      	movs	r1, #3
 8009b70:	6878      	ldr	r0, [r7, #4]
 8009b72:	f001 f801 	bl	800ab78 <ADC_ConversionStop>
 8009b76:	4603      	mov	r3, r0
 8009b78:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8009b7a:	7bfb      	ldrb	r3, [r7, #15]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d13f      	bne.n	8009c00 <HAL_ADC_Stop_DMA+0xc4>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	68da      	ldr	r2, [r3, #12]
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	f022 0201 	bic.w	r2, r2, #1
 8009b8e:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b94:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009b98:	b2db      	uxtb	r3, r3
 8009b9a:	2b02      	cmp	r3, #2
 8009b9c:	d10f      	bne.n	8009bbe <HAL_ADC_Stop_DMA+0x82>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	f002 fd8a 	bl	800c6bc <HAL_DMA_Abort>
 8009ba8:	4603      	mov	r3, r0
 8009baa:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8009bac:	7bfb      	ldrb	r3, [r7, #15]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d005      	beq.n	8009bbe <HAL_ADC_Stop_DMA+0x82>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bb6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	685a      	ldr	r2, [r3, #4]
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	f022 0210 	bic.w	r2, r2, #16
 8009bcc:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8009bce:	7bfb      	ldrb	r3, [r7, #15]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d105      	bne.n	8009be0 <HAL_ADC_Stop_DMA+0xa4>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8009bd4:	6878      	ldr	r0, [r7, #4]
 8009bd6:	f001 f92d 	bl	800ae34 <ADC_Disable>
 8009bda:	4603      	mov	r3, r0
 8009bdc:	73fb      	strb	r3, [r7, #15]
 8009bde:	e002      	b.n	8009be6 <HAL_ADC_Stop_DMA+0xaa>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8009be0:	6878      	ldr	r0, [r7, #4]
 8009be2:	f001 f927 	bl	800ae34 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8009be6:	7bfb      	ldrb	r3, [r7, #15]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d109      	bne.n	8009c00 <HAL_ADC_Stop_DMA+0xc4>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bf0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8009bf4:	f023 0301 	bic.w	r3, r3, #1
 8009bf8:	f043 0201 	orr.w	r2, r3, #1
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	2200      	movs	r2, #0
 8009c04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8009c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	3710      	adds	r7, #16
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	bd80      	pop	{r7, pc}
 8009c12:	bf00      	nop
 8009c14:	50040000 	.word	0x50040000
 8009c18:	08018ba8 	.word	0x08018ba8

08009c1c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b088      	sub	sp, #32
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8009c24:	2300      	movs	r3, #0
 8009c26:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	685b      	ldr	r3, [r3, #4]
 8009c36:	617b      	str	r3, [r7, #20]
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
#endif

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	4a87      	ldr	r2, [pc, #540]	; (8009e5c <HAL_ADC_IRQHandler+0x240>)
 8009c3e:	4293      	cmp	r3, r2
 8009c40:	d004      	beq.n	8009c4c <HAL_ADC_IRQHandler+0x30>
 8009c42:	f640 01c3 	movw	r1, #2243	; 0x8c3
 8009c46:	4886      	ldr	r0, [pc, #536]	; (8009e60 <HAL_ADC_IRQHandler+0x244>)
 8009c48:	f7fa fca4 	bl	8004594 <assert_failed>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	695b      	ldr	r3, [r3, #20]
 8009c50:	2b04      	cmp	r3, #4
 8009c52:	d008      	beq.n	8009c66 <HAL_ADC_IRQHandler+0x4a>
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	695b      	ldr	r3, [r3, #20]
 8009c58:	2b08      	cmp	r3, #8
 8009c5a:	d004      	beq.n	8009c66 <HAL_ADC_IRQHandler+0x4a>
 8009c5c:	f640 01c4 	movw	r1, #2244	; 0x8c4
 8009c60:	487f      	ldr	r0, [pc, #508]	; (8009e60 <HAL_ADC_IRQHandler+0x244>)
 8009c62:	f7fa fc97 	bl	8004594 <assert_failed>

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8009c66:	69bb      	ldr	r3, [r7, #24]
 8009c68:	f003 0302 	and.w	r3, r3, #2
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d017      	beq.n	8009ca0 <HAL_ADC_IRQHandler+0x84>
 8009c70:	697b      	ldr	r3, [r7, #20]
 8009c72:	f003 0302 	and.w	r3, r3, #2
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d012      	beq.n	8009ca0 <HAL_ADC_IRQHandler+0x84>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c7e:	f003 0310 	and.w	r3, r3, #16
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d105      	bne.n	8009c92 <HAL_ADC_IRQHandler+0x76>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c8a:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8009c92:	6878      	ldr	r0, [r7, #4]
 8009c94:	f001 f9e9 	bl	800b06a <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	2202      	movs	r2, #2
 8009c9e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8009ca0:	69bb      	ldr	r3, [r7, #24]
 8009ca2:	f003 0304 	and.w	r3, r3, #4
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d004      	beq.n	8009cb4 <HAL_ADC_IRQHandler+0x98>
 8009caa:	697b      	ldr	r3, [r7, #20]
 8009cac:	f003 0304 	and.w	r3, r3, #4
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d109      	bne.n	8009cc8 <HAL_ADC_IRQHandler+0xac>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8009cb4:	69bb      	ldr	r3, [r7, #24]
 8009cb6:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d05e      	beq.n	8009d7c <HAL_ADC_IRQHandler+0x160>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8009cbe:	697b      	ldr	r3, [r7, #20]
 8009cc0:	f003 0308 	and.w	r3, r3, #8
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d059      	beq.n	8009d7c <HAL_ADC_IRQHandler+0x160>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ccc:	f003 0310 	and.w	r3, r3, #16
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d105      	bne.n	8009ce0 <HAL_ADC_IRQHandler+0xc4>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cd8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	f7ff f9ae 	bl	8009046 <LL_ADC_REG_IsTriggerSourceSWStart>
 8009cea:	4603      	mov	r3, r0
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d03e      	beq.n	8009d6e <HAL_ADC_IRQHandler+0x152>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	68db      	ldr	r3, [r3, #12]
 8009cf6:	613b      	str	r3, [r7, #16]
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8009cf8:	693b      	ldr	r3, [r7, #16]
 8009cfa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d135      	bne.n	8009d6e <HAL_ADC_IRQHandler+0x152>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	f003 0308 	and.w	r3, r3, #8
 8009d0c:	2b08      	cmp	r3, #8
 8009d0e:	d12e      	bne.n	8009d6e <HAL_ADC_IRQHandler+0x152>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	4618      	mov	r0, r3
 8009d16:	f7ff fafb 	bl	8009310 <LL_ADC_REG_IsConversionOngoing>
 8009d1a:	4603      	mov	r3, r0
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d11a      	bne.n	8009d56 <HAL_ADC_IRQHandler+0x13a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	685a      	ldr	r2, [r3, #4]
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	f022 020c 	bic.w	r2, r2, #12
 8009d2e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d34:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d112      	bne.n	8009d6e <HAL_ADC_IRQHandler+0x152>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d4c:	f043 0201 	orr.w	r2, r3, #1
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	655a      	str	r2, [r3, #84]	; 0x54
 8009d54:	e00b      	b.n	8009d6e <HAL_ADC_IRQHandler+0x152>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d5a:	f043 0210 	orr.w	r2, r3, #16
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d66:	f043 0201 	orr.w	r2, r3, #1
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	f7fe f82e 	bl	8007dd0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	220c      	movs	r2, #12
 8009d7a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8009d7c:	69bb      	ldr	r3, [r7, #24]
 8009d7e:	f003 0320 	and.w	r3, r3, #32
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d004      	beq.n	8009d90 <HAL_ADC_IRQHandler+0x174>
 8009d86:	697b      	ldr	r3, [r7, #20]
 8009d88:	f003 0320 	and.w	r3, r3, #32
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d109      	bne.n	8009da4 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8009d90:	69bb      	ldr	r3, [r7, #24]
 8009d92:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d077      	beq.n	8009e8a <HAL_ADC_IRQHandler+0x26e>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8009d9a:	697b      	ldr	r3, [r7, #20]
 8009d9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d072      	beq.n	8009e8a <HAL_ADC_IRQHandler+0x26e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009da8:	f003 0310 	and.w	r3, r3, #16
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d105      	bne.n	8009dbc <HAL_ADC_IRQHandler+0x1a0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009db4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	f7ff f97f 	bl	80090c4 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8009dc6:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	4618      	mov	r0, r3
 8009dce:	f7ff f93a 	bl	8009046 <LL_ADC_REG_IsTriggerSourceSWStart>
 8009dd2:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	68db      	ldr	r3, [r3, #12]
 8009dda:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d04c      	beq.n	8009e7c <HAL_ADC_IRQHandler+0x260>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8009de2:	693b      	ldr	r3, [r7, #16]
 8009de4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d007      	beq.n	8009dfc <HAL_ADC_IRQHandler+0x1e0>
 8009dec:	68bb      	ldr	r3, [r7, #8]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d044      	beq.n	8009e7c <HAL_ADC_IRQHandler+0x260>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8009df2:	693b      	ldr	r3, [r7, #16]
 8009df4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d13f      	bne.n	8009e7c <HAL_ADC_IRQHandler+0x260>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e06:	2b40      	cmp	r3, #64	; 0x40
 8009e08:	d138      	bne.n	8009e7c <HAL_ADC_IRQHandler+0x260>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8009e0a:	693b      	ldr	r3, [r7, #16]
 8009e0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d133      	bne.n	8009e7c <HAL_ADC_IRQHandler+0x260>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	4618      	mov	r0, r3
 8009e1a:	f7ff faa0 	bl	800935e <LL_ADC_INJ_IsConversionOngoing>
 8009e1e:	4603      	mov	r3, r0
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d11f      	bne.n	8009e64 <HAL_ADC_IRQHandler+0x248>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	685a      	ldr	r2, [r3, #4]
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8009e32:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e38:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d117      	bne.n	8009e7c <HAL_ADC_IRQHandler+0x260>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e50:	f043 0201 	orr.w	r2, r3, #1
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	655a      	str	r2, [r3, #84]	; 0x54
 8009e58:	e010      	b.n	8009e7c <HAL_ADC_IRQHandler+0x260>
 8009e5a:	bf00      	nop
 8009e5c:	50040000 	.word	0x50040000
 8009e60:	08018ba8 	.word	0x08018ba8
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e68:	f043 0210 	orr.w	r2, r3, #16
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e74:	f043 0201 	orr.w	r2, r3, #1
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8009e7c:	6878      	ldr	r0, [r7, #4]
 8009e7e:	f001 f8cc 	bl	800b01a <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	2260      	movs	r2, #96	; 0x60
 8009e88:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8009e8a:	69bb      	ldr	r3, [r7, #24]
 8009e8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d011      	beq.n	8009eb8 <HAL_ADC_IRQHandler+0x29c>
 8009e94:	697b      	ldr	r3, [r7, #20]
 8009e96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d00c      	beq.n	8009eb8 <HAL_ADC_IRQHandler+0x29c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ea2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	f000 f890 	bl	8009fd0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	2280      	movs	r2, #128	; 0x80
 8009eb6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8009eb8:	69bb      	ldr	r3, [r7, #24]
 8009eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d012      	beq.n	8009ee8 <HAL_ADC_IRQHandler+0x2cc>
 8009ec2:	697b      	ldr	r3, [r7, #20]
 8009ec4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d00d      	beq.n	8009ee8 <HAL_ADC_IRQHandler+0x2cc>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ed0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8009ed8:	6878      	ldr	r0, [r7, #4]
 8009eda:	f001 f8b2 	bl	800b042 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009ee6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8009ee8:	69bb      	ldr	r3, [r7, #24]
 8009eea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d012      	beq.n	8009f18 <HAL_ADC_IRQHandler+0x2fc>
 8009ef2:	697b      	ldr	r3, [r7, #20]
 8009ef4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d00d      	beq.n	8009f18 <HAL_ADC_IRQHandler+0x2fc>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f00:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8009f08:	6878      	ldr	r0, [r7, #4]
 8009f0a:	f001 f8a4 	bl	800b056 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009f16:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8009f18:	69bb      	ldr	r3, [r7, #24]
 8009f1a:	f003 0310 	and.w	r3, r3, #16
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d02a      	beq.n	8009f78 <HAL_ADC_IRQHandler+0x35c>
 8009f22:	697b      	ldr	r3, [r7, #20]
 8009f24:	f003 0310 	and.w	r3, r3, #16
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d025      	beq.n	8009f78 <HAL_ADC_IRQHandler+0x35c>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d102      	bne.n	8009f3a <HAL_ADC_IRQHandler+0x31e>
    {
      overrun_error = 1UL;
 8009f34:	2301      	movs	r3, #1
 8009f36:	61fb      	str	r3, [r7, #28]
 8009f38:	e008      	b.n	8009f4c <HAL_ADC_IRQHandler+0x330>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	68db      	ldr	r3, [r3, #12]
 8009f40:	f003 0301 	and.w	r3, r3, #1
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d001      	beq.n	8009f4c <HAL_ADC_IRQHandler+0x330>
        {
          overrun_error = 1UL;
 8009f48:	2301      	movs	r3, #1
 8009f4a:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8009f4c:	69fb      	ldr	r3, [r7, #28]
 8009f4e:	2b01      	cmp	r3, #1
 8009f50:	d10e      	bne.n	8009f70 <HAL_ADC_IRQHandler+0x354>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f56:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f62:	f043 0202 	orr.w	r2, r3, #2
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8009f6a:	6878      	ldr	r0, [r7, #4]
 8009f6c:	f000 f83a 	bl	8009fe4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	2210      	movs	r2, #16
 8009f76:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8009f78:	69bb      	ldr	r3, [r7, #24]
 8009f7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d018      	beq.n	8009fb4 <HAL_ADC_IRQHandler+0x398>
 8009f82:	697b      	ldr	r3, [r7, #20]
 8009f84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d013      	beq.n	8009fb4 <HAL_ADC_IRQHandler+0x398>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f90:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f9c:	f043 0208 	orr.w	r2, r3, #8
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009fac:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8009fae:	6878      	ldr	r0, [r7, #4]
 8009fb0:	f001 f83d 	bl	800b02e <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8009fb4:	bf00      	nop
 8009fb6:	3720      	adds	r7, #32
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	bd80      	pop	{r7, pc}

08009fbc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8009fbc:	b480      	push	{r7}
 8009fbe:	b083      	sub	sp, #12
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8009fc4:	bf00      	nop
 8009fc6:	370c      	adds	r7, #12
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fce:	4770      	bx	lr

08009fd0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8009fd0:	b480      	push	{r7}
 8009fd2:	b083      	sub	sp, #12
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8009fd8:	bf00      	nop
 8009fda:	370c      	adds	r7, #12
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe2:	4770      	bx	lr

08009fe4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8009fe4:	b480      	push	{r7}
 8009fe6:	b083      	sub	sp, #12
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8009fec:	bf00      	nop
 8009fee:	370c      	adds	r7, #12
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff6:	4770      	bx	lr

08009ff8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8009ff8:	b590      	push	{r4, r7, lr}
 8009ffa:	b0b7      	sub	sp, #220	; 0xdc
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
 800a000:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a002:	2300      	movs	r3, #0
 800a004:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800a008:	2300      	movs	r3, #0
 800a00a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	4aa4      	ldr	r2, [pc, #656]	; (800a2a4 <HAL_ADC_ConfigChannel+0x2ac>)
 800a012:	4293      	cmp	r3, r2
 800a014:	d004      	beq.n	800a020 <HAL_ADC_ConfigChannel+0x28>
 800a016:	f640 2195 	movw	r1, #2709	; 0xa95
 800a01a:	48a3      	ldr	r0, [pc, #652]	; (800a2a8 <HAL_ADC_ConfigChannel+0x2b0>)
 800a01c:	f7fa faba 	bl	8004594 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	685b      	ldr	r3, [r3, #4]
 800a024:	2b06      	cmp	r3, #6
 800a026:	d04f      	beq.n	800a0c8 <HAL_ADC_ConfigChannel+0xd0>
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	685b      	ldr	r3, [r3, #4]
 800a02c:	2b0c      	cmp	r3, #12
 800a02e:	d04b      	beq.n	800a0c8 <HAL_ADC_ConfigChannel+0xd0>
 800a030:	683b      	ldr	r3, [r7, #0]
 800a032:	685b      	ldr	r3, [r3, #4]
 800a034:	2b12      	cmp	r3, #18
 800a036:	d047      	beq.n	800a0c8 <HAL_ADC_ConfigChannel+0xd0>
 800a038:	683b      	ldr	r3, [r7, #0]
 800a03a:	685b      	ldr	r3, [r3, #4]
 800a03c:	2b18      	cmp	r3, #24
 800a03e:	d043      	beq.n	800a0c8 <HAL_ADC_ConfigChannel+0xd0>
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	685b      	ldr	r3, [r3, #4]
 800a044:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a048:	d03e      	beq.n	800a0c8 <HAL_ADC_ConfigChannel+0xd0>
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	685b      	ldr	r3, [r3, #4]
 800a04e:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
 800a052:	d039      	beq.n	800a0c8 <HAL_ADC_ConfigChannel+0xd0>
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	685b      	ldr	r3, [r3, #4]
 800a058:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
 800a05c:	d034      	beq.n	800a0c8 <HAL_ADC_ConfigChannel+0xd0>
 800a05e:	683b      	ldr	r3, [r7, #0]
 800a060:	685b      	ldr	r3, [r3, #4]
 800a062:	f5b3 7f89 	cmp.w	r3, #274	; 0x112
 800a066:	d02f      	beq.n	800a0c8 <HAL_ADC_ConfigChannel+0xd0>
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	685b      	ldr	r3, [r3, #4]
 800a06c:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 800a070:	d02a      	beq.n	800a0c8 <HAL_ADC_ConfigChannel+0xd0>
 800a072:	683b      	ldr	r3, [r7, #0]
 800a074:	685b      	ldr	r3, [r3, #4]
 800a076:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a07a:	d025      	beq.n	800a0c8 <HAL_ADC_ConfigChannel+0xd0>
 800a07c:	683b      	ldr	r3, [r7, #0]
 800a07e:	685b      	ldr	r3, [r3, #4]
 800a080:	f240 2206 	movw	r2, #518	; 0x206
 800a084:	4293      	cmp	r3, r2
 800a086:	d01f      	beq.n	800a0c8 <HAL_ADC_ConfigChannel+0xd0>
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	685b      	ldr	r3, [r3, #4]
 800a08c:	f5b3 7f03 	cmp.w	r3, #524	; 0x20c
 800a090:	d01a      	beq.n	800a0c8 <HAL_ADC_ConfigChannel+0xd0>
 800a092:	683b      	ldr	r3, [r7, #0]
 800a094:	685b      	ldr	r3, [r3, #4]
 800a096:	f240 2212 	movw	r2, #530	; 0x212
 800a09a:	4293      	cmp	r3, r2
 800a09c:	d014      	beq.n	800a0c8 <HAL_ADC_ConfigChannel+0xd0>
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	685b      	ldr	r3, [r3, #4]
 800a0a2:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800a0a6:	d00f      	beq.n	800a0c8 <HAL_ADC_ConfigChannel+0xd0>
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	685b      	ldr	r3, [r3, #4]
 800a0ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a0b0:	d00a      	beq.n	800a0c8 <HAL_ADC_ConfigChannel+0xd0>
 800a0b2:	683b      	ldr	r3, [r7, #0]
 800a0b4:	685b      	ldr	r3, [r3, #4]
 800a0b6:	f240 3206 	movw	r2, #774	; 0x306
 800a0ba:	4293      	cmp	r3, r2
 800a0bc:	d004      	beq.n	800a0c8 <HAL_ADC_ConfigChannel+0xd0>
 800a0be:	f640 2196 	movw	r1, #2710	; 0xa96
 800a0c2:	4879      	ldr	r0, [pc, #484]	; (800a2a8 <HAL_ADC_ConfigChannel+0x2b0>)
 800a0c4:	f7fa fa66 	bl	8004594 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 800a0c8:	683b      	ldr	r3, [r7, #0]
 800a0ca:	689b      	ldr	r3, [r3, #8]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d020      	beq.n	800a112 <HAL_ADC_ConfigChannel+0x11a>
 800a0d0:	683b      	ldr	r3, [r7, #0]
 800a0d2:	689b      	ldr	r3, [r3, #8]
 800a0d4:	2b01      	cmp	r3, #1
 800a0d6:	d01c      	beq.n	800a112 <HAL_ADC_ConfigChannel+0x11a>
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	689b      	ldr	r3, [r3, #8]
 800a0dc:	2b02      	cmp	r3, #2
 800a0de:	d018      	beq.n	800a112 <HAL_ADC_ConfigChannel+0x11a>
 800a0e0:	683b      	ldr	r3, [r7, #0]
 800a0e2:	689b      	ldr	r3, [r3, #8]
 800a0e4:	2b03      	cmp	r3, #3
 800a0e6:	d014      	beq.n	800a112 <HAL_ADC_ConfigChannel+0x11a>
 800a0e8:	683b      	ldr	r3, [r7, #0]
 800a0ea:	689b      	ldr	r3, [r3, #8]
 800a0ec:	2b04      	cmp	r3, #4
 800a0ee:	d010      	beq.n	800a112 <HAL_ADC_ConfigChannel+0x11a>
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	689b      	ldr	r3, [r3, #8]
 800a0f4:	2b05      	cmp	r3, #5
 800a0f6:	d00c      	beq.n	800a112 <HAL_ADC_ConfigChannel+0x11a>
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	689b      	ldr	r3, [r3, #8]
 800a0fc:	2b06      	cmp	r3, #6
 800a0fe:	d008      	beq.n	800a112 <HAL_ADC_ConfigChannel+0x11a>
 800a100:	683b      	ldr	r3, [r7, #0]
 800a102:	689b      	ldr	r3, [r3, #8]
 800a104:	2b07      	cmp	r3, #7
 800a106:	d004      	beq.n	800a112 <HAL_ADC_ConfigChannel+0x11a>
 800a108:	f640 2197 	movw	r1, #2711	; 0xa97
 800a10c:	4866      	ldr	r0, [pc, #408]	; (800a2a8 <HAL_ADC_ConfigChannel+0x2b0>)
 800a10e:	f7fa fa41 	bl	8004594 <assert_failed>
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
 800a112:	683b      	ldr	r3, [r7, #0]
 800a114:	68db      	ldr	r3, [r3, #12]
 800a116:	2b7f      	cmp	r3, #127	; 0x7f
 800a118:	d009      	beq.n	800a12e <HAL_ADC_ConfigChannel+0x136>
 800a11a:	683b      	ldr	r3, [r7, #0]
 800a11c:	68db      	ldr	r3, [r3, #12]
 800a11e:	4a63      	ldr	r2, [pc, #396]	; (800a2ac <HAL_ADC_ConfigChannel+0x2b4>)
 800a120:	4293      	cmp	r3, r2
 800a122:	d004      	beq.n	800a12e <HAL_ADC_ConfigChannel+0x136>
 800a124:	f640 2198 	movw	r1, #2712	; 0xa98
 800a128:	485f      	ldr	r0, [pc, #380]	; (800a2a8 <HAL_ADC_ConfigChannel+0x2b0>)
 800a12a:	f7fa fa33 	bl	8004594 <assert_failed>
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
 800a12e:	683b      	ldr	r3, [r7, #0]
 800a130:	691b      	ldr	r3, [r3, #16]
 800a132:	2b04      	cmp	r3, #4
 800a134:	d014      	beq.n	800a160 <HAL_ADC_ConfigChannel+0x168>
 800a136:	683b      	ldr	r3, [r7, #0]
 800a138:	691b      	ldr	r3, [r3, #16]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d010      	beq.n	800a160 <HAL_ADC_ConfigChannel+0x168>
 800a13e:	683b      	ldr	r3, [r7, #0]
 800a140:	691b      	ldr	r3, [r3, #16]
 800a142:	2b01      	cmp	r3, #1
 800a144:	d00c      	beq.n	800a160 <HAL_ADC_ConfigChannel+0x168>
 800a146:	683b      	ldr	r3, [r7, #0]
 800a148:	691b      	ldr	r3, [r3, #16]
 800a14a:	2b02      	cmp	r3, #2
 800a14c:	d008      	beq.n	800a160 <HAL_ADC_ConfigChannel+0x168>
 800a14e:	683b      	ldr	r3, [r7, #0]
 800a150:	691b      	ldr	r3, [r3, #16]
 800a152:	2b03      	cmp	r3, #3
 800a154:	d004      	beq.n	800a160 <HAL_ADC_ConfigChannel+0x168>
 800a156:	f640 2199 	movw	r1, #2713	; 0xa99
 800a15a:	4853      	ldr	r0, [pc, #332]	; (800a2a8 <HAL_ADC_ConfigChannel+0x2b0>)
 800a15c:	f7fa fa1a 	bl	8004594 <assert_failed>
  assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), sConfig->Offset));
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	695c      	ldr	r4, [r3, #20]
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	4618      	mov	r0, r3
 800a16a:	f7fe ff09 	bl	8008f80 <LL_ADC_GetResolution>
 800a16e:	4603      	mov	r3, r0
 800a170:	089b      	lsrs	r3, r3, #2
 800a172:	f640 72ff 	movw	r2, #4095	; 0xfff
 800a176:	fa22 f303 	lsr.w	r3, r2, r3
 800a17a:	429c      	cmp	r4, r3
 800a17c:	d904      	bls.n	800a188 <HAL_ADC_ConfigChannel+0x190>
 800a17e:	f640 219a 	movw	r1, #2714	; 0xa9a
 800a182:	4849      	ldr	r0, [pc, #292]	; (800a2a8 <HAL_ADC_ConfigChannel+0x2b0>)
 800a184:	f7fa fa06 	bl	8004594 <assert_failed>

  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));
 800a188:	683b      	ldr	r3, [r7, #0]
 800a18a:	691b      	ldr	r3, [r3, #16]
 800a18c:	2b04      	cmp	r3, #4
 800a18e:	d009      	beq.n	800a1a4 <HAL_ADC_ConfigChannel+0x1ac>
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a196:	2b01      	cmp	r3, #1
 800a198:	d104      	bne.n	800a1a4 <HAL_ADC_ConfigChannel+0x1ac>
 800a19a:	f640 219e 	movw	r1, #2718	; 0xa9e
 800a19e:	4842      	ldr	r0, [pc, #264]	; (800a2a8 <HAL_ADC_ConfigChannel+0x2b0>)
 800a1a0:	f7fa f9f8 	bl	8004594 <assert_failed>

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	68db      	ldr	r3, [r3, #12]
 800a1a8:	4a40      	ldr	r2, [pc, #256]	; (800a2ac <HAL_ADC_ConfigChannel+0x2b4>)
 800a1aa:	4293      	cmp	r3, r2
 800a1ac:	f000 80c0 	beq.w	800a330 <HAL_ADC_ConfigChannel+0x338>
  {
    assert_param(IS_ADC_CHANNEL(hadc, sConfig->Channel));
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	4a3b      	ldr	r2, [pc, #236]	; (800a2a4 <HAL_ADC_ConfigChannel+0x2ac>)
 800a1b6:	4293      	cmp	r3, r2
 800a1b8:	f040 80b4 	bne.w	800a324 <HAL_ADC_ConfigChannel+0x32c>
 800a1bc:	683b      	ldr	r3, [r7, #0]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	4a3b      	ldr	r2, [pc, #236]	; (800a2b0 <HAL_ADC_ConfigChannel+0x2b8>)
 800a1c2:	4293      	cmp	r3, r2
 800a1c4:	f000 8104 	beq.w	800a3d0 <HAL_ADC_ConfigChannel+0x3d8>
 800a1c8:	683b      	ldr	r3, [r7, #0]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	4a39      	ldr	r2, [pc, #228]	; (800a2b4 <HAL_ADC_ConfigChannel+0x2bc>)
 800a1ce:	4293      	cmp	r3, r2
 800a1d0:	f000 80fe 	beq.w	800a3d0 <HAL_ADC_ConfigChannel+0x3d8>
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	4a37      	ldr	r2, [pc, #220]	; (800a2b8 <HAL_ADC_ConfigChannel+0x2c0>)
 800a1da:	4293      	cmp	r3, r2
 800a1dc:	f000 80f8 	beq.w	800a3d0 <HAL_ADC_ConfigChannel+0x3d8>
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	4a35      	ldr	r2, [pc, #212]	; (800a2bc <HAL_ADC_ConfigChannel+0x2c4>)
 800a1e6:	4293      	cmp	r3, r2
 800a1e8:	f000 80f2 	beq.w	800a3d0 <HAL_ADC_ConfigChannel+0x3d8>
 800a1ec:	683b      	ldr	r3, [r7, #0]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	4a33      	ldr	r2, [pc, #204]	; (800a2c0 <HAL_ADC_ConfigChannel+0x2c8>)
 800a1f2:	4293      	cmp	r3, r2
 800a1f4:	f000 80ec 	beq.w	800a3d0 <HAL_ADC_ConfigChannel+0x3d8>
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	4a31      	ldr	r2, [pc, #196]	; (800a2c4 <HAL_ADC_ConfigChannel+0x2cc>)
 800a1fe:	4293      	cmp	r3, r2
 800a200:	f000 80e6 	beq.w	800a3d0 <HAL_ADC_ConfigChannel+0x3d8>
 800a204:	683b      	ldr	r3, [r7, #0]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	4a2f      	ldr	r2, [pc, #188]	; (800a2c8 <HAL_ADC_ConfigChannel+0x2d0>)
 800a20a:	4293      	cmp	r3, r2
 800a20c:	f000 80e0 	beq.w	800a3d0 <HAL_ADC_ConfigChannel+0x3d8>
 800a210:	683b      	ldr	r3, [r7, #0]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	4a2d      	ldr	r2, [pc, #180]	; (800a2cc <HAL_ADC_ConfigChannel+0x2d4>)
 800a216:	4293      	cmp	r3, r2
 800a218:	f000 80da 	beq.w	800a3d0 <HAL_ADC_ConfigChannel+0x3d8>
 800a21c:	683b      	ldr	r3, [r7, #0]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	4a2b      	ldr	r2, [pc, #172]	; (800a2d0 <HAL_ADC_ConfigChannel+0x2d8>)
 800a222:	4293      	cmp	r3, r2
 800a224:	f000 80d4 	beq.w	800a3d0 <HAL_ADC_ConfigChannel+0x3d8>
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	4a29      	ldr	r2, [pc, #164]	; (800a2d4 <HAL_ADC_ConfigChannel+0x2dc>)
 800a22e:	4293      	cmp	r3, r2
 800a230:	f000 80ce 	beq.w	800a3d0 <HAL_ADC_ConfigChannel+0x3d8>
 800a234:	683b      	ldr	r3, [r7, #0]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	4a27      	ldr	r2, [pc, #156]	; (800a2d8 <HAL_ADC_ConfigChannel+0x2e0>)
 800a23a:	4293      	cmp	r3, r2
 800a23c:	f000 80c8 	beq.w	800a3d0 <HAL_ADC_ConfigChannel+0x3d8>
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	4a25      	ldr	r2, [pc, #148]	; (800a2dc <HAL_ADC_ConfigChannel+0x2e4>)
 800a246:	4293      	cmp	r3, r2
 800a248:	f000 80c2 	beq.w	800a3d0 <HAL_ADC_ConfigChannel+0x3d8>
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	4a23      	ldr	r2, [pc, #140]	; (800a2e0 <HAL_ADC_ConfigChannel+0x2e8>)
 800a252:	4293      	cmp	r3, r2
 800a254:	f000 80bc 	beq.w	800a3d0 <HAL_ADC_ConfigChannel+0x3d8>
 800a258:	683b      	ldr	r3, [r7, #0]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	4a21      	ldr	r2, [pc, #132]	; (800a2e4 <HAL_ADC_ConfigChannel+0x2ec>)
 800a25e:	4293      	cmp	r3, r2
 800a260:	f000 80b6 	beq.w	800a3d0 <HAL_ADC_ConfigChannel+0x3d8>
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	4a1f      	ldr	r2, [pc, #124]	; (800a2e8 <HAL_ADC_ConfigChannel+0x2f0>)
 800a26a:	4293      	cmp	r3, r2
 800a26c:	f000 80b0 	beq.w	800a3d0 <HAL_ADC_ConfigChannel+0x3d8>
 800a270:	683b      	ldr	r3, [r7, #0]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	4a1d      	ldr	r2, [pc, #116]	; (800a2ec <HAL_ADC_ConfigChannel+0x2f4>)
 800a276:	4293      	cmp	r3, r2
 800a278:	f000 80aa 	beq.w	800a3d0 <HAL_ADC_ConfigChannel+0x3d8>
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	4a1b      	ldr	r2, [pc, #108]	; (800a2f0 <HAL_ADC_ConfigChannel+0x2f8>)
 800a282:	4293      	cmp	r3, r2
 800a284:	f000 80a4 	beq.w	800a3d0 <HAL_ADC_ConfigChannel+0x3d8>
 800a288:	683b      	ldr	r3, [r7, #0]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	4a19      	ldr	r2, [pc, #100]	; (800a2f4 <HAL_ADC_ConfigChannel+0x2fc>)
 800a28e:	4293      	cmp	r3, r2
 800a290:	f000 809e 	beq.w	800a3d0 <HAL_ADC_ConfigChannel+0x3d8>
 800a294:	683b      	ldr	r3, [r7, #0]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	4a17      	ldr	r2, [pc, #92]	; (800a2f8 <HAL_ADC_ConfigChannel+0x300>)
 800a29a:	4293      	cmp	r3, r2
 800a29c:	f000 8098 	beq.w	800a3d0 <HAL_ADC_ConfigChannel+0x3d8>
 800a2a0:	e02c      	b.n	800a2fc <HAL_ADC_ConfigChannel+0x304>
 800a2a2:	bf00      	nop
 800a2a4:	50040000 	.word	0x50040000
 800a2a8:	08018ba8 	.word	0x08018ba8
 800a2ac:	407f0000 	.word	0x407f0000
 800a2b0:	04300002 	.word	0x04300002
 800a2b4:	08600004 	.word	0x08600004
 800a2b8:	0c900008 	.word	0x0c900008
 800a2bc:	10c00010 	.word	0x10c00010
 800a2c0:	14f00020 	.word	0x14f00020
 800a2c4:	19200040 	.word	0x19200040
 800a2c8:	1d500080 	.word	0x1d500080
 800a2cc:	21800100 	.word	0x21800100
 800a2d0:	25b00200 	.word	0x25b00200
 800a2d4:	2a000400 	.word	0x2a000400
 800a2d8:	2e300800 	.word	0x2e300800
 800a2dc:	32601000 	.word	0x32601000
 800a2e0:	36902000 	.word	0x36902000
 800a2e4:	3ac04000 	.word	0x3ac04000
 800a2e8:	3ef08000 	.word	0x3ef08000
 800a2ec:	43210000 	.word	0x43210000
 800a2f0:	47520000 	.word	0x47520000
 800a2f4:	4b840000 	.word	0x4b840000
 800a2f8:	80000001 	.word	0x80000001
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	4aa9      	ldr	r2, [pc, #676]	; (800a5a8 <HAL_ADC_ConfigChannel+0x5b0>)
 800a302:	4293      	cmp	r3, r2
 800a304:	d064      	beq.n	800a3d0 <HAL_ADC_ConfigChannel+0x3d8>
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	4aa8      	ldr	r2, [pc, #672]	; (800a5ac <HAL_ADC_ConfigChannel+0x5b4>)
 800a30c:	4293      	cmp	r3, r2
 800a30e:	d05f      	beq.n	800a3d0 <HAL_ADC_ConfigChannel+0x3d8>
 800a310:	683b      	ldr	r3, [r7, #0]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	4aa6      	ldr	r2, [pc, #664]	; (800a5b0 <HAL_ADC_ConfigChannel+0x5b8>)
 800a316:	4293      	cmp	r3, r2
 800a318:	d05a      	beq.n	800a3d0 <HAL_ADC_ConfigChannel+0x3d8>
 800a31a:	683b      	ldr	r3, [r7, #0]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	4aa5      	ldr	r2, [pc, #660]	; (800a5b4 <HAL_ADC_ConfigChannel+0x5bc>)
 800a320:	4293      	cmp	r3, r2
 800a322:	d055      	beq.n	800a3d0 <HAL_ADC_ConfigChannel+0x3d8>
 800a324:	f640 21a3 	movw	r1, #2723	; 0xaa3
 800a328:	48a3      	ldr	r0, [pc, #652]	; (800a5b8 <HAL_ADC_ConfigChannel+0x5c0>)
 800a32a:	f7fa f933 	bl	8004594 <assert_failed>
 800a32e:	e04f      	b.n	800a3d0 <HAL_ADC_ConfigChannel+0x3d8>
  }
  else
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
 800a330:	683b      	ldr	r3, [r7, #0]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	4aa1      	ldr	r2, [pc, #644]	; (800a5bc <HAL_ADC_ConfigChannel+0x5c4>)
 800a336:	4293      	cmp	r3, r2
 800a338:	d04a      	beq.n	800a3d0 <HAL_ADC_ConfigChannel+0x3d8>
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	4aa0      	ldr	r2, [pc, #640]	; (800a5c0 <HAL_ADC_ConfigChannel+0x5c8>)
 800a340:	4293      	cmp	r3, r2
 800a342:	d045      	beq.n	800a3d0 <HAL_ADC_ConfigChannel+0x3d8>
 800a344:	683b      	ldr	r3, [r7, #0]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	4a9e      	ldr	r2, [pc, #632]	; (800a5c4 <HAL_ADC_ConfigChannel+0x5cc>)
 800a34a:	4293      	cmp	r3, r2
 800a34c:	d040      	beq.n	800a3d0 <HAL_ADC_ConfigChannel+0x3d8>
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	4a9d      	ldr	r2, [pc, #628]	; (800a5c8 <HAL_ADC_ConfigChannel+0x5d0>)
 800a354:	4293      	cmp	r3, r2
 800a356:	d03b      	beq.n	800a3d0 <HAL_ADC_ConfigChannel+0x3d8>
 800a358:	683b      	ldr	r3, [r7, #0]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	4a9b      	ldr	r2, [pc, #620]	; (800a5cc <HAL_ADC_ConfigChannel+0x5d4>)
 800a35e:	4293      	cmp	r3, r2
 800a360:	d036      	beq.n	800a3d0 <HAL_ADC_ConfigChannel+0x3d8>
 800a362:	683b      	ldr	r3, [r7, #0]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	4a9a      	ldr	r2, [pc, #616]	; (800a5d0 <HAL_ADC_ConfigChannel+0x5d8>)
 800a368:	4293      	cmp	r3, r2
 800a36a:	d031      	beq.n	800a3d0 <HAL_ADC_ConfigChannel+0x3d8>
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	4a98      	ldr	r2, [pc, #608]	; (800a5d4 <HAL_ADC_ConfigChannel+0x5dc>)
 800a372:	4293      	cmp	r3, r2
 800a374:	d02c      	beq.n	800a3d0 <HAL_ADC_ConfigChannel+0x3d8>
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	4a97      	ldr	r2, [pc, #604]	; (800a5d8 <HAL_ADC_ConfigChannel+0x5e0>)
 800a37c:	4293      	cmp	r3, r2
 800a37e:	d027      	beq.n	800a3d0 <HAL_ADC_ConfigChannel+0x3d8>
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	4a95      	ldr	r2, [pc, #596]	; (800a5dc <HAL_ADC_ConfigChannel+0x5e4>)
 800a386:	4293      	cmp	r3, r2
 800a388:	d022      	beq.n	800a3d0 <HAL_ADC_ConfigChannel+0x3d8>
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	4a94      	ldr	r2, [pc, #592]	; (800a5e0 <HAL_ADC_ConfigChannel+0x5e8>)
 800a390:	4293      	cmp	r3, r2
 800a392:	d01d      	beq.n	800a3d0 <HAL_ADC_ConfigChannel+0x3d8>
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	4a92      	ldr	r2, [pc, #584]	; (800a5e4 <HAL_ADC_ConfigChannel+0x5ec>)
 800a39a:	4293      	cmp	r3, r2
 800a39c:	d018      	beq.n	800a3d0 <HAL_ADC_ConfigChannel+0x3d8>
 800a39e:	683b      	ldr	r3, [r7, #0]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	4a91      	ldr	r2, [pc, #580]	; (800a5e8 <HAL_ADC_ConfigChannel+0x5f0>)
 800a3a4:	4293      	cmp	r3, r2
 800a3a6:	d013      	beq.n	800a3d0 <HAL_ADC_ConfigChannel+0x3d8>
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	4a8f      	ldr	r2, [pc, #572]	; (800a5ec <HAL_ADC_ConfigChannel+0x5f4>)
 800a3ae:	4293      	cmp	r3, r2
 800a3b0:	d00e      	beq.n	800a3d0 <HAL_ADC_ConfigChannel+0x3d8>
 800a3b2:	683b      	ldr	r3, [r7, #0]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	4a8e      	ldr	r2, [pc, #568]	; (800a5f0 <HAL_ADC_ConfigChannel+0x5f8>)
 800a3b8:	4293      	cmp	r3, r2
 800a3ba:	d009      	beq.n	800a3d0 <HAL_ADC_ConfigChannel+0x3d8>
 800a3bc:	683b      	ldr	r3, [r7, #0]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	4a8c      	ldr	r2, [pc, #560]	; (800a5f4 <HAL_ADC_ConfigChannel+0x5fc>)
 800a3c2:	4293      	cmp	r3, r2
 800a3c4:	d004      	beq.n	800a3d0 <HAL_ADC_ConfigChannel+0x3d8>
 800a3c6:	f640 21a7 	movw	r1, #2727	; 0xaa7
 800a3ca:	487b      	ldr	r0, [pc, #492]	; (800a5b8 <HAL_ADC_ConfigChannel+0x5c0>)
 800a3cc:	f7fa f8e2 	bl	8004594 <assert_failed>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a3d6:	2b01      	cmp	r3, #1
 800a3d8:	d101      	bne.n	800a3de <HAL_ADC_ConfigChannel+0x3e6>
 800a3da:	2302      	movs	r3, #2
 800a3dc:	e3b7      	b.n	800ab4e <HAL_ADC_ConfigChannel+0xb56>
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	2201      	movs	r2, #1
 800a3e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	f7fe ff90 	bl	8009310 <LL_ADC_REG_IsConversionOngoing>
 800a3f0:	4603      	mov	r3, r0
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	f040 839c 	bne.w	800ab30 <HAL_ADC_ConfigChannel+0xb38>
      }
    }
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	6818      	ldr	r0, [r3, #0]
 800a3fc:	683b      	ldr	r3, [r7, #0]
 800a3fe:	6859      	ldr	r1, [r3, #4]
 800a400:	683b      	ldr	r3, [r7, #0]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	461a      	mov	r2, r3
 800a406:	f7fe fe31 	bl	800906c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	4618      	mov	r0, r3
 800a410:	f7fe ff7e 	bl	8009310 <LL_ADC_REG_IsConversionOngoing>
 800a414:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	4618      	mov	r0, r3
 800a41e:	f7fe ff9e 	bl	800935e <LL_ADC_INJ_IsConversionOngoing>
 800a422:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800a426:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	f040 81ce 	bne.w	800a7cc <HAL_ADC_ConfigChannel+0x7d4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800a430:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a434:	2b00      	cmp	r3, #0
 800a436:	f040 81c9 	bne.w	800a7cc <HAL_ADC_ConfigChannel+0x7d4>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	6818      	ldr	r0, [r3, #0]
 800a43e:	683b      	ldr	r3, [r7, #0]
 800a440:	6819      	ldr	r1, [r3, #0]
 800a442:	683b      	ldr	r3, [r7, #0]
 800a444:	689b      	ldr	r3, [r3, #8]
 800a446:	461a      	mov	r2, r3
 800a448:	f7fe fe4f 	bl	80090ea <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800a44c:	683b      	ldr	r3, [r7, #0]
 800a44e:	695a      	ldr	r2, [r3, #20]
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	68db      	ldr	r3, [r3, #12]
 800a456:	08db      	lsrs	r3, r3, #3
 800a458:	f003 0303 	and.w	r3, r3, #3
 800a45c:	005b      	lsls	r3, r3, #1
 800a45e:	fa02 f303 	lsl.w	r3, r2, r3
 800a462:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	691b      	ldr	r3, [r3, #16]
 800a46a:	2b04      	cmp	r3, #4
 800a46c:	d00a      	beq.n	800a484 <HAL_ADC_ConfigChannel+0x48c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	6818      	ldr	r0, [r3, #0]
 800a472:	683b      	ldr	r3, [r7, #0]
 800a474:	6919      	ldr	r1, [r3, #16]
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	681a      	ldr	r2, [r3, #0]
 800a47a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a47e:	f7fe fd8d 	bl	8008f9c <LL_ADC_SetOffset>
 800a482:	e1a3      	b.n	800a7cc <HAL_ADC_ConfigChannel+0x7d4>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	2100      	movs	r1, #0
 800a48a:	4618      	mov	r0, r3
 800a48c:	f7fe fdaa 	bl	8008fe4 <LL_ADC_GetOffsetChannel>
 800a490:	4603      	mov	r3, r0
 800a492:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a496:	2b00      	cmp	r3, #0
 800a498:	d10a      	bne.n	800a4b0 <HAL_ADC_ConfigChannel+0x4b8>
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	2100      	movs	r1, #0
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	f7fe fd9f 	bl	8008fe4 <LL_ADC_GetOffsetChannel>
 800a4a6:	4603      	mov	r3, r0
 800a4a8:	0e9b      	lsrs	r3, r3, #26
 800a4aa:	f003 021f 	and.w	r2, r3, #31
 800a4ae:	e01e      	b.n	800a4ee <HAL_ADC_ConfigChannel+0x4f6>
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	2100      	movs	r1, #0
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	f7fe fd94 	bl	8008fe4 <LL_ADC_GetOffsetChannel>
 800a4bc:	4603      	mov	r3, r0
 800a4be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a4c2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a4c6:	fa93 f3a3 	rbit	r3, r3
 800a4ca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  return result;
 800a4ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a4d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  if (value == 0U)
 800a4d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d101      	bne.n	800a4e2 <HAL_ADC_ConfigChannel+0x4ea>
    return 32U;
 800a4de:	2320      	movs	r3, #32
 800a4e0:	e004      	b.n	800a4ec <HAL_ADC_ConfigChannel+0x4f4>
  return __builtin_clz(value);
 800a4e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a4e6:	fab3 f383 	clz	r3, r3
 800a4ea:	b2db      	uxtb	r3, r3
 800a4ec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800a4ee:	683b      	ldr	r3, [r7, #0]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d105      	bne.n	800a506 <HAL_ADC_ConfigChannel+0x50e>
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	0e9b      	lsrs	r3, r3, #26
 800a500:	f003 031f 	and.w	r3, r3, #31
 800a504:	e018      	b.n	800a538 <HAL_ADC_ConfigChannel+0x540>
 800a506:	683b      	ldr	r3, [r7, #0]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a50e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a512:	fa93 f3a3 	rbit	r3, r3
 800a516:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800a51a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a51e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800a522:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a526:	2b00      	cmp	r3, #0
 800a528:	d101      	bne.n	800a52e <HAL_ADC_ConfigChannel+0x536>
    return 32U;
 800a52a:	2320      	movs	r3, #32
 800a52c:	e004      	b.n	800a538 <HAL_ADC_ConfigChannel+0x540>
  return __builtin_clz(value);
 800a52e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a532:	fab3 f383 	clz	r3, r3
 800a536:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800a538:	429a      	cmp	r2, r3
 800a53a:	d106      	bne.n	800a54a <HAL_ADC_ConfigChannel+0x552>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	2200      	movs	r2, #0
 800a542:	2100      	movs	r1, #0
 800a544:	4618      	mov	r0, r3
 800a546:	f7fe fd63 	bl	8009010 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	2101      	movs	r1, #1
 800a550:	4618      	mov	r0, r3
 800a552:	f7fe fd47 	bl	8008fe4 <LL_ADC_GetOffsetChannel>
 800a556:	4603      	mov	r3, r0
 800a558:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d10a      	bne.n	800a576 <HAL_ADC_ConfigChannel+0x57e>
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	2101      	movs	r1, #1
 800a566:	4618      	mov	r0, r3
 800a568:	f7fe fd3c 	bl	8008fe4 <LL_ADC_GetOffsetChannel>
 800a56c:	4603      	mov	r3, r0
 800a56e:	0e9b      	lsrs	r3, r3, #26
 800a570:	f003 021f 	and.w	r2, r3, #31
 800a574:	e046      	b.n	800a604 <HAL_ADC_ConfigChannel+0x60c>
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	2101      	movs	r1, #1
 800a57c:	4618      	mov	r0, r3
 800a57e:	f7fe fd31 	bl	8008fe4 <LL_ADC_GetOffsetChannel>
 800a582:	4603      	mov	r3, r0
 800a584:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a588:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a58c:	fa93 f3a3 	rbit	r3, r3
 800a590:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800a594:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a598:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800a59c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d129      	bne.n	800a5f8 <HAL_ADC_ConfigChannel+0x600>
    return 32U;
 800a5a4:	2320      	movs	r3, #32
 800a5a6:	e02c      	b.n	800a602 <HAL_ADC_ConfigChannel+0x60a>
 800a5a8:	c7520000 	.word	0xc7520000
 800a5ac:	cb840000 	.word	0xcb840000
 800a5b0:	c75a0000 	.word	0xc75a0000
 800a5b4:	cb8c0000 	.word	0xcb8c0000
 800a5b8:	08018ba8 	.word	0x08018ba8
 800a5bc:	04300002 	.word	0x04300002
 800a5c0:	08600004 	.word	0x08600004
 800a5c4:	0c900008 	.word	0x0c900008
 800a5c8:	10c00010 	.word	0x10c00010
 800a5cc:	14f00020 	.word	0x14f00020
 800a5d0:	19200040 	.word	0x19200040
 800a5d4:	1d500080 	.word	0x1d500080
 800a5d8:	21800100 	.word	0x21800100
 800a5dc:	25b00200 	.word	0x25b00200
 800a5e0:	2a000400 	.word	0x2a000400
 800a5e4:	2e300800 	.word	0x2e300800
 800a5e8:	32601000 	.word	0x32601000
 800a5ec:	36902000 	.word	0x36902000
 800a5f0:	3ac04000 	.word	0x3ac04000
 800a5f4:	3ef08000 	.word	0x3ef08000
  return __builtin_clz(value);
 800a5f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a5fc:	fab3 f383 	clz	r3, r3
 800a600:	b2db      	uxtb	r3, r3
 800a602:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800a604:	683b      	ldr	r3, [r7, #0]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d105      	bne.n	800a61c <HAL_ADC_ConfigChannel+0x624>
 800a610:	683b      	ldr	r3, [r7, #0]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	0e9b      	lsrs	r3, r3, #26
 800a616:	f003 031f 	and.w	r3, r3, #31
 800a61a:	e018      	b.n	800a64e <HAL_ADC_ConfigChannel+0x656>
 800a61c:	683b      	ldr	r3, [r7, #0]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a624:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a628:	fa93 f3a3 	rbit	r3, r3
 800a62c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800a630:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a634:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800a638:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d101      	bne.n	800a644 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 800a640:	2320      	movs	r3, #32
 800a642:	e004      	b.n	800a64e <HAL_ADC_ConfigChannel+0x656>
  return __builtin_clz(value);
 800a644:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a648:	fab3 f383 	clz	r3, r3
 800a64c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800a64e:	429a      	cmp	r2, r3
 800a650:	d106      	bne.n	800a660 <HAL_ADC_ConfigChannel+0x668>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	2200      	movs	r2, #0
 800a658:	2101      	movs	r1, #1
 800a65a:	4618      	mov	r0, r3
 800a65c:	f7fe fcd8 	bl	8009010 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	2102      	movs	r1, #2
 800a666:	4618      	mov	r0, r3
 800a668:	f7fe fcbc 	bl	8008fe4 <LL_ADC_GetOffsetChannel>
 800a66c:	4603      	mov	r3, r0
 800a66e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a672:	2b00      	cmp	r3, #0
 800a674:	d10a      	bne.n	800a68c <HAL_ADC_ConfigChannel+0x694>
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	2102      	movs	r1, #2
 800a67c:	4618      	mov	r0, r3
 800a67e:	f7fe fcb1 	bl	8008fe4 <LL_ADC_GetOffsetChannel>
 800a682:	4603      	mov	r3, r0
 800a684:	0e9b      	lsrs	r3, r3, #26
 800a686:	f003 021f 	and.w	r2, r3, #31
 800a68a:	e01e      	b.n	800a6ca <HAL_ADC_ConfigChannel+0x6d2>
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	2102      	movs	r1, #2
 800a692:	4618      	mov	r0, r3
 800a694:	f7fe fca6 	bl	8008fe4 <LL_ADC_GetOffsetChannel>
 800a698:	4603      	mov	r3, r0
 800a69a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a69e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a6a2:	fa93 f3a3 	rbit	r3, r3
 800a6a6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800a6aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a6ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800a6b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d101      	bne.n	800a6be <HAL_ADC_ConfigChannel+0x6c6>
    return 32U;
 800a6ba:	2320      	movs	r3, #32
 800a6bc:	e004      	b.n	800a6c8 <HAL_ADC_ConfigChannel+0x6d0>
  return __builtin_clz(value);
 800a6be:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a6c2:	fab3 f383 	clz	r3, r3
 800a6c6:	b2db      	uxtb	r3, r3
 800a6c8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800a6ca:	683b      	ldr	r3, [r7, #0]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d105      	bne.n	800a6e2 <HAL_ADC_ConfigChannel+0x6ea>
 800a6d6:	683b      	ldr	r3, [r7, #0]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	0e9b      	lsrs	r3, r3, #26
 800a6dc:	f003 031f 	and.w	r3, r3, #31
 800a6e0:	e016      	b.n	800a710 <HAL_ADC_ConfigChannel+0x718>
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a6ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a6ee:	fa93 f3a3 	rbit	r3, r3
 800a6f2:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800a6f4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a6f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800a6fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d101      	bne.n	800a706 <HAL_ADC_ConfigChannel+0x70e>
    return 32U;
 800a702:	2320      	movs	r3, #32
 800a704:	e004      	b.n	800a710 <HAL_ADC_ConfigChannel+0x718>
  return __builtin_clz(value);
 800a706:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a70a:	fab3 f383 	clz	r3, r3
 800a70e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800a710:	429a      	cmp	r2, r3
 800a712:	d106      	bne.n	800a722 <HAL_ADC_ConfigChannel+0x72a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	2200      	movs	r2, #0
 800a71a:	2102      	movs	r1, #2
 800a71c:	4618      	mov	r0, r3
 800a71e:	f7fe fc77 	bl	8009010 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	2103      	movs	r1, #3
 800a728:	4618      	mov	r0, r3
 800a72a:	f7fe fc5b 	bl	8008fe4 <LL_ADC_GetOffsetChannel>
 800a72e:	4603      	mov	r3, r0
 800a730:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a734:	2b00      	cmp	r3, #0
 800a736:	d10a      	bne.n	800a74e <HAL_ADC_ConfigChannel+0x756>
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	2103      	movs	r1, #3
 800a73e:	4618      	mov	r0, r3
 800a740:	f7fe fc50 	bl	8008fe4 <LL_ADC_GetOffsetChannel>
 800a744:	4603      	mov	r3, r0
 800a746:	0e9b      	lsrs	r3, r3, #26
 800a748:	f003 021f 	and.w	r2, r3, #31
 800a74c:	e017      	b.n	800a77e <HAL_ADC_ConfigChannel+0x786>
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	2103      	movs	r1, #3
 800a754:	4618      	mov	r0, r3
 800a756:	f7fe fc45 	bl	8008fe4 <LL_ADC_GetOffsetChannel>
 800a75a:	4603      	mov	r3, r0
 800a75c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a75e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a760:	fa93 f3a3 	rbit	r3, r3
 800a764:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800a766:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a768:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800a76a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d101      	bne.n	800a774 <HAL_ADC_ConfigChannel+0x77c>
    return 32U;
 800a770:	2320      	movs	r3, #32
 800a772:	e003      	b.n	800a77c <HAL_ADC_ConfigChannel+0x784>
  return __builtin_clz(value);
 800a774:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a776:	fab3 f383 	clz	r3, r3
 800a77a:	b2db      	uxtb	r3, r3
 800a77c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800a77e:	683b      	ldr	r3, [r7, #0]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a786:	2b00      	cmp	r3, #0
 800a788:	d105      	bne.n	800a796 <HAL_ADC_ConfigChannel+0x79e>
 800a78a:	683b      	ldr	r3, [r7, #0]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	0e9b      	lsrs	r3, r3, #26
 800a790:	f003 031f 	and.w	r3, r3, #31
 800a794:	e011      	b.n	800a7ba <HAL_ADC_ConfigChannel+0x7c2>
 800a796:	683b      	ldr	r3, [r7, #0]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a79c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a79e:	fa93 f3a3 	rbit	r3, r3
 800a7a2:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800a7a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a7a6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800a7a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d101      	bne.n	800a7b2 <HAL_ADC_ConfigChannel+0x7ba>
    return 32U;
 800a7ae:	2320      	movs	r3, #32
 800a7b0:	e003      	b.n	800a7ba <HAL_ADC_ConfigChannel+0x7c2>
  return __builtin_clz(value);
 800a7b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7b4:	fab3 f383 	clz	r3, r3
 800a7b8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800a7ba:	429a      	cmp	r2, r3
 800a7bc:	d106      	bne.n	800a7cc <HAL_ADC_ConfigChannel+0x7d4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	2103      	movs	r1, #3
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	f7fe fc22 	bl	8009010 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	f7fe fd4f 	bl	8009274 <LL_ADC_IsEnabled>
 800a7d6:	4603      	mov	r3, r0
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	f040 813f 	bne.w	800aa5c <HAL_ADC_ConfigChannel+0xa64>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	6818      	ldr	r0, [r3, #0]
 800a7e2:	683b      	ldr	r3, [r7, #0]
 800a7e4:	6819      	ldr	r1, [r3, #0]
 800a7e6:	683b      	ldr	r3, [r7, #0]
 800a7e8:	68db      	ldr	r3, [r3, #12]
 800a7ea:	461a      	mov	r2, r3
 800a7ec:	f7fe fca8 	bl	8009140 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800a7f0:	683b      	ldr	r3, [r7, #0]
 800a7f2:	68db      	ldr	r3, [r3, #12]
 800a7f4:	4a8e      	ldr	r2, [pc, #568]	; (800aa30 <HAL_ADC_ConfigChannel+0xa38>)
 800a7f6:	4293      	cmp	r3, r2
 800a7f8:	f040 8130 	bne.w	800aa5c <HAL_ADC_ConfigChannel+0xa64>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800a800:	683b      	ldr	r3, [r7, #0]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d10b      	bne.n	800a824 <HAL_ADC_ConfigChannel+0x82c>
 800a80c:	683b      	ldr	r3, [r7, #0]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	0e9b      	lsrs	r3, r3, #26
 800a812:	3301      	adds	r3, #1
 800a814:	f003 031f 	and.w	r3, r3, #31
 800a818:	2b09      	cmp	r3, #9
 800a81a:	bf94      	ite	ls
 800a81c:	2301      	movls	r3, #1
 800a81e:	2300      	movhi	r3, #0
 800a820:	b2db      	uxtb	r3, r3
 800a822:	e019      	b.n	800a858 <HAL_ADC_ConfigChannel+0x860>
 800a824:	683b      	ldr	r3, [r7, #0]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a82a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a82c:	fa93 f3a3 	rbit	r3, r3
 800a830:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800a832:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a834:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800a836:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d101      	bne.n	800a840 <HAL_ADC_ConfigChannel+0x848>
    return 32U;
 800a83c:	2320      	movs	r3, #32
 800a83e:	e003      	b.n	800a848 <HAL_ADC_ConfigChannel+0x850>
  return __builtin_clz(value);
 800a840:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a842:	fab3 f383 	clz	r3, r3
 800a846:	b2db      	uxtb	r3, r3
 800a848:	3301      	adds	r3, #1
 800a84a:	f003 031f 	and.w	r3, r3, #31
 800a84e:	2b09      	cmp	r3, #9
 800a850:	bf94      	ite	ls
 800a852:	2301      	movls	r3, #1
 800a854:	2300      	movhi	r3, #0
 800a856:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d079      	beq.n	800a950 <HAL_ADC_ConfigChannel+0x958>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800a85c:	683b      	ldr	r3, [r7, #0]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a864:	2b00      	cmp	r3, #0
 800a866:	d107      	bne.n	800a878 <HAL_ADC_ConfigChannel+0x880>
 800a868:	683b      	ldr	r3, [r7, #0]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	0e9b      	lsrs	r3, r3, #26
 800a86e:	3301      	adds	r3, #1
 800a870:	069b      	lsls	r3, r3, #26
 800a872:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800a876:	e015      	b.n	800a8a4 <HAL_ADC_ConfigChannel+0x8ac>
 800a878:	683b      	ldr	r3, [r7, #0]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a87e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a880:	fa93 f3a3 	rbit	r3, r3
 800a884:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800a886:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a888:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800a88a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d101      	bne.n	800a894 <HAL_ADC_ConfigChannel+0x89c>
    return 32U;
 800a890:	2320      	movs	r3, #32
 800a892:	e003      	b.n	800a89c <HAL_ADC_ConfigChannel+0x8a4>
  return __builtin_clz(value);
 800a894:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a896:	fab3 f383 	clz	r3, r3
 800a89a:	b2db      	uxtb	r3, r3
 800a89c:	3301      	adds	r3, #1
 800a89e:	069b      	lsls	r3, r3, #26
 800a8a0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800a8a4:	683b      	ldr	r3, [r7, #0]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d109      	bne.n	800a8c4 <HAL_ADC_ConfigChannel+0x8cc>
 800a8b0:	683b      	ldr	r3, [r7, #0]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	0e9b      	lsrs	r3, r3, #26
 800a8b6:	3301      	adds	r3, #1
 800a8b8:	f003 031f 	and.w	r3, r3, #31
 800a8bc:	2101      	movs	r1, #1
 800a8be:	fa01 f303 	lsl.w	r3, r1, r3
 800a8c2:	e017      	b.n	800a8f4 <HAL_ADC_ConfigChannel+0x8fc>
 800a8c4:	683b      	ldr	r3, [r7, #0]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a8ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a8cc:	fa93 f3a3 	rbit	r3, r3
 800a8d0:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800a8d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a8d4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800a8d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d101      	bne.n	800a8e0 <HAL_ADC_ConfigChannel+0x8e8>
    return 32U;
 800a8dc:	2320      	movs	r3, #32
 800a8de:	e003      	b.n	800a8e8 <HAL_ADC_ConfigChannel+0x8f0>
  return __builtin_clz(value);
 800a8e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a8e2:	fab3 f383 	clz	r3, r3
 800a8e6:	b2db      	uxtb	r3, r3
 800a8e8:	3301      	adds	r3, #1
 800a8ea:	f003 031f 	and.w	r3, r3, #31
 800a8ee:	2101      	movs	r1, #1
 800a8f0:	fa01 f303 	lsl.w	r3, r1, r3
 800a8f4:	ea42 0103 	orr.w	r1, r2, r3
 800a8f8:	683b      	ldr	r3, [r7, #0]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a900:	2b00      	cmp	r3, #0
 800a902:	d10a      	bne.n	800a91a <HAL_ADC_ConfigChannel+0x922>
 800a904:	683b      	ldr	r3, [r7, #0]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	0e9b      	lsrs	r3, r3, #26
 800a90a:	3301      	adds	r3, #1
 800a90c:	f003 021f 	and.w	r2, r3, #31
 800a910:	4613      	mov	r3, r2
 800a912:	005b      	lsls	r3, r3, #1
 800a914:	4413      	add	r3, r2
 800a916:	051b      	lsls	r3, r3, #20
 800a918:	e018      	b.n	800a94c <HAL_ADC_ConfigChannel+0x954>
 800a91a:	683b      	ldr	r3, [r7, #0]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a922:	fa93 f3a3 	rbit	r3, r3
 800a926:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800a928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a92a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800a92c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d101      	bne.n	800a936 <HAL_ADC_ConfigChannel+0x93e>
    return 32U;
 800a932:	2320      	movs	r3, #32
 800a934:	e003      	b.n	800a93e <HAL_ADC_ConfigChannel+0x946>
  return __builtin_clz(value);
 800a936:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a938:	fab3 f383 	clz	r3, r3
 800a93c:	b2db      	uxtb	r3, r3
 800a93e:	3301      	adds	r3, #1
 800a940:	f003 021f 	and.w	r2, r3, #31
 800a944:	4613      	mov	r3, r2
 800a946:	005b      	lsls	r3, r3, #1
 800a948:	4413      	add	r3, r2
 800a94a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800a94c:	430b      	orrs	r3, r1
 800a94e:	e080      	b.n	800aa52 <HAL_ADC_ConfigChannel+0xa5a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800a950:	683b      	ldr	r3, [r7, #0]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d107      	bne.n	800a96c <HAL_ADC_ConfigChannel+0x974>
 800a95c:	683b      	ldr	r3, [r7, #0]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	0e9b      	lsrs	r3, r3, #26
 800a962:	3301      	adds	r3, #1
 800a964:	069b      	lsls	r3, r3, #26
 800a966:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800a96a:	e015      	b.n	800a998 <HAL_ADC_ConfigChannel+0x9a0>
 800a96c:	683b      	ldr	r3, [r7, #0]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a974:	fa93 f3a3 	rbit	r3, r3
 800a978:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800a97a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a97c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800a97e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a980:	2b00      	cmp	r3, #0
 800a982:	d101      	bne.n	800a988 <HAL_ADC_ConfigChannel+0x990>
    return 32U;
 800a984:	2320      	movs	r3, #32
 800a986:	e003      	b.n	800a990 <HAL_ADC_ConfigChannel+0x998>
  return __builtin_clz(value);
 800a988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a98a:	fab3 f383 	clz	r3, r3
 800a98e:	b2db      	uxtb	r3, r3
 800a990:	3301      	adds	r3, #1
 800a992:	069b      	lsls	r3, r3, #26
 800a994:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800a998:	683b      	ldr	r3, [r7, #0]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d109      	bne.n	800a9b8 <HAL_ADC_ConfigChannel+0x9c0>
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	0e9b      	lsrs	r3, r3, #26
 800a9aa:	3301      	adds	r3, #1
 800a9ac:	f003 031f 	and.w	r3, r3, #31
 800a9b0:	2101      	movs	r1, #1
 800a9b2:	fa01 f303 	lsl.w	r3, r1, r3
 800a9b6:	e017      	b.n	800a9e8 <HAL_ADC_ConfigChannel+0x9f0>
 800a9b8:	683b      	ldr	r3, [r7, #0]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a9be:	6a3b      	ldr	r3, [r7, #32]
 800a9c0:	fa93 f3a3 	rbit	r3, r3
 800a9c4:	61fb      	str	r3, [r7, #28]
  return result;
 800a9c6:	69fb      	ldr	r3, [r7, #28]
 800a9c8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800a9ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d101      	bne.n	800a9d4 <HAL_ADC_ConfigChannel+0x9dc>
    return 32U;
 800a9d0:	2320      	movs	r3, #32
 800a9d2:	e003      	b.n	800a9dc <HAL_ADC_ConfigChannel+0x9e4>
  return __builtin_clz(value);
 800a9d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9d6:	fab3 f383 	clz	r3, r3
 800a9da:	b2db      	uxtb	r3, r3
 800a9dc:	3301      	adds	r3, #1
 800a9de:	f003 031f 	and.w	r3, r3, #31
 800a9e2:	2101      	movs	r1, #1
 800a9e4:	fa01 f303 	lsl.w	r3, r1, r3
 800a9e8:	ea42 0103 	orr.w	r1, r2, r3
 800a9ec:	683b      	ldr	r3, [r7, #0]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d10d      	bne.n	800aa14 <HAL_ADC_ConfigChannel+0xa1c>
 800a9f8:	683b      	ldr	r3, [r7, #0]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	0e9b      	lsrs	r3, r3, #26
 800a9fe:	3301      	adds	r3, #1
 800aa00:	f003 021f 	and.w	r2, r3, #31
 800aa04:	4613      	mov	r3, r2
 800aa06:	005b      	lsls	r3, r3, #1
 800aa08:	4413      	add	r3, r2
 800aa0a:	3b1e      	subs	r3, #30
 800aa0c:	051b      	lsls	r3, r3, #20
 800aa0e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800aa12:	e01d      	b.n	800aa50 <HAL_ADC_ConfigChannel+0xa58>
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aa1a:	697b      	ldr	r3, [r7, #20]
 800aa1c:	fa93 f3a3 	rbit	r3, r3
 800aa20:	613b      	str	r3, [r7, #16]
  return result;
 800aa22:	693b      	ldr	r3, [r7, #16]
 800aa24:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800aa26:	69bb      	ldr	r3, [r7, #24]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d103      	bne.n	800aa34 <HAL_ADC_ConfigChannel+0xa3c>
    return 32U;
 800aa2c:	2320      	movs	r3, #32
 800aa2e:	e005      	b.n	800aa3c <HAL_ADC_ConfigChannel+0xa44>
 800aa30:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800aa34:	69bb      	ldr	r3, [r7, #24]
 800aa36:	fab3 f383 	clz	r3, r3
 800aa3a:	b2db      	uxtb	r3, r3
 800aa3c:	3301      	adds	r3, #1
 800aa3e:	f003 021f 	and.w	r2, r3, #31
 800aa42:	4613      	mov	r3, r2
 800aa44:	005b      	lsls	r3, r3, #1
 800aa46:	4413      	add	r3, r2
 800aa48:	3b1e      	subs	r3, #30
 800aa4a:	051b      	lsls	r3, r3, #20
 800aa4c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800aa50:	430b      	orrs	r3, r1
 800aa52:	683a      	ldr	r2, [r7, #0]
 800aa54:	6892      	ldr	r2, [r2, #8]
 800aa56:	4619      	mov	r1, r3
 800aa58:	f7fe fb47 	bl	80090ea <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800aa5c:	683b      	ldr	r3, [r7, #0]
 800aa5e:	681a      	ldr	r2, [r3, #0]
 800aa60:	4b3d      	ldr	r3, [pc, #244]	; (800ab58 <HAL_ADC_ConfigChannel+0xb60>)
 800aa62:	4013      	ands	r3, r2
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d06c      	beq.n	800ab42 <HAL_ADC_ConfigChannel+0xb4a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800aa68:	483c      	ldr	r0, [pc, #240]	; (800ab5c <HAL_ADC_ConfigChannel+0xb64>)
 800aa6a:	f7fe fa7b 	bl	8008f64 <LL_ADC_GetCommonPathInternalCh>
 800aa6e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800aa72:	683b      	ldr	r3, [r7, #0]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	4a3a      	ldr	r2, [pc, #232]	; (800ab60 <HAL_ADC_ConfigChannel+0xb68>)
 800aa78:	4293      	cmp	r3, r2
 800aa7a:	d127      	bne.n	800aacc <HAL_ADC_ConfigChannel+0xad4>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800aa7c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800aa80:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d121      	bne.n	800aacc <HAL_ADC_ConfigChannel+0xad4>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	4a35      	ldr	r2, [pc, #212]	; (800ab64 <HAL_ADC_ConfigChannel+0xb6c>)
 800aa8e:	4293      	cmp	r3, r2
 800aa90:	d157      	bne.n	800ab42 <HAL_ADC_ConfigChannel+0xb4a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800aa92:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800aa96:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800aa9a:	4619      	mov	r1, r3
 800aa9c:	482f      	ldr	r0, [pc, #188]	; (800ab5c <HAL_ADC_ConfigChannel+0xb64>)
 800aa9e:	f7fe fa4e 	bl	8008f3e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800aaa2:	4b31      	ldr	r3, [pc, #196]	; (800ab68 <HAL_ADC_ConfigChannel+0xb70>)
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	099b      	lsrs	r3, r3, #6
 800aaa8:	4a30      	ldr	r2, [pc, #192]	; (800ab6c <HAL_ADC_ConfigChannel+0xb74>)
 800aaaa:	fba2 2303 	umull	r2, r3, r2, r3
 800aaae:	099b      	lsrs	r3, r3, #6
 800aab0:	1c5a      	adds	r2, r3, #1
 800aab2:	4613      	mov	r3, r2
 800aab4:	005b      	lsls	r3, r3, #1
 800aab6:	4413      	add	r3, r2
 800aab8:	009b      	lsls	r3, r3, #2
 800aaba:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800aabc:	e002      	b.n	800aac4 <HAL_ADC_ConfigChannel+0xacc>
          {
            wait_loop_index--;
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	3b01      	subs	r3, #1
 800aac2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d1f9      	bne.n	800aabe <HAL_ADC_ConfigChannel+0xac6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800aaca:	e03a      	b.n	800ab42 <HAL_ADC_ConfigChannel+0xb4a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800aacc:	683b      	ldr	r3, [r7, #0]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	4a27      	ldr	r2, [pc, #156]	; (800ab70 <HAL_ADC_ConfigChannel+0xb78>)
 800aad2:	4293      	cmp	r3, r2
 800aad4:	d113      	bne.n	800aafe <HAL_ADC_ConfigChannel+0xb06>
 800aad6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800aada:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d10d      	bne.n	800aafe <HAL_ADC_ConfigChannel+0xb06>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	4a1f      	ldr	r2, [pc, #124]	; (800ab64 <HAL_ADC_ConfigChannel+0xb6c>)
 800aae8:	4293      	cmp	r3, r2
 800aaea:	d12a      	bne.n	800ab42 <HAL_ADC_ConfigChannel+0xb4a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800aaec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800aaf0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800aaf4:	4619      	mov	r1, r3
 800aaf6:	4819      	ldr	r0, [pc, #100]	; (800ab5c <HAL_ADC_ConfigChannel+0xb64>)
 800aaf8:	f7fe fa21 	bl	8008f3e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800aafc:	e021      	b.n	800ab42 <HAL_ADC_ConfigChannel+0xb4a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800aafe:	683b      	ldr	r3, [r7, #0]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	4a1c      	ldr	r2, [pc, #112]	; (800ab74 <HAL_ADC_ConfigChannel+0xb7c>)
 800ab04:	4293      	cmp	r3, r2
 800ab06:	d11c      	bne.n	800ab42 <HAL_ADC_ConfigChannel+0xb4a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800ab08:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800ab0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d116      	bne.n	800ab42 <HAL_ADC_ConfigChannel+0xb4a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	4a12      	ldr	r2, [pc, #72]	; (800ab64 <HAL_ADC_ConfigChannel+0xb6c>)
 800ab1a:	4293      	cmp	r3, r2
 800ab1c:	d111      	bne.n	800ab42 <HAL_ADC_ConfigChannel+0xb4a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800ab1e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800ab22:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800ab26:	4619      	mov	r1, r3
 800ab28:	480c      	ldr	r0, [pc, #48]	; (800ab5c <HAL_ADC_ConfigChannel+0xb64>)
 800ab2a:	f7fe fa08 	bl	8008f3e <LL_ADC_SetCommonPathInternalCh>
 800ab2e:	e008      	b.n	800ab42 <HAL_ADC_ConfigChannel+0xb4a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab34:	f043 0220 	orr.w	r2, r3, #32
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800ab3c:	2301      	movs	r3, #1
 800ab3e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	2200      	movs	r2, #0
 800ab46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800ab4a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800ab4e:	4618      	mov	r0, r3
 800ab50:	37dc      	adds	r7, #220	; 0xdc
 800ab52:	46bd      	mov	sp, r7
 800ab54:	bd90      	pop	{r4, r7, pc}
 800ab56:	bf00      	nop
 800ab58:	80080000 	.word	0x80080000
 800ab5c:	50040300 	.word	0x50040300
 800ab60:	c7520000 	.word	0xc7520000
 800ab64:	50040000 	.word	0x50040000
 800ab68:	20000ff4 	.word	0x20000ff4
 800ab6c:	053e2d63 	.word	0x053e2d63
 800ab70:	cb840000 	.word	0xcb840000
 800ab74:	80000001 	.word	0x80000001

0800ab78 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b088      	sub	sp, #32
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
 800ab80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800ab82:	2300      	movs	r3, #0
 800ab84:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800ab86:	683b      	ldr	r3, [r7, #0]
 800ab88:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	4a63      	ldr	r2, [pc, #396]	; (800ad1c <ADC_ConversionStop+0x1a4>)
 800ab90:	4293      	cmp	r3, r2
 800ab92:	d004      	beq.n	800ab9e <ADC_ConversionStop+0x26>
 800ab94:	f44f 614c 	mov.w	r1, #3264	; 0xcc0
 800ab98:	4861      	ldr	r0, [pc, #388]	; (800ad20 <ADC_ConversionStop+0x1a8>)
 800ab9a:	f7f9 fcfb 	bl	8004594 <assert_failed>
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
 800ab9e:	683b      	ldr	r3, [r7, #0]
 800aba0:	2b01      	cmp	r3, #1
 800aba2:	d00a      	beq.n	800abba <ADC_ConversionStop+0x42>
 800aba4:	683b      	ldr	r3, [r7, #0]
 800aba6:	2b02      	cmp	r3, #2
 800aba8:	d007      	beq.n	800abba <ADC_ConversionStop+0x42>
 800abaa:	683b      	ldr	r3, [r7, #0]
 800abac:	2b03      	cmp	r3, #3
 800abae:	d004      	beq.n	800abba <ADC_ConversionStop+0x42>
 800abb0:	f640 41c1 	movw	r1, #3265	; 0xcc1
 800abb4:	485a      	ldr	r0, [pc, #360]	; (800ad20 <ADC_ConversionStop+0x1a8>)
 800abb6:	f7f9 fced 	bl	8004594 <assert_failed>

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	4618      	mov	r0, r3
 800abc0:	f7fe fba6 	bl	8009310 <LL_ADC_REG_IsConversionOngoing>
 800abc4:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	4618      	mov	r0, r3
 800abcc:	f7fe fbc7 	bl	800935e <LL_ADC_INJ_IsConversionOngoing>
 800abd0:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800abd2:	693b      	ldr	r3, [r7, #16]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d103      	bne.n	800abe0 <ADC_ConversionStop+0x68>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	f000 8098 	beq.w	800ad10 <ADC_ConversionStop+0x198>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	68db      	ldr	r3, [r3, #12]
 800abe6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800abea:	2b00      	cmp	r3, #0
 800abec:	d02a      	beq.n	800ac44 <ADC_ConversionStop+0xcc>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	7e5b      	ldrb	r3, [r3, #25]
 800abf2:	2b01      	cmp	r3, #1
 800abf4:	d126      	bne.n	800ac44 <ADC_ConversionStop+0xcc>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	7e1b      	ldrb	r3, [r3, #24]
 800abfa:	2b01      	cmp	r3, #1
 800abfc:	d122      	bne.n	800ac44 <ADC_ConversionStop+0xcc>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800abfe:	2301      	movs	r3, #1
 800ac00:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800ac02:	e014      	b.n	800ac2e <ADC_ConversionStop+0xb6>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800ac04:	69fb      	ldr	r3, [r7, #28]
 800ac06:	4a47      	ldr	r2, [pc, #284]	; (800ad24 <ADC_ConversionStop+0x1ac>)
 800ac08:	4293      	cmp	r3, r2
 800ac0a:	d90d      	bls.n	800ac28 <ADC_ConversionStop+0xb0>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac10:	f043 0210 	orr.w	r2, r3, #16
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac1c:	f043 0201 	orr.w	r2, r3, #1
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800ac24:	2301      	movs	r3, #1
 800ac26:	e074      	b.n	800ad12 <ADC_ConversionStop+0x19a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800ac28:	69fb      	ldr	r3, [r7, #28]
 800ac2a:	3301      	adds	r3, #1
 800ac2c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac38:	2b40      	cmp	r3, #64	; 0x40
 800ac3a:	d1e3      	bne.n	800ac04 <ADC_ConversionStop+0x8c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	2240      	movs	r2, #64	; 0x40
 800ac42:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800ac44:	69bb      	ldr	r3, [r7, #24]
 800ac46:	2b02      	cmp	r3, #2
 800ac48:	d014      	beq.n	800ac74 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	4618      	mov	r0, r3
 800ac50:	f7fe fb5e 	bl	8009310 <LL_ADC_REG_IsConversionOngoing>
 800ac54:	4603      	mov	r3, r0
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d00c      	beq.n	800ac74 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	4618      	mov	r0, r3
 800ac60:	f7fe fb1b 	bl	800929a <LL_ADC_IsDisableOngoing>
 800ac64:	4603      	mov	r3, r0
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d104      	bne.n	800ac74 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	4618      	mov	r0, r3
 800ac70:	f7fe fb3a 	bl	80092e8 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800ac74:	69bb      	ldr	r3, [r7, #24]
 800ac76:	2b01      	cmp	r3, #1
 800ac78:	d014      	beq.n	800aca4 <ADC_ConversionStop+0x12c>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	4618      	mov	r0, r3
 800ac80:	f7fe fb6d 	bl	800935e <LL_ADC_INJ_IsConversionOngoing>
 800ac84:	4603      	mov	r3, r0
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d00c      	beq.n	800aca4 <ADC_ConversionStop+0x12c>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	4618      	mov	r0, r3
 800ac90:	f7fe fb03 	bl	800929a <LL_ADC_IsDisableOngoing>
 800ac94:	4603      	mov	r3, r0
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d104      	bne.n	800aca4 <ADC_ConversionStop+0x12c>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	4618      	mov	r0, r3
 800aca0:	f7fe fb49 	bl	8009336 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800aca4:	69bb      	ldr	r3, [r7, #24]
 800aca6:	2b02      	cmp	r3, #2
 800aca8:	d005      	beq.n	800acb6 <ADC_ConversionStop+0x13e>
 800acaa:	69bb      	ldr	r3, [r7, #24]
 800acac:	2b03      	cmp	r3, #3
 800acae:	d105      	bne.n	800acbc <ADC_ConversionStop+0x144>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800acb0:	230c      	movs	r3, #12
 800acb2:	617b      	str	r3, [r7, #20]
        break;
 800acb4:	e005      	b.n	800acc2 <ADC_ConversionStop+0x14a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800acb6:	2308      	movs	r3, #8
 800acb8:	617b      	str	r3, [r7, #20]
        break;
 800acba:	e002      	b.n	800acc2 <ADC_ConversionStop+0x14a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800acbc:	2304      	movs	r3, #4
 800acbe:	617b      	str	r3, [r7, #20]
        break;
 800acc0:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800acc2:	f7fe f8f9 	bl	8008eb8 <HAL_GetTick>
 800acc6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800acc8:	e01b      	b.n	800ad02 <ADC_ConversionStop+0x18a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800acca:	f7fe f8f5 	bl	8008eb8 <HAL_GetTick>
 800acce:	4602      	mov	r2, r0
 800acd0:	68bb      	ldr	r3, [r7, #8]
 800acd2:	1ad3      	subs	r3, r2, r3
 800acd4:	2b05      	cmp	r3, #5
 800acd6:	d914      	bls.n	800ad02 <ADC_ConversionStop+0x18a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	689a      	ldr	r2, [r3, #8]
 800acde:	697b      	ldr	r3, [r7, #20]
 800ace0:	4013      	ands	r3, r2
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d00d      	beq.n	800ad02 <ADC_ConversionStop+0x18a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acea:	f043 0210 	orr.w	r2, r3, #16
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800acf6:	f043 0201 	orr.w	r2, r3, #1
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800acfe:	2301      	movs	r3, #1
 800ad00:	e007      	b.n	800ad12 <ADC_ConversionStop+0x19a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	689a      	ldr	r2, [r3, #8]
 800ad08:	697b      	ldr	r3, [r7, #20]
 800ad0a:	4013      	ands	r3, r2
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d1dc      	bne.n	800acca <ADC_ConversionStop+0x152>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800ad10:	2300      	movs	r3, #0
}
 800ad12:	4618      	mov	r0, r3
 800ad14:	3720      	adds	r7, #32
 800ad16:	46bd      	mov	sp, r7
 800ad18:	bd80      	pop	{r7, pc}
 800ad1a:	bf00      	nop
 800ad1c:	50040000 	.word	0x50040000
 800ad20:	08018ba8 	.word	0x08018ba8
 800ad24:	a33fffff 	.word	0xa33fffff

0800ad28 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b084      	sub	sp, #16
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800ad30:	2300      	movs	r3, #0
 800ad32:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	4618      	mov	r0, r3
 800ad3a:	f7fe fa9b 	bl	8009274 <LL_ADC_IsEnabled>
 800ad3e:	4603      	mov	r3, r0
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d169      	bne.n	800ae18 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	689a      	ldr	r2, [r3, #8]
 800ad4a:	4b36      	ldr	r3, [pc, #216]	; (800ae24 <ADC_Enable+0xfc>)
 800ad4c:	4013      	ands	r3, r2
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d00d      	beq.n	800ad6e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad56:	f043 0210 	orr.w	r2, r3, #16
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad62:	f043 0201 	orr.w	r2, r3, #1
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800ad6a:	2301      	movs	r3, #1
 800ad6c:	e055      	b.n	800ae1a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	4618      	mov	r0, r3
 800ad74:	f7fe fa56 	bl	8009224 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800ad78:	482b      	ldr	r0, [pc, #172]	; (800ae28 <ADC_Enable+0x100>)
 800ad7a:	f7fe f8f3 	bl	8008f64 <LL_ADC_GetCommonPathInternalCh>
 800ad7e:	4603      	mov	r3, r0
 800ad80:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d013      	beq.n	800adb0 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800ad88:	4b28      	ldr	r3, [pc, #160]	; (800ae2c <ADC_Enable+0x104>)
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	099b      	lsrs	r3, r3, #6
 800ad8e:	4a28      	ldr	r2, [pc, #160]	; (800ae30 <ADC_Enable+0x108>)
 800ad90:	fba2 2303 	umull	r2, r3, r2, r3
 800ad94:	099b      	lsrs	r3, r3, #6
 800ad96:	1c5a      	adds	r2, r3, #1
 800ad98:	4613      	mov	r3, r2
 800ad9a:	005b      	lsls	r3, r3, #1
 800ad9c:	4413      	add	r3, r2
 800ad9e:	009b      	lsls	r3, r3, #2
 800ada0:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800ada2:	e002      	b.n	800adaa <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800ada4:	68bb      	ldr	r3, [r7, #8]
 800ada6:	3b01      	subs	r3, #1
 800ada8:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800adaa:	68bb      	ldr	r3, [r7, #8]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d1f9      	bne.n	800ada4 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800adb0:	f7fe f882 	bl	8008eb8 <HAL_GetTick>
 800adb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800adb6:	e028      	b.n	800ae0a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	4618      	mov	r0, r3
 800adbe:	f7fe fa59 	bl	8009274 <LL_ADC_IsEnabled>
 800adc2:	4603      	mov	r3, r0
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d104      	bne.n	800add2 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	4618      	mov	r0, r3
 800adce:	f7fe fa29 	bl	8009224 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800add2:	f7fe f871 	bl	8008eb8 <HAL_GetTick>
 800add6:	4602      	mov	r2, r0
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	1ad3      	subs	r3, r2, r3
 800addc:	2b02      	cmp	r3, #2
 800adde:	d914      	bls.n	800ae0a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	f003 0301 	and.w	r3, r3, #1
 800adea:	2b01      	cmp	r3, #1
 800adec:	d00d      	beq.n	800ae0a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800adf2:	f043 0210 	orr.w	r2, r3, #16
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800adfe:	f043 0201 	orr.w	r2, r3, #1
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800ae06:	2301      	movs	r3, #1
 800ae08:	e007      	b.n	800ae1a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	f003 0301 	and.w	r3, r3, #1
 800ae14:	2b01      	cmp	r3, #1
 800ae16:	d1cf      	bne.n	800adb8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800ae18:	2300      	movs	r3, #0
}
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	3710      	adds	r7, #16
 800ae1e:	46bd      	mov	sp, r7
 800ae20:	bd80      	pop	{r7, pc}
 800ae22:	bf00      	nop
 800ae24:	8000003f 	.word	0x8000003f
 800ae28:	50040300 	.word	0x50040300
 800ae2c:	20000ff4 	.word	0x20000ff4
 800ae30:	053e2d63 	.word	0x053e2d63

0800ae34 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b084      	sub	sp, #16
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	4618      	mov	r0, r3
 800ae42:	f7fe fa2a 	bl	800929a <LL_ADC_IsDisableOngoing>
 800ae46:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	f7fe fa11 	bl	8009274 <LL_ADC_IsEnabled>
 800ae52:	4603      	mov	r3, r0
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d047      	beq.n	800aee8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d144      	bne.n	800aee8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	689b      	ldr	r3, [r3, #8]
 800ae64:	f003 030d 	and.w	r3, r3, #13
 800ae68:	2b01      	cmp	r3, #1
 800ae6a:	d10c      	bne.n	800ae86 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	4618      	mov	r0, r3
 800ae72:	f7fe f9eb 	bl	800924c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	2203      	movs	r2, #3
 800ae7c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800ae7e:	f7fe f81b 	bl	8008eb8 <HAL_GetTick>
 800ae82:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800ae84:	e029      	b.n	800aeda <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae8a:	f043 0210 	orr.w	r2, r3, #16
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae96:	f043 0201 	orr.w	r2, r3, #1
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800ae9e:	2301      	movs	r3, #1
 800aea0:	e023      	b.n	800aeea <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800aea2:	f7fe f809 	bl	8008eb8 <HAL_GetTick>
 800aea6:	4602      	mov	r2, r0
 800aea8:	68bb      	ldr	r3, [r7, #8]
 800aeaa:	1ad3      	subs	r3, r2, r3
 800aeac:	2b02      	cmp	r3, #2
 800aeae:	d914      	bls.n	800aeda <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	689b      	ldr	r3, [r3, #8]
 800aeb6:	f003 0301 	and.w	r3, r3, #1
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d00d      	beq.n	800aeda <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aec2:	f043 0210 	orr.w	r2, r3, #16
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aece:	f043 0201 	orr.w	r2, r3, #1
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800aed6:	2301      	movs	r3, #1
 800aed8:	e007      	b.n	800aeea <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	689b      	ldr	r3, [r3, #8]
 800aee0:	f003 0301 	and.w	r3, r3, #1
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d1dc      	bne.n	800aea2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800aee8:	2300      	movs	r3, #0
}
 800aeea:	4618      	mov	r0, r3
 800aeec:	3710      	adds	r7, #16
 800aeee:	46bd      	mov	sp, r7
 800aef0:	bd80      	pop	{r7, pc}

0800aef2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800aef2:	b580      	push	{r7, lr}
 800aef4:	b084      	sub	sp, #16
 800aef6:	af00      	add	r7, sp, #0
 800aef8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aefe:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d14b      	bne.n	800afa4 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af10:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	f003 0308 	and.w	r3, r3, #8
 800af22:	2b00      	cmp	r3, #0
 800af24:	d021      	beq.n	800af6a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	4618      	mov	r0, r3
 800af2c:	f7fe f88b 	bl	8009046 <LL_ADC_REG_IsTriggerSourceSWStart>
 800af30:	4603      	mov	r3, r0
 800af32:	2b00      	cmp	r3, #0
 800af34:	d032      	beq.n	800af9c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	68db      	ldr	r3, [r3, #12]
 800af3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800af40:	2b00      	cmp	r3, #0
 800af42:	d12b      	bne.n	800af9c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af48:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d11f      	bne.n	800af9c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af60:	f043 0201 	orr.w	r2, r3, #1
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	655a      	str	r2, [r3, #84]	; 0x54
 800af68:	e018      	b.n	800af9c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	68db      	ldr	r3, [r3, #12]
 800af70:	f003 0302 	and.w	r3, r3, #2
 800af74:	2b00      	cmp	r3, #0
 800af76:	d111      	bne.n	800af9c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af7c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d105      	bne.n	800af9c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af94:	f043 0201 	orr.w	r2, r3, #1
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800af9c:	68f8      	ldr	r0, [r7, #12]
 800af9e:	f7fc ff17 	bl	8007dd0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800afa2:	e00e      	b.n	800afc2 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800afa8:	f003 0310 	and.w	r3, r3, #16
 800afac:	2b00      	cmp	r3, #0
 800afae:	d003      	beq.n	800afb8 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800afb0:	68f8      	ldr	r0, [r7, #12]
 800afb2:	f7ff f817 	bl	8009fe4 <HAL_ADC_ErrorCallback>
}
 800afb6:	e004      	b.n	800afc2 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800afbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afbe:	6878      	ldr	r0, [r7, #4]
 800afc0:	4798      	blx	r3
}
 800afc2:	bf00      	nop
 800afc4:	3710      	adds	r7, #16
 800afc6:	46bd      	mov	sp, r7
 800afc8:	bd80      	pop	{r7, pc}

0800afca <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800afca:	b580      	push	{r7, lr}
 800afcc:	b084      	sub	sp, #16
 800afce:	af00      	add	r7, sp, #0
 800afd0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afd6:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800afd8:	68f8      	ldr	r0, [r7, #12]
 800afda:	f7fe ffef 	bl	8009fbc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800afde:	bf00      	nop
 800afe0:	3710      	adds	r7, #16
 800afe2:	46bd      	mov	sp, r7
 800afe4:	bd80      	pop	{r7, pc}

0800afe6 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800afe6:	b580      	push	{r7, lr}
 800afe8:	b084      	sub	sp, #16
 800afea:	af00      	add	r7, sp, #0
 800afec:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aff2:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aff8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b004:	f043 0204 	orr.w	r2, r3, #4
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800b00c:	68f8      	ldr	r0, [r7, #12]
 800b00e:	f7fe ffe9 	bl	8009fe4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800b012:	bf00      	nop
 800b014:	3710      	adds	r7, #16
 800b016:	46bd      	mov	sp, r7
 800b018:	bd80      	pop	{r7, pc}

0800b01a <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800b01a:	b480      	push	{r7}
 800b01c:	b083      	sub	sp, #12
 800b01e:	af00      	add	r7, sp, #0
 800b020:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800b022:	bf00      	nop
 800b024:	370c      	adds	r7, #12
 800b026:	46bd      	mov	sp, r7
 800b028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02c:	4770      	bx	lr

0800b02e <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800b02e:	b480      	push	{r7}
 800b030:	b083      	sub	sp, #12
 800b032:	af00      	add	r7, sp, #0
 800b034:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800b036:	bf00      	nop
 800b038:	370c      	adds	r7, #12
 800b03a:	46bd      	mov	sp, r7
 800b03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b040:	4770      	bx	lr

0800b042 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800b042:	b480      	push	{r7}
 800b044:	b083      	sub	sp, #12
 800b046:	af00      	add	r7, sp, #0
 800b048:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800b04a:	bf00      	nop
 800b04c:	370c      	adds	r7, #12
 800b04e:	46bd      	mov	sp, r7
 800b050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b054:	4770      	bx	lr

0800b056 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800b056:	b480      	push	{r7}
 800b058:	b083      	sub	sp, #12
 800b05a:	af00      	add	r7, sp, #0
 800b05c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800b05e:	bf00      	nop
 800b060:	370c      	adds	r7, #12
 800b062:	46bd      	mov	sp, r7
 800b064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b068:	4770      	bx	lr

0800b06a <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800b06a:	b480      	push	{r7}
 800b06c:	b083      	sub	sp, #12
 800b06e:	af00      	add	r7, sp, #0
 800b070:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800b072:	bf00      	nop
 800b074:	370c      	adds	r7, #12
 800b076:	46bd      	mov	sp, r7
 800b078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b07c:	4770      	bx	lr
	...

0800b080 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800b080:	b580      	push	{r7, lr}
 800b082:	b084      	sub	sp, #16
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d101      	bne.n	800b092 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800b08e:	2301      	movs	r3, #1
 800b090:	e208      	b.n	800b4a4 <HAL_CAN_Init+0x424>
  }

  /* Check the parameters */
  assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	4a9e      	ldr	r2, [pc, #632]	; (800b310 <HAL_CAN_Init+0x290>)
 800b098:	4293      	cmp	r3, r2
 800b09a:	d004      	beq.n	800b0a6 <HAL_CAN_Init+0x26>
 800b09c:	f240 111d 	movw	r1, #285	; 0x11d
 800b0a0:	489c      	ldr	r0, [pc, #624]	; (800b314 <HAL_CAN_Init+0x294>)
 800b0a2:	f7f9 fa77 	bl	8004594 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TimeTriggeredMode));
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	7e1b      	ldrb	r3, [r3, #24]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d008      	beq.n	800b0c0 <HAL_CAN_Init+0x40>
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	7e1b      	ldrb	r3, [r3, #24]
 800b0b2:	2b01      	cmp	r3, #1
 800b0b4:	d004      	beq.n	800b0c0 <HAL_CAN_Init+0x40>
 800b0b6:	f44f 718f 	mov.w	r1, #286	; 0x11e
 800b0ba:	4896      	ldr	r0, [pc, #600]	; (800b314 <HAL_CAN_Init+0x294>)
 800b0bc:	f7f9 fa6a 	bl	8004594 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoBusOff));
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	7e5b      	ldrb	r3, [r3, #25]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d008      	beq.n	800b0da <HAL_CAN_Init+0x5a>
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	7e5b      	ldrb	r3, [r3, #25]
 800b0cc:	2b01      	cmp	r3, #1
 800b0ce:	d004      	beq.n	800b0da <HAL_CAN_Init+0x5a>
 800b0d0:	f240 111f 	movw	r1, #287	; 0x11f
 800b0d4:	488f      	ldr	r0, [pc, #572]	; (800b314 <HAL_CAN_Init+0x294>)
 800b0d6:	f7f9 fa5d 	bl	8004594 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoWakeUp));
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	7e9b      	ldrb	r3, [r3, #26]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d008      	beq.n	800b0f4 <HAL_CAN_Init+0x74>
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	7e9b      	ldrb	r3, [r3, #26]
 800b0e6:	2b01      	cmp	r3, #1
 800b0e8:	d004      	beq.n	800b0f4 <HAL_CAN_Init+0x74>
 800b0ea:	f44f 7190 	mov.w	r1, #288	; 0x120
 800b0ee:	4889      	ldr	r0, [pc, #548]	; (800b314 <HAL_CAN_Init+0x294>)
 800b0f0:	f7f9 fa50 	bl	8004594 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoRetransmission));
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	7edb      	ldrb	r3, [r3, #27]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d008      	beq.n	800b10e <HAL_CAN_Init+0x8e>
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	7edb      	ldrb	r3, [r3, #27]
 800b100:	2b01      	cmp	r3, #1
 800b102:	d004      	beq.n	800b10e <HAL_CAN_Init+0x8e>
 800b104:	f240 1121 	movw	r1, #289	; 0x121
 800b108:	4882      	ldr	r0, [pc, #520]	; (800b314 <HAL_CAN_Init+0x294>)
 800b10a:	f7f9 fa43 	bl	8004594 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.ReceiveFifoLocked));
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	7f1b      	ldrb	r3, [r3, #28]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d008      	beq.n	800b128 <HAL_CAN_Init+0xa8>
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	7f1b      	ldrb	r3, [r3, #28]
 800b11a:	2b01      	cmp	r3, #1
 800b11c:	d004      	beq.n	800b128 <HAL_CAN_Init+0xa8>
 800b11e:	f44f 7191 	mov.w	r1, #290	; 0x122
 800b122:	487c      	ldr	r0, [pc, #496]	; (800b314 <HAL_CAN_Init+0x294>)
 800b124:	f7f9 fa36 	bl	8004594 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TransmitFifoPriority));
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	7f5b      	ldrb	r3, [r3, #29]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d008      	beq.n	800b142 <HAL_CAN_Init+0xc2>
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	7f5b      	ldrb	r3, [r3, #29]
 800b134:	2b01      	cmp	r3, #1
 800b136:	d004      	beq.n	800b142 <HAL_CAN_Init+0xc2>
 800b138:	f240 1123 	movw	r1, #291	; 0x123
 800b13c:	4875      	ldr	r0, [pc, #468]	; (800b314 <HAL_CAN_Init+0x294>)
 800b13e:	f7f9 fa29 	bl	8004594 <assert_failed>
  assert_param(IS_CAN_MODE(hcan->Init.Mode));
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	689b      	ldr	r3, [r3, #8]
 800b146:	2b00      	cmp	r3, #0
 800b148:	d013      	beq.n	800b172 <HAL_CAN_Init+0xf2>
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	689b      	ldr	r3, [r3, #8]
 800b14e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b152:	d00e      	beq.n	800b172 <HAL_CAN_Init+0xf2>
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	689b      	ldr	r3, [r3, #8]
 800b158:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b15c:	d009      	beq.n	800b172 <HAL_CAN_Init+0xf2>
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	689b      	ldr	r3, [r3, #8]
 800b162:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800b166:	d004      	beq.n	800b172 <HAL_CAN_Init+0xf2>
 800b168:	f44f 7192 	mov.w	r1, #292	; 0x124
 800b16c:	4869      	ldr	r0, [pc, #420]	; (800b314 <HAL_CAN_Init+0x294>)
 800b16e:	f7f9 fa11 	bl	8004594 <assert_failed>
  assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	68db      	ldr	r3, [r3, #12]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d013      	beq.n	800b1a2 <HAL_CAN_Init+0x122>
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	68db      	ldr	r3, [r3, #12]
 800b17e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b182:	d00e      	beq.n	800b1a2 <HAL_CAN_Init+0x122>
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	68db      	ldr	r3, [r3, #12]
 800b188:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b18c:	d009      	beq.n	800b1a2 <HAL_CAN_Init+0x122>
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	68db      	ldr	r3, [r3, #12]
 800b192:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b196:	d004      	beq.n	800b1a2 <HAL_CAN_Init+0x122>
 800b198:	f240 1125 	movw	r1, #293	; 0x125
 800b19c:	485d      	ldr	r0, [pc, #372]	; (800b314 <HAL_CAN_Init+0x294>)
 800b19e:	f7f9 f9f9 	bl	8004594 <assert_failed>
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	691b      	ldr	r3, [r3, #16]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d04f      	beq.n	800b24a <HAL_CAN_Init+0x1ca>
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	691b      	ldr	r3, [r3, #16]
 800b1ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b1b2:	d04a      	beq.n	800b24a <HAL_CAN_Init+0x1ca>
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	691b      	ldr	r3, [r3, #16]
 800b1b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b1bc:	d045      	beq.n	800b24a <HAL_CAN_Init+0x1ca>
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	691b      	ldr	r3, [r3, #16]
 800b1c2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b1c6:	d040      	beq.n	800b24a <HAL_CAN_Init+0x1ca>
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	691b      	ldr	r3, [r3, #16]
 800b1cc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b1d0:	d03b      	beq.n	800b24a <HAL_CAN_Init+0x1ca>
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	691b      	ldr	r3, [r3, #16]
 800b1d6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b1da:	d036      	beq.n	800b24a <HAL_CAN_Init+0x1ca>
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	691b      	ldr	r3, [r3, #16]
 800b1e0:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800b1e4:	d031      	beq.n	800b24a <HAL_CAN_Init+0x1ca>
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	691b      	ldr	r3, [r3, #16]
 800b1ea:	f5b3 2fe0 	cmp.w	r3, #458752	; 0x70000
 800b1ee:	d02c      	beq.n	800b24a <HAL_CAN_Init+0x1ca>
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	691b      	ldr	r3, [r3, #16]
 800b1f4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b1f8:	d027      	beq.n	800b24a <HAL_CAN_Init+0x1ca>
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	691b      	ldr	r3, [r3, #16]
 800b1fe:	f5b3 2f10 	cmp.w	r3, #589824	; 0x90000
 800b202:	d022      	beq.n	800b24a <HAL_CAN_Init+0x1ca>
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	691b      	ldr	r3, [r3, #16]
 800b208:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 800b20c:	d01d      	beq.n	800b24a <HAL_CAN_Init+0x1ca>
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	691b      	ldr	r3, [r3, #16]
 800b212:	f5b3 2f30 	cmp.w	r3, #720896	; 0xb0000
 800b216:	d018      	beq.n	800b24a <HAL_CAN_Init+0x1ca>
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	691b      	ldr	r3, [r3, #16]
 800b21c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800b220:	d013      	beq.n	800b24a <HAL_CAN_Init+0x1ca>
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	691b      	ldr	r3, [r3, #16]
 800b226:	f5b3 2f50 	cmp.w	r3, #851968	; 0xd0000
 800b22a:	d00e      	beq.n	800b24a <HAL_CAN_Init+0x1ca>
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	691b      	ldr	r3, [r3, #16]
 800b230:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800b234:	d009      	beq.n	800b24a <HAL_CAN_Init+0x1ca>
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	691b      	ldr	r3, [r3, #16]
 800b23a:	f5b3 2f70 	cmp.w	r3, #983040	; 0xf0000
 800b23e:	d004      	beq.n	800b24a <HAL_CAN_Init+0x1ca>
 800b240:	f44f 7193 	mov.w	r1, #294	; 0x126
 800b244:	4833      	ldr	r0, [pc, #204]	; (800b314 <HAL_CAN_Init+0x294>)
 800b246:	f7f9 f9a5 	bl	8004594 <assert_failed>
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	695b      	ldr	r3, [r3, #20]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d027      	beq.n	800b2a2 <HAL_CAN_Init+0x222>
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	695b      	ldr	r3, [r3, #20]
 800b256:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b25a:	d022      	beq.n	800b2a2 <HAL_CAN_Init+0x222>
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	695b      	ldr	r3, [r3, #20]
 800b260:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b264:	d01d      	beq.n	800b2a2 <HAL_CAN_Init+0x222>
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	695b      	ldr	r3, [r3, #20]
 800b26a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b26e:	d018      	beq.n	800b2a2 <HAL_CAN_Init+0x222>
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	695b      	ldr	r3, [r3, #20]
 800b274:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b278:	d013      	beq.n	800b2a2 <HAL_CAN_Init+0x222>
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	695b      	ldr	r3, [r3, #20]
 800b27e:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 800b282:	d00e      	beq.n	800b2a2 <HAL_CAN_Init+0x222>
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	695b      	ldr	r3, [r3, #20]
 800b288:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b28c:	d009      	beq.n	800b2a2 <HAL_CAN_Init+0x222>
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	695b      	ldr	r3, [r3, #20]
 800b292:	f5b3 0fe0 	cmp.w	r3, #7340032	; 0x700000
 800b296:	d004      	beq.n	800b2a2 <HAL_CAN_Init+0x222>
 800b298:	f240 1127 	movw	r1, #295	; 0x127
 800b29c:	481d      	ldr	r0, [pc, #116]	; (800b314 <HAL_CAN_Init+0x294>)
 800b29e:	f7f9 f979 	bl	8004594 <assert_failed>
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	685b      	ldr	r3, [r3, #4]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d004      	beq.n	800b2b4 <HAL_CAN_Init+0x234>
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	685b      	ldr	r3, [r3, #4]
 800b2ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b2b2:	d904      	bls.n	800b2be <HAL_CAN_Init+0x23e>
 800b2b4:	f44f 7194 	mov.w	r1, #296	; 0x128
 800b2b8:	4816      	ldr	r0, [pc, #88]	; (800b314 <HAL_CAN_Init+0x294>)
 800b2ba:	f7f9 f96b 	bl	8004594 <assert_failed>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b2c4:	b2db      	uxtb	r3, r3
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d102      	bne.n	800b2d0 <HAL_CAN_Init+0x250>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800b2ca:	6878      	ldr	r0, [r7, #4]
 800b2cc:	f7f6 fd02 	bl	8001cd4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	681a      	ldr	r2, [r3, #0]
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	f042 0201 	orr.w	r2, r2, #1
 800b2de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b2e0:	f7fd fdea 	bl	8008eb8 <HAL_GetTick>
 800b2e4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800b2e6:	e017      	b.n	800b318 <HAL_CAN_Init+0x298>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800b2e8:	f7fd fde6 	bl	8008eb8 <HAL_GetTick>
 800b2ec:	4602      	mov	r2, r0
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	1ad3      	subs	r3, r2, r3
 800b2f2:	2b0a      	cmp	r3, #10
 800b2f4:	d910      	bls.n	800b318 <HAL_CAN_Init+0x298>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2fa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	2205      	movs	r2, #5
 800b306:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800b30a:	2301      	movs	r3, #1
 800b30c:	e0ca      	b.n	800b4a4 <HAL_CAN_Init+0x424>
 800b30e:	bf00      	nop
 800b310:	40006400 	.word	0x40006400
 800b314:	08018be0 	.word	0x08018be0
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	685b      	ldr	r3, [r3, #4]
 800b31e:	f003 0301 	and.w	r3, r3, #1
 800b322:	2b00      	cmp	r3, #0
 800b324:	d0e0      	beq.n	800b2e8 <HAL_CAN_Init+0x268>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	681a      	ldr	r2, [r3, #0]
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	f022 0202 	bic.w	r2, r2, #2
 800b334:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b336:	f7fd fdbf 	bl	8008eb8 <HAL_GetTick>
 800b33a:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800b33c:	e012      	b.n	800b364 <HAL_CAN_Init+0x2e4>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800b33e:	f7fd fdbb 	bl	8008eb8 <HAL_GetTick>
 800b342:	4602      	mov	r2, r0
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	1ad3      	subs	r3, r2, r3
 800b348:	2b0a      	cmp	r3, #10
 800b34a:	d90b      	bls.n	800b364 <HAL_CAN_Init+0x2e4>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b350:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	2205      	movs	r2, #5
 800b35c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800b360:	2301      	movs	r3, #1
 800b362:	e09f      	b.n	800b4a4 <HAL_CAN_Init+0x424>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	685b      	ldr	r3, [r3, #4]
 800b36a:	f003 0302 	and.w	r3, r3, #2
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d1e5      	bne.n	800b33e <HAL_CAN_Init+0x2be>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	7e1b      	ldrb	r3, [r3, #24]
 800b376:	2b01      	cmp	r3, #1
 800b378:	d108      	bne.n	800b38c <HAL_CAN_Init+0x30c>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	681a      	ldr	r2, [r3, #0]
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b388:	601a      	str	r2, [r3, #0]
 800b38a:	e007      	b.n	800b39c <HAL_CAN_Init+0x31c>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	681a      	ldr	r2, [r3, #0]
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b39a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	7e5b      	ldrb	r3, [r3, #25]
 800b3a0:	2b01      	cmp	r3, #1
 800b3a2:	d108      	bne.n	800b3b6 <HAL_CAN_Init+0x336>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	681a      	ldr	r2, [r3, #0]
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b3b2:	601a      	str	r2, [r3, #0]
 800b3b4:	e007      	b.n	800b3c6 <HAL_CAN_Init+0x346>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	681a      	ldr	r2, [r3, #0]
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b3c4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	7e9b      	ldrb	r3, [r3, #26]
 800b3ca:	2b01      	cmp	r3, #1
 800b3cc:	d108      	bne.n	800b3e0 <HAL_CAN_Init+0x360>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	681a      	ldr	r2, [r3, #0]
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	f042 0220 	orr.w	r2, r2, #32
 800b3dc:	601a      	str	r2, [r3, #0]
 800b3de:	e007      	b.n	800b3f0 <HAL_CAN_Init+0x370>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	681a      	ldr	r2, [r3, #0]
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	f022 0220 	bic.w	r2, r2, #32
 800b3ee:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	7edb      	ldrb	r3, [r3, #27]
 800b3f4:	2b01      	cmp	r3, #1
 800b3f6:	d108      	bne.n	800b40a <HAL_CAN_Init+0x38a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	681a      	ldr	r2, [r3, #0]
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	f022 0210 	bic.w	r2, r2, #16
 800b406:	601a      	str	r2, [r3, #0]
 800b408:	e007      	b.n	800b41a <HAL_CAN_Init+0x39a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	681a      	ldr	r2, [r3, #0]
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	f042 0210 	orr.w	r2, r2, #16
 800b418:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	7f1b      	ldrb	r3, [r3, #28]
 800b41e:	2b01      	cmp	r3, #1
 800b420:	d108      	bne.n	800b434 <HAL_CAN_Init+0x3b4>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	681a      	ldr	r2, [r3, #0]
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	f042 0208 	orr.w	r2, r2, #8
 800b430:	601a      	str	r2, [r3, #0]
 800b432:	e007      	b.n	800b444 <HAL_CAN_Init+0x3c4>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	681a      	ldr	r2, [r3, #0]
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	f022 0208 	bic.w	r2, r2, #8
 800b442:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	7f5b      	ldrb	r3, [r3, #29]
 800b448:	2b01      	cmp	r3, #1
 800b44a:	d108      	bne.n	800b45e <HAL_CAN_Init+0x3de>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	681a      	ldr	r2, [r3, #0]
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	f042 0204 	orr.w	r2, r2, #4
 800b45a:	601a      	str	r2, [r3, #0]
 800b45c:	e007      	b.n	800b46e <HAL_CAN_Init+0x3ee>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	681a      	ldr	r2, [r3, #0]
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	f022 0204 	bic.w	r2, r2, #4
 800b46c:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	689a      	ldr	r2, [r3, #8]
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	68db      	ldr	r3, [r3, #12]
 800b476:	431a      	orrs	r2, r3
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	691b      	ldr	r3, [r3, #16]
 800b47c:	431a      	orrs	r2, r3
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	695b      	ldr	r3, [r3, #20]
 800b482:	ea42 0103 	orr.w	r1, r2, r3
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	685b      	ldr	r3, [r3, #4]
 800b48a:	1e5a      	subs	r2, r3, #1
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	430a      	orrs	r2, r1
 800b492:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	2200      	movs	r2, #0
 800b498:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	2201      	movs	r2, #1
 800b49e:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800b4a2:	2300      	movs	r3, #0
}
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	3710      	adds	r7, #16
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	bd80      	pop	{r7, pc}

0800b4ac <HAL_CAN_DeInit>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeInit(CAN_HandleTypeDef *hcan)
{
 800b4ac:	b580      	push	{r7, lr}
 800b4ae:	b082      	sub	sp, #8
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	6078      	str	r0, [r7, #4]
  /* Check CAN handle */
  if (hcan == NULL)
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d101      	bne.n	800b4be <HAL_CAN_DeInit+0x12>
  {
    return HAL_ERROR;
 800b4ba:	2301      	movs	r3, #1
 800b4bc:	e01f      	b.n	800b4fe <HAL_CAN_DeInit+0x52>
  }

  /* Check the parameters */
  assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	4a11      	ldr	r2, [pc, #68]	; (800b508 <HAL_CAN_DeInit+0x5c>)
 800b4c4:	4293      	cmp	r3, r2
 800b4c6:	d004      	beq.n	800b4d2 <HAL_CAN_DeInit+0x26>
 800b4c8:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 800b4cc:	480f      	ldr	r0, [pc, #60]	; (800b50c <HAL_CAN_DeInit+0x60>)
 800b4ce:	f7f9 f861 	bl	8004594 <assert_failed>

  /* Stop the CAN module */
  (void)HAL_CAN_Stop(hcan);
 800b4d2:	6878      	ldr	r0, [r7, #4]
 800b4d4:	f000 f990 	bl	800b7f8 <HAL_CAN_Stop>
  /* DeInit the low level hardware: CLOCK, NVIC */
  hcan->MspDeInitCallback(hcan);

#else
  /* DeInit the low level hardware: CLOCK, NVIC */
  HAL_CAN_MspDeInit(hcan);
 800b4d8:	6878      	ldr	r0, [r7, #4]
 800b4da:	f7f6 fc5f 	bl	8001d9c <HAL_CAN_MspDeInit>
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Reset the CAN peripheral */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_RESET);
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	681a      	ldr	r2, [r3, #0]
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b4ec:	601a      	str	r2, [r3, #0]

  /* Reset the CAN ErrorCode */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	2200      	movs	r2, #0
 800b4f2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change CAN state */
  hcan->State = HAL_CAN_STATE_RESET;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800b4fc:	2300      	movs	r3, #0
}
 800b4fe:	4618      	mov	r0, r3
 800b500:	3708      	adds	r7, #8
 800b502:	46bd      	mov	sp, r7
 800b504:	bd80      	pop	{r7, pc}
 800b506:	bf00      	nop
 800b508:	40006400 	.word	0x40006400
 800b50c:	08018be0 	.word	0x08018be0

0800b510 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800b510:	b580      	push	{r7, lr}
 800b512:	b086      	sub	sp, #24
 800b514:	af00      	add	r7, sp, #0
 800b516:	6078      	str	r0, [r7, #4]
 800b518:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b526:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800b528:	7cfb      	ldrb	r3, [r7, #19]
 800b52a:	2b01      	cmp	r3, #1
 800b52c:	d003      	beq.n	800b536 <HAL_CAN_ConfigFilter+0x26>
 800b52e:	7cfb      	ldrb	r3, [r7, #19]
 800b530:	2b02      	cmp	r3, #2
 800b532:	f040 810f 	bne.w	800b754 <HAL_CAN_ConfigFilter+0x244>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterIdHigh));
 800b536:	683b      	ldr	r3, [r7, #0]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b53e:	d304      	bcc.n	800b54a <HAL_CAN_ConfigFilter+0x3a>
 800b540:	f240 3151 	movw	r1, #849	; 0x351
 800b544:	4889      	ldr	r0, [pc, #548]	; (800b76c <HAL_CAN_ConfigFilter+0x25c>)
 800b546:	f7f9 f825 	bl	8004594 <assert_failed>
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterIdLow));
 800b54a:	683b      	ldr	r3, [r7, #0]
 800b54c:	685b      	ldr	r3, [r3, #4]
 800b54e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b552:	d304      	bcc.n	800b55e <HAL_CAN_ConfigFilter+0x4e>
 800b554:	f240 3152 	movw	r1, #850	; 0x352
 800b558:	4884      	ldr	r0, [pc, #528]	; (800b76c <HAL_CAN_ConfigFilter+0x25c>)
 800b55a:	f7f9 f81b 	bl	8004594 <assert_failed>
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterMaskIdHigh));
 800b55e:	683b      	ldr	r3, [r7, #0]
 800b560:	689b      	ldr	r3, [r3, #8]
 800b562:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b566:	d304      	bcc.n	800b572 <HAL_CAN_ConfigFilter+0x62>
 800b568:	f240 3153 	movw	r1, #851	; 0x353
 800b56c:	487f      	ldr	r0, [pc, #508]	; (800b76c <HAL_CAN_ConfigFilter+0x25c>)
 800b56e:	f7f9 f811 	bl	8004594 <assert_failed>
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterMaskIdLow));
 800b572:	683b      	ldr	r3, [r7, #0]
 800b574:	68db      	ldr	r3, [r3, #12]
 800b576:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b57a:	d304      	bcc.n	800b586 <HAL_CAN_ConfigFilter+0x76>
 800b57c:	f44f 7155 	mov.w	r1, #852	; 0x354
 800b580:	487a      	ldr	r0, [pc, #488]	; (800b76c <HAL_CAN_ConfigFilter+0x25c>)
 800b582:	f7f9 f807 	bl	8004594 <assert_failed>
    assert_param(IS_CAN_FILTER_MODE(sFilterConfig->FilterMode));
 800b586:	683b      	ldr	r3, [r7, #0]
 800b588:	699b      	ldr	r3, [r3, #24]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d008      	beq.n	800b5a0 <HAL_CAN_ConfigFilter+0x90>
 800b58e:	683b      	ldr	r3, [r7, #0]
 800b590:	699b      	ldr	r3, [r3, #24]
 800b592:	2b01      	cmp	r3, #1
 800b594:	d004      	beq.n	800b5a0 <HAL_CAN_ConfigFilter+0x90>
 800b596:	f240 3155 	movw	r1, #853	; 0x355
 800b59a:	4874      	ldr	r0, [pc, #464]	; (800b76c <HAL_CAN_ConfigFilter+0x25c>)
 800b59c:	f7f8 fffa 	bl	8004594 <assert_failed>
    assert_param(IS_CAN_FILTER_SCALE(sFilterConfig->FilterScale));
 800b5a0:	683b      	ldr	r3, [r7, #0]
 800b5a2:	69db      	ldr	r3, [r3, #28]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d008      	beq.n	800b5ba <HAL_CAN_ConfigFilter+0xaa>
 800b5a8:	683b      	ldr	r3, [r7, #0]
 800b5aa:	69db      	ldr	r3, [r3, #28]
 800b5ac:	2b01      	cmp	r3, #1
 800b5ae:	d004      	beq.n	800b5ba <HAL_CAN_ConfigFilter+0xaa>
 800b5b0:	f240 3156 	movw	r1, #854	; 0x356
 800b5b4:	486d      	ldr	r0, [pc, #436]	; (800b76c <HAL_CAN_ConfigFilter+0x25c>)
 800b5b6:	f7f8 ffed 	bl	8004594 <assert_failed>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
 800b5ba:	683b      	ldr	r3, [r7, #0]
 800b5bc:	691b      	ldr	r3, [r3, #16]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d008      	beq.n	800b5d4 <HAL_CAN_ConfigFilter+0xc4>
 800b5c2:	683b      	ldr	r3, [r7, #0]
 800b5c4:	691b      	ldr	r3, [r3, #16]
 800b5c6:	2b01      	cmp	r3, #1
 800b5c8:	d004      	beq.n	800b5d4 <HAL_CAN_ConfigFilter+0xc4>
 800b5ca:	f240 3157 	movw	r1, #855	; 0x357
 800b5ce:	4867      	ldr	r0, [pc, #412]	; (800b76c <HAL_CAN_ConfigFilter+0x25c>)
 800b5d0:	f7f8 ffe0 	bl	8004594 <assert_failed>
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));
 800b5d4:	683b      	ldr	r3, [r7, #0]
 800b5d6:	6a1b      	ldr	r3, [r3, #32]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d008      	beq.n	800b5ee <HAL_CAN_ConfigFilter+0xde>
 800b5dc:	683b      	ldr	r3, [r7, #0]
 800b5de:	6a1b      	ldr	r3, [r3, #32]
 800b5e0:	2b01      	cmp	r3, #1
 800b5e2:	d004      	beq.n	800b5ee <HAL_CAN_ConfigFilter+0xde>
 800b5e4:	f44f 7156 	mov.w	r1, #856	; 0x358
 800b5e8:	4860      	ldr	r0, [pc, #384]	; (800b76c <HAL_CAN_ConfigFilter+0x25c>)
 800b5ea:	f7f8 ffd3 	bl	8004594 <assert_failed>
    assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
#else
    /* CAN1 is single instance with 14 dedicated filters banks */

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
 800b5ee:	683b      	ldr	r3, [r7, #0]
 800b5f0:	695b      	ldr	r3, [r3, #20]
 800b5f2:	2b0d      	cmp	r3, #13
 800b5f4:	d904      	bls.n	800b600 <HAL_CAN_ConfigFilter+0xf0>
 800b5f6:	f240 3166 	movw	r1, #870	; 0x366
 800b5fa:	485c      	ldr	r0, [pc, #368]	; (800b76c <HAL_CAN_ConfigFilter+0x25c>)
 800b5fc:	f7f8 ffca 	bl	8004594 <assert_failed>
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800b600:	697b      	ldr	r3, [r7, #20]
 800b602:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b606:	f043 0201 	orr.w	r2, r3, #1
 800b60a:	697b      	ldr	r3, [r7, #20]
 800b60c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800b610:	683b      	ldr	r3, [r7, #0]
 800b612:	695b      	ldr	r3, [r3, #20]
 800b614:	f003 031f 	and.w	r3, r3, #31
 800b618:	2201      	movs	r2, #1
 800b61a:	fa02 f303 	lsl.w	r3, r2, r3
 800b61e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800b620:	697b      	ldr	r3, [r7, #20]
 800b622:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	43db      	mvns	r3, r3
 800b62a:	401a      	ands	r2, r3
 800b62c:	697b      	ldr	r3, [r7, #20]
 800b62e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800b632:	683b      	ldr	r3, [r7, #0]
 800b634:	69db      	ldr	r3, [r3, #28]
 800b636:	2b00      	cmp	r3, #0
 800b638:	d123      	bne.n	800b682 <HAL_CAN_ConfigFilter+0x172>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800b63a:	697b      	ldr	r3, [r7, #20]
 800b63c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	43db      	mvns	r3, r3
 800b644:	401a      	ands	r2, r3
 800b646:	697b      	ldr	r3, [r7, #20]
 800b648:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800b64c:	683b      	ldr	r3, [r7, #0]
 800b64e:	68db      	ldr	r3, [r3, #12]
 800b650:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800b652:	683b      	ldr	r3, [r7, #0]
 800b654:	685b      	ldr	r3, [r3, #4]
 800b656:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800b658:	683a      	ldr	r2, [r7, #0]
 800b65a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800b65c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800b65e:	697b      	ldr	r3, [r7, #20]
 800b660:	3248      	adds	r2, #72	; 0x48
 800b662:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800b666:	683b      	ldr	r3, [r7, #0]
 800b668:	689b      	ldr	r3, [r3, #8]
 800b66a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800b66c:	683b      	ldr	r3, [r7, #0]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800b672:	683b      	ldr	r3, [r7, #0]
 800b674:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800b676:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800b678:	6979      	ldr	r1, [r7, #20]
 800b67a:	3348      	adds	r3, #72	; 0x48
 800b67c:	00db      	lsls	r3, r3, #3
 800b67e:	440b      	add	r3, r1
 800b680:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800b682:	683b      	ldr	r3, [r7, #0]
 800b684:	69db      	ldr	r3, [r3, #28]
 800b686:	2b01      	cmp	r3, #1
 800b688:	d122      	bne.n	800b6d0 <HAL_CAN_ConfigFilter+0x1c0>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800b68a:	697b      	ldr	r3, [r7, #20]
 800b68c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	431a      	orrs	r2, r3
 800b694:	697b      	ldr	r3, [r7, #20]
 800b696:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800b69a:	683b      	ldr	r3, [r7, #0]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800b6a0:	683b      	ldr	r3, [r7, #0]
 800b6a2:	685b      	ldr	r3, [r3, #4]
 800b6a4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800b6a6:	683a      	ldr	r2, [r7, #0]
 800b6a8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800b6aa:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800b6ac:	697b      	ldr	r3, [r7, #20]
 800b6ae:	3248      	adds	r2, #72	; 0x48
 800b6b0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800b6b4:	683b      	ldr	r3, [r7, #0]
 800b6b6:	689b      	ldr	r3, [r3, #8]
 800b6b8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800b6ba:	683b      	ldr	r3, [r7, #0]
 800b6bc:	68db      	ldr	r3, [r3, #12]
 800b6be:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800b6c0:	683b      	ldr	r3, [r7, #0]
 800b6c2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800b6c4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800b6c6:	6979      	ldr	r1, [r7, #20]
 800b6c8:	3348      	adds	r3, #72	; 0x48
 800b6ca:	00db      	lsls	r3, r3, #3
 800b6cc:	440b      	add	r3, r1
 800b6ce:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800b6d0:	683b      	ldr	r3, [r7, #0]
 800b6d2:	699b      	ldr	r3, [r3, #24]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d109      	bne.n	800b6ec <HAL_CAN_ConfigFilter+0x1dc>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800b6d8:	697b      	ldr	r3, [r7, #20]
 800b6da:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	43db      	mvns	r3, r3
 800b6e2:	401a      	ands	r2, r3
 800b6e4:	697b      	ldr	r3, [r7, #20]
 800b6e6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800b6ea:	e007      	b.n	800b6fc <HAL_CAN_ConfigFilter+0x1ec>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800b6ec:	697b      	ldr	r3, [r7, #20]
 800b6ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	431a      	orrs	r2, r3
 800b6f6:	697b      	ldr	r3, [r7, #20]
 800b6f8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800b6fc:	683b      	ldr	r3, [r7, #0]
 800b6fe:	691b      	ldr	r3, [r3, #16]
 800b700:	2b00      	cmp	r3, #0
 800b702:	d109      	bne.n	800b718 <HAL_CAN_ConfigFilter+0x208>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800b704:	697b      	ldr	r3, [r7, #20]
 800b706:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	43db      	mvns	r3, r3
 800b70e:	401a      	ands	r2, r3
 800b710:	697b      	ldr	r3, [r7, #20]
 800b712:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800b716:	e007      	b.n	800b728 <HAL_CAN_ConfigFilter+0x218>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800b718:	697b      	ldr	r3, [r7, #20]
 800b71a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	431a      	orrs	r2, r3
 800b722:	697b      	ldr	r3, [r7, #20]
 800b724:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800b728:	683b      	ldr	r3, [r7, #0]
 800b72a:	6a1b      	ldr	r3, [r3, #32]
 800b72c:	2b01      	cmp	r3, #1
 800b72e:	d107      	bne.n	800b740 <HAL_CAN_ConfigFilter+0x230>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800b730:	697b      	ldr	r3, [r7, #20]
 800b732:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	431a      	orrs	r2, r3
 800b73a:	697b      	ldr	r3, [r7, #20]
 800b73c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800b740:	697b      	ldr	r3, [r7, #20]
 800b742:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b746:	f023 0201 	bic.w	r2, r3, #1
 800b74a:	697b      	ldr	r3, [r7, #20]
 800b74c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800b750:	2300      	movs	r3, #0
 800b752:	e006      	b.n	800b762 <HAL_CAN_ConfigFilter+0x252>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b758:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800b760:	2301      	movs	r3, #1
  }
}
 800b762:	4618      	mov	r0, r3
 800b764:	3718      	adds	r7, #24
 800b766:	46bd      	mov	sp, r7
 800b768:	bd80      	pop	{r7, pc}
 800b76a:	bf00      	nop
 800b76c:	08018be0 	.word	0x08018be0

0800b770 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800b770:	b580      	push	{r7, lr}
 800b772:	b084      	sub	sp, #16
 800b774:	af00      	add	r7, sp, #0
 800b776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b77e:	b2db      	uxtb	r3, r3
 800b780:	2b01      	cmp	r3, #1
 800b782:	d12e      	bne.n	800b7e2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	2202      	movs	r2, #2
 800b788:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	681a      	ldr	r2, [r3, #0]
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	f022 0201 	bic.w	r2, r2, #1
 800b79a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b79c:	f7fd fb8c 	bl	8008eb8 <HAL_GetTick>
 800b7a0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800b7a2:	e012      	b.n	800b7ca <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800b7a4:	f7fd fb88 	bl	8008eb8 <HAL_GetTick>
 800b7a8:	4602      	mov	r2, r0
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	1ad3      	subs	r3, r2, r3
 800b7ae:	2b0a      	cmp	r3, #10
 800b7b0:	d90b      	bls.n	800b7ca <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7b6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	2205      	movs	r2, #5
 800b7c2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800b7c6:	2301      	movs	r3, #1
 800b7c8:	e012      	b.n	800b7f0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	685b      	ldr	r3, [r3, #4]
 800b7d0:	f003 0301 	and.w	r3, r3, #1
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d1e5      	bne.n	800b7a4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	2200      	movs	r2, #0
 800b7dc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800b7de:	2300      	movs	r3, #0
 800b7e0:	e006      	b.n	800b7f0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7e6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800b7ee:	2301      	movs	r3, #1
  }
}
 800b7f0:	4618      	mov	r0, r3
 800b7f2:	3710      	adds	r7, #16
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	bd80      	pop	{r7, pc}

0800b7f8 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b084      	sub	sp, #16
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b806:	b2db      	uxtb	r3, r3
 800b808:	2b02      	cmp	r3, #2
 800b80a:	d133      	bne.n	800b874 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	681a      	ldr	r2, [r3, #0]
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	f042 0201 	orr.w	r2, r2, #1
 800b81a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b81c:	f7fd fb4c 	bl	8008eb8 <HAL_GetTick>
 800b820:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800b822:	e012      	b.n	800b84a <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800b824:	f7fd fb48 	bl	8008eb8 <HAL_GetTick>
 800b828:	4602      	mov	r2, r0
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	1ad3      	subs	r3, r2, r3
 800b82e:	2b0a      	cmp	r3, #10
 800b830:	d90b      	bls.n	800b84a <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b836:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	2205      	movs	r2, #5
 800b842:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800b846:	2301      	movs	r3, #1
 800b848:	e01b      	b.n	800b882 <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	685b      	ldr	r3, [r3, #4]
 800b850:	f003 0301 	and.w	r3, r3, #1
 800b854:	2b00      	cmp	r3, #0
 800b856:	d0e5      	beq.n	800b824 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	681a      	ldr	r2, [r3, #0]
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	f022 0202 	bic.w	r2, r2, #2
 800b866:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	2201      	movs	r2, #1
 800b86c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 800b870:	2300      	movs	r3, #0
 800b872:	e006      	b.n	800b882 <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b878:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800b880:	2301      	movs	r3, #1
  }
}
 800b882:	4618      	mov	r0, r3
 800b884:	3710      	adds	r7, #16
 800b886:	46bd      	mov	sp, r7
 800b888:	bd80      	pop	{r7, pc}
	...

0800b88c <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800b88c:	b580      	push	{r7, lr}
 800b88e:	b086      	sub	sp, #24
 800b890:	af00      	add	r7, sp, #0
 800b892:	60f8      	str	r0, [r7, #12]
 800b894:	60b9      	str	r1, [r7, #8]
 800b896:	607a      	str	r2, [r7, #4]
 800b898:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b8a0:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));
 800b8a2:	68bb      	ldr	r3, [r7, #8]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d007      	beq.n	800b8b8 <HAL_CAN_GetRxMessage+0x2c>
 800b8a8:	68bb      	ldr	r3, [r7, #8]
 800b8aa:	2b01      	cmp	r3, #1
 800b8ac:	d004      	beq.n	800b8b8 <HAL_CAN_GetRxMessage+0x2c>
 800b8ae:	f240 51ce 	movw	r1, #1486	; 0x5ce
 800b8b2:	4884      	ldr	r0, [pc, #528]	; (800bac4 <HAL_CAN_GetRxMessage+0x238>)
 800b8b4:	f7f8 fe6e 	bl	8004594 <assert_failed>

  if ((state == HAL_CAN_STATE_READY) ||
 800b8b8:	7dfb      	ldrb	r3, [r7, #23]
 800b8ba:	2b01      	cmp	r3, #1
 800b8bc:	d003      	beq.n	800b8c6 <HAL_CAN_GetRxMessage+0x3a>
 800b8be:	7dfb      	ldrb	r3, [r7, #23]
 800b8c0:	2b02      	cmp	r3, #2
 800b8c2:	f040 80f3 	bne.w	800baac <HAL_CAN_GetRxMessage+0x220>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800b8c6:	68bb      	ldr	r3, [r7, #8]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d10e      	bne.n	800b8ea <HAL_CAN_GetRxMessage+0x5e>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	68db      	ldr	r3, [r3, #12]
 800b8d2:	f003 0303 	and.w	r3, r3, #3
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d116      	bne.n	800b908 <HAL_CAN_GetRxMessage+0x7c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8de:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800b8e6:	2301      	movs	r3, #1
 800b8e8:	e0e7      	b.n	800baba <HAL_CAN_GetRxMessage+0x22e>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	691b      	ldr	r3, [r3, #16]
 800b8f0:	f003 0303 	and.w	r3, r3, #3
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d107      	bne.n	800b908 <HAL_CAN_GetRxMessage+0x7c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8fc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800b904:	2301      	movs	r3, #1
 800b906:	e0d8      	b.n	800baba <HAL_CAN_GetRxMessage+0x22e>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	681a      	ldr	r2, [r3, #0]
 800b90c:	68bb      	ldr	r3, [r7, #8]
 800b90e:	331b      	adds	r3, #27
 800b910:	011b      	lsls	r3, r3, #4
 800b912:	4413      	add	r3, r2
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	f003 0204 	and.w	r2, r3, #4
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	689b      	ldr	r3, [r3, #8]
 800b922:	2b00      	cmp	r3, #0
 800b924:	d10c      	bne.n	800b940 <HAL_CAN_GetRxMessage+0xb4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	681a      	ldr	r2, [r3, #0]
 800b92a:	68bb      	ldr	r3, [r7, #8]
 800b92c:	331b      	adds	r3, #27
 800b92e:	011b      	lsls	r3, r3, #4
 800b930:	4413      	add	r3, r2
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	0d5b      	lsrs	r3, r3, #21
 800b936:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	601a      	str	r2, [r3, #0]
 800b93e:	e00b      	b.n	800b958 <HAL_CAN_GetRxMessage+0xcc>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	681a      	ldr	r2, [r3, #0]
 800b944:	68bb      	ldr	r3, [r7, #8]
 800b946:	331b      	adds	r3, #27
 800b948:	011b      	lsls	r3, r3, #4
 800b94a:	4413      	add	r3, r2
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	08db      	lsrs	r3, r3, #3
 800b950:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	681a      	ldr	r2, [r3, #0]
 800b95c:	68bb      	ldr	r3, [r7, #8]
 800b95e:	331b      	adds	r3, #27
 800b960:	011b      	lsls	r3, r3, #4
 800b962:	4413      	add	r3, r2
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	f003 0202 	and.w	r2, r3, #2
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	681a      	ldr	r2, [r3, #0]
 800b972:	68bb      	ldr	r3, [r7, #8]
 800b974:	331b      	adds	r3, #27
 800b976:	011b      	lsls	r3, r3, #4
 800b978:	4413      	add	r3, r2
 800b97a:	3304      	adds	r3, #4
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	f003 020f 	and.w	r2, r3, #15
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	681a      	ldr	r2, [r3, #0]
 800b98a:	68bb      	ldr	r3, [r7, #8]
 800b98c:	331b      	adds	r3, #27
 800b98e:	011b      	lsls	r3, r3, #4
 800b990:	4413      	add	r3, r2
 800b992:	3304      	adds	r3, #4
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	0a1b      	lsrs	r3, r3, #8
 800b998:	b2da      	uxtb	r2, r3
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	681a      	ldr	r2, [r3, #0]
 800b9a2:	68bb      	ldr	r3, [r7, #8]
 800b9a4:	331b      	adds	r3, #27
 800b9a6:	011b      	lsls	r3, r3, #4
 800b9a8:	4413      	add	r3, r2
 800b9aa:	3304      	adds	r3, #4
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	0c1b      	lsrs	r3, r3, #16
 800b9b0:	b29a      	uxth	r2, r3
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	681a      	ldr	r2, [r3, #0]
 800b9ba:	68bb      	ldr	r3, [r7, #8]
 800b9bc:	011b      	lsls	r3, r3, #4
 800b9be:	4413      	add	r3, r2
 800b9c0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	b2da      	uxtb	r2, r3
 800b9c8:	683b      	ldr	r3, [r7, #0]
 800b9ca:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	681a      	ldr	r2, [r3, #0]
 800b9d0:	68bb      	ldr	r3, [r7, #8]
 800b9d2:	011b      	lsls	r3, r3, #4
 800b9d4:	4413      	add	r3, r2
 800b9d6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	0a1a      	lsrs	r2, r3, #8
 800b9de:	683b      	ldr	r3, [r7, #0]
 800b9e0:	3301      	adds	r3, #1
 800b9e2:	b2d2      	uxtb	r2, r2
 800b9e4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	681a      	ldr	r2, [r3, #0]
 800b9ea:	68bb      	ldr	r3, [r7, #8]
 800b9ec:	011b      	lsls	r3, r3, #4
 800b9ee:	4413      	add	r3, r2
 800b9f0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	0c1a      	lsrs	r2, r3, #16
 800b9f8:	683b      	ldr	r3, [r7, #0]
 800b9fa:	3302      	adds	r3, #2
 800b9fc:	b2d2      	uxtb	r2, r2
 800b9fe:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	681a      	ldr	r2, [r3, #0]
 800ba04:	68bb      	ldr	r3, [r7, #8]
 800ba06:	011b      	lsls	r3, r3, #4
 800ba08:	4413      	add	r3, r2
 800ba0a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	0e1a      	lsrs	r2, r3, #24
 800ba12:	683b      	ldr	r3, [r7, #0]
 800ba14:	3303      	adds	r3, #3
 800ba16:	b2d2      	uxtb	r2, r2
 800ba18:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	681a      	ldr	r2, [r3, #0]
 800ba1e:	68bb      	ldr	r3, [r7, #8]
 800ba20:	011b      	lsls	r3, r3, #4
 800ba22:	4413      	add	r3, r2
 800ba24:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800ba28:	681a      	ldr	r2, [r3, #0]
 800ba2a:	683b      	ldr	r3, [r7, #0]
 800ba2c:	3304      	adds	r3, #4
 800ba2e:	b2d2      	uxtb	r2, r2
 800ba30:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	681a      	ldr	r2, [r3, #0]
 800ba36:	68bb      	ldr	r3, [r7, #8]
 800ba38:	011b      	lsls	r3, r3, #4
 800ba3a:	4413      	add	r3, r2
 800ba3c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	0a1a      	lsrs	r2, r3, #8
 800ba44:	683b      	ldr	r3, [r7, #0]
 800ba46:	3305      	adds	r3, #5
 800ba48:	b2d2      	uxtb	r2, r2
 800ba4a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	681a      	ldr	r2, [r3, #0]
 800ba50:	68bb      	ldr	r3, [r7, #8]
 800ba52:	011b      	lsls	r3, r3, #4
 800ba54:	4413      	add	r3, r2
 800ba56:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	0c1a      	lsrs	r2, r3, #16
 800ba5e:	683b      	ldr	r3, [r7, #0]
 800ba60:	3306      	adds	r3, #6
 800ba62:	b2d2      	uxtb	r2, r2
 800ba64:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	681a      	ldr	r2, [r3, #0]
 800ba6a:	68bb      	ldr	r3, [r7, #8]
 800ba6c:	011b      	lsls	r3, r3, #4
 800ba6e:	4413      	add	r3, r2
 800ba70:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	0e1a      	lsrs	r2, r3, #24
 800ba78:	683b      	ldr	r3, [r7, #0]
 800ba7a:	3307      	adds	r3, #7
 800ba7c:	b2d2      	uxtb	r2, r2
 800ba7e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800ba80:	68bb      	ldr	r3, [r7, #8]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d108      	bne.n	800ba98 <HAL_CAN_GetRxMessage+0x20c>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	68da      	ldr	r2, [r3, #12]
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	f042 0220 	orr.w	r2, r2, #32
 800ba94:	60da      	str	r2, [r3, #12]
 800ba96:	e007      	b.n	800baa8 <HAL_CAN_GetRxMessage+0x21c>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	691a      	ldr	r2, [r3, #16]
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	f042 0220 	orr.w	r2, r2, #32
 800baa6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800baa8:	2300      	movs	r3, #0
 800baaa:	e006      	b.n	800baba <HAL_CAN_GetRxMessage+0x22e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bab0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800bab8:	2301      	movs	r3, #1
  }
}
 800baba:	4618      	mov	r0, r3
 800babc:	3718      	adds	r7, #24
 800babe:	46bd      	mov	sp, r7
 800bac0:	bd80      	pop	{r7, pc}
 800bac2:	bf00      	nop
 800bac4:	08018be0 	.word	0x08018be0

0800bac8 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	b084      	sub	sp, #16
 800bacc:	af00      	add	r7, sp, #0
 800bace:	6078      	str	r0, [r7, #4]
 800bad0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	f893 3020 	ldrb.w	r3, [r3, #32]
 800bad8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));
 800bada:	683b      	ldr	r3, [r7, #0]
 800badc:	4a11      	ldr	r2, [pc, #68]	; (800bb24 <HAL_CAN_ActivateNotification+0x5c>)
 800bade:	4293      	cmp	r3, r2
 800bae0:	d904      	bls.n	800baec <HAL_CAN_ActivateNotification+0x24>
 800bae2:	f240 615f 	movw	r1, #1631	; 0x65f
 800bae6:	4810      	ldr	r0, [pc, #64]	; (800bb28 <HAL_CAN_ActivateNotification+0x60>)
 800bae8:	f7f8 fd54 	bl	8004594 <assert_failed>

  if ((state == HAL_CAN_STATE_READY) ||
 800baec:	7bfb      	ldrb	r3, [r7, #15]
 800baee:	2b01      	cmp	r3, #1
 800baf0:	d002      	beq.n	800baf8 <HAL_CAN_ActivateNotification+0x30>
 800baf2:	7bfb      	ldrb	r3, [r7, #15]
 800baf4:	2b02      	cmp	r3, #2
 800baf6:	d109      	bne.n	800bb0c <HAL_CAN_ActivateNotification+0x44>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	6959      	ldr	r1, [r3, #20]
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	683a      	ldr	r2, [r7, #0]
 800bb04:	430a      	orrs	r2, r1
 800bb06:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800bb08:	2300      	movs	r3, #0
 800bb0a:	e006      	b.n	800bb1a <HAL_CAN_ActivateNotification+0x52>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb10:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800bb18:	2301      	movs	r3, #1
  }
}
 800bb1a:	4618      	mov	r0, r3
 800bb1c:	3710      	adds	r7, #16
 800bb1e:	46bd      	mov	sp, r7
 800bb20:	bd80      	pop	{r7, pc}
 800bb22:	bf00      	nop
 800bb24:	00038f7f 	.word	0x00038f7f
 800bb28:	08018be0 	.word	0x08018be0

0800bb2c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800bb2c:	b580      	push	{r7, lr}
 800bb2e:	b08a      	sub	sp, #40	; 0x28
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800bb34:	2300      	movs	r3, #0
 800bb36:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	695b      	ldr	r3, [r3, #20]
 800bb3e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	685b      	ldr	r3, [r3, #4]
 800bb46:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	689b      	ldr	r3, [r3, #8]
 800bb4e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	68db      	ldr	r3, [r3, #12]
 800bb56:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	691b      	ldr	r3, [r3, #16]
 800bb5e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	699b      	ldr	r3, [r3, #24]
 800bb66:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800bb68:	6a3b      	ldr	r3, [r7, #32]
 800bb6a:	f003 0301 	and.w	r3, r3, #1
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d07c      	beq.n	800bc6c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800bb72:	69bb      	ldr	r3, [r7, #24]
 800bb74:	f003 0301 	and.w	r3, r3, #1
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d023      	beq.n	800bbc4 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	2201      	movs	r2, #1
 800bb82:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800bb84:	69bb      	ldr	r3, [r7, #24]
 800bb86:	f003 0302 	and.w	r3, r3, #2
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d003      	beq.n	800bb96 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800bb8e:	6878      	ldr	r0, [r7, #4]
 800bb90:	f000 f983 	bl	800be9a <HAL_CAN_TxMailbox0CompleteCallback>
 800bb94:	e016      	b.n	800bbc4 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800bb96:	69bb      	ldr	r3, [r7, #24]
 800bb98:	f003 0304 	and.w	r3, r3, #4
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d004      	beq.n	800bbaa <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800bba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bba2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800bba6:	627b      	str	r3, [r7, #36]	; 0x24
 800bba8:	e00c      	b.n	800bbc4 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800bbaa:	69bb      	ldr	r3, [r7, #24]
 800bbac:	f003 0308 	and.w	r3, r3, #8
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d004      	beq.n	800bbbe <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800bbb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbb6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800bbba:	627b      	str	r3, [r7, #36]	; 0x24
 800bbbc:	e002      	b.n	800bbc4 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800bbbe:	6878      	ldr	r0, [r7, #4]
 800bbc0:	f000 f989 	bl	800bed6 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800bbc4:	69bb      	ldr	r3, [r7, #24]
 800bbc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d024      	beq.n	800bc18 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bbd6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800bbd8:	69bb      	ldr	r3, [r7, #24]
 800bbda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d003      	beq.n	800bbea <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800bbe2:	6878      	ldr	r0, [r7, #4]
 800bbe4:	f000 f963 	bl	800beae <HAL_CAN_TxMailbox1CompleteCallback>
 800bbe8:	e016      	b.n	800bc18 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800bbea:	69bb      	ldr	r3, [r7, #24]
 800bbec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d004      	beq.n	800bbfe <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800bbf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbf6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800bbfa:	627b      	str	r3, [r7, #36]	; 0x24
 800bbfc:	e00c      	b.n	800bc18 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800bbfe:	69bb      	ldr	r3, [r7, #24]
 800bc00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d004      	beq.n	800bc12 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800bc08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bc0e:	627b      	str	r3, [r7, #36]	; 0x24
 800bc10:	e002      	b.n	800bc18 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800bc12:	6878      	ldr	r0, [r7, #4]
 800bc14:	f000 f969 	bl	800beea <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800bc18:	69bb      	ldr	r3, [r7, #24]
 800bc1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d024      	beq.n	800bc6c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800bc2a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800bc2c:	69bb      	ldr	r3, [r7, #24]
 800bc2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d003      	beq.n	800bc3e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800bc36:	6878      	ldr	r0, [r7, #4]
 800bc38:	f000 f943 	bl	800bec2 <HAL_CAN_TxMailbox2CompleteCallback>
 800bc3c:	e016      	b.n	800bc6c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800bc3e:	69bb      	ldr	r3, [r7, #24]
 800bc40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d004      	beq.n	800bc52 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800bc48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bc4e:	627b      	str	r3, [r7, #36]	; 0x24
 800bc50:	e00c      	b.n	800bc6c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800bc52:	69bb      	ldr	r3, [r7, #24]
 800bc54:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d004      	beq.n	800bc66 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800bc5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bc62:	627b      	str	r3, [r7, #36]	; 0x24
 800bc64:	e002      	b.n	800bc6c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800bc66:	6878      	ldr	r0, [r7, #4]
 800bc68:	f000 f949 	bl	800befe <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800bc6c:	6a3b      	ldr	r3, [r7, #32]
 800bc6e:	f003 0308 	and.w	r3, r3, #8
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d00c      	beq.n	800bc90 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800bc76:	697b      	ldr	r3, [r7, #20]
 800bc78:	f003 0310 	and.w	r3, r3, #16
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d007      	beq.n	800bc90 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800bc80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bc86:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	2210      	movs	r2, #16
 800bc8e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800bc90:	6a3b      	ldr	r3, [r7, #32]
 800bc92:	f003 0304 	and.w	r3, r3, #4
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d00b      	beq.n	800bcb2 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800bc9a:	697b      	ldr	r3, [r7, #20]
 800bc9c:	f003 0308 	and.w	r3, r3, #8
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d006      	beq.n	800bcb2 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	2208      	movs	r2, #8
 800bcaa:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800bcac:	6878      	ldr	r0, [r7, #4]
 800bcae:	f000 f930 	bl	800bf12 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800bcb2:	6a3b      	ldr	r3, [r7, #32]
 800bcb4:	f003 0302 	and.w	r3, r3, #2
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d009      	beq.n	800bcd0 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	68db      	ldr	r3, [r3, #12]
 800bcc2:	f003 0303 	and.w	r3, r3, #3
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d002      	beq.n	800bcd0 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800bcca:	6878      	ldr	r0, [r7, #4]
 800bccc:	f7fc f98a 	bl	8007fe4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800bcd0:	6a3b      	ldr	r3, [r7, #32]
 800bcd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d00c      	beq.n	800bcf4 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800bcda:	693b      	ldr	r3, [r7, #16]
 800bcdc:	f003 0310 	and.w	r3, r3, #16
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d007      	beq.n	800bcf4 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800bce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bce6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800bcea:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	2210      	movs	r2, #16
 800bcf2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800bcf4:	6a3b      	ldr	r3, [r7, #32]
 800bcf6:	f003 0320 	and.w	r3, r3, #32
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d00b      	beq.n	800bd16 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800bcfe:	693b      	ldr	r3, [r7, #16]
 800bd00:	f003 0308 	and.w	r3, r3, #8
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d006      	beq.n	800bd16 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	2208      	movs	r2, #8
 800bd0e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800bd10:	6878      	ldr	r0, [r7, #4]
 800bd12:	f000 f912 	bl	800bf3a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800bd16:	6a3b      	ldr	r3, [r7, #32]
 800bd18:	f003 0310 	and.w	r3, r3, #16
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d009      	beq.n	800bd34 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	691b      	ldr	r3, [r3, #16]
 800bd26:	f003 0303 	and.w	r3, r3, #3
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d002      	beq.n	800bd34 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800bd2e:	6878      	ldr	r0, [r7, #4]
 800bd30:	f000 f8f9 	bl	800bf26 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800bd34:	6a3b      	ldr	r3, [r7, #32]
 800bd36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d00b      	beq.n	800bd56 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800bd3e:	69fb      	ldr	r3, [r7, #28]
 800bd40:	f003 0310 	and.w	r3, r3, #16
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d006      	beq.n	800bd56 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	2210      	movs	r2, #16
 800bd4e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800bd50:	6878      	ldr	r0, [r7, #4]
 800bd52:	f000 f8fc 	bl	800bf4e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800bd56:	6a3b      	ldr	r3, [r7, #32]
 800bd58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d00b      	beq.n	800bd78 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800bd60:	69fb      	ldr	r3, [r7, #28]
 800bd62:	f003 0308 	and.w	r3, r3, #8
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d006      	beq.n	800bd78 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	2208      	movs	r2, #8
 800bd70:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800bd72:	6878      	ldr	r0, [r7, #4]
 800bd74:	f000 f8f5 	bl	800bf62 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800bd78:	6a3b      	ldr	r3, [r7, #32]
 800bd7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d07b      	beq.n	800be7a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800bd82:	69fb      	ldr	r3, [r7, #28]
 800bd84:	f003 0304 	and.w	r3, r3, #4
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d072      	beq.n	800be72 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800bd8c:	6a3b      	ldr	r3, [r7, #32]
 800bd8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d008      	beq.n	800bda8 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d003      	beq.n	800bda8 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800bda0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bda2:	f043 0301 	orr.w	r3, r3, #1
 800bda6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800bda8:	6a3b      	ldr	r3, [r7, #32]
 800bdaa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d008      	beq.n	800bdc4 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d003      	beq.n	800bdc4 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800bdbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdbe:	f043 0302 	orr.w	r3, r3, #2
 800bdc2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800bdc4:	6a3b      	ldr	r3, [r7, #32]
 800bdc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d008      	beq.n	800bde0 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d003      	beq.n	800bde0 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800bdd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdda:	f043 0304 	orr.w	r3, r3, #4
 800bdde:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800bde0:	6a3b      	ldr	r3, [r7, #32]
 800bde2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d043      	beq.n	800be72 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d03e      	beq.n	800be72 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bdfa:	2b60      	cmp	r3, #96	; 0x60
 800bdfc:	d02b      	beq.n	800be56 <HAL_CAN_IRQHandler+0x32a>
 800bdfe:	2b60      	cmp	r3, #96	; 0x60
 800be00:	d82e      	bhi.n	800be60 <HAL_CAN_IRQHandler+0x334>
 800be02:	2b50      	cmp	r3, #80	; 0x50
 800be04:	d022      	beq.n	800be4c <HAL_CAN_IRQHandler+0x320>
 800be06:	2b50      	cmp	r3, #80	; 0x50
 800be08:	d82a      	bhi.n	800be60 <HAL_CAN_IRQHandler+0x334>
 800be0a:	2b40      	cmp	r3, #64	; 0x40
 800be0c:	d019      	beq.n	800be42 <HAL_CAN_IRQHandler+0x316>
 800be0e:	2b40      	cmp	r3, #64	; 0x40
 800be10:	d826      	bhi.n	800be60 <HAL_CAN_IRQHandler+0x334>
 800be12:	2b30      	cmp	r3, #48	; 0x30
 800be14:	d010      	beq.n	800be38 <HAL_CAN_IRQHandler+0x30c>
 800be16:	2b30      	cmp	r3, #48	; 0x30
 800be18:	d822      	bhi.n	800be60 <HAL_CAN_IRQHandler+0x334>
 800be1a:	2b10      	cmp	r3, #16
 800be1c:	d002      	beq.n	800be24 <HAL_CAN_IRQHandler+0x2f8>
 800be1e:	2b20      	cmp	r3, #32
 800be20:	d005      	beq.n	800be2e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800be22:	e01d      	b.n	800be60 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800be24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be26:	f043 0308 	orr.w	r3, r3, #8
 800be2a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800be2c:	e019      	b.n	800be62 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800be2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be30:	f043 0310 	orr.w	r3, r3, #16
 800be34:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800be36:	e014      	b.n	800be62 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800be38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be3a:	f043 0320 	orr.w	r3, r3, #32
 800be3e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800be40:	e00f      	b.n	800be62 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800be42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be48:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800be4a:	e00a      	b.n	800be62 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800be4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be52:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800be54:	e005      	b.n	800be62 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800be56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800be5c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800be5e:	e000      	b.n	800be62 <HAL_CAN_IRQHandler+0x336>
            break;
 800be60:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	699a      	ldr	r2, [r3, #24]
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800be70:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	2204      	movs	r2, #4
 800be78:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800be7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d008      	beq.n	800be92 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800be84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be86:	431a      	orrs	r2, r3
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800be8c:	6878      	ldr	r0, [r7, #4]
 800be8e:	f7fc f93d 	bl	800810c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800be92:	bf00      	nop
 800be94:	3728      	adds	r7, #40	; 0x28
 800be96:	46bd      	mov	sp, r7
 800be98:	bd80      	pop	{r7, pc}

0800be9a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800be9a:	b480      	push	{r7}
 800be9c:	b083      	sub	sp, #12
 800be9e:	af00      	add	r7, sp, #0
 800bea0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800bea2:	bf00      	nop
 800bea4:	370c      	adds	r7, #12
 800bea6:	46bd      	mov	sp, r7
 800bea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beac:	4770      	bx	lr

0800beae <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800beae:	b480      	push	{r7}
 800beb0:	b083      	sub	sp, #12
 800beb2:	af00      	add	r7, sp, #0
 800beb4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800beb6:	bf00      	nop
 800beb8:	370c      	adds	r7, #12
 800beba:	46bd      	mov	sp, r7
 800bebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec0:	4770      	bx	lr

0800bec2 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800bec2:	b480      	push	{r7}
 800bec4:	b083      	sub	sp, #12
 800bec6:	af00      	add	r7, sp, #0
 800bec8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800beca:	bf00      	nop
 800becc:	370c      	adds	r7, #12
 800bece:	46bd      	mov	sp, r7
 800bed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed4:	4770      	bx	lr

0800bed6 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800bed6:	b480      	push	{r7}
 800bed8:	b083      	sub	sp, #12
 800beda:	af00      	add	r7, sp, #0
 800bedc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800bede:	bf00      	nop
 800bee0:	370c      	adds	r7, #12
 800bee2:	46bd      	mov	sp, r7
 800bee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee8:	4770      	bx	lr

0800beea <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800beea:	b480      	push	{r7}
 800beec:	b083      	sub	sp, #12
 800beee:	af00      	add	r7, sp, #0
 800bef0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800bef2:	bf00      	nop
 800bef4:	370c      	adds	r7, #12
 800bef6:	46bd      	mov	sp, r7
 800bef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800befc:	4770      	bx	lr

0800befe <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800befe:	b480      	push	{r7}
 800bf00:	b083      	sub	sp, #12
 800bf02:	af00      	add	r7, sp, #0
 800bf04:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800bf06:	bf00      	nop
 800bf08:	370c      	adds	r7, #12
 800bf0a:	46bd      	mov	sp, r7
 800bf0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf10:	4770      	bx	lr

0800bf12 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800bf12:	b480      	push	{r7}
 800bf14:	b083      	sub	sp, #12
 800bf16:	af00      	add	r7, sp, #0
 800bf18:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800bf1a:	bf00      	nop
 800bf1c:	370c      	adds	r7, #12
 800bf1e:	46bd      	mov	sp, r7
 800bf20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf24:	4770      	bx	lr

0800bf26 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800bf26:	b480      	push	{r7}
 800bf28:	b083      	sub	sp, #12
 800bf2a:	af00      	add	r7, sp, #0
 800bf2c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800bf2e:	bf00      	nop
 800bf30:	370c      	adds	r7, #12
 800bf32:	46bd      	mov	sp, r7
 800bf34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf38:	4770      	bx	lr

0800bf3a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800bf3a:	b480      	push	{r7}
 800bf3c:	b083      	sub	sp, #12
 800bf3e:	af00      	add	r7, sp, #0
 800bf40:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800bf42:	bf00      	nop
 800bf44:	370c      	adds	r7, #12
 800bf46:	46bd      	mov	sp, r7
 800bf48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf4c:	4770      	bx	lr

0800bf4e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800bf4e:	b480      	push	{r7}
 800bf50:	b083      	sub	sp, #12
 800bf52:	af00      	add	r7, sp, #0
 800bf54:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800bf56:	bf00      	nop
 800bf58:	370c      	adds	r7, #12
 800bf5a:	46bd      	mov	sp, r7
 800bf5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf60:	4770      	bx	lr

0800bf62 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800bf62:	b480      	push	{r7}
 800bf64:	b083      	sub	sp, #12
 800bf66:	af00      	add	r7, sp, #0
 800bf68:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800bf6a:	bf00      	nop
 800bf6c:	370c      	adds	r7, #12
 800bf6e:	46bd      	mov	sp, r7
 800bf70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf74:	4770      	bx	lr
	...

0800bf78 <__NVIC_SetPriorityGrouping>:
{
 800bf78:	b480      	push	{r7}
 800bf7a:	b085      	sub	sp, #20
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	f003 0307 	and.w	r3, r3, #7
 800bf86:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800bf88:	4b0c      	ldr	r3, [pc, #48]	; (800bfbc <__NVIC_SetPriorityGrouping+0x44>)
 800bf8a:	68db      	ldr	r3, [r3, #12]
 800bf8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800bf8e:	68ba      	ldr	r2, [r7, #8]
 800bf90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800bf94:	4013      	ands	r3, r2
 800bf96:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800bf9c:	68bb      	ldr	r3, [r7, #8]
 800bf9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800bfa0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800bfa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bfa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800bfaa:	4a04      	ldr	r2, [pc, #16]	; (800bfbc <__NVIC_SetPriorityGrouping+0x44>)
 800bfac:	68bb      	ldr	r3, [r7, #8]
 800bfae:	60d3      	str	r3, [r2, #12]
}
 800bfb0:	bf00      	nop
 800bfb2:	3714      	adds	r7, #20
 800bfb4:	46bd      	mov	sp, r7
 800bfb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfba:	4770      	bx	lr
 800bfbc:	e000ed00 	.word	0xe000ed00

0800bfc0 <__NVIC_GetPriorityGrouping>:
{
 800bfc0:	b480      	push	{r7}
 800bfc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800bfc4:	4b04      	ldr	r3, [pc, #16]	; (800bfd8 <__NVIC_GetPriorityGrouping+0x18>)
 800bfc6:	68db      	ldr	r3, [r3, #12]
 800bfc8:	0a1b      	lsrs	r3, r3, #8
 800bfca:	f003 0307 	and.w	r3, r3, #7
}
 800bfce:	4618      	mov	r0, r3
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd6:	4770      	bx	lr
 800bfd8:	e000ed00 	.word	0xe000ed00

0800bfdc <__NVIC_EnableIRQ>:
{
 800bfdc:	b480      	push	{r7}
 800bfde:	b083      	sub	sp, #12
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	4603      	mov	r3, r0
 800bfe4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bfe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	db0b      	blt.n	800c006 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800bfee:	79fb      	ldrb	r3, [r7, #7]
 800bff0:	f003 021f 	and.w	r2, r3, #31
 800bff4:	4907      	ldr	r1, [pc, #28]	; (800c014 <__NVIC_EnableIRQ+0x38>)
 800bff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bffa:	095b      	lsrs	r3, r3, #5
 800bffc:	2001      	movs	r0, #1
 800bffe:	fa00 f202 	lsl.w	r2, r0, r2
 800c002:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800c006:	bf00      	nop
 800c008:	370c      	adds	r7, #12
 800c00a:	46bd      	mov	sp, r7
 800c00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c010:	4770      	bx	lr
 800c012:	bf00      	nop
 800c014:	e000e100 	.word	0xe000e100

0800c018 <__NVIC_DisableIRQ>:
{
 800c018:	b480      	push	{r7}
 800c01a:	b083      	sub	sp, #12
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	4603      	mov	r3, r0
 800c020:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c026:	2b00      	cmp	r3, #0
 800c028:	db12      	blt.n	800c050 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c02a:	79fb      	ldrb	r3, [r7, #7]
 800c02c:	f003 021f 	and.w	r2, r3, #31
 800c030:	490a      	ldr	r1, [pc, #40]	; (800c05c <__NVIC_DisableIRQ+0x44>)
 800c032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c036:	095b      	lsrs	r3, r3, #5
 800c038:	2001      	movs	r0, #1
 800c03a:	fa00 f202 	lsl.w	r2, r0, r2
 800c03e:	3320      	adds	r3, #32
 800c040:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800c044:	f3bf 8f4f 	dsb	sy
}
 800c048:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800c04a:	f3bf 8f6f 	isb	sy
}
 800c04e:	bf00      	nop
}
 800c050:	bf00      	nop
 800c052:	370c      	adds	r7, #12
 800c054:	46bd      	mov	sp, r7
 800c056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c05a:	4770      	bx	lr
 800c05c:	e000e100 	.word	0xe000e100

0800c060 <__NVIC_SetPriority>:
{
 800c060:	b480      	push	{r7}
 800c062:	b083      	sub	sp, #12
 800c064:	af00      	add	r7, sp, #0
 800c066:	4603      	mov	r3, r0
 800c068:	6039      	str	r1, [r7, #0]
 800c06a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c06c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c070:	2b00      	cmp	r3, #0
 800c072:	db0a      	blt.n	800c08a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c074:	683b      	ldr	r3, [r7, #0]
 800c076:	b2da      	uxtb	r2, r3
 800c078:	490c      	ldr	r1, [pc, #48]	; (800c0ac <__NVIC_SetPriority+0x4c>)
 800c07a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c07e:	0112      	lsls	r2, r2, #4
 800c080:	b2d2      	uxtb	r2, r2
 800c082:	440b      	add	r3, r1
 800c084:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800c088:	e00a      	b.n	800c0a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c08a:	683b      	ldr	r3, [r7, #0]
 800c08c:	b2da      	uxtb	r2, r3
 800c08e:	4908      	ldr	r1, [pc, #32]	; (800c0b0 <__NVIC_SetPriority+0x50>)
 800c090:	79fb      	ldrb	r3, [r7, #7]
 800c092:	f003 030f 	and.w	r3, r3, #15
 800c096:	3b04      	subs	r3, #4
 800c098:	0112      	lsls	r2, r2, #4
 800c09a:	b2d2      	uxtb	r2, r2
 800c09c:	440b      	add	r3, r1
 800c09e:	761a      	strb	r2, [r3, #24]
}
 800c0a0:	bf00      	nop
 800c0a2:	370c      	adds	r7, #12
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0aa:	4770      	bx	lr
 800c0ac:	e000e100 	.word	0xe000e100
 800c0b0:	e000ed00 	.word	0xe000ed00

0800c0b4 <NVIC_EncodePriority>:
{
 800c0b4:	b480      	push	{r7}
 800c0b6:	b089      	sub	sp, #36	; 0x24
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	60f8      	str	r0, [r7, #12]
 800c0bc:	60b9      	str	r1, [r7, #8]
 800c0be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	f003 0307 	and.w	r3, r3, #7
 800c0c6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800c0c8:	69fb      	ldr	r3, [r7, #28]
 800c0ca:	f1c3 0307 	rsb	r3, r3, #7
 800c0ce:	2b04      	cmp	r3, #4
 800c0d0:	bf28      	it	cs
 800c0d2:	2304      	movcs	r3, #4
 800c0d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800c0d6:	69fb      	ldr	r3, [r7, #28]
 800c0d8:	3304      	adds	r3, #4
 800c0da:	2b06      	cmp	r3, #6
 800c0dc:	d902      	bls.n	800c0e4 <NVIC_EncodePriority+0x30>
 800c0de:	69fb      	ldr	r3, [r7, #28]
 800c0e0:	3b03      	subs	r3, #3
 800c0e2:	e000      	b.n	800c0e6 <NVIC_EncodePriority+0x32>
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c0e8:	f04f 32ff 	mov.w	r2, #4294967295
 800c0ec:	69bb      	ldr	r3, [r7, #24]
 800c0ee:	fa02 f303 	lsl.w	r3, r2, r3
 800c0f2:	43da      	mvns	r2, r3
 800c0f4:	68bb      	ldr	r3, [r7, #8]
 800c0f6:	401a      	ands	r2, r3
 800c0f8:	697b      	ldr	r3, [r7, #20]
 800c0fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800c0fc:	f04f 31ff 	mov.w	r1, #4294967295
 800c100:	697b      	ldr	r3, [r7, #20]
 800c102:	fa01 f303 	lsl.w	r3, r1, r3
 800c106:	43d9      	mvns	r1, r3
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c10c:	4313      	orrs	r3, r2
}
 800c10e:	4618      	mov	r0, r3
 800c110:	3724      	adds	r7, #36	; 0x24
 800c112:	46bd      	mov	sp, r7
 800c114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c118:	4770      	bx	lr
	...

0800c11c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b082      	sub	sp, #8
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	3b01      	subs	r3, #1
 800c128:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c12c:	d301      	bcc.n	800c132 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800c12e:	2301      	movs	r3, #1
 800c130:	e00f      	b.n	800c152 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800c132:	4a0a      	ldr	r2, [pc, #40]	; (800c15c <SysTick_Config+0x40>)
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	3b01      	subs	r3, #1
 800c138:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800c13a:	210f      	movs	r1, #15
 800c13c:	f04f 30ff 	mov.w	r0, #4294967295
 800c140:	f7ff ff8e 	bl	800c060 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800c144:	4b05      	ldr	r3, [pc, #20]	; (800c15c <SysTick_Config+0x40>)
 800c146:	2200      	movs	r2, #0
 800c148:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800c14a:	4b04      	ldr	r3, [pc, #16]	; (800c15c <SysTick_Config+0x40>)
 800c14c:	2207      	movs	r2, #7
 800c14e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800c150:	2300      	movs	r3, #0
}
 800c152:	4618      	mov	r0, r3
 800c154:	3708      	adds	r7, #8
 800c156:	46bd      	mov	sp, r7
 800c158:	bd80      	pop	{r7, pc}
 800c15a:	bf00      	nop
 800c15c:	e000e010 	.word	0xe000e010

0800c160 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c160:	b580      	push	{r7, lr}
 800c162:	b082      	sub	sp, #8
 800c164:	af00      	add	r7, sp, #0
 800c166:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	2b07      	cmp	r3, #7
 800c16c:	d00f      	beq.n	800c18e <HAL_NVIC_SetPriorityGrouping+0x2e>
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	2b06      	cmp	r3, #6
 800c172:	d00c      	beq.n	800c18e <HAL_NVIC_SetPriorityGrouping+0x2e>
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	2b05      	cmp	r3, #5
 800c178:	d009      	beq.n	800c18e <HAL_NVIC_SetPriorityGrouping+0x2e>
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	2b04      	cmp	r3, #4
 800c17e:	d006      	beq.n	800c18e <HAL_NVIC_SetPriorityGrouping+0x2e>
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	2b03      	cmp	r3, #3
 800c184:	d003      	beq.n	800c18e <HAL_NVIC_SetPriorityGrouping+0x2e>
 800c186:	21a6      	movs	r1, #166	; 0xa6
 800c188:	4804      	ldr	r0, [pc, #16]	; (800c19c <HAL_NVIC_SetPriorityGrouping+0x3c>)
 800c18a:	f7f8 fa03 	bl	8004594 <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800c18e:	6878      	ldr	r0, [r7, #4]
 800c190:	f7ff fef2 	bl	800bf78 <__NVIC_SetPriorityGrouping>
}
 800c194:	bf00      	nop
 800c196:	3708      	adds	r7, #8
 800c198:	46bd      	mov	sp, r7
 800c19a:	bd80      	pop	{r7, pc}
 800c19c:	08018c18 	.word	0x08018c18

0800c1a0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800c1a0:	b580      	push	{r7, lr}
 800c1a2:	b086      	sub	sp, #24
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	4603      	mov	r3, r0
 800c1a8:	60b9      	str	r1, [r7, #8]
 800c1aa:	607a      	str	r2, [r7, #4]
 800c1ac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	2b0f      	cmp	r3, #15
 800c1b6:	d903      	bls.n	800c1c0 <HAL_NVIC_SetPriority+0x20>
 800c1b8:	21be      	movs	r1, #190	; 0xbe
 800c1ba:	480e      	ldr	r0, [pc, #56]	; (800c1f4 <HAL_NVIC_SetPriority+0x54>)
 800c1bc:	f7f8 f9ea 	bl	8004594 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 800c1c0:	68bb      	ldr	r3, [r7, #8]
 800c1c2:	2b0f      	cmp	r3, #15
 800c1c4:	d903      	bls.n	800c1ce <HAL_NVIC_SetPriority+0x2e>
 800c1c6:	21bf      	movs	r1, #191	; 0xbf
 800c1c8:	480a      	ldr	r0, [pc, #40]	; (800c1f4 <HAL_NVIC_SetPriority+0x54>)
 800c1ca:	f7f8 f9e3 	bl	8004594 <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 800c1ce:	f7ff fef7 	bl	800bfc0 <__NVIC_GetPriorityGrouping>
 800c1d2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800c1d4:	687a      	ldr	r2, [r7, #4]
 800c1d6:	68b9      	ldr	r1, [r7, #8]
 800c1d8:	6978      	ldr	r0, [r7, #20]
 800c1da:	f7ff ff6b 	bl	800c0b4 <NVIC_EncodePriority>
 800c1de:	4602      	mov	r2, r0
 800c1e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c1e4:	4611      	mov	r1, r2
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	f7ff ff3a 	bl	800c060 <__NVIC_SetPriority>
}
 800c1ec:	bf00      	nop
 800c1ee:	3718      	adds	r7, #24
 800c1f0:	46bd      	mov	sp, r7
 800c1f2:	bd80      	pop	{r7, pc}
 800c1f4:	08018c18 	.word	0x08018c18

0800c1f8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c1f8:	b580      	push	{r7, lr}
 800c1fa:	b082      	sub	sp, #8
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	4603      	mov	r3, r0
 800c200:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800c202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c206:	2b00      	cmp	r3, #0
 800c208:	da03      	bge.n	800c212 <HAL_NVIC_EnableIRQ+0x1a>
 800c20a:	21d2      	movs	r1, #210	; 0xd2
 800c20c:	4805      	ldr	r0, [pc, #20]	; (800c224 <HAL_NVIC_EnableIRQ+0x2c>)
 800c20e:	f7f8 f9c1 	bl	8004594 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800c212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c216:	4618      	mov	r0, r3
 800c218:	f7ff fee0 	bl	800bfdc <__NVIC_EnableIRQ>
}
 800c21c:	bf00      	nop
 800c21e:	3708      	adds	r7, #8
 800c220:	46bd      	mov	sp, r7
 800c222:	bd80      	pop	{r7, pc}
 800c224:	08018c18 	.word	0x08018c18

0800c228 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800c228:	b580      	push	{r7, lr}
 800c22a:	b082      	sub	sp, #8
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	4603      	mov	r3, r0
 800c230:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800c232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c236:	2b00      	cmp	r3, #0
 800c238:	da03      	bge.n	800c242 <HAL_NVIC_DisableIRQ+0x1a>
 800c23a:	21e2      	movs	r1, #226	; 0xe2
 800c23c:	4805      	ldr	r0, [pc, #20]	; (800c254 <HAL_NVIC_DisableIRQ+0x2c>)
 800c23e:	f7f8 f9a9 	bl	8004594 <assert_failed>
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800c242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c246:	4618      	mov	r0, r3
 800c248:	f7ff fee6 	bl	800c018 <__NVIC_DisableIRQ>
}
 800c24c:	bf00      	nop
 800c24e:	3708      	adds	r7, #8
 800c250:	46bd      	mov	sp, r7
 800c252:	bd80      	pop	{r7, pc}
 800c254:	08018c18 	.word	0x08018c18

0800c258 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800c258:	b580      	push	{r7, lr}
 800c25a:	b082      	sub	sp, #8
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800c260:	6878      	ldr	r0, [r7, #4]
 800c262:	f7ff ff5b 	bl	800c11c <SysTick_Config>
 800c266:	4603      	mov	r3, r0
}
 800c268:	4618      	mov	r0, r3
 800c26a:	3708      	adds	r7, #8
 800c26c:	46bd      	mov	sp, r7
 800c26e:	bd80      	pop	{r7, pc}

0800c270 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800c270:	b580      	push	{r7, lr}
 800c272:	b084      	sub	sp, #16
 800c274:	af00      	add	r7, sp, #0
 800c276:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d101      	bne.n	800c282 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800c27e:	2301      	movs	r3, #1
 800c280:	e19d      	b.n	800c5be <HAL_DMA_Init+0x34e>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	4a79      	ldr	r2, [pc, #484]	; (800c46c <HAL_DMA_Init+0x1fc>)
 800c288:	4293      	cmp	r3, r2
 800c28a:	d044      	beq.n	800c316 <HAL_DMA_Init+0xa6>
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	4a77      	ldr	r2, [pc, #476]	; (800c470 <HAL_DMA_Init+0x200>)
 800c292:	4293      	cmp	r3, r2
 800c294:	d03f      	beq.n	800c316 <HAL_DMA_Init+0xa6>
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	4a76      	ldr	r2, [pc, #472]	; (800c474 <HAL_DMA_Init+0x204>)
 800c29c:	4293      	cmp	r3, r2
 800c29e:	d03a      	beq.n	800c316 <HAL_DMA_Init+0xa6>
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	4a74      	ldr	r2, [pc, #464]	; (800c478 <HAL_DMA_Init+0x208>)
 800c2a6:	4293      	cmp	r3, r2
 800c2a8:	d035      	beq.n	800c316 <HAL_DMA_Init+0xa6>
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	4a73      	ldr	r2, [pc, #460]	; (800c47c <HAL_DMA_Init+0x20c>)
 800c2b0:	4293      	cmp	r3, r2
 800c2b2:	d030      	beq.n	800c316 <HAL_DMA_Init+0xa6>
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	4a71      	ldr	r2, [pc, #452]	; (800c480 <HAL_DMA_Init+0x210>)
 800c2ba:	4293      	cmp	r3, r2
 800c2bc:	d02b      	beq.n	800c316 <HAL_DMA_Init+0xa6>
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	4a70      	ldr	r2, [pc, #448]	; (800c484 <HAL_DMA_Init+0x214>)
 800c2c4:	4293      	cmp	r3, r2
 800c2c6:	d026      	beq.n	800c316 <HAL_DMA_Init+0xa6>
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	4a6e      	ldr	r2, [pc, #440]	; (800c488 <HAL_DMA_Init+0x218>)
 800c2ce:	4293      	cmp	r3, r2
 800c2d0:	d021      	beq.n	800c316 <HAL_DMA_Init+0xa6>
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	4a6d      	ldr	r2, [pc, #436]	; (800c48c <HAL_DMA_Init+0x21c>)
 800c2d8:	4293      	cmp	r3, r2
 800c2da:	d01c      	beq.n	800c316 <HAL_DMA_Init+0xa6>
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	4a6b      	ldr	r2, [pc, #428]	; (800c490 <HAL_DMA_Init+0x220>)
 800c2e2:	4293      	cmp	r3, r2
 800c2e4:	d017      	beq.n	800c316 <HAL_DMA_Init+0xa6>
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	4a6a      	ldr	r2, [pc, #424]	; (800c494 <HAL_DMA_Init+0x224>)
 800c2ec:	4293      	cmp	r3, r2
 800c2ee:	d012      	beq.n	800c316 <HAL_DMA_Init+0xa6>
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	4a68      	ldr	r2, [pc, #416]	; (800c498 <HAL_DMA_Init+0x228>)
 800c2f6:	4293      	cmp	r3, r2
 800c2f8:	d00d      	beq.n	800c316 <HAL_DMA_Init+0xa6>
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	4a67      	ldr	r2, [pc, #412]	; (800c49c <HAL_DMA_Init+0x22c>)
 800c300:	4293      	cmp	r3, r2
 800c302:	d008      	beq.n	800c316 <HAL_DMA_Init+0xa6>
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	4a65      	ldr	r2, [pc, #404]	; (800c4a0 <HAL_DMA_Init+0x230>)
 800c30a:	4293      	cmp	r3, r2
 800c30c:	d003      	beq.n	800c316 <HAL_DMA_Init+0xa6>
 800c30e:	21a5      	movs	r1, #165	; 0xa5
 800c310:	4864      	ldr	r0, [pc, #400]	; (800c4a4 <HAL_DMA_Init+0x234>)
 800c312:	f7f8 f93f 	bl	8004594 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	689b      	ldr	r3, [r3, #8]
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d00c      	beq.n	800c338 <HAL_DMA_Init+0xc8>
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	689b      	ldr	r3, [r3, #8]
 800c322:	2b10      	cmp	r3, #16
 800c324:	d008      	beq.n	800c338 <HAL_DMA_Init+0xc8>
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	689b      	ldr	r3, [r3, #8]
 800c32a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c32e:	d003      	beq.n	800c338 <HAL_DMA_Init+0xc8>
 800c330:	21a6      	movs	r1, #166	; 0xa6
 800c332:	485c      	ldr	r0, [pc, #368]	; (800c4a4 <HAL_DMA_Init+0x234>)
 800c334:	f7f8 f92e 	bl	8004594 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	68db      	ldr	r3, [r3, #12]
 800c33c:	2b40      	cmp	r3, #64	; 0x40
 800c33e:	d007      	beq.n	800c350 <HAL_DMA_Init+0xe0>
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	68db      	ldr	r3, [r3, #12]
 800c344:	2b00      	cmp	r3, #0
 800c346:	d003      	beq.n	800c350 <HAL_DMA_Init+0xe0>
 800c348:	21a7      	movs	r1, #167	; 0xa7
 800c34a:	4856      	ldr	r0, [pc, #344]	; (800c4a4 <HAL_DMA_Init+0x234>)
 800c34c:	f7f8 f922 	bl	8004594 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	691b      	ldr	r3, [r3, #16]
 800c354:	2b80      	cmp	r3, #128	; 0x80
 800c356:	d007      	beq.n	800c368 <HAL_DMA_Init+0xf8>
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	691b      	ldr	r3, [r3, #16]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d003      	beq.n	800c368 <HAL_DMA_Init+0xf8>
 800c360:	21a8      	movs	r1, #168	; 0xa8
 800c362:	4850      	ldr	r0, [pc, #320]	; (800c4a4 <HAL_DMA_Init+0x234>)
 800c364:	f7f8 f916 	bl	8004594 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	695b      	ldr	r3, [r3, #20]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d00d      	beq.n	800c38c <HAL_DMA_Init+0x11c>
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	695b      	ldr	r3, [r3, #20]
 800c374:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c378:	d008      	beq.n	800c38c <HAL_DMA_Init+0x11c>
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	695b      	ldr	r3, [r3, #20]
 800c37e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c382:	d003      	beq.n	800c38c <HAL_DMA_Init+0x11c>
 800c384:	21a9      	movs	r1, #169	; 0xa9
 800c386:	4847      	ldr	r0, [pc, #284]	; (800c4a4 <HAL_DMA_Init+0x234>)
 800c388:	f7f8 f904 	bl	8004594 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	699b      	ldr	r3, [r3, #24]
 800c390:	2b00      	cmp	r3, #0
 800c392:	d00d      	beq.n	800c3b0 <HAL_DMA_Init+0x140>
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	699b      	ldr	r3, [r3, #24]
 800c398:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c39c:	d008      	beq.n	800c3b0 <HAL_DMA_Init+0x140>
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	699b      	ldr	r3, [r3, #24]
 800c3a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c3a6:	d003      	beq.n	800c3b0 <HAL_DMA_Init+0x140>
 800c3a8:	21aa      	movs	r1, #170	; 0xaa
 800c3aa:	483e      	ldr	r0, [pc, #248]	; (800c4a4 <HAL_DMA_Init+0x234>)
 800c3ac:	f7f8 f8f2 	bl	8004594 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	69db      	ldr	r3, [r3, #28]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d007      	beq.n	800c3c8 <HAL_DMA_Init+0x158>
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	69db      	ldr	r3, [r3, #28]
 800c3bc:	2b20      	cmp	r3, #32
 800c3be:	d003      	beq.n	800c3c8 <HAL_DMA_Init+0x158>
 800c3c0:	21ab      	movs	r1, #171	; 0xab
 800c3c2:	4838      	ldr	r0, [pc, #224]	; (800c4a4 <HAL_DMA_Init+0x234>)
 800c3c4:	f7f8 f8e6 	bl	8004594 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	6a1b      	ldr	r3, [r3, #32]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d012      	beq.n	800c3f6 <HAL_DMA_Init+0x186>
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	6a1b      	ldr	r3, [r3, #32]
 800c3d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c3d8:	d00d      	beq.n	800c3f6 <HAL_DMA_Init+0x186>
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	6a1b      	ldr	r3, [r3, #32]
 800c3de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c3e2:	d008      	beq.n	800c3f6 <HAL_DMA_Init+0x186>
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	6a1b      	ldr	r3, [r3, #32]
 800c3e8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c3ec:	d003      	beq.n	800c3f6 <HAL_DMA_Init+0x186>
 800c3ee:	21ac      	movs	r1, #172	; 0xac
 800c3f0:	482c      	ldr	r0, [pc, #176]	; (800c4a4 <HAL_DMA_Init+0x234>)
 800c3f2:	f7f8 f8cf 	bl	8004594 <assert_failed>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	685b      	ldr	r3, [r3, #4]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d01f      	beq.n	800c43e <HAL_DMA_Init+0x1ce>
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	685b      	ldr	r3, [r3, #4]
 800c402:	2b01      	cmp	r3, #1
 800c404:	d01b      	beq.n	800c43e <HAL_DMA_Init+0x1ce>
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	685b      	ldr	r3, [r3, #4]
 800c40a:	2b02      	cmp	r3, #2
 800c40c:	d017      	beq.n	800c43e <HAL_DMA_Init+0x1ce>
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	685b      	ldr	r3, [r3, #4]
 800c412:	2b03      	cmp	r3, #3
 800c414:	d013      	beq.n	800c43e <HAL_DMA_Init+0x1ce>
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	685b      	ldr	r3, [r3, #4]
 800c41a:	2b04      	cmp	r3, #4
 800c41c:	d00f      	beq.n	800c43e <HAL_DMA_Init+0x1ce>
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	685b      	ldr	r3, [r3, #4]
 800c422:	2b05      	cmp	r3, #5
 800c424:	d00b      	beq.n	800c43e <HAL_DMA_Init+0x1ce>
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	685b      	ldr	r3, [r3, #4]
 800c42a:	2b06      	cmp	r3, #6
 800c42c:	d007      	beq.n	800c43e <HAL_DMA_Init+0x1ce>
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	685b      	ldr	r3, [r3, #4]
 800c432:	2b07      	cmp	r3, #7
 800c434:	d003      	beq.n	800c43e <HAL_DMA_Init+0x1ce>
 800c436:	21ae      	movs	r1, #174	; 0xae
 800c438:	481a      	ldr	r0, [pc, #104]	; (800c4a4 <HAL_DMA_Init+0x234>)
 800c43a:	f7f8 f8ab 	bl	8004594 <assert_failed>

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	461a      	mov	r2, r3
 800c444:	4b18      	ldr	r3, [pc, #96]	; (800c4a8 <HAL_DMA_Init+0x238>)
 800c446:	429a      	cmp	r2, r3
 800c448:	d836      	bhi.n	800c4b8 <HAL_DMA_Init+0x248>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	461a      	mov	r2, r3
 800c450:	4b16      	ldr	r3, [pc, #88]	; (800c4ac <HAL_DMA_Init+0x23c>)
 800c452:	4413      	add	r3, r2
 800c454:	4a16      	ldr	r2, [pc, #88]	; (800c4b0 <HAL_DMA_Init+0x240>)
 800c456:	fba2 2303 	umull	r2, r3, r2, r3
 800c45a:	091b      	lsrs	r3, r3, #4
 800c45c:	009a      	lsls	r2, r3, #2
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	4a13      	ldr	r2, [pc, #76]	; (800c4b4 <HAL_DMA_Init+0x244>)
 800c466:	641a      	str	r2, [r3, #64]	; 0x40
 800c468:	e035      	b.n	800c4d6 <HAL_DMA_Init+0x266>
 800c46a:	bf00      	nop
 800c46c:	40020008 	.word	0x40020008
 800c470:	4002001c 	.word	0x4002001c
 800c474:	40020030 	.word	0x40020030
 800c478:	40020044 	.word	0x40020044
 800c47c:	40020058 	.word	0x40020058
 800c480:	4002006c 	.word	0x4002006c
 800c484:	40020080 	.word	0x40020080
 800c488:	40020408 	.word	0x40020408
 800c48c:	4002041c 	.word	0x4002041c
 800c490:	40020430 	.word	0x40020430
 800c494:	40020444 	.word	0x40020444
 800c498:	40020458 	.word	0x40020458
 800c49c:	4002046c 	.word	0x4002046c
 800c4a0:	40020480 	.word	0x40020480
 800c4a4:	08018c54 	.word	0x08018c54
 800c4a8:	40020407 	.word	0x40020407
 800c4ac:	bffdfff8 	.word	0xbffdfff8
 800c4b0:	cccccccd 	.word	0xcccccccd
 800c4b4:	40020000 	.word	0x40020000
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	461a      	mov	r2, r3
 800c4be:	4b42      	ldr	r3, [pc, #264]	; (800c5c8 <HAL_DMA_Init+0x358>)
 800c4c0:	4413      	add	r3, r2
 800c4c2:	4a42      	ldr	r2, [pc, #264]	; (800c5cc <HAL_DMA_Init+0x35c>)
 800c4c4:	fba2 2303 	umull	r2, r3, r2, r3
 800c4c8:	091b      	lsrs	r3, r3, #4
 800c4ca:	009a      	lsls	r2, r3, #2
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	4a3f      	ldr	r2, [pc, #252]	; (800c5d0 <HAL_DMA_Init+0x360>)
 800c4d4:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	2202      	movs	r2, #2
 800c4da:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800c4ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c4f0:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800c4fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	691b      	ldr	r3, [r3, #16]
 800c500:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c506:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	699b      	ldr	r3, [r3, #24]
 800c50c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c512:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	6a1b      	ldr	r3, [r3, #32]
 800c518:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800c51a:	68fa      	ldr	r2, [r7, #12]
 800c51c:	4313      	orrs	r3, r2
 800c51e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	68fa      	ldr	r2, [r7, #12]
 800c526:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	689b      	ldr	r3, [r3, #8]
 800c52c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c530:	d039      	beq.n	800c5a6 <HAL_DMA_Init+0x336>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c536:	4a27      	ldr	r2, [pc, #156]	; (800c5d4 <HAL_DMA_Init+0x364>)
 800c538:	4293      	cmp	r3, r2
 800c53a:	d11a      	bne.n	800c572 <HAL_DMA_Init+0x302>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800c53c:	4b26      	ldr	r3, [pc, #152]	; (800c5d8 <HAL_DMA_Init+0x368>)
 800c53e:	681a      	ldr	r2, [r3, #0]
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c544:	f003 031c 	and.w	r3, r3, #28
 800c548:	210f      	movs	r1, #15
 800c54a:	fa01 f303 	lsl.w	r3, r1, r3
 800c54e:	43db      	mvns	r3, r3
 800c550:	4921      	ldr	r1, [pc, #132]	; (800c5d8 <HAL_DMA_Init+0x368>)
 800c552:	4013      	ands	r3, r2
 800c554:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800c556:	4b20      	ldr	r3, [pc, #128]	; (800c5d8 <HAL_DMA_Init+0x368>)
 800c558:	681a      	ldr	r2, [r3, #0]
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	6859      	ldr	r1, [r3, #4]
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c562:	f003 031c 	and.w	r3, r3, #28
 800c566:	fa01 f303 	lsl.w	r3, r1, r3
 800c56a:	491b      	ldr	r1, [pc, #108]	; (800c5d8 <HAL_DMA_Init+0x368>)
 800c56c:	4313      	orrs	r3, r2
 800c56e:	600b      	str	r3, [r1, #0]
 800c570:	e019      	b.n	800c5a6 <HAL_DMA_Init+0x336>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800c572:	4b1a      	ldr	r3, [pc, #104]	; (800c5dc <HAL_DMA_Init+0x36c>)
 800c574:	681a      	ldr	r2, [r3, #0]
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c57a:	f003 031c 	and.w	r3, r3, #28
 800c57e:	210f      	movs	r1, #15
 800c580:	fa01 f303 	lsl.w	r3, r1, r3
 800c584:	43db      	mvns	r3, r3
 800c586:	4915      	ldr	r1, [pc, #84]	; (800c5dc <HAL_DMA_Init+0x36c>)
 800c588:	4013      	ands	r3, r2
 800c58a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800c58c:	4b13      	ldr	r3, [pc, #76]	; (800c5dc <HAL_DMA_Init+0x36c>)
 800c58e:	681a      	ldr	r2, [r3, #0]
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	6859      	ldr	r1, [r3, #4]
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c598:	f003 031c 	and.w	r3, r3, #28
 800c59c:	fa01 f303 	lsl.w	r3, r1, r3
 800c5a0:	490e      	ldr	r1, [pc, #56]	; (800c5dc <HAL_DMA_Init+0x36c>)
 800c5a2:	4313      	orrs	r3, r2
 800c5a4:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	2200      	movs	r2, #0
 800c5aa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	2201      	movs	r2, #1
 800c5b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	2200      	movs	r2, #0
 800c5b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800c5bc:	2300      	movs	r3, #0
}
 800c5be:	4618      	mov	r0, r3
 800c5c0:	3710      	adds	r7, #16
 800c5c2:	46bd      	mov	sp, r7
 800c5c4:	bd80      	pop	{r7, pc}
 800c5c6:	bf00      	nop
 800c5c8:	bffdfbf8 	.word	0xbffdfbf8
 800c5cc:	cccccccd 	.word	0xcccccccd
 800c5d0:	40020400 	.word	0x40020400
 800c5d4:	40020000 	.word	0x40020000
 800c5d8:	400200a8 	.word	0x400200a8
 800c5dc:	400204a8 	.word	0x400204a8

0800c5e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800c5e0:	b580      	push	{r7, lr}
 800c5e2:	b086      	sub	sp, #24
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	60f8      	str	r0, [r7, #12]
 800c5e8:	60b9      	str	r1, [r7, #8]
 800c5ea:	607a      	str	r2, [r7, #4]
 800c5ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 800c5f2:	683b      	ldr	r3, [r7, #0]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d003      	beq.n	800c600 <HAL_DMA_Start_IT+0x20>
 800c5f8:	683b      	ldr	r3, [r7, #0]
 800c5fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c5fe:	d304      	bcc.n	800c60a <HAL_DMA_Start_IT+0x2a>
 800c600:	f240 11df 	movw	r1, #479	; 0x1df
 800c604:	482c      	ldr	r0, [pc, #176]	; (800c6b8 <HAL_DMA_Start_IT+0xd8>)
 800c606:	f7f7 ffc5 	bl	8004594 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdma);
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c610:	2b01      	cmp	r3, #1
 800c612:	d101      	bne.n	800c618 <HAL_DMA_Start_IT+0x38>
 800c614:	2302      	movs	r3, #2
 800c616:	e04b      	b.n	800c6b0 <HAL_DMA_Start_IT+0xd0>
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	2201      	movs	r2, #1
 800c61c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800c626:	b2db      	uxtb	r3, r3
 800c628:	2b01      	cmp	r3, #1
 800c62a:	d13a      	bne.n	800c6a2 <HAL_DMA_Start_IT+0xc2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	2202      	movs	r2, #2
 800c630:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	2200      	movs	r2, #0
 800c638:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	681a      	ldr	r2, [r3, #0]
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	f022 0201 	bic.w	r2, r2, #1
 800c648:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800c64a:	683b      	ldr	r3, [r7, #0]
 800c64c:	687a      	ldr	r2, [r7, #4]
 800c64e:	68b9      	ldr	r1, [r7, #8]
 800c650:	68f8      	ldr	r0, [r7, #12]
 800c652:	f000 f96f 	bl	800c934 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d008      	beq.n	800c670 <HAL_DMA_Start_IT+0x90>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	681a      	ldr	r2, [r3, #0]
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	f042 020e 	orr.w	r2, r2, #14
 800c66c:	601a      	str	r2, [r3, #0]
 800c66e:	e00f      	b.n	800c690 <HAL_DMA_Start_IT+0xb0>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	681a      	ldr	r2, [r3, #0]
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	f022 0204 	bic.w	r2, r2, #4
 800c67e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	681a      	ldr	r2, [r3, #0]
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	f042 020a 	orr.w	r2, r2, #10
 800c68e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	681a      	ldr	r2, [r3, #0]
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	f042 0201 	orr.w	r2, r2, #1
 800c69e:	601a      	str	r2, [r3, #0]
 800c6a0:	e005      	b.n	800c6ae <HAL_DMA_Start_IT+0xce>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	2200      	movs	r2, #0
 800c6a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800c6aa:	2302      	movs	r3, #2
 800c6ac:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800c6ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800c6b0:	4618      	mov	r0, r3
 800c6b2:	3718      	adds	r7, #24
 800c6b4:	46bd      	mov	sp, r7
 800c6b6:	bd80      	pop	{r7, pc}
 800c6b8:	08018c54 	.word	0x08018c54

0800c6bc <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800c6bc:	b480      	push	{r7}
 800c6be:	b085      	sub	sp, #20
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c6c4:	2300      	movs	r3, #0
 800c6c6:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800c6ce:	b2db      	uxtb	r3, r3
 800c6d0:	2b02      	cmp	r3, #2
 800c6d2:	d008      	beq.n	800c6e6 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	2204      	movs	r2, #4
 800c6d8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	2200      	movs	r2, #0
 800c6de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800c6e2:	2301      	movs	r3, #1
 800c6e4:	e022      	b.n	800c72c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	681a      	ldr	r2, [r3, #0]
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	f022 020e 	bic.w	r2, r2, #14
 800c6f4:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	681a      	ldr	r2, [r3, #0]
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	f022 0201 	bic.w	r2, r2, #1
 800c704:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c70a:	f003 021c 	and.w	r2, r3, #28
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c712:	2101      	movs	r1, #1
 800c714:	fa01 f202 	lsl.w	r2, r1, r2
 800c718:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	2201      	movs	r2, #1
 800c71e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	2200      	movs	r2, #0
 800c726:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800c72a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800c72c:	4618      	mov	r0, r3
 800c72e:	3714      	adds	r7, #20
 800c730:	46bd      	mov	sp, r7
 800c732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c736:	4770      	bx	lr

0800c738 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800c738:	b580      	push	{r7, lr}
 800c73a:	b084      	sub	sp, #16
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c740:	2300      	movs	r3, #0
 800c742:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800c74a:	b2db      	uxtb	r3, r3
 800c74c:	2b02      	cmp	r3, #2
 800c74e:	d005      	beq.n	800c75c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	2204      	movs	r2, #4
 800c754:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800c756:	2301      	movs	r3, #1
 800c758:	73fb      	strb	r3, [r7, #15]
 800c75a:	e029      	b.n	800c7b0 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	681a      	ldr	r2, [r3, #0]
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	f022 020e 	bic.w	r2, r2, #14
 800c76a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	681a      	ldr	r2, [r3, #0]
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	f022 0201 	bic.w	r2, r2, #1
 800c77a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c780:	f003 021c 	and.w	r2, r3, #28
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c788:	2101      	movs	r1, #1
 800c78a:	fa01 f202 	lsl.w	r2, r1, r2
 800c78e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	2201      	movs	r2, #1
 800c794:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	2200      	movs	r2, #0
 800c79c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d003      	beq.n	800c7b0 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7ac:	6878      	ldr	r0, [r7, #4]
 800c7ae:	4798      	blx	r3
    }
  }
  return status;
 800c7b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	3710      	adds	r7, #16
 800c7b6:	46bd      	mov	sp, r7
 800c7b8:	bd80      	pop	{r7, pc}

0800c7ba <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800c7ba:	b580      	push	{r7, lr}
 800c7bc:	b084      	sub	sp, #16
 800c7be:	af00      	add	r7, sp, #0
 800c7c0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c7d6:	f003 031c 	and.w	r3, r3, #28
 800c7da:	2204      	movs	r2, #4
 800c7dc:	409a      	lsls	r2, r3
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	4013      	ands	r3, r2
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d026      	beq.n	800c834 <HAL_DMA_IRQHandler+0x7a>
 800c7e6:	68bb      	ldr	r3, [r7, #8]
 800c7e8:	f003 0304 	and.w	r3, r3, #4
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d021      	beq.n	800c834 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	f003 0320 	and.w	r3, r3, #32
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d107      	bne.n	800c80e <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	681a      	ldr	r2, [r3, #0]
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	f022 0204 	bic.w	r2, r2, #4
 800c80c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c812:	f003 021c 	and.w	r2, r3, #28
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c81a:	2104      	movs	r1, #4
 800c81c:	fa01 f202 	lsl.w	r2, r1, r2
 800c820:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c826:	2b00      	cmp	r3, #0
 800c828:	d071      	beq.n	800c90e <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c82e:	6878      	ldr	r0, [r7, #4]
 800c830:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800c832:	e06c      	b.n	800c90e <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c838:	f003 031c 	and.w	r3, r3, #28
 800c83c:	2202      	movs	r2, #2
 800c83e:	409a      	lsls	r2, r3
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	4013      	ands	r3, r2
 800c844:	2b00      	cmp	r3, #0
 800c846:	d02e      	beq.n	800c8a6 <HAL_DMA_IRQHandler+0xec>
 800c848:	68bb      	ldr	r3, [r7, #8]
 800c84a:	f003 0302 	and.w	r3, r3, #2
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d029      	beq.n	800c8a6 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	f003 0320 	and.w	r3, r3, #32
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d10b      	bne.n	800c878 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	681a      	ldr	r2, [r3, #0]
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	f022 020a 	bic.w	r2, r2, #10
 800c86e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	2201      	movs	r2, #1
 800c874:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c87c:	f003 021c 	and.w	r2, r3, #28
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c884:	2102      	movs	r1, #2
 800c886:	fa01 f202 	lsl.w	r2, r1, r2
 800c88a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	2200      	movs	r2, #0
 800c890:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d038      	beq.n	800c90e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8a0:	6878      	ldr	r0, [r7, #4]
 800c8a2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800c8a4:	e033      	b.n	800c90e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c8aa:	f003 031c 	and.w	r3, r3, #28
 800c8ae:	2208      	movs	r2, #8
 800c8b0:	409a      	lsls	r2, r3
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	4013      	ands	r3, r2
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d02a      	beq.n	800c910 <HAL_DMA_IRQHandler+0x156>
 800c8ba:	68bb      	ldr	r3, [r7, #8]
 800c8bc:	f003 0308 	and.w	r3, r3, #8
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d025      	beq.n	800c910 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	681a      	ldr	r2, [r3, #0]
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	f022 020e 	bic.w	r2, r2, #14
 800c8d2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c8d8:	f003 021c 	and.w	r2, r3, #28
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8e0:	2101      	movs	r1, #1
 800c8e2:	fa01 f202 	lsl.w	r2, r1, r2
 800c8e6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	2201      	movs	r2, #1
 800c8ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	2201      	movs	r2, #1
 800c8f2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	2200      	movs	r2, #0
 800c8fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c902:	2b00      	cmp	r3, #0
 800c904:	d004      	beq.n	800c910 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c90a:	6878      	ldr	r0, [r7, #4]
 800c90c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800c90e:	bf00      	nop
 800c910:	bf00      	nop
}
 800c912:	3710      	adds	r7, #16
 800c914:	46bd      	mov	sp, r7
 800c916:	bd80      	pop	{r7, pc}

0800c918 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800c918:	b480      	push	{r7}
 800c91a:	b083      	sub	sp, #12
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800c926:	b2db      	uxtb	r3, r3
}
 800c928:	4618      	mov	r0, r3
 800c92a:	370c      	adds	r7, #12
 800c92c:	46bd      	mov	sp, r7
 800c92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c932:	4770      	bx	lr

0800c934 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800c934:	b480      	push	{r7}
 800c936:	b085      	sub	sp, #20
 800c938:	af00      	add	r7, sp, #0
 800c93a:	60f8      	str	r0, [r7, #12]
 800c93c:	60b9      	str	r1, [r7, #8]
 800c93e:	607a      	str	r2, [r7, #4]
 800c940:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c946:	f003 021c 	and.w	r2, r3, #28
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c94e:	2101      	movs	r1, #1
 800c950:	fa01 f202 	lsl.w	r2, r1, r2
 800c954:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	683a      	ldr	r2, [r7, #0]
 800c95c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	689b      	ldr	r3, [r3, #8]
 800c962:	2b10      	cmp	r3, #16
 800c964:	d108      	bne.n	800c978 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	687a      	ldr	r2, [r7, #4]
 800c96c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	68ba      	ldr	r2, [r7, #8]
 800c974:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800c976:	e007      	b.n	800c988 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	68ba      	ldr	r2, [r7, #8]
 800c97e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	687a      	ldr	r2, [r7, #4]
 800c986:	60da      	str	r2, [r3, #12]
}
 800c988:	bf00      	nop
 800c98a:	3714      	adds	r7, #20
 800c98c:	46bd      	mov	sp, r7
 800c98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c992:	4770      	bx	lr

0800c994 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800c994:	b580      	push	{r7, lr}
 800c996:	b086      	sub	sp, #24
 800c998:	af00      	add	r7, sp, #0
 800c99a:	60f8      	str	r0, [r7, #12]
 800c99c:	60b9      	str	r1, [r7, #8]
 800c99e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800c9a6:	4b35      	ldr	r3, [pc, #212]	; (800ca7c <HAL_FLASH_Program+0xe8>)
 800c9a8:	781b      	ldrb	r3, [r3, #0]
 800c9aa:	2b01      	cmp	r3, #1
 800c9ac:	d101      	bne.n	800c9b2 <HAL_FLASH_Program+0x1e>
 800c9ae:	2302      	movs	r3, #2
 800c9b0:	e060      	b.n	800ca74 <HAL_FLASH_Program+0xe0>
 800c9b2:	4b32      	ldr	r3, [pc, #200]	; (800ca7c <HAL_FLASH_Program+0xe8>)
 800c9b4:	2201      	movs	r2, #1
 800c9b6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d009      	beq.n	800c9d2 <HAL_FLASH_Program+0x3e>
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	2b01      	cmp	r3, #1
 800c9c2:	d006      	beq.n	800c9d2 <HAL_FLASH_Program+0x3e>
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	2b02      	cmp	r3, #2
 800c9c8:	d003      	beq.n	800c9d2 <HAL_FLASH_Program+0x3e>
 800c9ca:	21b2      	movs	r1, #178	; 0xb2
 800c9cc:	482c      	ldr	r0, [pc, #176]	; (800ca80 <HAL_FLASH_Program+0xec>)
 800c9ce:	f7f7 fde1 	bl	8004594 <assert_failed>

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c9d2:	f24c 3050 	movw	r0, #50000	; 0xc350
 800c9d6:	f000 f889 	bl	800caec <FLASH_WaitForLastOperation>
 800c9da:	4603      	mov	r3, r0
 800c9dc:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 800c9de:	7dfb      	ldrb	r3, [r7, #23]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d143      	bne.n	800ca6c <HAL_FLASH_Program+0xd8>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800c9e4:	4b25      	ldr	r3, [pc, #148]	; (800ca7c <HAL_FLASH_Program+0xe8>)
 800c9e6:	2200      	movs	r2, #0
 800c9e8:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800c9ea:	4b26      	ldr	r3, [pc, #152]	; (800ca84 <HAL_FLASH_Program+0xf0>)
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d009      	beq.n	800ca0a <HAL_FLASH_Program+0x76>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800c9f6:	4b23      	ldr	r3, [pc, #140]	; (800ca84 <HAL_FLASH_Program+0xf0>)
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	4a22      	ldr	r2, [pc, #136]	; (800ca84 <HAL_FLASH_Program+0xf0>)
 800c9fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ca00:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 800ca02:	4b1e      	ldr	r3, [pc, #120]	; (800ca7c <HAL_FLASH_Program+0xe8>)
 800ca04:	2202      	movs	r2, #2
 800ca06:	771a      	strb	r2, [r3, #28]
 800ca08:	e002      	b.n	800ca10 <HAL_FLASH_Program+0x7c>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800ca0a:	4b1c      	ldr	r3, [pc, #112]	; (800ca7c <HAL_FLASH_Program+0xe8>)
 800ca0c:	2200      	movs	r2, #0
 800ca0e:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d107      	bne.n	800ca26 <HAL_FLASH_Program+0x92>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800ca16:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca1a:	68b8      	ldr	r0, [r7, #8]
 800ca1c:	f000 f8be 	bl	800cb9c <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 800ca20:	2301      	movs	r3, #1
 800ca22:	613b      	str	r3, [r7, #16]
 800ca24:	e010      	b.n	800ca48 <HAL_FLASH_Program+0xb4>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	2b01      	cmp	r3, #1
 800ca2a:	d002      	beq.n	800ca32 <HAL_FLASH_Program+0x9e>
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	2b02      	cmp	r3, #2
 800ca30:	d10a      	bne.n	800ca48 <HAL_FLASH_Program+0xb4>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800ca32:	683b      	ldr	r3, [r7, #0]
 800ca34:	4619      	mov	r1, r3
 800ca36:	68b8      	ldr	r0, [r7, #8]
 800ca38:	f000 f926 	bl	800cc88 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	2b02      	cmp	r3, #2
 800ca40:	d102      	bne.n	800ca48 <HAL_FLASH_Program+0xb4>
      {
        prog_bit = FLASH_CR_FSTPG;
 800ca42:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800ca46:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800ca48:	f24c 3050 	movw	r0, #50000	; 0xc350
 800ca4c:	f000 f84e 	bl	800caec <FLASH_WaitForLastOperation>
 800ca50:	4603      	mov	r3, r0
 800ca52:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 800ca54:	693b      	ldr	r3, [r7, #16]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d006      	beq.n	800ca68 <HAL_FLASH_Program+0xd4>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 800ca5a:	4b0a      	ldr	r3, [pc, #40]	; (800ca84 <HAL_FLASH_Program+0xf0>)
 800ca5c:	695a      	ldr	r2, [r3, #20]
 800ca5e:	693b      	ldr	r3, [r7, #16]
 800ca60:	43db      	mvns	r3, r3
 800ca62:	4908      	ldr	r1, [pc, #32]	; (800ca84 <HAL_FLASH_Program+0xf0>)
 800ca64:	4013      	ands	r3, r2
 800ca66:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800ca68:	f000 faa4 	bl	800cfb4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800ca6c:	4b03      	ldr	r3, [pc, #12]	; (800ca7c <HAL_FLASH_Program+0xe8>)
 800ca6e:	2200      	movs	r2, #0
 800ca70:	701a      	strb	r2, [r3, #0]

  return status;
 800ca72:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca74:	4618      	mov	r0, r3
 800ca76:	3718      	adds	r7, #24
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	bd80      	pop	{r7, pc}
 800ca7c:	200014e4 	.word	0x200014e4
 800ca80:	08018c8c 	.word	0x08018c8c
 800ca84:	40022000 	.word	0x40022000

0800ca88 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800ca88:	b480      	push	{r7}
 800ca8a:	b083      	sub	sp, #12
 800ca8c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800ca8e:	2300      	movs	r3, #0
 800ca90:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800ca92:	4b0b      	ldr	r3, [pc, #44]	; (800cac0 <HAL_FLASH_Unlock+0x38>)
 800ca94:	695b      	ldr	r3, [r3, #20]
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	da0b      	bge.n	800cab2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800ca9a:	4b09      	ldr	r3, [pc, #36]	; (800cac0 <HAL_FLASH_Unlock+0x38>)
 800ca9c:	4a09      	ldr	r2, [pc, #36]	; (800cac4 <HAL_FLASH_Unlock+0x3c>)
 800ca9e:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800caa0:	4b07      	ldr	r3, [pc, #28]	; (800cac0 <HAL_FLASH_Unlock+0x38>)
 800caa2:	4a09      	ldr	r2, [pc, #36]	; (800cac8 <HAL_FLASH_Unlock+0x40>)
 800caa4:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800caa6:	4b06      	ldr	r3, [pc, #24]	; (800cac0 <HAL_FLASH_Unlock+0x38>)
 800caa8:	695b      	ldr	r3, [r3, #20]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	da01      	bge.n	800cab2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800caae:	2301      	movs	r3, #1
 800cab0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800cab2:	79fb      	ldrb	r3, [r7, #7]
}
 800cab4:	4618      	mov	r0, r3
 800cab6:	370c      	adds	r7, #12
 800cab8:	46bd      	mov	sp, r7
 800caba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cabe:	4770      	bx	lr
 800cac0:	40022000 	.word	0x40022000
 800cac4:	45670123 	.word	0x45670123
 800cac8:	cdef89ab 	.word	0xcdef89ab

0800cacc <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800cacc:	b480      	push	{r7}
 800cace:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800cad0:	4b05      	ldr	r3, [pc, #20]	; (800cae8 <HAL_FLASH_Lock+0x1c>)
 800cad2:	695b      	ldr	r3, [r3, #20]
 800cad4:	4a04      	ldr	r2, [pc, #16]	; (800cae8 <HAL_FLASH_Lock+0x1c>)
 800cad6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cada:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 800cadc:	2300      	movs	r3, #0
}
 800cade:	4618      	mov	r0, r3
 800cae0:	46bd      	mov	sp, r7
 800cae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae6:	4770      	bx	lr
 800cae8:	40022000 	.word	0x40022000

0800caec <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800caec:	b580      	push	{r7, lr}
 800caee:	b084      	sub	sp, #16
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 800caf4:	f7fc f9e0 	bl	8008eb8 <HAL_GetTick>
 800caf8:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800cafa:	e00d      	b.n	800cb18 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb02:	d009      	beq.n	800cb18 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 800cb04:	f7fc f9d8 	bl	8008eb8 <HAL_GetTick>
 800cb08:	4602      	mov	r2, r0
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	1ad3      	subs	r3, r2, r3
 800cb0e:	687a      	ldr	r2, [r7, #4]
 800cb10:	429a      	cmp	r2, r3
 800cb12:	d801      	bhi.n	800cb18 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 800cb14:	2303      	movs	r3, #3
 800cb16:	e036      	b.n	800cb86 <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800cb18:	4b1d      	ldr	r3, [pc, #116]	; (800cb90 <FLASH_WaitForLastOperation+0xa4>)
 800cb1a:	691b      	ldr	r3, [r3, #16]
 800cb1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d1eb      	bne.n	800cafc <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 800cb24:	4b1a      	ldr	r3, [pc, #104]	; (800cb90 <FLASH_WaitForLastOperation+0xa4>)
 800cb26:	691a      	ldr	r2, [r3, #16]
 800cb28:	4b1a      	ldr	r3, [pc, #104]	; (800cb94 <FLASH_WaitForLastOperation+0xa8>)
 800cb2a:	4013      	ands	r3, r2
 800cb2c:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 800cb2e:	68bb      	ldr	r3, [r7, #8]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d01e      	beq.n	800cb72 <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 800cb34:	4b18      	ldr	r3, [pc, #96]	; (800cb98 <FLASH_WaitForLastOperation+0xac>)
 800cb36:	685a      	ldr	r2, [r3, #4]
 800cb38:	68bb      	ldr	r3, [r7, #8]
 800cb3a:	4313      	orrs	r3, r2
 800cb3c:	4a16      	ldr	r2, [pc, #88]	; (800cb98 <FLASH_WaitForLastOperation+0xac>)
 800cb3e:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 800cb40:	68bb      	ldr	r3, [r7, #8]
 800cb42:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d007      	beq.n	800cb5a <FLASH_WaitForLastOperation+0x6e>
 800cb4a:	4b11      	ldr	r3, [pc, #68]	; (800cb90 <FLASH_WaitForLastOperation+0xa4>)
 800cb4c:	699a      	ldr	r2, [r3, #24]
 800cb4e:	68bb      	ldr	r3, [r7, #8]
 800cb50:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800cb54:	490e      	ldr	r1, [pc, #56]	; (800cb90 <FLASH_WaitForLastOperation+0xa4>)
 800cb56:	4313      	orrs	r3, r2
 800cb58:	618b      	str	r3, [r1, #24]
 800cb5a:	68bb      	ldr	r3, [r7, #8]
 800cb5c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d004      	beq.n	800cb6e <FLASH_WaitForLastOperation+0x82>
 800cb64:	4a0a      	ldr	r2, [pc, #40]	; (800cb90 <FLASH_WaitForLastOperation+0xa4>)
 800cb66:	68bb      	ldr	r3, [r7, #8]
 800cb68:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800cb6c:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 800cb6e:	2301      	movs	r3, #1
 800cb70:	e009      	b.n	800cb86 <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800cb72:	4b07      	ldr	r3, [pc, #28]	; (800cb90 <FLASH_WaitForLastOperation+0xa4>)
 800cb74:	691b      	ldr	r3, [r3, #16]
 800cb76:	f003 0301 	and.w	r3, r3, #1
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d002      	beq.n	800cb84 <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800cb7e:	4b04      	ldr	r3, [pc, #16]	; (800cb90 <FLASH_WaitForLastOperation+0xa4>)
 800cb80:	2201      	movs	r2, #1
 800cb82:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 800cb84:	2300      	movs	r3, #0
}
 800cb86:	4618      	mov	r0, r3
 800cb88:	3710      	adds	r7, #16
 800cb8a:	46bd      	mov	sp, r7
 800cb8c:	bd80      	pop	{r7, pc}
 800cb8e:	bf00      	nop
 800cb90:	40022000 	.word	0x40022000
 800cb94:	0002c3fa 	.word	0x0002c3fa
 800cb98:	200014e4 	.word	0x200014e4

0800cb9c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800cb9c:	b580      	push	{r7, lr}
 800cb9e:	b084      	sub	sp, #16
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	60f8      	str	r0, [r7, #12]
 800cba4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cbae:	d332      	bcc.n	800cc16 <FLASH_Program_DoubleWord+0x7a>
 800cbb0:	4b2d      	ldr	r3, [pc, #180]	; (800cc68 <FLASH_Program_DoubleWord+0xcc>)
 800cbb2:	881b      	ldrh	r3, [r3, #0]
 800cbb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cbb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cbbc:	d104      	bne.n	800cbc8 <FLASH_Program_DoubleWord+0x2c>
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 800cbc4:	d227      	bcs.n	800cc16 <FLASH_Program_DoubleWord+0x7a>
 800cbc6:	e033      	b.n	800cc30 <FLASH_Program_DoubleWord+0x94>
 800cbc8:	4b27      	ldr	r3, [pc, #156]	; (800cc68 <FLASH_Program_DoubleWord+0xcc>)
 800cbca:	881b      	ldrh	r3, [r3, #0]
 800cbcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cbd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cbd4:	d104      	bne.n	800cbe0 <FLASH_Program_DoubleWord+0x44>
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	4a24      	ldr	r2, [pc, #144]	; (800cc6c <FLASH_Program_DoubleWord+0xd0>)
 800cbda:	4293      	cmp	r3, r2
 800cbdc:	d81b      	bhi.n	800cc16 <FLASH_Program_DoubleWord+0x7a>
 800cbde:	e027      	b.n	800cc30 <FLASH_Program_DoubleWord+0x94>
 800cbe0:	4b21      	ldr	r3, [pc, #132]	; (800cc68 <FLASH_Program_DoubleWord+0xcc>)
 800cbe2:	881b      	ldrh	r3, [r3, #0]
 800cbe4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cbe8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cbec:	d104      	bne.n	800cbf8 <FLASH_Program_DoubleWord+0x5c>
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	4a1f      	ldr	r2, [pc, #124]	; (800cc70 <FLASH_Program_DoubleWord+0xd4>)
 800cbf2:	4293      	cmp	r3, r2
 800cbf4:	d80f      	bhi.n	800cc16 <FLASH_Program_DoubleWord+0x7a>
 800cbf6:	e01b      	b.n	800cc30 <FLASH_Program_DoubleWord+0x94>
 800cbf8:	4b1b      	ldr	r3, [pc, #108]	; (800cc68 <FLASH_Program_DoubleWord+0xcc>)
 800cbfa:	881b      	ldrh	r3, [r3, #0]
 800cbfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cc00:	2b80      	cmp	r3, #128	; 0x80
 800cc02:	d104      	bne.n	800cc0e <FLASH_Program_DoubleWord+0x72>
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	4a1b      	ldr	r2, [pc, #108]	; (800cc74 <FLASH_Program_DoubleWord+0xd8>)
 800cc08:	4293      	cmp	r3, r2
 800cc0a:	d804      	bhi.n	800cc16 <FLASH_Program_DoubleWord+0x7a>
 800cc0c:	e010      	b.n	800cc30 <FLASH_Program_DoubleWord+0x94>
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 800cc14:	d30c      	bcc.n	800cc30 <FLASH_Program_DoubleWord+0x94>
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	4a17      	ldr	r2, [pc, #92]	; (800cc78 <FLASH_Program_DoubleWord+0xdc>)
 800cc1a:	4293      	cmp	r3, r2
 800cc1c:	d903      	bls.n	800cc26 <FLASH_Program_DoubleWord+0x8a>
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	4a16      	ldr	r2, [pc, #88]	; (800cc7c <FLASH_Program_DoubleWord+0xe0>)
 800cc22:	4293      	cmp	r3, r2
 800cc24:	d904      	bls.n	800cc30 <FLASH_Program_DoubleWord+0x94>
 800cc26:	f240 21bb 	movw	r1, #699	; 0x2bb
 800cc2a:	4815      	ldr	r0, [pc, #84]	; (800cc80 <FLASH_Program_DoubleWord+0xe4>)
 800cc2c:	f7f7 fcb2 	bl	8004594 <assert_failed>

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800cc30:	4b14      	ldr	r3, [pc, #80]	; (800cc84 <FLASH_Program_DoubleWord+0xe8>)
 800cc32:	695b      	ldr	r3, [r3, #20]
 800cc34:	4a13      	ldr	r2, [pc, #76]	; (800cc84 <FLASH_Program_DoubleWord+0xe8>)
 800cc36:	f043 0301 	orr.w	r3, r3, #1
 800cc3a:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	683a      	ldr	r2, [r7, #0]
 800cc40:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800cc42:	f3bf 8f6f 	isb	sy
}
 800cc46:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 800cc48:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cc4c:	f04f 0200 	mov.w	r2, #0
 800cc50:	f04f 0300 	mov.w	r3, #0
 800cc54:	000a      	movs	r2, r1
 800cc56:	2300      	movs	r3, #0
 800cc58:	68f9      	ldr	r1, [r7, #12]
 800cc5a:	3104      	adds	r1, #4
 800cc5c:	4613      	mov	r3, r2
 800cc5e:	600b      	str	r3, [r1, #0]
}
 800cc60:	bf00      	nop
 800cc62:	3710      	adds	r7, #16
 800cc64:	46bd      	mov	sp, r7
 800cc66:	bd80      	pop	{r7, pc}
 800cc68:	1fff75e0 	.word	0x1fff75e0
 800cc6c:	0807ffff 	.word	0x0807ffff
 800cc70:	0803ffff 	.word	0x0803ffff
 800cc74:	0801ffff 	.word	0x0801ffff
 800cc78:	1fff6fff 	.word	0x1fff6fff
 800cc7c:	1fff73ff 	.word	0x1fff73ff
 800cc80:	08018c8c 	.word	0x08018c8c
 800cc84:	40022000 	.word	0x40022000

0800cc88 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 800cc88:	b580      	push	{r7, lr}
 800cc8a:	b088      	sub	sp, #32
 800cc8c:	af00      	add	r7, sp, #0
 800cc8e:	6078      	str	r0, [r7, #4]
 800cc90:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 800cc92:	2340      	movs	r3, #64	; 0x40
 800cc94:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 800cc9a:	683b      	ldr	r3, [r7, #0]
 800cc9c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cca4:	d332      	bcc.n	800cd0c <FLASH_Program_Fast+0x84>
 800cca6:	4b2f      	ldr	r3, [pc, #188]	; (800cd64 <FLASH_Program_Fast+0xdc>)
 800cca8:	881b      	ldrh	r3, [r3, #0]
 800ccaa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ccae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ccb2:	d104      	bne.n	800ccbe <FLASH_Program_Fast+0x36>
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 800ccba:	d227      	bcs.n	800cd0c <FLASH_Program_Fast+0x84>
 800ccbc:	e02b      	b.n	800cd16 <FLASH_Program_Fast+0x8e>
 800ccbe:	4b29      	ldr	r3, [pc, #164]	; (800cd64 <FLASH_Program_Fast+0xdc>)
 800ccc0:	881b      	ldrh	r3, [r3, #0]
 800ccc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ccc6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ccca:	d104      	bne.n	800ccd6 <FLASH_Program_Fast+0x4e>
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	4a26      	ldr	r2, [pc, #152]	; (800cd68 <FLASH_Program_Fast+0xe0>)
 800ccd0:	4293      	cmp	r3, r2
 800ccd2:	d81b      	bhi.n	800cd0c <FLASH_Program_Fast+0x84>
 800ccd4:	e01f      	b.n	800cd16 <FLASH_Program_Fast+0x8e>
 800ccd6:	4b23      	ldr	r3, [pc, #140]	; (800cd64 <FLASH_Program_Fast+0xdc>)
 800ccd8:	881b      	ldrh	r3, [r3, #0]
 800ccda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ccde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cce2:	d104      	bne.n	800ccee <FLASH_Program_Fast+0x66>
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	4a21      	ldr	r2, [pc, #132]	; (800cd6c <FLASH_Program_Fast+0xe4>)
 800cce8:	4293      	cmp	r3, r2
 800ccea:	d80f      	bhi.n	800cd0c <FLASH_Program_Fast+0x84>
 800ccec:	e013      	b.n	800cd16 <FLASH_Program_Fast+0x8e>
 800ccee:	4b1d      	ldr	r3, [pc, #116]	; (800cd64 <FLASH_Program_Fast+0xdc>)
 800ccf0:	881b      	ldrh	r3, [r3, #0]
 800ccf2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ccf6:	2b80      	cmp	r3, #128	; 0x80
 800ccf8:	d104      	bne.n	800cd04 <FLASH_Program_Fast+0x7c>
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	4a1c      	ldr	r2, [pc, #112]	; (800cd70 <FLASH_Program_Fast+0xe8>)
 800ccfe:	4293      	cmp	r3, r2
 800cd00:	d804      	bhi.n	800cd0c <FLASH_Program_Fast+0x84>
 800cd02:	e008      	b.n	800cd16 <FLASH_Program_Fast+0x8e>
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 800cd0a:	d304      	bcc.n	800cd16 <FLASH_Program_Fast+0x8e>
 800cd0c:	f240 21d9 	movw	r1, #729	; 0x2d9
 800cd10:	4818      	ldr	r0, [pc, #96]	; (800cd74 <FLASH_Program_Fast+0xec>)
 800cd12:	f7f7 fc3f 	bl	8004594 <assert_failed>

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800cd16:	4b18      	ldr	r3, [pc, #96]	; (800cd78 <FLASH_Program_Fast+0xf0>)
 800cd18:	695b      	ldr	r3, [r3, #20]
 800cd1a:	4a17      	ldr	r2, [pc, #92]	; (800cd78 <FLASH_Program_Fast+0xf0>)
 800cd1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800cd20:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cd22:	f3ef 8310 	mrs	r3, PRIMASK
 800cd26:	60fb      	str	r3, [r7, #12]
  return(result);
 800cd28:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 800cd2a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800cd2c:	b672      	cpsid	i
}
 800cd2e:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 800cd30:	697b      	ldr	r3, [r7, #20]
 800cd32:	681a      	ldr	r2, [r3, #0]
 800cd34:	69bb      	ldr	r3, [r7, #24]
 800cd36:	601a      	str	r2, [r3, #0]
    dest_addr++;
 800cd38:	69bb      	ldr	r3, [r7, #24]
 800cd3a:	3304      	adds	r3, #4
 800cd3c:	61bb      	str	r3, [r7, #24]
    src_addr++;
 800cd3e:	697b      	ldr	r3, [r7, #20]
 800cd40:	3304      	adds	r3, #4
 800cd42:	617b      	str	r3, [r7, #20]
    row_index--;
 800cd44:	7ffb      	ldrb	r3, [r7, #31]
 800cd46:	3b01      	subs	r3, #1
 800cd48:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 800cd4a:	7ffb      	ldrb	r3, [r7, #31]
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d1ef      	bne.n	800cd30 <FLASH_Program_Fast+0xa8>
 800cd50:	693b      	ldr	r3, [r7, #16]
 800cd52:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cd54:	68bb      	ldr	r3, [r7, #8]
 800cd56:	f383 8810 	msr	PRIMASK, r3
}
 800cd5a:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 800cd5c:	bf00      	nop
 800cd5e:	3720      	adds	r7, #32
 800cd60:	46bd      	mov	sp, r7
 800cd62:	bd80      	pop	{r7, pc}
 800cd64:	1fff75e0 	.word	0x1fff75e0
 800cd68:	0807ffff 	.word	0x0807ffff
 800cd6c:	0803ffff 	.word	0x0803ffff
 800cd70:	0801ffff 	.word	0x0801ffff
 800cd74:	08018c8c 	.word	0x08018c8c
 800cd78:	40022000 	.word	0x40022000

0800cd7c <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800cd7c:	b580      	push	{r7, lr}
 800cd7e:	b084      	sub	sp, #16
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	6078      	str	r0, [r7, #4]
 800cd84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800cd86:	4b4e      	ldr	r3, [pc, #312]	; (800cec0 <HAL_FLASHEx_Erase+0x144>)
 800cd88:	781b      	ldrb	r3, [r3, #0]
 800cd8a:	2b01      	cmp	r3, #1
 800cd8c:	d101      	bne.n	800cd92 <HAL_FLASHEx_Erase+0x16>
 800cd8e:	2302      	movs	r3, #2
 800cd90:	e091      	b.n	800ceb6 <HAL_FLASHEx_Erase+0x13a>
 800cd92:	4b4b      	ldr	r3, [pc, #300]	; (800cec0 <HAL_FLASHEx_Erase+0x144>)
 800cd94:	2201      	movs	r2, #1
 800cd96:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d007      	beq.n	800cdb0 <HAL_FLASHEx_Erase+0x34>
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	2b01      	cmp	r3, #1
 800cda6:	d003      	beq.n	800cdb0 <HAL_FLASHEx_Erase+0x34>
 800cda8:	2186      	movs	r1, #134	; 0x86
 800cdaa:	4846      	ldr	r0, [pc, #280]	; (800cec4 <HAL_FLASHEx_Erase+0x148>)
 800cdac:	f7f7 fbf2 	bl	8004594 <assert_failed>

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800cdb0:	f24c 3050 	movw	r0, #50000	; 0xc350
 800cdb4:	f7ff fe9a 	bl	800caec <FLASH_WaitForLastOperation>
 800cdb8:	4603      	mov	r3, r0
 800cdba:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800cdbc:	7bfb      	ldrb	r3, [r7, #15]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d175      	bne.n	800ceae <HAL_FLASHEx_Erase+0x132>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800cdc2:	4b3f      	ldr	r3, [pc, #252]	; (800cec0 <HAL_FLASHEx_Erase+0x144>)
 800cdc4:	2200      	movs	r2, #0
 800cdc6:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 800cdc8:	4b3f      	ldr	r3, [pc, #252]	; (800cec8 <HAL_FLASHEx_Erase+0x14c>)
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d013      	beq.n	800cdfc <HAL_FLASHEx_Erase+0x80>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800cdd4:	4b3c      	ldr	r3, [pc, #240]	; (800cec8 <HAL_FLASHEx_Erase+0x14c>)
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d009      	beq.n	800cdf4 <HAL_FLASHEx_Erase+0x78>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 800cde0:	4b39      	ldr	r3, [pc, #228]	; (800cec8 <HAL_FLASHEx_Erase+0x14c>)
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	4a38      	ldr	r2, [pc, #224]	; (800cec8 <HAL_FLASHEx_Erase+0x14c>)
 800cde6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cdea:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 800cdec:	4b34      	ldr	r3, [pc, #208]	; (800cec0 <HAL_FLASHEx_Erase+0x144>)
 800cdee:	2203      	movs	r2, #3
 800cdf0:	771a      	strb	r2, [r3, #28]
 800cdf2:	e016      	b.n	800ce22 <HAL_FLASHEx_Erase+0xa6>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 800cdf4:	4b32      	ldr	r3, [pc, #200]	; (800cec0 <HAL_FLASHEx_Erase+0x144>)
 800cdf6:	2201      	movs	r2, #1
 800cdf8:	771a      	strb	r2, [r3, #28]
 800cdfa:	e012      	b.n	800ce22 <HAL_FLASHEx_Erase+0xa6>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800cdfc:	4b32      	ldr	r3, [pc, #200]	; (800cec8 <HAL_FLASHEx_Erase+0x14c>)
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d009      	beq.n	800ce1c <HAL_FLASHEx_Erase+0xa0>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800ce08:	4b2f      	ldr	r3, [pc, #188]	; (800cec8 <HAL_FLASHEx_Erase+0x14c>)
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	4a2e      	ldr	r2, [pc, #184]	; (800cec8 <HAL_FLASHEx_Erase+0x14c>)
 800ce0e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ce12:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 800ce14:	4b2a      	ldr	r3, [pc, #168]	; (800cec0 <HAL_FLASHEx_Erase+0x144>)
 800ce16:	2202      	movs	r2, #2
 800ce18:	771a      	strb	r2, [r3, #28]
 800ce1a:	e002      	b.n	800ce22 <HAL_FLASHEx_Erase+0xa6>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800ce1c:	4b28      	ldr	r3, [pc, #160]	; (800cec0 <HAL_FLASHEx_Erase+0x144>)
 800ce1e:	2200      	movs	r2, #0
 800ce20:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	2b01      	cmp	r3, #1
 800ce28:	d111      	bne.n	800ce4e <HAL_FLASHEx_Erase+0xd2>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	685b      	ldr	r3, [r3, #4]
 800ce2e:	4618      	mov	r0, r3
 800ce30:	f000 f84c 	bl	800cecc <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800ce34:	f24c 3050 	movw	r0, #50000	; 0xc350
 800ce38:	f7ff fe58 	bl	800caec <FLASH_WaitForLastOperation>
 800ce3c:	4603      	mov	r3, r0
 800ce3e:	73fb      	strb	r3, [r7, #15]
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 800ce40:	4b21      	ldr	r3, [pc, #132]	; (800cec8 <HAL_FLASHEx_Erase+0x14c>)
 800ce42:	695b      	ldr	r3, [r3, #20]
 800ce44:	4a20      	ldr	r2, [pc, #128]	; (800cec8 <HAL_FLASHEx_Erase+0x14c>)
 800ce46:	f023 0304 	bic.w	r3, r3, #4
 800ce4a:	6153      	str	r3, [r2, #20]
 800ce4c:	e02d      	b.n	800ceaa <HAL_FLASHEx_Erase+0x12e>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800ce4e:	683b      	ldr	r3, [r7, #0]
 800ce50:	f04f 32ff 	mov.w	r2, #4294967295
 800ce54:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	689b      	ldr	r3, [r3, #8]
 800ce5a:	60bb      	str	r3, [r7, #8]
 800ce5c:	e01d      	b.n	800ce9a <HAL_FLASHEx_Erase+0x11e>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	685b      	ldr	r3, [r3, #4]
 800ce62:	4619      	mov	r1, r3
 800ce64:	68b8      	ldr	r0, [r7, #8]
 800ce66:	f000 f857 	bl	800cf18 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800ce6a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800ce6e:	f7ff fe3d 	bl	800caec <FLASH_WaitForLastOperation>
 800ce72:	4603      	mov	r3, r0
 800ce74:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800ce76:	4b14      	ldr	r3, [pc, #80]	; (800cec8 <HAL_FLASHEx_Erase+0x14c>)
 800ce78:	695b      	ldr	r3, [r3, #20]
 800ce7a:	4a13      	ldr	r2, [pc, #76]	; (800cec8 <HAL_FLASHEx_Erase+0x14c>)
 800ce7c:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 800ce80:	f023 0302 	bic.w	r3, r3, #2
 800ce84:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 800ce86:	7bfb      	ldrb	r3, [r7, #15]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d003      	beq.n	800ce94 <HAL_FLASHEx_Erase+0x118>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 800ce8c:	683b      	ldr	r3, [r7, #0]
 800ce8e:	68ba      	ldr	r2, [r7, #8]
 800ce90:	601a      	str	r2, [r3, #0]
          break;
 800ce92:	e00a      	b.n	800ceaa <HAL_FLASHEx_Erase+0x12e>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800ce94:	68bb      	ldr	r3, [r7, #8]
 800ce96:	3301      	adds	r3, #1
 800ce98:	60bb      	str	r3, [r7, #8]
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	689a      	ldr	r2, [r3, #8]
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	68db      	ldr	r3, [r3, #12]
 800cea2:	4413      	add	r3, r2
 800cea4:	68ba      	ldr	r2, [r7, #8]
 800cea6:	429a      	cmp	r2, r3
 800cea8:	d3d9      	bcc.n	800ce5e <HAL_FLASHEx_Erase+0xe2>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800ceaa:	f000 f883 	bl	800cfb4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800ceae:	4b04      	ldr	r3, [pc, #16]	; (800cec0 <HAL_FLASHEx_Erase+0x144>)
 800ceb0:	2200      	movs	r2, #0
 800ceb2:	701a      	strb	r2, [r3, #0]

  return status;
 800ceb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800ceb6:	4618      	mov	r0, r3
 800ceb8:	3710      	adds	r7, #16
 800ceba:	46bd      	mov	sp, r7
 800cebc:	bd80      	pop	{r7, pc}
 800cebe:	bf00      	nop
 800cec0:	200014e4 	.word	0x200014e4
 800cec4:	08018cc8 	.word	0x08018cc8
 800cec8:	40022000 	.word	0x40022000

0800cecc <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800cecc:	b580      	push	{r7, lr}
 800cece:	b082      	sub	sp, #8
 800ced0:	af00      	add	r7, sp, #0
 800ced2:	6078      	str	r0, [r7, #4]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) != 0U)
#endif
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	2b01      	cmp	r3, #1
 800ced8:	d004      	beq.n	800cee4 <FLASH_MassErase+0x18>
 800ceda:	f240 11ff 	movw	r1, #511	; 0x1ff
 800cede:	480c      	ldr	r0, [pc, #48]	; (800cf10 <FLASH_MassErase+0x44>)
 800cee0:	f7f7 fb58 	bl	8004594 <assert_failed>

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	f003 0301 	and.w	r3, r3, #1
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d005      	beq.n	800cefa <FLASH_MassErase+0x2e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 800ceee:	4b09      	ldr	r3, [pc, #36]	; (800cf14 <FLASH_MassErase+0x48>)
 800cef0:	695b      	ldr	r3, [r3, #20]
 800cef2:	4a08      	ldr	r2, [pc, #32]	; (800cf14 <FLASH_MassErase+0x48>)
 800cef4:	f043 0304 	orr.w	r3, r3, #4
 800cef8:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800cefa:	4b06      	ldr	r3, [pc, #24]	; (800cf14 <FLASH_MassErase+0x48>)
 800cefc:	695b      	ldr	r3, [r3, #20]
 800cefe:	4a05      	ldr	r2, [pc, #20]	; (800cf14 <FLASH_MassErase+0x48>)
 800cf00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cf04:	6153      	str	r3, [r2, #20]
}
 800cf06:	bf00      	nop
 800cf08:	3708      	adds	r7, #8
 800cf0a:	46bd      	mov	sp, r7
 800cf0c:	bd80      	pop	{r7, pc}
 800cf0e:	bf00      	nop
 800cf10:	08018cc8 	.word	0x08018cc8
 800cf14:	40022000 	.word	0x40022000

0800cf18 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 800cf18:	b580      	push	{r7, lr}
 800cf1a:	b082      	sub	sp, #8
 800cf1c:	af00      	add	r7, sp, #0
 800cf1e:	6078      	str	r0, [r7, #4]
 800cf20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));
 800cf22:	4b21      	ldr	r3, [pc, #132]	; (800cfa8 <FLASH_PageErase+0x90>)
 800cf24:	881b      	ldrh	r3, [r3, #0]
 800cf26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cf2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cf2e:	d106      	bne.n	800cf3e <FLASH_PageErase+0x26>
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	2b7f      	cmp	r3, #127	; 0x7f
 800cf34:	bf94      	ite	ls
 800cf36:	2301      	movls	r3, #1
 800cf38:	2300      	movhi	r3, #0
 800cf3a:	b2db      	uxtb	r3, r3
 800cf3c:	e012      	b.n	800cf64 <FLASH_PageErase+0x4c>
 800cf3e:	4b1a      	ldr	r3, [pc, #104]	; (800cfa8 <FLASH_PageErase+0x90>)
 800cf40:	881b      	ldrh	r3, [r3, #0]
 800cf42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cf46:	2b80      	cmp	r3, #128	; 0x80
 800cf48:	d106      	bne.n	800cf58 <FLASH_PageErase+0x40>
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	2b3f      	cmp	r3, #63	; 0x3f
 800cf4e:	bf94      	ite	ls
 800cf50:	2301      	movls	r3, #1
 800cf52:	2300      	movhi	r3, #0
 800cf54:	b2db      	uxtb	r3, r3
 800cf56:	e005      	b.n	800cf64 <FLASH_PageErase+0x4c>
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	2b7f      	cmp	r3, #127	; 0x7f
 800cf5c:	bf94      	ite	ls
 800cf5e:	2301      	movls	r3, #1
 800cf60:	2300      	movhi	r3, #0
 800cf62:	b2db      	uxtb	r3, r3
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d104      	bne.n	800cf72 <FLASH_PageErase+0x5a>
 800cf68:	f240 212a 	movw	r1, #554	; 0x22a
 800cf6c:	480f      	ldr	r0, [pc, #60]	; (800cfac <FLASH_PageErase+0x94>)
 800cf6e:	f7f7 fb11 	bl	8004594 <assert_failed>
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 800cf72:	4b0f      	ldr	r3, [pc, #60]	; (800cfb0 <FLASH_PageErase+0x98>)
 800cf74:	695b      	ldr	r3, [r3, #20]
 800cf76:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	00db      	lsls	r3, r3, #3
 800cf7e:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 800cf82:	490b      	ldr	r1, [pc, #44]	; (800cfb0 <FLASH_PageErase+0x98>)
 800cf84:	4313      	orrs	r3, r2
 800cf86:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 800cf88:	4b09      	ldr	r3, [pc, #36]	; (800cfb0 <FLASH_PageErase+0x98>)
 800cf8a:	695b      	ldr	r3, [r3, #20]
 800cf8c:	4a08      	ldr	r2, [pc, #32]	; (800cfb0 <FLASH_PageErase+0x98>)
 800cf8e:	f043 0302 	orr.w	r3, r3, #2
 800cf92:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800cf94:	4b06      	ldr	r3, [pc, #24]	; (800cfb0 <FLASH_PageErase+0x98>)
 800cf96:	695b      	ldr	r3, [r3, #20]
 800cf98:	4a05      	ldr	r2, [pc, #20]	; (800cfb0 <FLASH_PageErase+0x98>)
 800cf9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cf9e:	6153      	str	r3, [r2, #20]
}
 800cfa0:	bf00      	nop
 800cfa2:	3708      	adds	r7, #8
 800cfa4:	46bd      	mov	sp, r7
 800cfa6:	bd80      	pop	{r7, pc}
 800cfa8:	1fff75e0 	.word	0x1fff75e0
 800cfac:	08018cc8 	.word	0x08018cc8
 800cfb0:	40022000 	.word	0x40022000

0800cfb4 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800cfb4:	b480      	push	{r7}
 800cfb6:	b083      	sub	sp, #12
 800cfb8:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 800cfba:	4b21      	ldr	r3, [pc, #132]	; (800d040 <FLASH_FlushCaches+0x8c>)
 800cfbc:	7f1b      	ldrb	r3, [r3, #28]
 800cfbe:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 800cfc0:	79fb      	ldrb	r3, [r7, #7]
 800cfc2:	2b01      	cmp	r3, #1
 800cfc4:	d002      	beq.n	800cfcc <FLASH_FlushCaches+0x18>
 800cfc6:	79fb      	ldrb	r3, [r7, #7]
 800cfc8:	2b03      	cmp	r3, #3
 800cfca:	d117      	bne.n	800cffc <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800cfcc:	4b1d      	ldr	r3, [pc, #116]	; (800d044 <FLASH_FlushCaches+0x90>)
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	4a1c      	ldr	r2, [pc, #112]	; (800d044 <FLASH_FlushCaches+0x90>)
 800cfd2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cfd6:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800cfd8:	4b1a      	ldr	r3, [pc, #104]	; (800d044 <FLASH_FlushCaches+0x90>)
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	4a19      	ldr	r2, [pc, #100]	; (800d044 <FLASH_FlushCaches+0x90>)
 800cfde:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800cfe2:	6013      	str	r3, [r2, #0]
 800cfe4:	4b17      	ldr	r3, [pc, #92]	; (800d044 <FLASH_FlushCaches+0x90>)
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	4a16      	ldr	r2, [pc, #88]	; (800d044 <FLASH_FlushCaches+0x90>)
 800cfea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cfee:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800cff0:	4b14      	ldr	r3, [pc, #80]	; (800d044 <FLASH_FlushCaches+0x90>)
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	4a13      	ldr	r2, [pc, #76]	; (800d044 <FLASH_FlushCaches+0x90>)
 800cff6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800cffa:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 800cffc:	79fb      	ldrb	r3, [r7, #7]
 800cffe:	2b02      	cmp	r3, #2
 800d000:	d002      	beq.n	800d008 <FLASH_FlushCaches+0x54>
 800d002:	79fb      	ldrb	r3, [r7, #7]
 800d004:	2b03      	cmp	r3, #3
 800d006:	d111      	bne.n	800d02c <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800d008:	4b0e      	ldr	r3, [pc, #56]	; (800d044 <FLASH_FlushCaches+0x90>)
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	4a0d      	ldr	r2, [pc, #52]	; (800d044 <FLASH_FlushCaches+0x90>)
 800d00e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d012:	6013      	str	r3, [r2, #0]
 800d014:	4b0b      	ldr	r3, [pc, #44]	; (800d044 <FLASH_FlushCaches+0x90>)
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	4a0a      	ldr	r2, [pc, #40]	; (800d044 <FLASH_FlushCaches+0x90>)
 800d01a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d01e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800d020:	4b08      	ldr	r3, [pc, #32]	; (800d044 <FLASH_FlushCaches+0x90>)
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	4a07      	ldr	r2, [pc, #28]	; (800d044 <FLASH_FlushCaches+0x90>)
 800d026:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800d02a:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800d02c:	4b04      	ldr	r3, [pc, #16]	; (800d040 <FLASH_FlushCaches+0x8c>)
 800d02e:	2200      	movs	r2, #0
 800d030:	771a      	strb	r2, [r3, #28]
}
 800d032:	bf00      	nop
 800d034:	370c      	adds	r7, #12
 800d036:	46bd      	mov	sp, r7
 800d038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d03c:	4770      	bx	lr
 800d03e:	bf00      	nop
 800d040:	200014e4 	.word	0x200014e4
 800d044:	40022000 	.word	0x40022000

0800d048 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800d048:	b580      	push	{r7, lr}
 800d04a:	b086      	sub	sp, #24
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	6078      	str	r0, [r7, #4]
 800d050:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800d052:	2300      	movs	r3, #0
 800d054:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800d05c:	d017      	beq.n	800d08e <HAL_GPIO_Init+0x46>
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	4a38      	ldr	r2, [pc, #224]	; (800d144 <HAL_GPIO_Init+0xfc>)
 800d062:	4293      	cmp	r3, r2
 800d064:	d013      	beq.n	800d08e <HAL_GPIO_Init+0x46>
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	4a37      	ldr	r2, [pc, #220]	; (800d148 <HAL_GPIO_Init+0x100>)
 800d06a:	4293      	cmp	r3, r2
 800d06c:	d00f      	beq.n	800d08e <HAL_GPIO_Init+0x46>
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	4a36      	ldr	r2, [pc, #216]	; (800d14c <HAL_GPIO_Init+0x104>)
 800d072:	4293      	cmp	r3, r2
 800d074:	d00b      	beq.n	800d08e <HAL_GPIO_Init+0x46>
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	4a35      	ldr	r2, [pc, #212]	; (800d150 <HAL_GPIO_Init+0x108>)
 800d07a:	4293      	cmp	r3, r2
 800d07c:	d007      	beq.n	800d08e <HAL_GPIO_Init+0x46>
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	4a34      	ldr	r2, [pc, #208]	; (800d154 <HAL_GPIO_Init+0x10c>)
 800d082:	4293      	cmp	r3, r2
 800d084:	d003      	beq.n	800d08e <HAL_GPIO_Init+0x46>
 800d086:	21aa      	movs	r1, #170	; 0xaa
 800d088:	4833      	ldr	r0, [pc, #204]	; (800d158 <HAL_GPIO_Init+0x110>)
 800d08a:	f7f7 fa83 	bl	8004594 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800d08e:	683b      	ldr	r3, [r7, #0]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	b29b      	uxth	r3, r3
 800d094:	2b00      	cmp	r3, #0
 800d096:	d005      	beq.n	800d0a4 <HAL_GPIO_Init+0x5c>
 800d098:	683b      	ldr	r3, [r7, #0]
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	0c1b      	lsrs	r3, r3, #16
 800d09e:	041b      	lsls	r3, r3, #16
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d003      	beq.n	800d0ac <HAL_GPIO_Init+0x64>
 800d0a4:	21ab      	movs	r1, #171	; 0xab
 800d0a6:	482c      	ldr	r0, [pc, #176]	; (800d158 <HAL_GPIO_Init+0x110>)
 800d0a8:	f7f7 fa74 	bl	8004594 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800d0ac:	683b      	ldr	r3, [r7, #0]
 800d0ae:	685b      	ldr	r3, [r3, #4]
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	f000 8200 	beq.w	800d4b6 <HAL_GPIO_Init+0x46e>
 800d0b6:	683b      	ldr	r3, [r7, #0]
 800d0b8:	685b      	ldr	r3, [r3, #4]
 800d0ba:	2b01      	cmp	r3, #1
 800d0bc:	f000 81fb 	beq.w	800d4b6 <HAL_GPIO_Init+0x46e>
 800d0c0:	683b      	ldr	r3, [r7, #0]
 800d0c2:	685b      	ldr	r3, [r3, #4]
 800d0c4:	2b11      	cmp	r3, #17
 800d0c6:	f000 81f6 	beq.w	800d4b6 <HAL_GPIO_Init+0x46e>
 800d0ca:	683b      	ldr	r3, [r7, #0]
 800d0cc:	685b      	ldr	r3, [r3, #4]
 800d0ce:	2b02      	cmp	r3, #2
 800d0d0:	f000 81f1 	beq.w	800d4b6 <HAL_GPIO_Init+0x46e>
 800d0d4:	683b      	ldr	r3, [r7, #0]
 800d0d6:	685b      	ldr	r3, [r3, #4]
 800d0d8:	2b12      	cmp	r3, #18
 800d0da:	f000 81ec 	beq.w	800d4b6 <HAL_GPIO_Init+0x46e>
 800d0de:	683b      	ldr	r3, [r7, #0]
 800d0e0:	685b      	ldr	r3, [r3, #4]
 800d0e2:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 800d0e6:	f000 81e6 	beq.w	800d4b6 <HAL_GPIO_Init+0x46e>
 800d0ea:	683b      	ldr	r3, [r7, #0]
 800d0ec:	685b      	ldr	r3, [r3, #4]
 800d0ee:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 800d0f2:	f000 81e0 	beq.w	800d4b6 <HAL_GPIO_Init+0x46e>
 800d0f6:	683b      	ldr	r3, [r7, #0]
 800d0f8:	685b      	ldr	r3, [r3, #4]
 800d0fa:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 800d0fe:	f000 81da 	beq.w	800d4b6 <HAL_GPIO_Init+0x46e>
 800d102:	683b      	ldr	r3, [r7, #0]
 800d104:	685b      	ldr	r3, [r3, #4]
 800d106:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 800d10a:	f000 81d4 	beq.w	800d4b6 <HAL_GPIO_Init+0x46e>
 800d10e:	683b      	ldr	r3, [r7, #0]
 800d110:	685b      	ldr	r3, [r3, #4]
 800d112:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 800d116:	f000 81ce 	beq.w	800d4b6 <HAL_GPIO_Init+0x46e>
 800d11a:	683b      	ldr	r3, [r7, #0]
 800d11c:	685b      	ldr	r3, [r3, #4]
 800d11e:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 800d122:	f000 81c8 	beq.w	800d4b6 <HAL_GPIO_Init+0x46e>
 800d126:	683b      	ldr	r3, [r7, #0]
 800d128:	685b      	ldr	r3, [r3, #4]
 800d12a:	2b03      	cmp	r3, #3
 800d12c:	f000 81c3 	beq.w	800d4b6 <HAL_GPIO_Init+0x46e>
 800d130:	683b      	ldr	r3, [r7, #0]
 800d132:	685b      	ldr	r3, [r3, #4]
 800d134:	2b0b      	cmp	r3, #11
 800d136:	f000 81be 	beq.w	800d4b6 <HAL_GPIO_Init+0x46e>
 800d13a:	21ac      	movs	r1, #172	; 0xac
 800d13c:	4806      	ldr	r0, [pc, #24]	; (800d158 <HAL_GPIO_Init+0x110>)
 800d13e:	f7f7 fa29 	bl	8004594 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800d142:	e1b8      	b.n	800d4b6 <HAL_GPIO_Init+0x46e>
 800d144:	48000400 	.word	0x48000400
 800d148:	48000800 	.word	0x48000800
 800d14c:	48000c00 	.word	0x48000c00
 800d150:	48001000 	.word	0x48001000
 800d154:	48001c00 	.word	0x48001c00
 800d158:	08018d08 	.word	0x08018d08
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800d15c:	683b      	ldr	r3, [r7, #0]
 800d15e:	681a      	ldr	r2, [r3, #0]
 800d160:	2101      	movs	r1, #1
 800d162:	697b      	ldr	r3, [r7, #20]
 800d164:	fa01 f303 	lsl.w	r3, r1, r3
 800d168:	4013      	ands	r3, r2
 800d16a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	2b00      	cmp	r3, #0
 800d170:	f000 819e 	beq.w	800d4b0 <HAL_GPIO_Init+0x468>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800d174:	683b      	ldr	r3, [r7, #0]
 800d176:	685b      	ldr	r3, [r3, #4]
 800d178:	f003 0303 	and.w	r3, r3, #3
 800d17c:	2b01      	cmp	r3, #1
 800d17e:	d005      	beq.n	800d18c <HAL_GPIO_Init+0x144>
 800d180:	683b      	ldr	r3, [r7, #0]
 800d182:	685b      	ldr	r3, [r3, #4]
 800d184:	f003 0303 	and.w	r3, r3, #3
 800d188:	2b02      	cmp	r3, #2
 800d18a:	d144      	bne.n	800d216 <HAL_GPIO_Init+0x1ce>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800d18c:	683b      	ldr	r3, [r7, #0]
 800d18e:	68db      	ldr	r3, [r3, #12]
 800d190:	2b00      	cmp	r3, #0
 800d192:	d00f      	beq.n	800d1b4 <HAL_GPIO_Init+0x16c>
 800d194:	683b      	ldr	r3, [r7, #0]
 800d196:	68db      	ldr	r3, [r3, #12]
 800d198:	2b01      	cmp	r3, #1
 800d19a:	d00b      	beq.n	800d1b4 <HAL_GPIO_Init+0x16c>
 800d19c:	683b      	ldr	r3, [r7, #0]
 800d19e:	68db      	ldr	r3, [r3, #12]
 800d1a0:	2b02      	cmp	r3, #2
 800d1a2:	d007      	beq.n	800d1b4 <HAL_GPIO_Init+0x16c>
 800d1a4:	683b      	ldr	r3, [r7, #0]
 800d1a6:	68db      	ldr	r3, [r3, #12]
 800d1a8:	2b03      	cmp	r3, #3
 800d1aa:	d003      	beq.n	800d1b4 <HAL_GPIO_Init+0x16c>
 800d1ac:	21bb      	movs	r1, #187	; 0xbb
 800d1ae:	4886      	ldr	r0, [pc, #536]	; (800d3c8 <HAL_GPIO_Init+0x380>)
 800d1b0:	f7f7 f9f0 	bl	8004594 <assert_failed>

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	689b      	ldr	r3, [r3, #8]
 800d1b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800d1ba:	697b      	ldr	r3, [r7, #20]
 800d1bc:	005b      	lsls	r3, r3, #1
 800d1be:	2203      	movs	r2, #3
 800d1c0:	fa02 f303 	lsl.w	r3, r2, r3
 800d1c4:	43db      	mvns	r3, r3
 800d1c6:	693a      	ldr	r2, [r7, #16]
 800d1c8:	4013      	ands	r3, r2
 800d1ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800d1cc:	683b      	ldr	r3, [r7, #0]
 800d1ce:	68da      	ldr	r2, [r3, #12]
 800d1d0:	697b      	ldr	r3, [r7, #20]
 800d1d2:	005b      	lsls	r3, r3, #1
 800d1d4:	fa02 f303 	lsl.w	r3, r2, r3
 800d1d8:	693a      	ldr	r2, [r7, #16]
 800d1da:	4313      	orrs	r3, r2
 800d1dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	693a      	ldr	r2, [r7, #16]
 800d1e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	685b      	ldr	r3, [r3, #4]
 800d1e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800d1ea:	2201      	movs	r2, #1
 800d1ec:	697b      	ldr	r3, [r7, #20]
 800d1ee:	fa02 f303 	lsl.w	r3, r2, r3
 800d1f2:	43db      	mvns	r3, r3
 800d1f4:	693a      	ldr	r2, [r7, #16]
 800d1f6:	4013      	ands	r3, r2
 800d1f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800d1fa:	683b      	ldr	r3, [r7, #0]
 800d1fc:	685b      	ldr	r3, [r3, #4]
 800d1fe:	091b      	lsrs	r3, r3, #4
 800d200:	f003 0201 	and.w	r2, r3, #1
 800d204:	697b      	ldr	r3, [r7, #20]
 800d206:	fa02 f303 	lsl.w	r3, r2, r3
 800d20a:	693a      	ldr	r2, [r7, #16]
 800d20c:	4313      	orrs	r3, r2
 800d20e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	693a      	ldr	r2, [r7, #16]
 800d214:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800d216:	683b      	ldr	r3, [r7, #0]
 800d218:	685b      	ldr	r3, [r3, #4]
 800d21a:	f003 0303 	and.w	r3, r3, #3
 800d21e:	2b03      	cmp	r3, #3
 800d220:	d027      	beq.n	800d272 <HAL_GPIO_Init+0x22a>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800d222:	683b      	ldr	r3, [r7, #0]
 800d224:	689b      	ldr	r3, [r3, #8]
 800d226:	2b00      	cmp	r3, #0
 800d228:	d00b      	beq.n	800d242 <HAL_GPIO_Init+0x1fa>
 800d22a:	683b      	ldr	r3, [r7, #0]
 800d22c:	689b      	ldr	r3, [r3, #8]
 800d22e:	2b01      	cmp	r3, #1
 800d230:	d007      	beq.n	800d242 <HAL_GPIO_Init+0x1fa>
 800d232:	683b      	ldr	r3, [r7, #0]
 800d234:	689b      	ldr	r3, [r3, #8]
 800d236:	2b02      	cmp	r3, #2
 800d238:	d003      	beq.n	800d242 <HAL_GPIO_Init+0x1fa>
 800d23a:	21dc      	movs	r1, #220	; 0xdc
 800d23c:	4862      	ldr	r0, [pc, #392]	; (800d3c8 <HAL_GPIO_Init+0x380>)
 800d23e:	f7f7 f9a9 	bl	8004594 <assert_failed>

        temp = GPIOx->PUPDR;
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	68db      	ldr	r3, [r3, #12]
 800d246:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800d248:	697b      	ldr	r3, [r7, #20]
 800d24a:	005b      	lsls	r3, r3, #1
 800d24c:	2203      	movs	r2, #3
 800d24e:	fa02 f303 	lsl.w	r3, r2, r3
 800d252:	43db      	mvns	r3, r3
 800d254:	693a      	ldr	r2, [r7, #16]
 800d256:	4013      	ands	r3, r2
 800d258:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800d25a:	683b      	ldr	r3, [r7, #0]
 800d25c:	689a      	ldr	r2, [r3, #8]
 800d25e:	697b      	ldr	r3, [r7, #20]
 800d260:	005b      	lsls	r3, r3, #1
 800d262:	fa02 f303 	lsl.w	r3, r2, r3
 800d266:	693a      	ldr	r2, [r7, #16]
 800d268:	4313      	orrs	r3, r2
 800d26a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	693a      	ldr	r2, [r7, #16]
 800d270:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800d272:	683b      	ldr	r3, [r7, #0]
 800d274:	685b      	ldr	r3, [r3, #4]
 800d276:	f003 0303 	and.w	r3, r3, #3
 800d27a:	2b02      	cmp	r3, #2
 800d27c:	d147      	bne.n	800d30e <HAL_GPIO_Init+0x2c6>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800d284:	d017      	beq.n	800d2b6 <HAL_GPIO_Init+0x26e>
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	4a50      	ldr	r2, [pc, #320]	; (800d3cc <HAL_GPIO_Init+0x384>)
 800d28a:	4293      	cmp	r3, r2
 800d28c:	d013      	beq.n	800d2b6 <HAL_GPIO_Init+0x26e>
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	4a4f      	ldr	r2, [pc, #316]	; (800d3d0 <HAL_GPIO_Init+0x388>)
 800d292:	4293      	cmp	r3, r2
 800d294:	d00f      	beq.n	800d2b6 <HAL_GPIO_Init+0x26e>
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	4a4e      	ldr	r2, [pc, #312]	; (800d3d4 <HAL_GPIO_Init+0x38c>)
 800d29a:	4293      	cmp	r3, r2
 800d29c:	d00b      	beq.n	800d2b6 <HAL_GPIO_Init+0x26e>
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	4a4d      	ldr	r2, [pc, #308]	; (800d3d8 <HAL_GPIO_Init+0x390>)
 800d2a2:	4293      	cmp	r3, r2
 800d2a4:	d007      	beq.n	800d2b6 <HAL_GPIO_Init+0x26e>
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	4a4c      	ldr	r2, [pc, #304]	; (800d3dc <HAL_GPIO_Init+0x394>)
 800d2aa:	4293      	cmp	r3, r2
 800d2ac:	d003      	beq.n	800d2b6 <HAL_GPIO_Init+0x26e>
 800d2ae:	21e8      	movs	r1, #232	; 0xe8
 800d2b0:	4845      	ldr	r0, [pc, #276]	; (800d3c8 <HAL_GPIO_Init+0x380>)
 800d2b2:	f7f7 f96f 	bl	8004594 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800d2b6:	683b      	ldr	r3, [r7, #0]
 800d2b8:	691b      	ldr	r3, [r3, #16]
 800d2ba:	2b0f      	cmp	r3, #15
 800d2bc:	d903      	bls.n	800d2c6 <HAL_GPIO_Init+0x27e>
 800d2be:	21e9      	movs	r1, #233	; 0xe9
 800d2c0:	4841      	ldr	r0, [pc, #260]	; (800d3c8 <HAL_GPIO_Init+0x380>)
 800d2c2:	f7f7 f967 	bl	8004594 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800d2c6:	697b      	ldr	r3, [r7, #20]
 800d2c8:	08da      	lsrs	r2, r3, #3
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	3208      	adds	r2, #8
 800d2ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800d2d4:	697b      	ldr	r3, [r7, #20]
 800d2d6:	f003 0307 	and.w	r3, r3, #7
 800d2da:	009b      	lsls	r3, r3, #2
 800d2dc:	220f      	movs	r2, #15
 800d2de:	fa02 f303 	lsl.w	r3, r2, r3
 800d2e2:	43db      	mvns	r3, r3
 800d2e4:	693a      	ldr	r2, [r7, #16]
 800d2e6:	4013      	ands	r3, r2
 800d2e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800d2ea:	683b      	ldr	r3, [r7, #0]
 800d2ec:	691a      	ldr	r2, [r3, #16]
 800d2ee:	697b      	ldr	r3, [r7, #20]
 800d2f0:	f003 0307 	and.w	r3, r3, #7
 800d2f4:	009b      	lsls	r3, r3, #2
 800d2f6:	fa02 f303 	lsl.w	r3, r2, r3
 800d2fa:	693a      	ldr	r2, [r7, #16]
 800d2fc:	4313      	orrs	r3, r2
 800d2fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800d300:	697b      	ldr	r3, [r7, #20]
 800d302:	08da      	lsrs	r2, r3, #3
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	3208      	adds	r2, #8
 800d308:	6939      	ldr	r1, [r7, #16]
 800d30a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800d314:	697b      	ldr	r3, [r7, #20]
 800d316:	005b      	lsls	r3, r3, #1
 800d318:	2203      	movs	r2, #3
 800d31a:	fa02 f303 	lsl.w	r3, r2, r3
 800d31e:	43db      	mvns	r3, r3
 800d320:	693a      	ldr	r2, [r7, #16]
 800d322:	4013      	ands	r3, r2
 800d324:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800d326:	683b      	ldr	r3, [r7, #0]
 800d328:	685b      	ldr	r3, [r3, #4]
 800d32a:	f003 0203 	and.w	r2, r3, #3
 800d32e:	697b      	ldr	r3, [r7, #20]
 800d330:	005b      	lsls	r3, r3, #1
 800d332:	fa02 f303 	lsl.w	r3, r2, r3
 800d336:	693a      	ldr	r2, [r7, #16]
 800d338:	4313      	orrs	r3, r2
 800d33a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	693a      	ldr	r2, [r7, #16]
 800d340:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800d342:	683b      	ldr	r3, [r7, #0]
 800d344:	685b      	ldr	r3, [r3, #4]
 800d346:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	f000 80b0 	beq.w	800d4b0 <HAL_GPIO_Init+0x468>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d350:	4b23      	ldr	r3, [pc, #140]	; (800d3e0 <HAL_GPIO_Init+0x398>)
 800d352:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d354:	4a22      	ldr	r2, [pc, #136]	; (800d3e0 <HAL_GPIO_Init+0x398>)
 800d356:	f043 0301 	orr.w	r3, r3, #1
 800d35a:	6613      	str	r3, [r2, #96]	; 0x60
 800d35c:	4b20      	ldr	r3, [pc, #128]	; (800d3e0 <HAL_GPIO_Init+0x398>)
 800d35e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d360:	f003 0301 	and.w	r3, r3, #1
 800d364:	60bb      	str	r3, [r7, #8]
 800d366:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800d368:	4a1e      	ldr	r2, [pc, #120]	; (800d3e4 <HAL_GPIO_Init+0x39c>)
 800d36a:	697b      	ldr	r3, [r7, #20]
 800d36c:	089b      	lsrs	r3, r3, #2
 800d36e:	3302      	adds	r3, #2
 800d370:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d374:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800d376:	697b      	ldr	r3, [r7, #20]
 800d378:	f003 0303 	and.w	r3, r3, #3
 800d37c:	009b      	lsls	r3, r3, #2
 800d37e:	220f      	movs	r2, #15
 800d380:	fa02 f303 	lsl.w	r3, r2, r3
 800d384:	43db      	mvns	r3, r3
 800d386:	693a      	ldr	r2, [r7, #16]
 800d388:	4013      	ands	r3, r2
 800d38a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800d392:	d029      	beq.n	800d3e8 <HAL_GPIO_Init+0x3a0>
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	4a0d      	ldr	r2, [pc, #52]	; (800d3cc <HAL_GPIO_Init+0x384>)
 800d398:	4293      	cmp	r3, r2
 800d39a:	d013      	beq.n	800d3c4 <HAL_GPIO_Init+0x37c>
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	4a0c      	ldr	r2, [pc, #48]	; (800d3d0 <HAL_GPIO_Init+0x388>)
 800d3a0:	4293      	cmp	r3, r2
 800d3a2:	d00d      	beq.n	800d3c0 <HAL_GPIO_Init+0x378>
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	4a0b      	ldr	r2, [pc, #44]	; (800d3d4 <HAL_GPIO_Init+0x38c>)
 800d3a8:	4293      	cmp	r3, r2
 800d3aa:	d007      	beq.n	800d3bc <HAL_GPIO_Init+0x374>
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	4a0a      	ldr	r2, [pc, #40]	; (800d3d8 <HAL_GPIO_Init+0x390>)
 800d3b0:	4293      	cmp	r3, r2
 800d3b2:	d101      	bne.n	800d3b8 <HAL_GPIO_Init+0x370>
 800d3b4:	2304      	movs	r3, #4
 800d3b6:	e018      	b.n	800d3ea <HAL_GPIO_Init+0x3a2>
 800d3b8:	2307      	movs	r3, #7
 800d3ba:	e016      	b.n	800d3ea <HAL_GPIO_Init+0x3a2>
 800d3bc:	2303      	movs	r3, #3
 800d3be:	e014      	b.n	800d3ea <HAL_GPIO_Init+0x3a2>
 800d3c0:	2302      	movs	r3, #2
 800d3c2:	e012      	b.n	800d3ea <HAL_GPIO_Init+0x3a2>
 800d3c4:	2301      	movs	r3, #1
 800d3c6:	e010      	b.n	800d3ea <HAL_GPIO_Init+0x3a2>
 800d3c8:	08018d08 	.word	0x08018d08
 800d3cc:	48000400 	.word	0x48000400
 800d3d0:	48000800 	.word	0x48000800
 800d3d4:	48000c00 	.word	0x48000c00
 800d3d8:	48001000 	.word	0x48001000
 800d3dc:	48001c00 	.word	0x48001c00
 800d3e0:	40021000 	.word	0x40021000
 800d3e4:	40010000 	.word	0x40010000
 800d3e8:	2300      	movs	r3, #0
 800d3ea:	697a      	ldr	r2, [r7, #20]
 800d3ec:	f002 0203 	and.w	r2, r2, #3
 800d3f0:	0092      	lsls	r2, r2, #2
 800d3f2:	4093      	lsls	r3, r2
 800d3f4:	693a      	ldr	r2, [r7, #16]
 800d3f6:	4313      	orrs	r3, r2
 800d3f8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800d3fa:	4935      	ldr	r1, [pc, #212]	; (800d4d0 <HAL_GPIO_Init+0x488>)
 800d3fc:	697b      	ldr	r3, [r7, #20]
 800d3fe:	089b      	lsrs	r3, r3, #2
 800d400:	3302      	adds	r3, #2
 800d402:	693a      	ldr	r2, [r7, #16]
 800d404:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800d408:	4b32      	ldr	r3, [pc, #200]	; (800d4d4 <HAL_GPIO_Init+0x48c>)
 800d40a:	689b      	ldr	r3, [r3, #8]
 800d40c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	43db      	mvns	r3, r3
 800d412:	693a      	ldr	r2, [r7, #16]
 800d414:	4013      	ands	r3, r2
 800d416:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800d418:	683b      	ldr	r3, [r7, #0]
 800d41a:	685b      	ldr	r3, [r3, #4]
 800d41c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d420:	2b00      	cmp	r3, #0
 800d422:	d003      	beq.n	800d42c <HAL_GPIO_Init+0x3e4>
        {
          temp |= iocurrent;
 800d424:	693a      	ldr	r2, [r7, #16]
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	4313      	orrs	r3, r2
 800d42a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800d42c:	4a29      	ldr	r2, [pc, #164]	; (800d4d4 <HAL_GPIO_Init+0x48c>)
 800d42e:	693b      	ldr	r3, [r7, #16]
 800d430:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800d432:	4b28      	ldr	r3, [pc, #160]	; (800d4d4 <HAL_GPIO_Init+0x48c>)
 800d434:	68db      	ldr	r3, [r3, #12]
 800d436:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	43db      	mvns	r3, r3
 800d43c:	693a      	ldr	r2, [r7, #16]
 800d43e:	4013      	ands	r3, r2
 800d440:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800d442:	683b      	ldr	r3, [r7, #0]
 800d444:	685b      	ldr	r3, [r3, #4]
 800d446:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d003      	beq.n	800d456 <HAL_GPIO_Init+0x40e>
        {
          temp |= iocurrent;
 800d44e:	693a      	ldr	r2, [r7, #16]
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	4313      	orrs	r3, r2
 800d454:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800d456:	4a1f      	ldr	r2, [pc, #124]	; (800d4d4 <HAL_GPIO_Init+0x48c>)
 800d458:	693b      	ldr	r3, [r7, #16]
 800d45a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800d45c:	4b1d      	ldr	r3, [pc, #116]	; (800d4d4 <HAL_GPIO_Init+0x48c>)
 800d45e:	685b      	ldr	r3, [r3, #4]
 800d460:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	43db      	mvns	r3, r3
 800d466:	693a      	ldr	r2, [r7, #16]
 800d468:	4013      	ands	r3, r2
 800d46a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800d46c:	683b      	ldr	r3, [r7, #0]
 800d46e:	685b      	ldr	r3, [r3, #4]
 800d470:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d474:	2b00      	cmp	r3, #0
 800d476:	d003      	beq.n	800d480 <HAL_GPIO_Init+0x438>
        {
          temp |= iocurrent;
 800d478:	693a      	ldr	r2, [r7, #16]
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	4313      	orrs	r3, r2
 800d47e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800d480:	4a14      	ldr	r2, [pc, #80]	; (800d4d4 <HAL_GPIO_Init+0x48c>)
 800d482:	693b      	ldr	r3, [r7, #16]
 800d484:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800d486:	4b13      	ldr	r3, [pc, #76]	; (800d4d4 <HAL_GPIO_Init+0x48c>)
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	43db      	mvns	r3, r3
 800d490:	693a      	ldr	r2, [r7, #16]
 800d492:	4013      	ands	r3, r2
 800d494:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800d496:	683b      	ldr	r3, [r7, #0]
 800d498:	685b      	ldr	r3, [r3, #4]
 800d49a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d003      	beq.n	800d4aa <HAL_GPIO_Init+0x462>
        {
          temp |= iocurrent;
 800d4a2:	693a      	ldr	r2, [r7, #16]
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	4313      	orrs	r3, r2
 800d4a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800d4aa:	4a0a      	ldr	r2, [pc, #40]	; (800d4d4 <HAL_GPIO_Init+0x48c>)
 800d4ac:	693b      	ldr	r3, [r7, #16]
 800d4ae:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800d4b0:	697b      	ldr	r3, [r7, #20]
 800d4b2:	3301      	adds	r3, #1
 800d4b4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800d4b6:	683b      	ldr	r3, [r7, #0]
 800d4b8:	681a      	ldr	r2, [r3, #0]
 800d4ba:	697b      	ldr	r3, [r7, #20]
 800d4bc:	fa22 f303 	lsr.w	r3, r2, r3
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	f47f ae4b 	bne.w	800d15c <HAL_GPIO_Init+0x114>
  }
}
 800d4c6:	bf00      	nop
 800d4c8:	bf00      	nop
 800d4ca:	3718      	adds	r7, #24
 800d4cc:	46bd      	mov	sp, r7
 800d4ce:	bd80      	pop	{r7, pc}
 800d4d0:	40010000 	.word	0x40010000
 800d4d4:	40010400 	.word	0x40010400

0800d4d8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800d4d8:	b580      	push	{r7, lr}
 800d4da:	b086      	sub	sp, #24
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	6078      	str	r0, [r7, #4]
 800d4e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800d4e2:	2300      	movs	r3, #0
 800d4e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800d4ec:	d018      	beq.n	800d520 <HAL_GPIO_DeInit+0x48>
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	4a75      	ldr	r2, [pc, #468]	; (800d6c8 <HAL_GPIO_DeInit+0x1f0>)
 800d4f2:	4293      	cmp	r3, r2
 800d4f4:	d014      	beq.n	800d520 <HAL_GPIO_DeInit+0x48>
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	4a74      	ldr	r2, [pc, #464]	; (800d6cc <HAL_GPIO_DeInit+0x1f4>)
 800d4fa:	4293      	cmp	r3, r2
 800d4fc:	d010      	beq.n	800d520 <HAL_GPIO_DeInit+0x48>
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	4a73      	ldr	r2, [pc, #460]	; (800d6d0 <HAL_GPIO_DeInit+0x1f8>)
 800d502:	4293      	cmp	r3, r2
 800d504:	d00c      	beq.n	800d520 <HAL_GPIO_DeInit+0x48>
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	4a72      	ldr	r2, [pc, #456]	; (800d6d4 <HAL_GPIO_DeInit+0x1fc>)
 800d50a:	4293      	cmp	r3, r2
 800d50c:	d008      	beq.n	800d520 <HAL_GPIO_DeInit+0x48>
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	4a71      	ldr	r2, [pc, #452]	; (800d6d8 <HAL_GPIO_DeInit+0x200>)
 800d512:	4293      	cmp	r3, r2
 800d514:	d004      	beq.n	800d520 <HAL_GPIO_DeInit+0x48>
 800d516:	f44f 719d 	mov.w	r1, #314	; 0x13a
 800d51a:	4870      	ldr	r0, [pc, #448]	; (800d6dc <HAL_GPIO_DeInit+0x204>)
 800d51c:	f7f7 f83a 	bl	8004594 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800d520:	683b      	ldr	r3, [r7, #0]
 800d522:	b29b      	uxth	r3, r3
 800d524:	2b00      	cmp	r3, #0
 800d526:	d005      	beq.n	800d534 <HAL_GPIO_DeInit+0x5c>
 800d528:	683b      	ldr	r3, [r7, #0]
 800d52a:	0c1b      	lsrs	r3, r3, #16
 800d52c:	041b      	lsls	r3, r3, #16
 800d52e:	2b00      	cmp	r3, #0
 800d530:	f000 80be 	beq.w	800d6b0 <HAL_GPIO_DeInit+0x1d8>
 800d534:	f240 113b 	movw	r1, #315	; 0x13b
 800d538:	4868      	ldr	r0, [pc, #416]	; (800d6dc <HAL_GPIO_DeInit+0x204>)
 800d53a:	f7f7 f82b 	bl	8004594 <assert_failed>

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800d53e:	e0b7      	b.n	800d6b0 <HAL_GPIO_DeInit+0x1d8>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800d540:	2201      	movs	r2, #1
 800d542:	697b      	ldr	r3, [r7, #20]
 800d544:	fa02 f303 	lsl.w	r3, r2, r3
 800d548:	683a      	ldr	r2, [r7, #0]
 800d54a:	4013      	ands	r3, r2
 800d54c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800d54e:	693b      	ldr	r3, [r7, #16]
 800d550:	2b00      	cmp	r3, #0
 800d552:	f000 80aa 	beq.w	800d6aa <HAL_GPIO_DeInit+0x1d2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800d556:	4a62      	ldr	r2, [pc, #392]	; (800d6e0 <HAL_GPIO_DeInit+0x208>)
 800d558:	697b      	ldr	r3, [r7, #20]
 800d55a:	089b      	lsrs	r3, r3, #2
 800d55c:	3302      	adds	r3, #2
 800d55e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d562:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800d564:	697b      	ldr	r3, [r7, #20]
 800d566:	f003 0303 	and.w	r3, r3, #3
 800d56a:	009b      	lsls	r3, r3, #2
 800d56c:	220f      	movs	r2, #15
 800d56e:	fa02 f303 	lsl.w	r3, r2, r3
 800d572:	68fa      	ldr	r2, [r7, #12]
 800d574:	4013      	ands	r3, r2
 800d576:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800d57e:	d019      	beq.n	800d5b4 <HAL_GPIO_DeInit+0xdc>
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	4a51      	ldr	r2, [pc, #324]	; (800d6c8 <HAL_GPIO_DeInit+0x1f0>)
 800d584:	4293      	cmp	r3, r2
 800d586:	d013      	beq.n	800d5b0 <HAL_GPIO_DeInit+0xd8>
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	4a50      	ldr	r2, [pc, #320]	; (800d6cc <HAL_GPIO_DeInit+0x1f4>)
 800d58c:	4293      	cmp	r3, r2
 800d58e:	d00d      	beq.n	800d5ac <HAL_GPIO_DeInit+0xd4>
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	4a4f      	ldr	r2, [pc, #316]	; (800d6d0 <HAL_GPIO_DeInit+0x1f8>)
 800d594:	4293      	cmp	r3, r2
 800d596:	d007      	beq.n	800d5a8 <HAL_GPIO_DeInit+0xd0>
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	4a4e      	ldr	r2, [pc, #312]	; (800d6d4 <HAL_GPIO_DeInit+0x1fc>)
 800d59c:	4293      	cmp	r3, r2
 800d59e:	d101      	bne.n	800d5a4 <HAL_GPIO_DeInit+0xcc>
 800d5a0:	2304      	movs	r3, #4
 800d5a2:	e008      	b.n	800d5b6 <HAL_GPIO_DeInit+0xde>
 800d5a4:	2307      	movs	r3, #7
 800d5a6:	e006      	b.n	800d5b6 <HAL_GPIO_DeInit+0xde>
 800d5a8:	2303      	movs	r3, #3
 800d5aa:	e004      	b.n	800d5b6 <HAL_GPIO_DeInit+0xde>
 800d5ac:	2302      	movs	r3, #2
 800d5ae:	e002      	b.n	800d5b6 <HAL_GPIO_DeInit+0xde>
 800d5b0:	2301      	movs	r3, #1
 800d5b2:	e000      	b.n	800d5b6 <HAL_GPIO_DeInit+0xde>
 800d5b4:	2300      	movs	r3, #0
 800d5b6:	697a      	ldr	r2, [r7, #20]
 800d5b8:	f002 0203 	and.w	r2, r2, #3
 800d5bc:	0092      	lsls	r2, r2, #2
 800d5be:	4093      	lsls	r3, r2
 800d5c0:	68fa      	ldr	r2, [r7, #12]
 800d5c2:	429a      	cmp	r2, r3
 800d5c4:	d132      	bne.n	800d62c <HAL_GPIO_DeInit+0x154>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800d5c6:	4b47      	ldr	r3, [pc, #284]	; (800d6e4 <HAL_GPIO_DeInit+0x20c>)
 800d5c8:	681a      	ldr	r2, [r3, #0]
 800d5ca:	693b      	ldr	r3, [r7, #16]
 800d5cc:	43db      	mvns	r3, r3
 800d5ce:	4945      	ldr	r1, [pc, #276]	; (800d6e4 <HAL_GPIO_DeInit+0x20c>)
 800d5d0:	4013      	ands	r3, r2
 800d5d2:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800d5d4:	4b43      	ldr	r3, [pc, #268]	; (800d6e4 <HAL_GPIO_DeInit+0x20c>)
 800d5d6:	685a      	ldr	r2, [r3, #4]
 800d5d8:	693b      	ldr	r3, [r7, #16]
 800d5da:	43db      	mvns	r3, r3
 800d5dc:	4941      	ldr	r1, [pc, #260]	; (800d6e4 <HAL_GPIO_DeInit+0x20c>)
 800d5de:	4013      	ands	r3, r2
 800d5e0:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800d5e2:	4b40      	ldr	r3, [pc, #256]	; (800d6e4 <HAL_GPIO_DeInit+0x20c>)
 800d5e4:	68da      	ldr	r2, [r3, #12]
 800d5e6:	693b      	ldr	r3, [r7, #16]
 800d5e8:	43db      	mvns	r3, r3
 800d5ea:	493e      	ldr	r1, [pc, #248]	; (800d6e4 <HAL_GPIO_DeInit+0x20c>)
 800d5ec:	4013      	ands	r3, r2
 800d5ee:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 800d5f0:	4b3c      	ldr	r3, [pc, #240]	; (800d6e4 <HAL_GPIO_DeInit+0x20c>)
 800d5f2:	689a      	ldr	r2, [r3, #8]
 800d5f4:	693b      	ldr	r3, [r7, #16]
 800d5f6:	43db      	mvns	r3, r3
 800d5f8:	493a      	ldr	r1, [pc, #232]	; (800d6e4 <HAL_GPIO_DeInit+0x20c>)
 800d5fa:	4013      	ands	r3, r2
 800d5fc:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800d5fe:	697b      	ldr	r3, [r7, #20]
 800d600:	f003 0303 	and.w	r3, r3, #3
 800d604:	009b      	lsls	r3, r3, #2
 800d606:	220f      	movs	r2, #15
 800d608:	fa02 f303 	lsl.w	r3, r2, r3
 800d60c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800d60e:	4a34      	ldr	r2, [pc, #208]	; (800d6e0 <HAL_GPIO_DeInit+0x208>)
 800d610:	697b      	ldr	r3, [r7, #20]
 800d612:	089b      	lsrs	r3, r3, #2
 800d614:	3302      	adds	r3, #2
 800d616:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	43da      	mvns	r2, r3
 800d61e:	4830      	ldr	r0, [pc, #192]	; (800d6e0 <HAL_GPIO_DeInit+0x208>)
 800d620:	697b      	ldr	r3, [r7, #20]
 800d622:	089b      	lsrs	r3, r3, #2
 800d624:	400a      	ands	r2, r1
 800d626:	3302      	adds	r3, #2
 800d628:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	681a      	ldr	r2, [r3, #0]
 800d630:	697b      	ldr	r3, [r7, #20]
 800d632:	005b      	lsls	r3, r3, #1
 800d634:	2103      	movs	r1, #3
 800d636:	fa01 f303 	lsl.w	r3, r1, r3
 800d63a:	431a      	orrs	r2, r3
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800d640:	697b      	ldr	r3, [r7, #20]
 800d642:	08da      	lsrs	r2, r3, #3
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	3208      	adds	r2, #8
 800d648:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d64c:	697b      	ldr	r3, [r7, #20]
 800d64e:	f003 0307 	and.w	r3, r3, #7
 800d652:	009b      	lsls	r3, r3, #2
 800d654:	220f      	movs	r2, #15
 800d656:	fa02 f303 	lsl.w	r3, r2, r3
 800d65a:	43db      	mvns	r3, r3
 800d65c:	697a      	ldr	r2, [r7, #20]
 800d65e:	08d2      	lsrs	r2, r2, #3
 800d660:	4019      	ands	r1, r3
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	3208      	adds	r2, #8
 800d666:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	689a      	ldr	r2, [r3, #8]
 800d66e:	697b      	ldr	r3, [r7, #20]
 800d670:	005b      	lsls	r3, r3, #1
 800d672:	2103      	movs	r1, #3
 800d674:	fa01 f303 	lsl.w	r3, r1, r3
 800d678:	43db      	mvns	r3, r3
 800d67a:	401a      	ands	r2, r3
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	685a      	ldr	r2, [r3, #4]
 800d684:	2101      	movs	r1, #1
 800d686:	697b      	ldr	r3, [r7, #20]
 800d688:	fa01 f303 	lsl.w	r3, r1, r3
 800d68c:	43db      	mvns	r3, r3
 800d68e:	401a      	ands	r2, r3
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	68da      	ldr	r2, [r3, #12]
 800d698:	697b      	ldr	r3, [r7, #20]
 800d69a:	005b      	lsls	r3, r3, #1
 800d69c:	2103      	movs	r1, #3
 800d69e:	fa01 f303 	lsl.w	r3, r1, r3
 800d6a2:	43db      	mvns	r3, r3
 800d6a4:	401a      	ands	r2, r3
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800d6aa:	697b      	ldr	r3, [r7, #20]
 800d6ac:	3301      	adds	r3, #1
 800d6ae:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800d6b0:	683a      	ldr	r2, [r7, #0]
 800d6b2:	697b      	ldr	r3, [r7, #20]
 800d6b4:	fa22 f303 	lsr.w	r3, r2, r3
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	f47f af41 	bne.w	800d540 <HAL_GPIO_DeInit+0x68>
  }
}
 800d6be:	bf00      	nop
 800d6c0:	bf00      	nop
 800d6c2:	3718      	adds	r7, #24
 800d6c4:	46bd      	mov	sp, r7
 800d6c6:	bd80      	pop	{r7, pc}
 800d6c8:	48000400 	.word	0x48000400
 800d6cc:	48000800 	.word	0x48000800
 800d6d0:	48000c00 	.word	0x48000c00
 800d6d4:	48001000 	.word	0x48001000
 800d6d8:	48001c00 	.word	0x48001c00
 800d6dc:	08018d08 	.word	0x08018d08
 800d6e0:	40010000 	.word	0x40010000
 800d6e4:	40010400 	.word	0x40010400

0800d6e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800d6e8:	b580      	push	{r7, lr}
 800d6ea:	b084      	sub	sp, #16
 800d6ec:	af00      	add	r7, sp, #0
 800d6ee:	6078      	str	r0, [r7, #4]
 800d6f0:	460b      	mov	r3, r1
 800d6f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800d6f4:	887b      	ldrh	r3, [r7, #2]
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d004      	beq.n	800d704 <HAL_GPIO_ReadPin+0x1c>
 800d6fa:	887b      	ldrh	r3, [r7, #2]
 800d6fc:	0c1b      	lsrs	r3, r3, #16
 800d6fe:	041b      	lsls	r3, r3, #16
 800d700:	2b00      	cmp	r3, #0
 800d702:	d004      	beq.n	800d70e <HAL_GPIO_ReadPin+0x26>
 800d704:	f44f 71c7 	mov.w	r1, #398	; 0x18e
 800d708:	4809      	ldr	r0, [pc, #36]	; (800d730 <HAL_GPIO_ReadPin+0x48>)
 800d70a:	f7f6 ff43 	bl	8004594 <assert_failed>

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	691a      	ldr	r2, [r3, #16]
 800d712:	887b      	ldrh	r3, [r7, #2]
 800d714:	4013      	ands	r3, r2
 800d716:	2b00      	cmp	r3, #0
 800d718:	d002      	beq.n	800d720 <HAL_GPIO_ReadPin+0x38>
  {
    bitstatus = GPIO_PIN_SET;
 800d71a:	2301      	movs	r3, #1
 800d71c:	73fb      	strb	r3, [r7, #15]
 800d71e:	e001      	b.n	800d724 <HAL_GPIO_ReadPin+0x3c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800d720:	2300      	movs	r3, #0
 800d722:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800d724:	7bfb      	ldrb	r3, [r7, #15]
}
 800d726:	4618      	mov	r0, r3
 800d728:	3710      	adds	r7, #16
 800d72a:	46bd      	mov	sp, r7
 800d72c:	bd80      	pop	{r7, pc}
 800d72e:	bf00      	nop
 800d730:	08018d08 	.word	0x08018d08

0800d734 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800d734:	b580      	push	{r7, lr}
 800d736:	b082      	sub	sp, #8
 800d738:	af00      	add	r7, sp, #0
 800d73a:	6078      	str	r0, [r7, #4]
 800d73c:	460b      	mov	r3, r1
 800d73e:	807b      	strh	r3, [r7, #2]
 800d740:	4613      	mov	r3, r2
 800d742:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800d744:	887b      	ldrh	r3, [r7, #2]
 800d746:	2b00      	cmp	r3, #0
 800d748:	d004      	beq.n	800d754 <HAL_GPIO_WritePin+0x20>
 800d74a:	887b      	ldrh	r3, [r7, #2]
 800d74c:	0c1b      	lsrs	r3, r3, #16
 800d74e:	041b      	lsls	r3, r3, #16
 800d750:	2b00      	cmp	r3, #0
 800d752:	d004      	beq.n	800d75e <HAL_GPIO_WritePin+0x2a>
 800d754:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d758:	480d      	ldr	r0, [pc, #52]	; (800d790 <HAL_GPIO_WritePin+0x5c>)
 800d75a:	f7f6 ff1b 	bl	8004594 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800d75e:	787b      	ldrb	r3, [r7, #1]
 800d760:	2b00      	cmp	r3, #0
 800d762:	d007      	beq.n	800d774 <HAL_GPIO_WritePin+0x40>
 800d764:	787b      	ldrb	r3, [r7, #1]
 800d766:	2b01      	cmp	r3, #1
 800d768:	d004      	beq.n	800d774 <HAL_GPIO_WritePin+0x40>
 800d76a:	f240 11af 	movw	r1, #431	; 0x1af
 800d76e:	4808      	ldr	r0, [pc, #32]	; (800d790 <HAL_GPIO_WritePin+0x5c>)
 800d770:	f7f6 ff10 	bl	8004594 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 800d774:	787b      	ldrb	r3, [r7, #1]
 800d776:	2b00      	cmp	r3, #0
 800d778:	d003      	beq.n	800d782 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800d77a:	887a      	ldrh	r2, [r7, #2]
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800d780:	e002      	b.n	800d788 <HAL_GPIO_WritePin+0x54>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800d782:	887a      	ldrh	r2, [r7, #2]
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	629a      	str	r2, [r3, #40]	; 0x28
}
 800d788:	bf00      	nop
 800d78a:	3708      	adds	r7, #8
 800d78c:	46bd      	mov	sp, r7
 800d78e:	bd80      	pop	{r7, pc}
 800d790:	08018d08 	.word	0x08018d08

0800d794 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800d794:	b580      	push	{r7, lr}
 800d796:	b084      	sub	sp, #16
 800d798:	af00      	add	r7, sp, #0
 800d79a:	6078      	str	r0, [r7, #4]
 800d79c:	460b      	mov	r3, r1
 800d79e:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800d7a0:	887b      	ldrh	r3, [r7, #2]
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d004      	beq.n	800d7b0 <HAL_GPIO_TogglePin+0x1c>
 800d7a6:	887b      	ldrh	r3, [r7, #2]
 800d7a8:	0c1b      	lsrs	r3, r3, #16
 800d7aa:	041b      	lsls	r3, r3, #16
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d004      	beq.n	800d7ba <HAL_GPIO_TogglePin+0x26>
 800d7b0:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 800d7b4:	480a      	ldr	r0, [pc, #40]	; (800d7e0 <HAL_GPIO_TogglePin+0x4c>)
 800d7b6:	f7f6 feed 	bl	8004594 <assert_failed>

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	695b      	ldr	r3, [r3, #20]
 800d7be:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800d7c0:	887a      	ldrh	r2, [r7, #2]
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	4013      	ands	r3, r2
 800d7c6:	041a      	lsls	r2, r3, #16
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	43d9      	mvns	r1, r3
 800d7cc:	887b      	ldrh	r3, [r7, #2]
 800d7ce:	400b      	ands	r3, r1
 800d7d0:	431a      	orrs	r2, r3
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	619a      	str	r2, [r3, #24]
}
 800d7d6:	bf00      	nop
 800d7d8:	3710      	adds	r7, #16
 800d7da:	46bd      	mov	sp, r7
 800d7dc:	bd80      	pop	{r7, pc}
 800d7de:	bf00      	nop
 800d7e0:	08018d08 	.word	0x08018d08

0800d7e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800d7e4:	b580      	push	{r7, lr}
 800d7e6:	b082      	sub	sp, #8
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	4603      	mov	r3, r0
 800d7ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800d7ee:	4b08      	ldr	r3, [pc, #32]	; (800d810 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800d7f0:	695a      	ldr	r2, [r3, #20]
 800d7f2:	88fb      	ldrh	r3, [r7, #6]
 800d7f4:	4013      	ands	r3, r2
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d006      	beq.n	800d808 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800d7fa:	4a05      	ldr	r2, [pc, #20]	; (800d810 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800d7fc:	88fb      	ldrh	r3, [r7, #6]
 800d7fe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800d800:	88fb      	ldrh	r3, [r7, #6]
 800d802:	4618      	mov	r0, r3
 800d804:	f7fa fea2 	bl	800854c <HAL_GPIO_EXTI_Callback>
  }
}
 800d808:	bf00      	nop
 800d80a:	3708      	adds	r7, #8
 800d80c:	46bd      	mov	sp, r7
 800d80e:	bd80      	pop	{r7, pc}
 800d810:	40010400 	.word	0x40010400

0800d814 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800d814:	b580      	push	{r7, lr}
 800d816:	b082      	sub	sp, #8
 800d818:	af00      	add	r7, sp, #0
 800d81a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d101      	bne.n	800d826 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800d822:	2301      	movs	r3, #1
 800d824:	e104      	b.n	800da30 <HAL_I2C_Init+0x21c>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	4a83      	ldr	r2, [pc, #524]	; (800da38 <HAL_I2C_Init+0x224>)
 800d82c:	4293      	cmp	r3, r2
 800d82e:	d00e      	beq.n	800d84e <HAL_I2C_Init+0x3a>
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	4a81      	ldr	r2, [pc, #516]	; (800da3c <HAL_I2C_Init+0x228>)
 800d836:	4293      	cmp	r3, r2
 800d838:	d009      	beq.n	800d84e <HAL_I2C_Init+0x3a>
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	4a80      	ldr	r2, [pc, #512]	; (800da40 <HAL_I2C_Init+0x22c>)
 800d840:	4293      	cmp	r3, r2
 800d842:	d004      	beq.n	800d84e <HAL_I2C_Init+0x3a>
 800d844:	f240 2119 	movw	r1, #537	; 0x219
 800d848:	487e      	ldr	r0, [pc, #504]	; (800da44 <HAL_I2C_Init+0x230>)
 800d84a:	f7f6 fea3 	bl	8004594 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	689b      	ldr	r3, [r3, #8]
 800d852:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d856:	d304      	bcc.n	800d862 <HAL_I2C_Init+0x4e>
 800d858:	f240 211a 	movw	r1, #538	; 0x21a
 800d85c:	4879      	ldr	r0, [pc, #484]	; (800da44 <HAL_I2C_Init+0x230>)
 800d85e:	f7f6 fe99 	bl	8004594 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	68db      	ldr	r3, [r3, #12]
 800d866:	2b01      	cmp	r3, #1
 800d868:	d008      	beq.n	800d87c <HAL_I2C_Init+0x68>
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	68db      	ldr	r3, [r3, #12]
 800d86e:	2b02      	cmp	r3, #2
 800d870:	d004      	beq.n	800d87c <HAL_I2C_Init+0x68>
 800d872:	f240 211b 	movw	r1, #539	; 0x21b
 800d876:	4873      	ldr	r0, [pc, #460]	; (800da44 <HAL_I2C_Init+0x230>)
 800d878:	f7f6 fe8c 	bl	8004594 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	691b      	ldr	r3, [r3, #16]
 800d880:	2b00      	cmp	r3, #0
 800d882:	d009      	beq.n	800d898 <HAL_I2C_Init+0x84>
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	691b      	ldr	r3, [r3, #16]
 800d888:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d88c:	d004      	beq.n	800d898 <HAL_I2C_Init+0x84>
 800d88e:	f44f 7107 	mov.w	r1, #540	; 0x21c
 800d892:	486c      	ldr	r0, [pc, #432]	; (800da44 <HAL_I2C_Init+0x230>)
 800d894:	f7f6 fe7e 	bl	8004594 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	695b      	ldr	r3, [r3, #20]
 800d89c:	2bff      	cmp	r3, #255	; 0xff
 800d89e:	d904      	bls.n	800d8aa <HAL_I2C_Init+0x96>
 800d8a0:	f240 211d 	movw	r1, #541	; 0x21d
 800d8a4:	4867      	ldr	r0, [pc, #412]	; (800da44 <HAL_I2C_Init+0x230>)
 800d8a6:	f7f6 fe75 	bl	8004594 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	699b      	ldr	r3, [r3, #24]
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d020      	beq.n	800d8f4 <HAL_I2C_Init+0xe0>
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	699b      	ldr	r3, [r3, #24]
 800d8b6:	2b01      	cmp	r3, #1
 800d8b8:	d01c      	beq.n	800d8f4 <HAL_I2C_Init+0xe0>
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	699b      	ldr	r3, [r3, #24]
 800d8be:	2b02      	cmp	r3, #2
 800d8c0:	d018      	beq.n	800d8f4 <HAL_I2C_Init+0xe0>
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	699b      	ldr	r3, [r3, #24]
 800d8c6:	2b03      	cmp	r3, #3
 800d8c8:	d014      	beq.n	800d8f4 <HAL_I2C_Init+0xe0>
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	699b      	ldr	r3, [r3, #24]
 800d8ce:	2b04      	cmp	r3, #4
 800d8d0:	d010      	beq.n	800d8f4 <HAL_I2C_Init+0xe0>
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	699b      	ldr	r3, [r3, #24]
 800d8d6:	2b05      	cmp	r3, #5
 800d8d8:	d00c      	beq.n	800d8f4 <HAL_I2C_Init+0xe0>
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	699b      	ldr	r3, [r3, #24]
 800d8de:	2b06      	cmp	r3, #6
 800d8e0:	d008      	beq.n	800d8f4 <HAL_I2C_Init+0xe0>
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	699b      	ldr	r3, [r3, #24]
 800d8e6:	2b07      	cmp	r3, #7
 800d8e8:	d004      	beq.n	800d8f4 <HAL_I2C_Init+0xe0>
 800d8ea:	f240 211e 	movw	r1, #542	; 0x21e
 800d8ee:	4855      	ldr	r0, [pc, #340]	; (800da44 <HAL_I2C_Init+0x230>)
 800d8f0:	f7f6 fe50 	bl	8004594 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	69db      	ldr	r3, [r3, #28]
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d009      	beq.n	800d910 <HAL_I2C_Init+0xfc>
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	69db      	ldr	r3, [r3, #28]
 800d900:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800d904:	d004      	beq.n	800d910 <HAL_I2C_Init+0xfc>
 800d906:	f240 211f 	movw	r1, #543	; 0x21f
 800d90a:	484e      	ldr	r0, [pc, #312]	; (800da44 <HAL_I2C_Init+0x230>)
 800d90c:	f7f6 fe42 	bl	8004594 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	6a1b      	ldr	r3, [r3, #32]
 800d914:	2b00      	cmp	r3, #0
 800d916:	d009      	beq.n	800d92c <HAL_I2C_Init+0x118>
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	6a1b      	ldr	r3, [r3, #32]
 800d91c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d920:	d004      	beq.n	800d92c <HAL_I2C_Init+0x118>
 800d922:	f44f 7108 	mov.w	r1, #544	; 0x220
 800d926:	4847      	ldr	r0, [pc, #284]	; (800da44 <HAL_I2C_Init+0x230>)
 800d928:	f7f6 fe34 	bl	8004594 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d932:	b2db      	uxtb	r3, r3
 800d934:	2b00      	cmp	r3, #0
 800d936:	d106      	bne.n	800d946 <HAL_I2C_Init+0x132>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	2200      	movs	r2, #0
 800d93c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800d940:	6878      	ldr	r0, [r7, #4]
 800d942:	f7f6 fbed 	bl	8004120 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	2224      	movs	r2, #36	; 0x24
 800d94a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	681a      	ldr	r2, [r3, #0]
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	f022 0201 	bic.w	r2, r2, #1
 800d95c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	685a      	ldr	r2, [r3, #4]
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800d96a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	689a      	ldr	r2, [r3, #8]
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d97a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	68db      	ldr	r3, [r3, #12]
 800d980:	2b01      	cmp	r3, #1
 800d982:	d107      	bne.n	800d994 <HAL_I2C_Init+0x180>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	689a      	ldr	r2, [r3, #8]
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d990:	609a      	str	r2, [r3, #8]
 800d992:	e006      	b.n	800d9a2 <HAL_I2C_Init+0x18e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	689a      	ldr	r2, [r3, #8]
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800d9a0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	68db      	ldr	r3, [r3, #12]
 800d9a6:	2b02      	cmp	r3, #2
 800d9a8:	d104      	bne.n	800d9b4 <HAL_I2C_Init+0x1a0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d9b2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	685b      	ldr	r3, [r3, #4]
 800d9ba:	687a      	ldr	r2, [r7, #4]
 800d9bc:	6812      	ldr	r2, [r2, #0]
 800d9be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800d9c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d9c6:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	68da      	ldr	r2, [r3, #12]
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d9d6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	691a      	ldr	r2, [r3, #16]
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	695b      	ldr	r3, [r3, #20]
 800d9e0:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	699b      	ldr	r3, [r3, #24]
 800d9e8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	430a      	orrs	r2, r1
 800d9f0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	69d9      	ldr	r1, [r3, #28]
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	6a1a      	ldr	r2, [r3, #32]
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	430a      	orrs	r2, r1
 800da00:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	681a      	ldr	r2, [r3, #0]
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	f042 0201 	orr.w	r2, r2, #1
 800da10:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	2200      	movs	r2, #0
 800da16:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	2220      	movs	r2, #32
 800da1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	2200      	movs	r2, #0
 800da24:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	2200      	movs	r2, #0
 800da2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800da2e:	2300      	movs	r3, #0
}
 800da30:	4618      	mov	r0, r3
 800da32:	3708      	adds	r7, #8
 800da34:	46bd      	mov	sp, r7
 800da36:	bd80      	pop	{r7, pc}
 800da38:	40005400 	.word	0x40005400
 800da3c:	40005800 	.word	0x40005800
 800da40:	40005c00 	.word	0x40005c00
 800da44:	08018d44 	.word	0x08018d44

0800da48 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800da48:	b580      	push	{r7, lr}
 800da4a:	b088      	sub	sp, #32
 800da4c:	af02      	add	r7, sp, #8
 800da4e:	60f8      	str	r0, [r7, #12]
 800da50:	4608      	mov	r0, r1
 800da52:	4611      	mov	r1, r2
 800da54:	461a      	mov	r2, r3
 800da56:	4603      	mov	r3, r0
 800da58:	817b      	strh	r3, [r7, #10]
 800da5a:	460b      	mov	r3, r1
 800da5c:	813b      	strh	r3, [r7, #8]
 800da5e:	4613      	mov	r3, r2
 800da60:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 800da62:	88fb      	ldrh	r3, [r7, #6]
 800da64:	2b01      	cmp	r3, #1
 800da66:	d007      	beq.n	800da78 <HAL_I2C_Mem_Write+0x30>
 800da68:	88fb      	ldrh	r3, [r7, #6]
 800da6a:	2b02      	cmp	r3, #2
 800da6c:	d004      	beq.n	800da78 <HAL_I2C_Mem_Write+0x30>
 800da6e:	f640 114f 	movw	r1, #2383	; 0x94f
 800da72:	4884      	ldr	r0, [pc, #528]	; (800dc84 <HAL_I2C_Mem_Write+0x23c>)
 800da74:	f7f6 fd8e 	bl	8004594 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800da7e:	b2db      	uxtb	r3, r3
 800da80:	2b20      	cmp	r3, #32
 800da82:	f040 80f9 	bne.w	800dc78 <HAL_I2C_Mem_Write+0x230>
  {
    if ((pData == NULL) || (Size == 0U))
 800da86:	6a3b      	ldr	r3, [r7, #32]
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d002      	beq.n	800da92 <HAL_I2C_Mem_Write+0x4a>
 800da8c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d105      	bne.n	800da9e <HAL_I2C_Mem_Write+0x56>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	f44f 7200 	mov.w	r2, #512	; 0x200
 800da98:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800da9a:	2301      	movs	r3, #1
 800da9c:	e0ed      	b.n	800dc7a <HAL_I2C_Mem_Write+0x232>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800daa4:	2b01      	cmp	r3, #1
 800daa6:	d101      	bne.n	800daac <HAL_I2C_Mem_Write+0x64>
 800daa8:	2302      	movs	r3, #2
 800daaa:	e0e6      	b.n	800dc7a <HAL_I2C_Mem_Write+0x232>
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	2201      	movs	r2, #1
 800dab0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800dab4:	f7fb fa00 	bl	8008eb8 <HAL_GetTick>
 800dab8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800daba:	697b      	ldr	r3, [r7, #20]
 800dabc:	9300      	str	r3, [sp, #0]
 800dabe:	2319      	movs	r3, #25
 800dac0:	2201      	movs	r2, #1
 800dac2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800dac6:	68f8      	ldr	r0, [r7, #12]
 800dac8:	f000 ffe9 	bl	800ea9e <I2C_WaitOnFlagUntilTimeout>
 800dacc:	4603      	mov	r3, r0
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d001      	beq.n	800dad6 <HAL_I2C_Mem_Write+0x8e>
    {
      return HAL_ERROR;
 800dad2:	2301      	movs	r3, #1
 800dad4:	e0d1      	b.n	800dc7a <HAL_I2C_Mem_Write+0x232>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	2221      	movs	r2, #33	; 0x21
 800dada:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	2240      	movs	r2, #64	; 0x40
 800dae2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	2200      	movs	r2, #0
 800daea:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	6a3a      	ldr	r2, [r7, #32]
 800daf0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800daf6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	2200      	movs	r2, #0
 800dafc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800dafe:	88f8      	ldrh	r0, [r7, #6]
 800db00:	893a      	ldrh	r2, [r7, #8]
 800db02:	8979      	ldrh	r1, [r7, #10]
 800db04:	697b      	ldr	r3, [r7, #20]
 800db06:	9301      	str	r3, [sp, #4]
 800db08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db0a:	9300      	str	r3, [sp, #0]
 800db0c:	4603      	mov	r3, r0
 800db0e:	68f8      	ldr	r0, [r7, #12]
 800db10:	f000 fba2 	bl	800e258 <I2C_RequestMemoryWrite>
 800db14:	4603      	mov	r3, r0
 800db16:	2b00      	cmp	r3, #0
 800db18:	d005      	beq.n	800db26 <HAL_I2C_Mem_Write+0xde>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	2200      	movs	r2, #0
 800db1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800db22:	2301      	movs	r3, #1
 800db24:	e0a9      	b.n	800dc7a <HAL_I2C_Mem_Write+0x232>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800db2a:	b29b      	uxth	r3, r3
 800db2c:	2bff      	cmp	r3, #255	; 0xff
 800db2e:	d90e      	bls.n	800db4e <HAL_I2C_Mem_Write+0x106>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	22ff      	movs	r2, #255	; 0xff
 800db34:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800db3a:	b2da      	uxtb	r2, r3
 800db3c:	8979      	ldrh	r1, [r7, #10]
 800db3e:	2300      	movs	r3, #0
 800db40:	9300      	str	r3, [sp, #0]
 800db42:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800db46:	68f8      	ldr	r0, [r7, #12]
 800db48:	f001 f952 	bl	800edf0 <I2C_TransferConfig>
 800db4c:	e00f      	b.n	800db6e <HAL_I2C_Mem_Write+0x126>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800db52:	b29a      	uxth	r2, r3
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800db5c:	b2da      	uxtb	r2, r3
 800db5e:	8979      	ldrh	r1, [r7, #10]
 800db60:	2300      	movs	r3, #0
 800db62:	9300      	str	r3, [sp, #0]
 800db64:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800db68:	68f8      	ldr	r0, [r7, #12]
 800db6a:	f001 f941 	bl	800edf0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800db6e:	697a      	ldr	r2, [r7, #20]
 800db70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800db72:	68f8      	ldr	r0, [r7, #12]
 800db74:	f000 ffd3 	bl	800eb1e <I2C_WaitOnTXISFlagUntilTimeout>
 800db78:	4603      	mov	r3, r0
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d001      	beq.n	800db82 <HAL_I2C_Mem_Write+0x13a>
      {
        return HAL_ERROR;
 800db7e:	2301      	movs	r3, #1
 800db80:	e07b      	b.n	800dc7a <HAL_I2C_Mem_Write+0x232>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db86:	781a      	ldrb	r2, [r3, #0]
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db92:	1c5a      	adds	r2, r3, #1
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800db9c:	b29b      	uxth	r3, r3
 800db9e:	3b01      	subs	r3, #1
 800dba0:	b29a      	uxth	r2, r3
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dbaa:	3b01      	subs	r3, #1
 800dbac:	b29a      	uxth	r2, r3
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dbb6:	b29b      	uxth	r3, r3
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d034      	beq.n	800dc26 <HAL_I2C_Mem_Write+0x1de>
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d130      	bne.n	800dc26 <HAL_I2C_Mem_Write+0x1de>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800dbc4:	697b      	ldr	r3, [r7, #20]
 800dbc6:	9300      	str	r3, [sp, #0]
 800dbc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbca:	2200      	movs	r2, #0
 800dbcc:	2180      	movs	r1, #128	; 0x80
 800dbce:	68f8      	ldr	r0, [r7, #12]
 800dbd0:	f000 ff65 	bl	800ea9e <I2C_WaitOnFlagUntilTimeout>
 800dbd4:	4603      	mov	r3, r0
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d001      	beq.n	800dbde <HAL_I2C_Mem_Write+0x196>
        {
          return HAL_ERROR;
 800dbda:	2301      	movs	r3, #1
 800dbdc:	e04d      	b.n	800dc7a <HAL_I2C_Mem_Write+0x232>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dbe2:	b29b      	uxth	r3, r3
 800dbe4:	2bff      	cmp	r3, #255	; 0xff
 800dbe6:	d90e      	bls.n	800dc06 <HAL_I2C_Mem_Write+0x1be>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	22ff      	movs	r2, #255	; 0xff
 800dbec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dbf2:	b2da      	uxtb	r2, r3
 800dbf4:	8979      	ldrh	r1, [r7, #10]
 800dbf6:	2300      	movs	r3, #0
 800dbf8:	9300      	str	r3, [sp, #0]
 800dbfa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800dbfe:	68f8      	ldr	r0, [r7, #12]
 800dc00:	f001 f8f6 	bl	800edf0 <I2C_TransferConfig>
 800dc04:	e00f      	b.n	800dc26 <HAL_I2C_Mem_Write+0x1de>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dc0a:	b29a      	uxth	r2, r3
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dc14:	b2da      	uxtb	r2, r3
 800dc16:	8979      	ldrh	r1, [r7, #10]
 800dc18:	2300      	movs	r3, #0
 800dc1a:	9300      	str	r3, [sp, #0]
 800dc1c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800dc20:	68f8      	ldr	r0, [r7, #12]
 800dc22:	f001 f8e5 	bl	800edf0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dc2a:	b29b      	uxth	r3, r3
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d19e      	bne.n	800db6e <HAL_I2C_Mem_Write+0x126>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800dc30:	697a      	ldr	r2, [r7, #20]
 800dc32:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dc34:	68f8      	ldr	r0, [r7, #12]
 800dc36:	f000 ffb2 	bl	800eb9e <I2C_WaitOnSTOPFlagUntilTimeout>
 800dc3a:	4603      	mov	r3, r0
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d001      	beq.n	800dc44 <HAL_I2C_Mem_Write+0x1fc>
    {
      return HAL_ERROR;
 800dc40:	2301      	movs	r3, #1
 800dc42:	e01a      	b.n	800dc7a <HAL_I2C_Mem_Write+0x232>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	2220      	movs	r2, #32
 800dc4a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	6859      	ldr	r1, [r3, #4]
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	681a      	ldr	r2, [r3, #0]
 800dc56:	4b0c      	ldr	r3, [pc, #48]	; (800dc88 <HAL_I2C_Mem_Write+0x240>)
 800dc58:	400b      	ands	r3, r1
 800dc5a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	2220      	movs	r2, #32
 800dc60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	2200      	movs	r2, #0
 800dc68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	2200      	movs	r2, #0
 800dc70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800dc74:	2300      	movs	r3, #0
 800dc76:	e000      	b.n	800dc7a <HAL_I2C_Mem_Write+0x232>
  }
  else
  {
    return HAL_BUSY;
 800dc78:	2302      	movs	r3, #2
  }
}
 800dc7a:	4618      	mov	r0, r3
 800dc7c:	3718      	adds	r7, #24
 800dc7e:	46bd      	mov	sp, r7
 800dc80:	bd80      	pop	{r7, pc}
 800dc82:	bf00      	nop
 800dc84:	08018d44 	.word	0x08018d44
 800dc88:	fe00e800 	.word	0xfe00e800

0800dc8c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dc8c:	b580      	push	{r7, lr}
 800dc8e:	b088      	sub	sp, #32
 800dc90:	af02      	add	r7, sp, #8
 800dc92:	60f8      	str	r0, [r7, #12]
 800dc94:	4608      	mov	r0, r1
 800dc96:	4611      	mov	r1, r2
 800dc98:	461a      	mov	r2, r3
 800dc9a:	4603      	mov	r3, r0
 800dc9c:	817b      	strh	r3, [r7, #10]
 800dc9e:	460b      	mov	r3, r1
 800dca0:	813b      	strh	r3, [r7, #8]
 800dca2:	4613      	mov	r3, r2
 800dca4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 800dca6:	88fb      	ldrh	r3, [r7, #6]
 800dca8:	2b01      	cmp	r3, #1
 800dcaa:	d007      	beq.n	800dcbc <HAL_I2C_Mem_Read+0x30>
 800dcac:	88fb      	ldrh	r3, [r7, #6]
 800dcae:	2b02      	cmp	r3, #2
 800dcb0:	d004      	beq.n	800dcbc <HAL_I2C_Mem_Read+0x30>
 800dcb2:	f640 11d8 	movw	r1, #2520	; 0x9d8
 800dcb6:	4886      	ldr	r0, [pc, #536]	; (800ded0 <HAL_I2C_Mem_Read+0x244>)
 800dcb8:	f7f6 fc6c 	bl	8004594 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dcc2:	b2db      	uxtb	r3, r3
 800dcc4:	2b20      	cmp	r3, #32
 800dcc6:	f040 80fd 	bne.w	800dec4 <HAL_I2C_Mem_Read+0x238>
  {
    if ((pData == NULL) || (Size == 0U))
 800dcca:	6a3b      	ldr	r3, [r7, #32]
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d002      	beq.n	800dcd6 <HAL_I2C_Mem_Read+0x4a>
 800dcd0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d105      	bne.n	800dce2 <HAL_I2C_Mem_Read+0x56>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dcdc:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800dcde:	2301      	movs	r3, #1
 800dce0:	e0f1      	b.n	800dec6 <HAL_I2C_Mem_Read+0x23a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800dce8:	2b01      	cmp	r3, #1
 800dcea:	d101      	bne.n	800dcf0 <HAL_I2C_Mem_Read+0x64>
 800dcec:	2302      	movs	r3, #2
 800dcee:	e0ea      	b.n	800dec6 <HAL_I2C_Mem_Read+0x23a>
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	2201      	movs	r2, #1
 800dcf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800dcf8:	f7fb f8de 	bl	8008eb8 <HAL_GetTick>
 800dcfc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800dcfe:	697b      	ldr	r3, [r7, #20]
 800dd00:	9300      	str	r3, [sp, #0]
 800dd02:	2319      	movs	r3, #25
 800dd04:	2201      	movs	r2, #1
 800dd06:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800dd0a:	68f8      	ldr	r0, [r7, #12]
 800dd0c:	f000 fec7 	bl	800ea9e <I2C_WaitOnFlagUntilTimeout>
 800dd10:	4603      	mov	r3, r0
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d001      	beq.n	800dd1a <HAL_I2C_Mem_Read+0x8e>
    {
      return HAL_ERROR;
 800dd16:	2301      	movs	r3, #1
 800dd18:	e0d5      	b.n	800dec6 <HAL_I2C_Mem_Read+0x23a>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	2222      	movs	r2, #34	; 0x22
 800dd1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	2240      	movs	r2, #64	; 0x40
 800dd26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	2200      	movs	r2, #0
 800dd2e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	6a3a      	ldr	r2, [r7, #32]
 800dd34:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800dd3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	2200      	movs	r2, #0
 800dd40:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800dd42:	88f8      	ldrh	r0, [r7, #6]
 800dd44:	893a      	ldrh	r2, [r7, #8]
 800dd46:	8979      	ldrh	r1, [r7, #10]
 800dd48:	697b      	ldr	r3, [r7, #20]
 800dd4a:	9301      	str	r3, [sp, #4]
 800dd4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd4e:	9300      	str	r3, [sp, #0]
 800dd50:	4603      	mov	r3, r0
 800dd52:	68f8      	ldr	r0, [r7, #12]
 800dd54:	f000 fad4 	bl	800e300 <I2C_RequestMemoryRead>
 800dd58:	4603      	mov	r3, r0
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d005      	beq.n	800dd6a <HAL_I2C_Mem_Read+0xde>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	2200      	movs	r2, #0
 800dd62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800dd66:	2301      	movs	r3, #1
 800dd68:	e0ad      	b.n	800dec6 <HAL_I2C_Mem_Read+0x23a>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dd6e:	b29b      	uxth	r3, r3
 800dd70:	2bff      	cmp	r3, #255	; 0xff
 800dd72:	d90e      	bls.n	800dd92 <HAL_I2C_Mem_Read+0x106>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	22ff      	movs	r2, #255	; 0xff
 800dd78:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dd7e:	b2da      	uxtb	r2, r3
 800dd80:	8979      	ldrh	r1, [r7, #10]
 800dd82:	4b54      	ldr	r3, [pc, #336]	; (800ded4 <HAL_I2C_Mem_Read+0x248>)
 800dd84:	9300      	str	r3, [sp, #0]
 800dd86:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800dd8a:	68f8      	ldr	r0, [r7, #12]
 800dd8c:	f001 f830 	bl	800edf0 <I2C_TransferConfig>
 800dd90:	e00f      	b.n	800ddb2 <HAL_I2C_Mem_Read+0x126>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dd96:	b29a      	uxth	r2, r3
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dda0:	b2da      	uxtb	r2, r3
 800dda2:	8979      	ldrh	r1, [r7, #10]
 800dda4:	4b4b      	ldr	r3, [pc, #300]	; (800ded4 <HAL_I2C_Mem_Read+0x248>)
 800dda6:	9300      	str	r3, [sp, #0]
 800dda8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ddac:	68f8      	ldr	r0, [r7, #12]
 800ddae:	f001 f81f 	bl	800edf0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800ddb2:	697b      	ldr	r3, [r7, #20]
 800ddb4:	9300      	str	r3, [sp, #0]
 800ddb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddb8:	2200      	movs	r2, #0
 800ddba:	2104      	movs	r1, #4
 800ddbc:	68f8      	ldr	r0, [r7, #12]
 800ddbe:	f000 fe6e 	bl	800ea9e <I2C_WaitOnFlagUntilTimeout>
 800ddc2:	4603      	mov	r3, r0
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d001      	beq.n	800ddcc <HAL_I2C_Mem_Read+0x140>
      {
        return HAL_ERROR;
 800ddc8:	2301      	movs	r3, #1
 800ddca:	e07c      	b.n	800dec6 <HAL_I2C_Mem_Read+0x23a>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddd6:	b2d2      	uxtb	r2, r2
 800ddd8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddde:	1c5a      	adds	r2, r3, #1
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dde8:	3b01      	subs	r3, #1
 800ddea:	b29a      	uxth	r2, r3
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ddf4:	b29b      	uxth	r3, r3
 800ddf6:	3b01      	subs	r3, #1
 800ddf8:	b29a      	uxth	r2, r3
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800de02:	b29b      	uxth	r3, r3
 800de04:	2b00      	cmp	r3, #0
 800de06:	d034      	beq.n	800de72 <HAL_I2C_Mem_Read+0x1e6>
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d130      	bne.n	800de72 <HAL_I2C_Mem_Read+0x1e6>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800de10:	697b      	ldr	r3, [r7, #20]
 800de12:	9300      	str	r3, [sp, #0]
 800de14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de16:	2200      	movs	r2, #0
 800de18:	2180      	movs	r1, #128	; 0x80
 800de1a:	68f8      	ldr	r0, [r7, #12]
 800de1c:	f000 fe3f 	bl	800ea9e <I2C_WaitOnFlagUntilTimeout>
 800de20:	4603      	mov	r3, r0
 800de22:	2b00      	cmp	r3, #0
 800de24:	d001      	beq.n	800de2a <HAL_I2C_Mem_Read+0x19e>
        {
          return HAL_ERROR;
 800de26:	2301      	movs	r3, #1
 800de28:	e04d      	b.n	800dec6 <HAL_I2C_Mem_Read+0x23a>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800de2e:	b29b      	uxth	r3, r3
 800de30:	2bff      	cmp	r3, #255	; 0xff
 800de32:	d90e      	bls.n	800de52 <HAL_I2C_Mem_Read+0x1c6>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	22ff      	movs	r2, #255	; 0xff
 800de38:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800de3e:	b2da      	uxtb	r2, r3
 800de40:	8979      	ldrh	r1, [r7, #10]
 800de42:	2300      	movs	r3, #0
 800de44:	9300      	str	r3, [sp, #0]
 800de46:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800de4a:	68f8      	ldr	r0, [r7, #12]
 800de4c:	f000 ffd0 	bl	800edf0 <I2C_TransferConfig>
 800de50:	e00f      	b.n	800de72 <HAL_I2C_Mem_Read+0x1e6>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800de56:	b29a      	uxth	r2, r3
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800de60:	b2da      	uxtb	r2, r3
 800de62:	8979      	ldrh	r1, [r7, #10]
 800de64:	2300      	movs	r3, #0
 800de66:	9300      	str	r3, [sp, #0]
 800de68:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800de6c:	68f8      	ldr	r0, [r7, #12]
 800de6e:	f000 ffbf 	bl	800edf0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800de76:	b29b      	uxth	r3, r3
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d19a      	bne.n	800ddb2 <HAL_I2C_Mem_Read+0x126>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800de7c:	697a      	ldr	r2, [r7, #20]
 800de7e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800de80:	68f8      	ldr	r0, [r7, #12]
 800de82:	f000 fe8c 	bl	800eb9e <I2C_WaitOnSTOPFlagUntilTimeout>
 800de86:	4603      	mov	r3, r0
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d001      	beq.n	800de90 <HAL_I2C_Mem_Read+0x204>
    {
      return HAL_ERROR;
 800de8c:	2301      	movs	r3, #1
 800de8e:	e01a      	b.n	800dec6 <HAL_I2C_Mem_Read+0x23a>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	2220      	movs	r2, #32
 800de96:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	6859      	ldr	r1, [r3, #4]
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	681a      	ldr	r2, [r3, #0]
 800dea2:	4b0d      	ldr	r3, [pc, #52]	; (800ded8 <HAL_I2C_Mem_Read+0x24c>)
 800dea4:	400b      	ands	r3, r1
 800dea6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	2220      	movs	r2, #32
 800deac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	2200      	movs	r2, #0
 800deb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	2200      	movs	r2, #0
 800debc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800dec0:	2300      	movs	r3, #0
 800dec2:	e000      	b.n	800dec6 <HAL_I2C_Mem_Read+0x23a>
  }
  else
  {
    return HAL_BUSY;
 800dec4:	2302      	movs	r3, #2
  }
}
 800dec6:	4618      	mov	r0, r3
 800dec8:	3718      	adds	r7, #24
 800deca:	46bd      	mov	sp, r7
 800decc:	bd80      	pop	{r7, pc}
 800dece:	bf00      	nop
 800ded0:	08018d44 	.word	0x08018d44
 800ded4:	80002400 	.word	0x80002400
 800ded8:	fe00e800 	.word	0xfe00e800

0800dedc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800dedc:	b580      	push	{r7, lr}
 800dede:	b084      	sub	sp, #16
 800dee0:	af00      	add	r7, sp, #0
 800dee2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	699b      	ldr	r3, [r3, #24]
 800deea:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800def8:	2b00      	cmp	r3, #0
 800defa:	d005      	beq.n	800df08 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df00:	68ba      	ldr	r2, [r7, #8]
 800df02:	68f9      	ldr	r1, [r7, #12]
 800df04:	6878      	ldr	r0, [r7, #4]
 800df06:	4798      	blx	r3
  }
}
 800df08:	bf00      	nop
 800df0a:	3710      	adds	r7, #16
 800df0c:	46bd      	mov	sp, r7
 800df0e:	bd80      	pop	{r7, pc}

0800df10 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800df10:	b580      	push	{r7, lr}
 800df12:	b086      	sub	sp, #24
 800df14:	af00      	add	r7, sp, #0
 800df16:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	699b      	ldr	r3, [r3, #24]
 800df1e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800df28:	697b      	ldr	r3, [r7, #20]
 800df2a:	0a1b      	lsrs	r3, r3, #8
 800df2c:	f003 0301 	and.w	r3, r3, #1
 800df30:	2b00      	cmp	r3, #0
 800df32:	d010      	beq.n	800df56 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800df34:	693b      	ldr	r3, [r7, #16]
 800df36:	09db      	lsrs	r3, r3, #7
 800df38:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d00a      	beq.n	800df56 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800df44:	f043 0201 	orr.w	r2, r3, #1
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	f44f 7280 	mov.w	r2, #256	; 0x100
 800df54:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800df56:	697b      	ldr	r3, [r7, #20]
 800df58:	0a9b      	lsrs	r3, r3, #10
 800df5a:	f003 0301 	and.w	r3, r3, #1
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d010      	beq.n	800df84 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800df62:	693b      	ldr	r3, [r7, #16]
 800df64:	09db      	lsrs	r3, r3, #7
 800df66:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d00a      	beq.n	800df84 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800df72:	f043 0208 	orr.w	r2, r3, #8
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800df82:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800df84:	697b      	ldr	r3, [r7, #20]
 800df86:	0a5b      	lsrs	r3, r3, #9
 800df88:	f003 0301 	and.w	r3, r3, #1
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d010      	beq.n	800dfb2 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800df90:	693b      	ldr	r3, [r7, #16]
 800df92:	09db      	lsrs	r3, r3, #7
 800df94:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d00a      	beq.n	800dfb2 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dfa0:	f043 0202 	orr.w	r2, r3, #2
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dfb0:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dfb6:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	f003 030b 	and.w	r3, r3, #11
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d003      	beq.n	800dfca <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800dfc2:	68f9      	ldr	r1, [r7, #12]
 800dfc4:	6878      	ldr	r0, [r7, #4]
 800dfc6:	f000 fc31 	bl	800e82c <I2C_ITError>
  }
}
 800dfca:	bf00      	nop
 800dfcc:	3718      	adds	r7, #24
 800dfce:	46bd      	mov	sp, r7
 800dfd0:	bd80      	pop	{r7, pc}

0800dfd2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800dfd2:	b480      	push	{r7}
 800dfd4:	b083      	sub	sp, #12
 800dfd6:	af00      	add	r7, sp, #0
 800dfd8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800dfda:	bf00      	nop
 800dfdc:	370c      	adds	r7, #12
 800dfde:	46bd      	mov	sp, r7
 800dfe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe4:	4770      	bx	lr

0800dfe6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800dfe6:	b480      	push	{r7}
 800dfe8:	b083      	sub	sp, #12
 800dfea:	af00      	add	r7, sp, #0
 800dfec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800dfee:	bf00      	nop
 800dff0:	370c      	adds	r7, #12
 800dff2:	46bd      	mov	sp, r7
 800dff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff8:	4770      	bx	lr

0800dffa <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800dffa:	b480      	push	{r7}
 800dffc:	b083      	sub	sp, #12
 800dffe:	af00      	add	r7, sp, #0
 800e000:	6078      	str	r0, [r7, #4]
 800e002:	460b      	mov	r3, r1
 800e004:	70fb      	strb	r3, [r7, #3]
 800e006:	4613      	mov	r3, r2
 800e008:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800e00a:	bf00      	nop
 800e00c:	370c      	adds	r7, #12
 800e00e:	46bd      	mov	sp, r7
 800e010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e014:	4770      	bx	lr

0800e016 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800e016:	b480      	push	{r7}
 800e018:	b083      	sub	sp, #12
 800e01a:	af00      	add	r7, sp, #0
 800e01c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800e01e:	bf00      	nop
 800e020:	370c      	adds	r7, #12
 800e022:	46bd      	mov	sp, r7
 800e024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e028:	4770      	bx	lr

0800e02a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800e02a:	b480      	push	{r7}
 800e02c:	b083      	sub	sp, #12
 800e02e:	af00      	add	r7, sp, #0
 800e030:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800e032:	bf00      	nop
 800e034:	370c      	adds	r7, #12
 800e036:	46bd      	mov	sp, r7
 800e038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e03c:	4770      	bx	lr

0800e03e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800e03e:	b480      	push	{r7}
 800e040:	b083      	sub	sp, #12
 800e042:	af00      	add	r7, sp, #0
 800e044:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800e046:	bf00      	nop
 800e048:	370c      	adds	r7, #12
 800e04a:	46bd      	mov	sp, r7
 800e04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e050:	4770      	bx	lr

0800e052 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800e052:	b580      	push	{r7, lr}
 800e054:	b086      	sub	sp, #24
 800e056:	af00      	add	r7, sp, #0
 800e058:	60f8      	str	r0, [r7, #12]
 800e05a:	60b9      	str	r1, [r7, #8]
 800e05c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e062:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800e064:	68bb      	ldr	r3, [r7, #8]
 800e066:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e06e:	2b01      	cmp	r3, #1
 800e070:	d101      	bne.n	800e076 <I2C_Slave_ISR_IT+0x24>
 800e072:	2302      	movs	r3, #2
 800e074:	e0ec      	b.n	800e250 <I2C_Slave_ISR_IT+0x1fe>
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	2201      	movs	r2, #1
 800e07a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800e07e:	693b      	ldr	r3, [r7, #16]
 800e080:	095b      	lsrs	r3, r3, #5
 800e082:	f003 0301 	and.w	r3, r3, #1
 800e086:	2b00      	cmp	r3, #0
 800e088:	d009      	beq.n	800e09e <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	095b      	lsrs	r3, r3, #5
 800e08e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800e092:	2b00      	cmp	r3, #0
 800e094:	d003      	beq.n	800e09e <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800e096:	6939      	ldr	r1, [r7, #16]
 800e098:	68f8      	ldr	r0, [r7, #12]
 800e09a:	f000 fa67 	bl	800e56c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800e09e:	693b      	ldr	r3, [r7, #16]
 800e0a0:	091b      	lsrs	r3, r3, #4
 800e0a2:	f003 0301 	and.w	r3, r3, #1
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d04d      	beq.n	800e146 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	091b      	lsrs	r3, r3, #4
 800e0ae:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d047      	beq.n	800e146 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e0ba:	b29b      	uxth	r3, r3
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d128      	bne.n	800e112 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e0c6:	b2db      	uxtb	r3, r3
 800e0c8:	2b28      	cmp	r3, #40	; 0x28
 800e0ca:	d108      	bne.n	800e0de <I2C_Slave_ISR_IT+0x8c>
 800e0cc:	697b      	ldr	r3, [r7, #20]
 800e0ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e0d2:	d104      	bne.n	800e0de <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800e0d4:	6939      	ldr	r1, [r7, #16]
 800e0d6:	68f8      	ldr	r0, [r7, #12]
 800e0d8:	f000 fb52 	bl	800e780 <I2C_ITListenCplt>
 800e0dc:	e032      	b.n	800e144 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e0e4:	b2db      	uxtb	r3, r3
 800e0e6:	2b29      	cmp	r3, #41	; 0x29
 800e0e8:	d10e      	bne.n	800e108 <I2C_Slave_ISR_IT+0xb6>
 800e0ea:	697b      	ldr	r3, [r7, #20]
 800e0ec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800e0f0:	d00a      	beq.n	800e108 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	2210      	movs	r2, #16
 800e0f8:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800e0fa:	68f8      	ldr	r0, [r7, #12]
 800e0fc:	f000 fc8d 	bl	800ea1a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800e100:	68f8      	ldr	r0, [r7, #12]
 800e102:	f000 f9d5 	bl	800e4b0 <I2C_ITSlaveSeqCplt>
 800e106:	e01d      	b.n	800e144 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	2210      	movs	r2, #16
 800e10e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800e110:	e096      	b.n	800e240 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	2210      	movs	r2, #16
 800e118:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e11e:	f043 0204 	orr.w	r2, r3, #4
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800e126:	697b      	ldr	r3, [r7, #20]
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d004      	beq.n	800e136 <I2C_Slave_ISR_IT+0xe4>
 800e12c:	697b      	ldr	r3, [r7, #20]
 800e12e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800e132:	f040 8085 	bne.w	800e240 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e13a:	4619      	mov	r1, r3
 800e13c:	68f8      	ldr	r0, [r7, #12]
 800e13e:	f000 fb75 	bl	800e82c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800e142:	e07d      	b.n	800e240 <I2C_Slave_ISR_IT+0x1ee>
 800e144:	e07c      	b.n	800e240 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800e146:	693b      	ldr	r3, [r7, #16]
 800e148:	089b      	lsrs	r3, r3, #2
 800e14a:	f003 0301 	and.w	r3, r3, #1
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d030      	beq.n	800e1b4 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	089b      	lsrs	r3, r3, #2
 800e156:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d02a      	beq.n	800e1b4 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e162:	b29b      	uxth	r3, r3
 800e164:	2b00      	cmp	r3, #0
 800e166:	d018      	beq.n	800e19a <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e172:	b2d2      	uxtb	r2, r2
 800e174:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e17a:	1c5a      	adds	r2, r3, #1
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e184:	3b01      	subs	r3, #1
 800e186:	b29a      	uxth	r2, r3
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e190:	b29b      	uxth	r3, r3
 800e192:	3b01      	subs	r3, #1
 800e194:	b29a      	uxth	r2, r3
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e19e:	b29b      	uxth	r3, r3
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d14f      	bne.n	800e244 <I2C_Slave_ISR_IT+0x1f2>
 800e1a4:	697b      	ldr	r3, [r7, #20]
 800e1a6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800e1aa:	d04b      	beq.n	800e244 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800e1ac:	68f8      	ldr	r0, [r7, #12]
 800e1ae:	f000 f97f 	bl	800e4b0 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800e1b2:	e047      	b.n	800e244 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800e1b4:	693b      	ldr	r3, [r7, #16]
 800e1b6:	08db      	lsrs	r3, r3, #3
 800e1b8:	f003 0301 	and.w	r3, r3, #1
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d00a      	beq.n	800e1d6 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	08db      	lsrs	r3, r3, #3
 800e1c4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d004      	beq.n	800e1d6 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800e1cc:	6939      	ldr	r1, [r7, #16]
 800e1ce:	68f8      	ldr	r0, [r7, #12]
 800e1d0:	f000 f8ea 	bl	800e3a8 <I2C_ITAddrCplt>
 800e1d4:	e037      	b.n	800e246 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800e1d6:	693b      	ldr	r3, [r7, #16]
 800e1d8:	085b      	lsrs	r3, r3, #1
 800e1da:	f003 0301 	and.w	r3, r3, #1
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d031      	beq.n	800e246 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	085b      	lsrs	r3, r3, #1
 800e1e6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d02b      	beq.n	800e246 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e1f2:	b29b      	uxth	r3, r3
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d018      	beq.n	800e22a <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1fc:	781a      	ldrb	r2, [r3, #0]
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e208:	1c5a      	adds	r2, r3, #1
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e212:	b29b      	uxth	r3, r3
 800e214:	3b01      	subs	r3, #1
 800e216:	b29a      	uxth	r2, r3
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e220:	3b01      	subs	r3, #1
 800e222:	b29a      	uxth	r2, r3
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	851a      	strh	r2, [r3, #40]	; 0x28
 800e228:	e00d      	b.n	800e246 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800e22a:	697b      	ldr	r3, [r7, #20]
 800e22c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800e230:	d002      	beq.n	800e238 <I2C_Slave_ISR_IT+0x1e6>
 800e232:	697b      	ldr	r3, [r7, #20]
 800e234:	2b00      	cmp	r3, #0
 800e236:	d106      	bne.n	800e246 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800e238:	68f8      	ldr	r0, [r7, #12]
 800e23a:	f000 f939 	bl	800e4b0 <I2C_ITSlaveSeqCplt>
 800e23e:	e002      	b.n	800e246 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 800e240:	bf00      	nop
 800e242:	e000      	b.n	800e246 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 800e244:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	2200      	movs	r2, #0
 800e24a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800e24e:	2300      	movs	r3, #0
}
 800e250:	4618      	mov	r0, r3
 800e252:	3718      	adds	r7, #24
 800e254:	46bd      	mov	sp, r7
 800e256:	bd80      	pop	{r7, pc}

0800e258 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800e258:	b580      	push	{r7, lr}
 800e25a:	b086      	sub	sp, #24
 800e25c:	af02      	add	r7, sp, #8
 800e25e:	60f8      	str	r0, [r7, #12]
 800e260:	4608      	mov	r0, r1
 800e262:	4611      	mov	r1, r2
 800e264:	461a      	mov	r2, r3
 800e266:	4603      	mov	r3, r0
 800e268:	817b      	strh	r3, [r7, #10]
 800e26a:	460b      	mov	r3, r1
 800e26c:	813b      	strh	r3, [r7, #8]
 800e26e:	4613      	mov	r3, r2
 800e270:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800e272:	88fb      	ldrh	r3, [r7, #6]
 800e274:	b2da      	uxtb	r2, r3
 800e276:	8979      	ldrh	r1, [r7, #10]
 800e278:	4b20      	ldr	r3, [pc, #128]	; (800e2fc <I2C_RequestMemoryWrite+0xa4>)
 800e27a:	9300      	str	r3, [sp, #0]
 800e27c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e280:	68f8      	ldr	r0, [r7, #12]
 800e282:	f000 fdb5 	bl	800edf0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e286:	69fa      	ldr	r2, [r7, #28]
 800e288:	69b9      	ldr	r1, [r7, #24]
 800e28a:	68f8      	ldr	r0, [r7, #12]
 800e28c:	f000 fc47 	bl	800eb1e <I2C_WaitOnTXISFlagUntilTimeout>
 800e290:	4603      	mov	r3, r0
 800e292:	2b00      	cmp	r3, #0
 800e294:	d001      	beq.n	800e29a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800e296:	2301      	movs	r3, #1
 800e298:	e02c      	b.n	800e2f4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800e29a:	88fb      	ldrh	r3, [r7, #6]
 800e29c:	2b01      	cmp	r3, #1
 800e29e:	d105      	bne.n	800e2ac <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800e2a0:	893b      	ldrh	r3, [r7, #8]
 800e2a2:	b2da      	uxtb	r2, r3
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	629a      	str	r2, [r3, #40]	; 0x28
 800e2aa:	e015      	b.n	800e2d8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800e2ac:	893b      	ldrh	r3, [r7, #8]
 800e2ae:	0a1b      	lsrs	r3, r3, #8
 800e2b0:	b29b      	uxth	r3, r3
 800e2b2:	b2da      	uxtb	r2, r3
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e2ba:	69fa      	ldr	r2, [r7, #28]
 800e2bc:	69b9      	ldr	r1, [r7, #24]
 800e2be:	68f8      	ldr	r0, [r7, #12]
 800e2c0:	f000 fc2d 	bl	800eb1e <I2C_WaitOnTXISFlagUntilTimeout>
 800e2c4:	4603      	mov	r3, r0
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d001      	beq.n	800e2ce <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800e2ca:	2301      	movs	r3, #1
 800e2cc:	e012      	b.n	800e2f4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800e2ce:	893b      	ldrh	r3, [r7, #8]
 800e2d0:	b2da      	uxtb	r2, r3
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800e2d8:	69fb      	ldr	r3, [r7, #28]
 800e2da:	9300      	str	r3, [sp, #0]
 800e2dc:	69bb      	ldr	r3, [r7, #24]
 800e2de:	2200      	movs	r2, #0
 800e2e0:	2180      	movs	r1, #128	; 0x80
 800e2e2:	68f8      	ldr	r0, [r7, #12]
 800e2e4:	f000 fbdb 	bl	800ea9e <I2C_WaitOnFlagUntilTimeout>
 800e2e8:	4603      	mov	r3, r0
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d001      	beq.n	800e2f2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800e2ee:	2301      	movs	r3, #1
 800e2f0:	e000      	b.n	800e2f4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800e2f2:	2300      	movs	r3, #0
}
 800e2f4:	4618      	mov	r0, r3
 800e2f6:	3710      	adds	r7, #16
 800e2f8:	46bd      	mov	sp, r7
 800e2fa:	bd80      	pop	{r7, pc}
 800e2fc:	80002000 	.word	0x80002000

0800e300 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800e300:	b580      	push	{r7, lr}
 800e302:	b086      	sub	sp, #24
 800e304:	af02      	add	r7, sp, #8
 800e306:	60f8      	str	r0, [r7, #12]
 800e308:	4608      	mov	r0, r1
 800e30a:	4611      	mov	r1, r2
 800e30c:	461a      	mov	r2, r3
 800e30e:	4603      	mov	r3, r0
 800e310:	817b      	strh	r3, [r7, #10]
 800e312:	460b      	mov	r3, r1
 800e314:	813b      	strh	r3, [r7, #8]
 800e316:	4613      	mov	r3, r2
 800e318:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800e31a:	88fb      	ldrh	r3, [r7, #6]
 800e31c:	b2da      	uxtb	r2, r3
 800e31e:	8979      	ldrh	r1, [r7, #10]
 800e320:	4b20      	ldr	r3, [pc, #128]	; (800e3a4 <I2C_RequestMemoryRead+0xa4>)
 800e322:	9300      	str	r3, [sp, #0]
 800e324:	2300      	movs	r3, #0
 800e326:	68f8      	ldr	r0, [r7, #12]
 800e328:	f000 fd62 	bl	800edf0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e32c:	69fa      	ldr	r2, [r7, #28]
 800e32e:	69b9      	ldr	r1, [r7, #24]
 800e330:	68f8      	ldr	r0, [r7, #12]
 800e332:	f000 fbf4 	bl	800eb1e <I2C_WaitOnTXISFlagUntilTimeout>
 800e336:	4603      	mov	r3, r0
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d001      	beq.n	800e340 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800e33c:	2301      	movs	r3, #1
 800e33e:	e02c      	b.n	800e39a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800e340:	88fb      	ldrh	r3, [r7, #6]
 800e342:	2b01      	cmp	r3, #1
 800e344:	d105      	bne.n	800e352 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800e346:	893b      	ldrh	r3, [r7, #8]
 800e348:	b2da      	uxtb	r2, r3
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	629a      	str	r2, [r3, #40]	; 0x28
 800e350:	e015      	b.n	800e37e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800e352:	893b      	ldrh	r3, [r7, #8]
 800e354:	0a1b      	lsrs	r3, r3, #8
 800e356:	b29b      	uxth	r3, r3
 800e358:	b2da      	uxtb	r2, r3
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e360:	69fa      	ldr	r2, [r7, #28]
 800e362:	69b9      	ldr	r1, [r7, #24]
 800e364:	68f8      	ldr	r0, [r7, #12]
 800e366:	f000 fbda 	bl	800eb1e <I2C_WaitOnTXISFlagUntilTimeout>
 800e36a:	4603      	mov	r3, r0
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d001      	beq.n	800e374 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800e370:	2301      	movs	r3, #1
 800e372:	e012      	b.n	800e39a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800e374:	893b      	ldrh	r3, [r7, #8]
 800e376:	b2da      	uxtb	r2, r3
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800e37e:	69fb      	ldr	r3, [r7, #28]
 800e380:	9300      	str	r3, [sp, #0]
 800e382:	69bb      	ldr	r3, [r7, #24]
 800e384:	2200      	movs	r2, #0
 800e386:	2140      	movs	r1, #64	; 0x40
 800e388:	68f8      	ldr	r0, [r7, #12]
 800e38a:	f000 fb88 	bl	800ea9e <I2C_WaitOnFlagUntilTimeout>
 800e38e:	4603      	mov	r3, r0
 800e390:	2b00      	cmp	r3, #0
 800e392:	d001      	beq.n	800e398 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800e394:	2301      	movs	r3, #1
 800e396:	e000      	b.n	800e39a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800e398:	2300      	movs	r3, #0
}
 800e39a:	4618      	mov	r0, r3
 800e39c:	3710      	adds	r7, #16
 800e39e:	46bd      	mov	sp, r7
 800e3a0:	bd80      	pop	{r7, pc}
 800e3a2:	bf00      	nop
 800e3a4:	80002000 	.word	0x80002000

0800e3a8 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800e3a8:	b580      	push	{r7, lr}
 800e3aa:	b084      	sub	sp, #16
 800e3ac:	af00      	add	r7, sp, #0
 800e3ae:	6078      	str	r0, [r7, #4]
 800e3b0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e3b8:	b2db      	uxtb	r3, r3
 800e3ba:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800e3be:	2b28      	cmp	r3, #40	; 0x28
 800e3c0:	d16a      	bne.n	800e498 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	699b      	ldr	r3, [r3, #24]
 800e3c8:	0c1b      	lsrs	r3, r3, #16
 800e3ca:	b2db      	uxtb	r3, r3
 800e3cc:	f003 0301 	and.w	r3, r3, #1
 800e3d0:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	699b      	ldr	r3, [r3, #24]
 800e3d8:	0c1b      	lsrs	r3, r3, #16
 800e3da:	b29b      	uxth	r3, r3
 800e3dc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800e3e0:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	689b      	ldr	r3, [r3, #8]
 800e3e8:	b29b      	uxth	r3, r3
 800e3ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e3ee:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	68db      	ldr	r3, [r3, #12]
 800e3f6:	b29b      	uxth	r3, r3
 800e3f8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800e3fc:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	68db      	ldr	r3, [r3, #12]
 800e402:	2b02      	cmp	r3, #2
 800e404:	d138      	bne.n	800e478 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800e406:	897b      	ldrh	r3, [r7, #10]
 800e408:	09db      	lsrs	r3, r3, #7
 800e40a:	b29a      	uxth	r2, r3
 800e40c:	89bb      	ldrh	r3, [r7, #12]
 800e40e:	4053      	eors	r3, r2
 800e410:	b29b      	uxth	r3, r3
 800e412:	f003 0306 	and.w	r3, r3, #6
 800e416:	2b00      	cmp	r3, #0
 800e418:	d11c      	bne.n	800e454 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800e41a:	897b      	ldrh	r3, [r7, #10]
 800e41c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e422:	1c5a      	adds	r2, r3, #1
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e42c:	2b02      	cmp	r3, #2
 800e42e:	d13b      	bne.n	800e4a8 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	2200      	movs	r2, #0
 800e434:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	2208      	movs	r2, #8
 800e43c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	2200      	movs	r2, #0
 800e442:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800e446:	89ba      	ldrh	r2, [r7, #12]
 800e448:	7bfb      	ldrb	r3, [r7, #15]
 800e44a:	4619      	mov	r1, r3
 800e44c:	6878      	ldr	r0, [r7, #4]
 800e44e:	f7ff fdd4 	bl	800dffa <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800e452:	e029      	b.n	800e4a8 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800e454:	893b      	ldrh	r3, [r7, #8]
 800e456:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800e458:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800e45c:	6878      	ldr	r0, [r7, #4]
 800e45e:	f000 fd3d 	bl	800eedc <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	2200      	movs	r2, #0
 800e466:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800e46a:	89ba      	ldrh	r2, [r7, #12]
 800e46c:	7bfb      	ldrb	r3, [r7, #15]
 800e46e:	4619      	mov	r1, r3
 800e470:	6878      	ldr	r0, [r7, #4]
 800e472:	f7ff fdc2 	bl	800dffa <HAL_I2C_AddrCallback>
}
 800e476:	e017      	b.n	800e4a8 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800e478:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800e47c:	6878      	ldr	r0, [r7, #4]
 800e47e:	f000 fd2d 	bl	800eedc <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	2200      	movs	r2, #0
 800e486:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800e48a:	89ba      	ldrh	r2, [r7, #12]
 800e48c:	7bfb      	ldrb	r3, [r7, #15]
 800e48e:	4619      	mov	r1, r3
 800e490:	6878      	ldr	r0, [r7, #4]
 800e492:	f7ff fdb2 	bl	800dffa <HAL_I2C_AddrCallback>
}
 800e496:	e007      	b.n	800e4a8 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	2208      	movs	r2, #8
 800e49e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	2200      	movs	r2, #0
 800e4a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800e4a8:	bf00      	nop
 800e4aa:	3710      	adds	r7, #16
 800e4ac:	46bd      	mov	sp, r7
 800e4ae:	bd80      	pop	{r7, pc}

0800e4b0 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800e4b0:	b580      	push	{r7, lr}
 800e4b2:	b084      	sub	sp, #16
 800e4b4:	af00      	add	r7, sp, #0
 800e4b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	2200      	movs	r2, #0
 800e4c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	0b9b      	lsrs	r3, r3, #14
 800e4cc:	f003 0301 	and.w	r3, r3, #1
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d008      	beq.n	800e4e6 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	681a      	ldr	r2, [r3, #0]
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800e4e2:	601a      	str	r2, [r3, #0]
 800e4e4:	e00d      	b.n	800e502 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	0bdb      	lsrs	r3, r3, #15
 800e4ea:	f003 0301 	and.w	r3, r3, #1
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d007      	beq.n	800e502 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	681a      	ldr	r2, [r3, #0]
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800e500:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e508:	b2db      	uxtb	r3, r3
 800e50a:	2b29      	cmp	r3, #41	; 0x29
 800e50c:	d112      	bne.n	800e534 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	2228      	movs	r2, #40	; 0x28
 800e512:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	2221      	movs	r2, #33	; 0x21
 800e51a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800e51c:	2101      	movs	r1, #1
 800e51e:	6878      	ldr	r0, [r7, #4]
 800e520:	f000 fcdc 	bl	800eedc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	2200      	movs	r2, #0
 800e528:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800e52c:	6878      	ldr	r0, [r7, #4]
 800e52e:	f7ff fd50 	bl	800dfd2 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800e532:	e017      	b.n	800e564 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e53a:	b2db      	uxtb	r3, r3
 800e53c:	2b2a      	cmp	r3, #42	; 0x2a
 800e53e:	d111      	bne.n	800e564 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	2228      	movs	r2, #40	; 0x28
 800e544:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	2222      	movs	r2, #34	; 0x22
 800e54c:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800e54e:	2102      	movs	r1, #2
 800e550:	6878      	ldr	r0, [r7, #4]
 800e552:	f000 fcc3 	bl	800eedc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	2200      	movs	r2, #0
 800e55a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800e55e:	6878      	ldr	r0, [r7, #4]
 800e560:	f7ff fd41 	bl	800dfe6 <HAL_I2C_SlaveRxCpltCallback>
}
 800e564:	bf00      	nop
 800e566:	3710      	adds	r7, #16
 800e568:	46bd      	mov	sp, r7
 800e56a:	bd80      	pop	{r7, pc}

0800e56c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800e56c:	b580      	push	{r7, lr}
 800e56e:	b086      	sub	sp, #24
 800e570:	af00      	add	r7, sp, #0
 800e572:	6078      	str	r0, [r7, #4]
 800e574:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800e57e:	683b      	ldr	r3, [r7, #0]
 800e580:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e588:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	2220      	movs	r2, #32
 800e590:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800e592:	7bfb      	ldrb	r3, [r7, #15]
 800e594:	2b21      	cmp	r3, #33	; 0x21
 800e596:	d002      	beq.n	800e59e <I2C_ITSlaveCplt+0x32>
 800e598:	7bfb      	ldrb	r3, [r7, #15]
 800e59a:	2b29      	cmp	r3, #41	; 0x29
 800e59c:	d108      	bne.n	800e5b0 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800e59e:	f248 0101 	movw	r1, #32769	; 0x8001
 800e5a2:	6878      	ldr	r0, [r7, #4]
 800e5a4:	f000 fc9a 	bl	800eedc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	2221      	movs	r2, #33	; 0x21
 800e5ac:	631a      	str	r2, [r3, #48]	; 0x30
 800e5ae:	e00d      	b.n	800e5cc <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800e5b0:	7bfb      	ldrb	r3, [r7, #15]
 800e5b2:	2b22      	cmp	r3, #34	; 0x22
 800e5b4:	d002      	beq.n	800e5bc <I2C_ITSlaveCplt+0x50>
 800e5b6:	7bfb      	ldrb	r3, [r7, #15]
 800e5b8:	2b2a      	cmp	r3, #42	; 0x2a
 800e5ba:	d107      	bne.n	800e5cc <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800e5bc:	f248 0102 	movw	r1, #32770	; 0x8002
 800e5c0:	6878      	ldr	r0, [r7, #4]
 800e5c2:	f000 fc8b 	bl	800eedc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	2222      	movs	r2, #34	; 0x22
 800e5ca:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	685a      	ldr	r2, [r3, #4]
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e5da:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	6859      	ldr	r1, [r3, #4]
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	681a      	ldr	r2, [r3, #0]
 800e5e6:	4b64      	ldr	r3, [pc, #400]	; (800e778 <I2C_ITSlaveCplt+0x20c>)
 800e5e8:	400b      	ands	r3, r1
 800e5ea:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800e5ec:	6878      	ldr	r0, [r7, #4]
 800e5ee:	f000 fa14 	bl	800ea1a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800e5f2:	693b      	ldr	r3, [r7, #16]
 800e5f4:	0b9b      	lsrs	r3, r3, #14
 800e5f6:	f003 0301 	and.w	r3, r3, #1
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d013      	beq.n	800e626 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	681a      	ldr	r2, [r3, #0]
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800e60c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e612:	2b00      	cmp	r3, #0
 800e614:	d020      	beq.n	800e658 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	685b      	ldr	r3, [r3, #4]
 800e61e:	b29a      	uxth	r2, r3
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e624:	e018      	b.n	800e658 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800e626:	693b      	ldr	r3, [r7, #16]
 800e628:	0bdb      	lsrs	r3, r3, #15
 800e62a:	f003 0301 	and.w	r3, r3, #1
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d012      	beq.n	800e658 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	681a      	ldr	r2, [r3, #0]
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800e640:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e646:	2b00      	cmp	r3, #0
 800e648:	d006      	beq.n	800e658 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	685b      	ldr	r3, [r3, #4]
 800e652:	b29a      	uxth	r2, r3
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800e658:	697b      	ldr	r3, [r7, #20]
 800e65a:	089b      	lsrs	r3, r3, #2
 800e65c:	f003 0301 	and.w	r3, r3, #1
 800e660:	2b00      	cmp	r3, #0
 800e662:	d020      	beq.n	800e6a6 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800e664:	697b      	ldr	r3, [r7, #20]
 800e666:	f023 0304 	bic.w	r3, r3, #4
 800e66a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e676:	b2d2      	uxtb	r2, r2
 800e678:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e67e:	1c5a      	adds	r2, r3, #1
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d00c      	beq.n	800e6a6 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e690:	3b01      	subs	r3, #1
 800e692:	b29a      	uxth	r2, r3
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e69c:	b29b      	uxth	r3, r3
 800e69e:	3b01      	subs	r3, #1
 800e6a0:	b29a      	uxth	r2, r3
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e6aa:	b29b      	uxth	r3, r3
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d005      	beq.n	800e6bc <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e6b4:	f043 0204 	orr.w	r2, r3, #4
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	2200      	movs	r2, #0
 800e6c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	2200      	movs	r2, #0
 800e6c8:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d010      	beq.n	800e6f4 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e6d6:	4619      	mov	r1, r3
 800e6d8:	6878      	ldr	r0, [r7, #4]
 800e6da:	f000 f8a7 	bl	800e82c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e6e4:	b2db      	uxtb	r3, r3
 800e6e6:	2b28      	cmp	r3, #40	; 0x28
 800e6e8:	d141      	bne.n	800e76e <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800e6ea:	6979      	ldr	r1, [r7, #20]
 800e6ec:	6878      	ldr	r0, [r7, #4]
 800e6ee:	f000 f847 	bl	800e780 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800e6f2:	e03c      	b.n	800e76e <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6f8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800e6fc:	d014      	beq.n	800e728 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 800e6fe:	6878      	ldr	r0, [r7, #4]
 800e700:	f7ff fed6 	bl	800e4b0 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	4a1d      	ldr	r2, [pc, #116]	; (800e77c <I2C_ITSlaveCplt+0x210>)
 800e708:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	2220      	movs	r2, #32
 800e70e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	2200      	movs	r2, #0
 800e716:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	2200      	movs	r2, #0
 800e71c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800e720:	6878      	ldr	r0, [r7, #4]
 800e722:	f7ff fc78 	bl	800e016 <HAL_I2C_ListenCpltCallback>
}
 800e726:	e022      	b.n	800e76e <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e72e:	b2db      	uxtb	r3, r3
 800e730:	2b22      	cmp	r3, #34	; 0x22
 800e732:	d10e      	bne.n	800e752 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	2220      	movs	r2, #32
 800e738:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	2200      	movs	r2, #0
 800e740:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	2200      	movs	r2, #0
 800e746:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800e74a:	6878      	ldr	r0, [r7, #4]
 800e74c:	f7ff fc4b 	bl	800dfe6 <HAL_I2C_SlaveRxCpltCallback>
}
 800e750:	e00d      	b.n	800e76e <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	2220      	movs	r2, #32
 800e756:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	2200      	movs	r2, #0
 800e75e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	2200      	movs	r2, #0
 800e764:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800e768:	6878      	ldr	r0, [r7, #4]
 800e76a:	f7ff fc32 	bl	800dfd2 <HAL_I2C_SlaveTxCpltCallback>
}
 800e76e:	bf00      	nop
 800e770:	3718      	adds	r7, #24
 800e772:	46bd      	mov	sp, r7
 800e774:	bd80      	pop	{r7, pc}
 800e776:	bf00      	nop
 800e778:	fe00e800 	.word	0xfe00e800
 800e77c:	ffff0000 	.word	0xffff0000

0800e780 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800e780:	b580      	push	{r7, lr}
 800e782:	b082      	sub	sp, #8
 800e784:	af00      	add	r7, sp, #0
 800e786:	6078      	str	r0, [r7, #4]
 800e788:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	4a26      	ldr	r2, [pc, #152]	; (800e828 <I2C_ITListenCplt+0xa8>)
 800e78e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	2200      	movs	r2, #0
 800e794:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	2220      	movs	r2, #32
 800e79a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	2200      	movs	r2, #0
 800e7a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	2200      	movs	r2, #0
 800e7aa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800e7ac:	683b      	ldr	r3, [r7, #0]
 800e7ae:	089b      	lsrs	r3, r3, #2
 800e7b0:	f003 0301 	and.w	r3, r3, #1
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d022      	beq.n	800e7fe <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7c2:	b2d2      	uxtb	r2, r2
 800e7c4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7ca:	1c5a      	adds	r2, r3, #1
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d012      	beq.n	800e7fe <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e7dc:	3b01      	subs	r3, #1
 800e7de:	b29a      	uxth	r2, r3
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e7e8:	b29b      	uxth	r3, r3
 800e7ea:	3b01      	subs	r3, #1
 800e7ec:	b29a      	uxth	r2, r3
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e7f6:	f043 0204 	orr.w	r2, r3, #4
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800e7fe:	f248 0103 	movw	r1, #32771	; 0x8003
 800e802:	6878      	ldr	r0, [r7, #4]
 800e804:	f000 fb6a 	bl	800eedc <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	2210      	movs	r2, #16
 800e80e:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	2200      	movs	r2, #0
 800e814:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800e818:	6878      	ldr	r0, [r7, #4]
 800e81a:	f7ff fbfc 	bl	800e016 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800e81e:	bf00      	nop
 800e820:	3708      	adds	r7, #8
 800e822:	46bd      	mov	sp, r7
 800e824:	bd80      	pop	{r7, pc}
 800e826:	bf00      	nop
 800e828:	ffff0000 	.word	0xffff0000

0800e82c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800e82c:	b580      	push	{r7, lr}
 800e82e:	b084      	sub	sp, #16
 800e830:	af00      	add	r7, sp, #0
 800e832:	6078      	str	r0, [r7, #4]
 800e834:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e83c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	2200      	movs	r2, #0
 800e842:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	4a5d      	ldr	r2, [pc, #372]	; (800e9c0 <I2C_ITError+0x194>)
 800e84a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	2200      	movs	r2, #0
 800e850:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e856:	683b      	ldr	r3, [r7, #0]
 800e858:	431a      	orrs	r2, r3
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800e85e:	7bfb      	ldrb	r3, [r7, #15]
 800e860:	2b28      	cmp	r3, #40	; 0x28
 800e862:	d005      	beq.n	800e870 <I2C_ITError+0x44>
 800e864:	7bfb      	ldrb	r3, [r7, #15]
 800e866:	2b29      	cmp	r3, #41	; 0x29
 800e868:	d002      	beq.n	800e870 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800e86a:	7bfb      	ldrb	r3, [r7, #15]
 800e86c:	2b2a      	cmp	r3, #42	; 0x2a
 800e86e:	d10b      	bne.n	800e888 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800e870:	2103      	movs	r1, #3
 800e872:	6878      	ldr	r0, [r7, #4]
 800e874:	f000 fb32 	bl	800eedc <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	2228      	movs	r2, #40	; 0x28
 800e87c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	4a50      	ldr	r2, [pc, #320]	; (800e9c4 <I2C_ITError+0x198>)
 800e884:	635a      	str	r2, [r3, #52]	; 0x34
 800e886:	e011      	b.n	800e8ac <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800e888:	f248 0103 	movw	r1, #32771	; 0x8003
 800e88c:	6878      	ldr	r0, [r7, #4]
 800e88e:	f000 fb25 	bl	800eedc <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e898:	b2db      	uxtb	r3, r3
 800e89a:	2b60      	cmp	r3, #96	; 0x60
 800e89c:	d003      	beq.n	800e8a6 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	2220      	movs	r2, #32
 800e8a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	2200      	movs	r2, #0
 800e8aa:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8b0:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d039      	beq.n	800e92e <I2C_ITError+0x102>
 800e8ba:	68bb      	ldr	r3, [r7, #8]
 800e8bc:	2b11      	cmp	r3, #17
 800e8be:	d002      	beq.n	800e8c6 <I2C_ITError+0x9a>
 800e8c0:	68bb      	ldr	r3, [r7, #8]
 800e8c2:	2b21      	cmp	r3, #33	; 0x21
 800e8c4:	d133      	bne.n	800e92e <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e8d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e8d4:	d107      	bne.n	800e8e6 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	681a      	ldr	r2, [r3, #0]
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800e8e4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8ea:	4618      	mov	r0, r3
 800e8ec:	f7fe f814 	bl	800c918 <HAL_DMA_GetState>
 800e8f0:	4603      	mov	r3, r0
 800e8f2:	2b01      	cmp	r3, #1
 800e8f4:	d017      	beq.n	800e926 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8fa:	4a33      	ldr	r2, [pc, #204]	; (800e9c8 <I2C_ITError+0x19c>)
 800e8fc:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	2200      	movs	r2, #0
 800e902:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e90a:	4618      	mov	r0, r3
 800e90c:	f7fd ff14 	bl	800c738 <HAL_DMA_Abort_IT>
 800e910:	4603      	mov	r3, r0
 800e912:	2b00      	cmp	r3, #0
 800e914:	d04d      	beq.n	800e9b2 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e91a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e91c:	687a      	ldr	r2, [r7, #4]
 800e91e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800e920:	4610      	mov	r0, r2
 800e922:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800e924:	e045      	b.n	800e9b2 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800e926:	6878      	ldr	r0, [r7, #4]
 800e928:	f000 f850 	bl	800e9cc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800e92c:	e041      	b.n	800e9b2 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e932:	2b00      	cmp	r3, #0
 800e934:	d039      	beq.n	800e9aa <I2C_ITError+0x17e>
 800e936:	68bb      	ldr	r3, [r7, #8]
 800e938:	2b12      	cmp	r3, #18
 800e93a:	d002      	beq.n	800e942 <I2C_ITError+0x116>
 800e93c:	68bb      	ldr	r3, [r7, #8]
 800e93e:	2b22      	cmp	r3, #34	; 0x22
 800e940:	d133      	bne.n	800e9aa <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e94c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e950:	d107      	bne.n	800e962 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	681a      	ldr	r2, [r3, #0]
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800e960:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e966:	4618      	mov	r0, r3
 800e968:	f7fd ffd6 	bl	800c918 <HAL_DMA_GetState>
 800e96c:	4603      	mov	r3, r0
 800e96e:	2b01      	cmp	r3, #1
 800e970:	d017      	beq.n	800e9a2 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e976:	4a14      	ldr	r2, [pc, #80]	; (800e9c8 <I2C_ITError+0x19c>)
 800e978:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	2200      	movs	r2, #0
 800e97e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e986:	4618      	mov	r0, r3
 800e988:	f7fd fed6 	bl	800c738 <HAL_DMA_Abort_IT>
 800e98c:	4603      	mov	r3, r0
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d011      	beq.n	800e9b6 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e998:	687a      	ldr	r2, [r7, #4]
 800e99a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800e99c:	4610      	mov	r0, r2
 800e99e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800e9a0:	e009      	b.n	800e9b6 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800e9a2:	6878      	ldr	r0, [r7, #4]
 800e9a4:	f000 f812 	bl	800e9cc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800e9a8:	e005      	b.n	800e9b6 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800e9aa:	6878      	ldr	r0, [r7, #4]
 800e9ac:	f000 f80e 	bl	800e9cc <I2C_TreatErrorCallback>
  }
}
 800e9b0:	e002      	b.n	800e9b8 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800e9b2:	bf00      	nop
 800e9b4:	e000      	b.n	800e9b8 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800e9b6:	bf00      	nop
}
 800e9b8:	bf00      	nop
 800e9ba:	3710      	adds	r7, #16
 800e9bc:	46bd      	mov	sp, r7
 800e9be:	bd80      	pop	{r7, pc}
 800e9c0:	ffff0000 	.word	0xffff0000
 800e9c4:	0800e053 	.word	0x0800e053
 800e9c8:	0800ea63 	.word	0x0800ea63

0800e9cc <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800e9cc:	b580      	push	{r7, lr}
 800e9ce:	b082      	sub	sp, #8
 800e9d0:	af00      	add	r7, sp, #0
 800e9d2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e9da:	b2db      	uxtb	r3, r3
 800e9dc:	2b60      	cmp	r3, #96	; 0x60
 800e9de:	d10e      	bne.n	800e9fe <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	2220      	movs	r2, #32
 800e9e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	2200      	movs	r2, #0
 800e9ec:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	2200      	movs	r2, #0
 800e9f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800e9f6:	6878      	ldr	r0, [r7, #4]
 800e9f8:	f7ff fb21 	bl	800e03e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800e9fc:	e009      	b.n	800ea12 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	2200      	movs	r2, #0
 800ea02:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	2200      	movs	r2, #0
 800ea08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800ea0c:	6878      	ldr	r0, [r7, #4]
 800ea0e:	f7ff fb0c 	bl	800e02a <HAL_I2C_ErrorCallback>
}
 800ea12:	bf00      	nop
 800ea14:	3708      	adds	r7, #8
 800ea16:	46bd      	mov	sp, r7
 800ea18:	bd80      	pop	{r7, pc}

0800ea1a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800ea1a:	b480      	push	{r7}
 800ea1c:	b083      	sub	sp, #12
 800ea1e:	af00      	add	r7, sp, #0
 800ea20:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	699b      	ldr	r3, [r3, #24]
 800ea28:	f003 0302 	and.w	r3, r3, #2
 800ea2c:	2b02      	cmp	r3, #2
 800ea2e:	d103      	bne.n	800ea38 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	2200      	movs	r2, #0
 800ea36:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	699b      	ldr	r3, [r3, #24]
 800ea3e:	f003 0301 	and.w	r3, r3, #1
 800ea42:	2b01      	cmp	r3, #1
 800ea44:	d007      	beq.n	800ea56 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	699a      	ldr	r2, [r3, #24]
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	f042 0201 	orr.w	r2, r2, #1
 800ea54:	619a      	str	r2, [r3, #24]
  }
}
 800ea56:	bf00      	nop
 800ea58:	370c      	adds	r7, #12
 800ea5a:	46bd      	mov	sp, r7
 800ea5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea60:	4770      	bx	lr

0800ea62 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800ea62:	b580      	push	{r7, lr}
 800ea64:	b084      	sub	sp, #16
 800ea66:	af00      	add	r7, sp, #0
 800ea68:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea6e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d003      	beq.n	800ea80 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea7c:	2200      	movs	r2, #0
 800ea7e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d003      	beq.n	800ea90 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea8c:	2200      	movs	r2, #0
 800ea8e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800ea90:	68f8      	ldr	r0, [r7, #12]
 800ea92:	f7ff ff9b 	bl	800e9cc <I2C_TreatErrorCallback>
}
 800ea96:	bf00      	nop
 800ea98:	3710      	adds	r7, #16
 800ea9a:	46bd      	mov	sp, r7
 800ea9c:	bd80      	pop	{r7, pc}

0800ea9e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800ea9e:	b580      	push	{r7, lr}
 800eaa0:	b084      	sub	sp, #16
 800eaa2:	af00      	add	r7, sp, #0
 800eaa4:	60f8      	str	r0, [r7, #12]
 800eaa6:	60b9      	str	r1, [r7, #8]
 800eaa8:	603b      	str	r3, [r7, #0]
 800eaaa:	4613      	mov	r3, r2
 800eaac:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800eaae:	e022      	b.n	800eaf6 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800eab0:	683b      	ldr	r3, [r7, #0]
 800eab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eab6:	d01e      	beq.n	800eaf6 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800eab8:	f7fa f9fe 	bl	8008eb8 <HAL_GetTick>
 800eabc:	4602      	mov	r2, r0
 800eabe:	69bb      	ldr	r3, [r7, #24]
 800eac0:	1ad3      	subs	r3, r2, r3
 800eac2:	683a      	ldr	r2, [r7, #0]
 800eac4:	429a      	cmp	r2, r3
 800eac6:	d302      	bcc.n	800eace <I2C_WaitOnFlagUntilTimeout+0x30>
 800eac8:	683b      	ldr	r3, [r7, #0]
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d113      	bne.n	800eaf6 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ead2:	f043 0220 	orr.w	r2, r3, #32
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	2220      	movs	r2, #32
 800eade:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	2200      	movs	r2, #0
 800eae6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	2200      	movs	r2, #0
 800eaee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800eaf2:	2301      	movs	r3, #1
 800eaf4:	e00f      	b.n	800eb16 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	699a      	ldr	r2, [r3, #24]
 800eafc:	68bb      	ldr	r3, [r7, #8]
 800eafe:	4013      	ands	r3, r2
 800eb00:	68ba      	ldr	r2, [r7, #8]
 800eb02:	429a      	cmp	r2, r3
 800eb04:	bf0c      	ite	eq
 800eb06:	2301      	moveq	r3, #1
 800eb08:	2300      	movne	r3, #0
 800eb0a:	b2db      	uxtb	r3, r3
 800eb0c:	461a      	mov	r2, r3
 800eb0e:	79fb      	ldrb	r3, [r7, #7]
 800eb10:	429a      	cmp	r2, r3
 800eb12:	d0cd      	beq.n	800eab0 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800eb14:	2300      	movs	r3, #0
}
 800eb16:	4618      	mov	r0, r3
 800eb18:	3710      	adds	r7, #16
 800eb1a:	46bd      	mov	sp, r7
 800eb1c:	bd80      	pop	{r7, pc}

0800eb1e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800eb1e:	b580      	push	{r7, lr}
 800eb20:	b084      	sub	sp, #16
 800eb22:	af00      	add	r7, sp, #0
 800eb24:	60f8      	str	r0, [r7, #12]
 800eb26:	60b9      	str	r1, [r7, #8]
 800eb28:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800eb2a:	e02c      	b.n	800eb86 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800eb2c:	687a      	ldr	r2, [r7, #4]
 800eb2e:	68b9      	ldr	r1, [r7, #8]
 800eb30:	68f8      	ldr	r0, [r7, #12]
 800eb32:	f000 f871 	bl	800ec18 <I2C_IsErrorOccurred>
 800eb36:	4603      	mov	r3, r0
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d001      	beq.n	800eb40 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800eb3c:	2301      	movs	r3, #1
 800eb3e:	e02a      	b.n	800eb96 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800eb40:	68bb      	ldr	r3, [r7, #8]
 800eb42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb46:	d01e      	beq.n	800eb86 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800eb48:	f7fa f9b6 	bl	8008eb8 <HAL_GetTick>
 800eb4c:	4602      	mov	r2, r0
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	1ad3      	subs	r3, r2, r3
 800eb52:	68ba      	ldr	r2, [r7, #8]
 800eb54:	429a      	cmp	r2, r3
 800eb56:	d302      	bcc.n	800eb5e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800eb58:	68bb      	ldr	r3, [r7, #8]
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d113      	bne.n	800eb86 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb62:	f043 0220 	orr.w	r2, r3, #32
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	2220      	movs	r2, #32
 800eb6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	2200      	movs	r2, #0
 800eb76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	2200      	movs	r2, #0
 800eb7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800eb82:	2301      	movs	r3, #1
 800eb84:	e007      	b.n	800eb96 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	699b      	ldr	r3, [r3, #24]
 800eb8c:	f003 0302 	and.w	r3, r3, #2
 800eb90:	2b02      	cmp	r3, #2
 800eb92:	d1cb      	bne.n	800eb2c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800eb94:	2300      	movs	r3, #0
}
 800eb96:	4618      	mov	r0, r3
 800eb98:	3710      	adds	r7, #16
 800eb9a:	46bd      	mov	sp, r7
 800eb9c:	bd80      	pop	{r7, pc}

0800eb9e <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800eb9e:	b580      	push	{r7, lr}
 800eba0:	b084      	sub	sp, #16
 800eba2:	af00      	add	r7, sp, #0
 800eba4:	60f8      	str	r0, [r7, #12]
 800eba6:	60b9      	str	r1, [r7, #8]
 800eba8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ebaa:	e028      	b.n	800ebfe <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800ebac:	687a      	ldr	r2, [r7, #4]
 800ebae:	68b9      	ldr	r1, [r7, #8]
 800ebb0:	68f8      	ldr	r0, [r7, #12]
 800ebb2:	f000 f831 	bl	800ec18 <I2C_IsErrorOccurred>
 800ebb6:	4603      	mov	r3, r0
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d001      	beq.n	800ebc0 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800ebbc:	2301      	movs	r3, #1
 800ebbe:	e026      	b.n	800ec0e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ebc0:	f7fa f97a 	bl	8008eb8 <HAL_GetTick>
 800ebc4:	4602      	mov	r2, r0
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	1ad3      	subs	r3, r2, r3
 800ebca:	68ba      	ldr	r2, [r7, #8]
 800ebcc:	429a      	cmp	r2, r3
 800ebce:	d302      	bcc.n	800ebd6 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800ebd0:	68bb      	ldr	r3, [r7, #8]
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d113      	bne.n	800ebfe <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ebda:	f043 0220 	orr.w	r2, r3, #32
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	2220      	movs	r2, #32
 800ebe6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	2200      	movs	r2, #0
 800ebee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	2200      	movs	r2, #0
 800ebf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800ebfa:	2301      	movs	r3, #1
 800ebfc:	e007      	b.n	800ec0e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	699b      	ldr	r3, [r3, #24]
 800ec04:	f003 0320 	and.w	r3, r3, #32
 800ec08:	2b20      	cmp	r3, #32
 800ec0a:	d1cf      	bne.n	800ebac <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800ec0c:	2300      	movs	r3, #0
}
 800ec0e:	4618      	mov	r0, r3
 800ec10:	3710      	adds	r7, #16
 800ec12:	46bd      	mov	sp, r7
 800ec14:	bd80      	pop	{r7, pc}
	...

0800ec18 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ec18:	b580      	push	{r7, lr}
 800ec1a:	b08a      	sub	sp, #40	; 0x28
 800ec1c:	af00      	add	r7, sp, #0
 800ec1e:	60f8      	str	r0, [r7, #12]
 800ec20:	60b9      	str	r1, [r7, #8]
 800ec22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ec24:	2300      	movs	r3, #0
 800ec26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	699b      	ldr	r3, [r3, #24]
 800ec30:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800ec32:	2300      	movs	r3, #0
 800ec34:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800ec3a:	69bb      	ldr	r3, [r7, #24]
 800ec3c:	f003 0310 	and.w	r3, r3, #16
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d075      	beq.n	800ed30 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	2210      	movs	r2, #16
 800ec4a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800ec4c:	e056      	b.n	800ecfc <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800ec4e:	68bb      	ldr	r3, [r7, #8]
 800ec50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec54:	d052      	beq.n	800ecfc <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800ec56:	f7fa f92f 	bl	8008eb8 <HAL_GetTick>
 800ec5a:	4602      	mov	r2, r0
 800ec5c:	69fb      	ldr	r3, [r7, #28]
 800ec5e:	1ad3      	subs	r3, r2, r3
 800ec60:	68ba      	ldr	r2, [r7, #8]
 800ec62:	429a      	cmp	r2, r3
 800ec64:	d302      	bcc.n	800ec6c <I2C_IsErrorOccurred+0x54>
 800ec66:	68bb      	ldr	r3, [r7, #8]
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d147      	bne.n	800ecfc <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	685b      	ldr	r3, [r3, #4]
 800ec72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ec76:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ec7e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	699b      	ldr	r3, [r3, #24]
 800ec86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ec8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ec8e:	d12e      	bne.n	800ecee <I2C_IsErrorOccurred+0xd6>
 800ec90:	697b      	ldr	r3, [r7, #20]
 800ec92:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ec96:	d02a      	beq.n	800ecee <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800ec98:	7cfb      	ldrb	r3, [r7, #19]
 800ec9a:	2b20      	cmp	r3, #32
 800ec9c:	d027      	beq.n	800ecee <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	685a      	ldr	r2, [r3, #4]
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ecac:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800ecae:	f7fa f903 	bl	8008eb8 <HAL_GetTick>
 800ecb2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ecb4:	e01b      	b.n	800ecee <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800ecb6:	f7fa f8ff 	bl	8008eb8 <HAL_GetTick>
 800ecba:	4602      	mov	r2, r0
 800ecbc:	69fb      	ldr	r3, [r7, #28]
 800ecbe:	1ad3      	subs	r3, r2, r3
 800ecc0:	2b19      	cmp	r3, #25
 800ecc2:	d914      	bls.n	800ecee <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ecc8:	f043 0220 	orr.w	r2, r3, #32
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	2220      	movs	r2, #32
 800ecd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	2200      	movs	r2, #0
 800ecdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	2200      	movs	r2, #0
 800ece4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 800ece8:	2301      	movs	r3, #1
 800ecea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	699b      	ldr	r3, [r3, #24]
 800ecf4:	f003 0320 	and.w	r3, r3, #32
 800ecf8:	2b20      	cmp	r3, #32
 800ecfa:	d1dc      	bne.n	800ecb6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	699b      	ldr	r3, [r3, #24]
 800ed02:	f003 0320 	and.w	r3, r3, #32
 800ed06:	2b20      	cmp	r3, #32
 800ed08:	d003      	beq.n	800ed12 <I2C_IsErrorOccurred+0xfa>
 800ed0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d09d      	beq.n	800ec4e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800ed12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d103      	bne.n	800ed22 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	2220      	movs	r2, #32
 800ed20:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800ed22:	6a3b      	ldr	r3, [r7, #32]
 800ed24:	f043 0304 	orr.w	r3, r3, #4
 800ed28:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800ed2a:	2301      	movs	r3, #1
 800ed2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	699b      	ldr	r3, [r3, #24]
 800ed36:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800ed38:	69bb      	ldr	r3, [r7, #24]
 800ed3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d00b      	beq.n	800ed5a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800ed42:	6a3b      	ldr	r3, [r7, #32]
 800ed44:	f043 0301 	orr.w	r3, r3, #1
 800ed48:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ed52:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800ed54:	2301      	movs	r3, #1
 800ed56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800ed5a:	69bb      	ldr	r3, [r7, #24]
 800ed5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d00b      	beq.n	800ed7c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800ed64:	6a3b      	ldr	r3, [r7, #32]
 800ed66:	f043 0308 	orr.w	r3, r3, #8
 800ed6a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ed74:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800ed76:	2301      	movs	r3, #1
 800ed78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800ed7c:	69bb      	ldr	r3, [r7, #24]
 800ed7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d00b      	beq.n	800ed9e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800ed86:	6a3b      	ldr	r3, [r7, #32]
 800ed88:	f043 0302 	orr.w	r3, r3, #2
 800ed8c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ed96:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800ed98:	2301      	movs	r3, #1
 800ed9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800ed9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d01c      	beq.n	800ede0 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800eda6:	68f8      	ldr	r0, [r7, #12]
 800eda8:	f7ff fe37 	bl	800ea1a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	6859      	ldr	r1, [r3, #4]
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	681a      	ldr	r2, [r3, #0]
 800edb6:	4b0d      	ldr	r3, [pc, #52]	; (800edec <I2C_IsErrorOccurred+0x1d4>)
 800edb8:	400b      	ands	r3, r1
 800edba:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800edc0:	6a3b      	ldr	r3, [r7, #32]
 800edc2:	431a      	orrs	r2, r3
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	2220      	movs	r2, #32
 800edcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	2200      	movs	r2, #0
 800edd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	2200      	movs	r2, #0
 800eddc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800ede0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800ede4:	4618      	mov	r0, r3
 800ede6:	3728      	adds	r7, #40	; 0x28
 800ede8:	46bd      	mov	sp, r7
 800edea:	bd80      	pop	{r7, pc}
 800edec:	fe00e800 	.word	0xfe00e800

0800edf0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800edf0:	b580      	push	{r7, lr}
 800edf2:	b086      	sub	sp, #24
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	60f8      	str	r0, [r7, #12]
 800edf8:	607b      	str	r3, [r7, #4]
 800edfa:	460b      	mov	r3, r1
 800edfc:	817b      	strh	r3, [r7, #10]
 800edfe:	4613      	mov	r3, r2
 800ee00:	727b      	strb	r3, [r7, #9]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	4a2d      	ldr	r2, [pc, #180]	; (800eebc <I2C_TransferConfig+0xcc>)
 800ee08:	4293      	cmp	r3, r2
 800ee0a:	d00e      	beq.n	800ee2a <I2C_TransferConfig+0x3a>
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	4a2b      	ldr	r2, [pc, #172]	; (800eec0 <I2C_TransferConfig+0xd0>)
 800ee12:	4293      	cmp	r3, r2
 800ee14:	d009      	beq.n	800ee2a <I2C_TransferConfig+0x3a>
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	4a2a      	ldr	r2, [pc, #168]	; (800eec4 <I2C_TransferConfig+0xd4>)
 800ee1c:	4293      	cmp	r3, r2
 800ee1e:	d004      	beq.n	800ee2a <I2C_TransferConfig+0x3a>
 800ee20:	f641 3135 	movw	r1, #6965	; 0x1b35
 800ee24:	4828      	ldr	r0, [pc, #160]	; (800eec8 <I2C_TransferConfig+0xd8>)
 800ee26:	f7f5 fbb5 	bl	8004594 <assert_failed>
  assert_param(IS_TRANSFER_MODE(Mode));
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ee30:	d00b      	beq.n	800ee4a <I2C_TransferConfig+0x5a>
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ee38:	d007      	beq.n	800ee4a <I2C_TransferConfig+0x5a>
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d004      	beq.n	800ee4a <I2C_TransferConfig+0x5a>
 800ee40:	f641 3136 	movw	r1, #6966	; 0x1b36
 800ee44:	4820      	ldr	r0, [pc, #128]	; (800eec8 <I2C_TransferConfig+0xd8>)
 800ee46:	f7f5 fba5 	bl	8004594 <assert_failed>
  assert_param(IS_TRANSFER_REQUEST(Request));
 800ee4a:	6a3b      	ldr	r3, [r7, #32]
 800ee4c:	4a1f      	ldr	r2, [pc, #124]	; (800eecc <I2C_TransferConfig+0xdc>)
 800ee4e:	4293      	cmp	r3, r2
 800ee50:	d00f      	beq.n	800ee72 <I2C_TransferConfig+0x82>
 800ee52:	6a3b      	ldr	r3, [r7, #32]
 800ee54:	4a1e      	ldr	r2, [pc, #120]	; (800eed0 <I2C_TransferConfig+0xe0>)
 800ee56:	4293      	cmp	r3, r2
 800ee58:	d00b      	beq.n	800ee72 <I2C_TransferConfig+0x82>
 800ee5a:	6a3b      	ldr	r3, [r7, #32]
 800ee5c:	4a1d      	ldr	r2, [pc, #116]	; (800eed4 <I2C_TransferConfig+0xe4>)
 800ee5e:	4293      	cmp	r3, r2
 800ee60:	d007      	beq.n	800ee72 <I2C_TransferConfig+0x82>
 800ee62:	6a3b      	ldr	r3, [r7, #32]
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d004      	beq.n	800ee72 <I2C_TransferConfig+0x82>
 800ee68:	f641 3137 	movw	r1, #6967	; 0x1b37
 800ee6c:	4816      	ldr	r0, [pc, #88]	; (800eec8 <I2C_TransferConfig+0xd8>)
 800ee6e:	f7f5 fb91 	bl	8004594 <assert_failed>

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800ee72:	897b      	ldrh	r3, [r7, #10]
 800ee74:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800ee78:	7a7b      	ldrb	r3, [r7, #9]
 800ee7a:	041b      	lsls	r3, r3, #16
 800ee7c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800ee80:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800ee86:	6a3b      	ldr	r3, [r7, #32]
 800ee88:	4313      	orrs	r3, r2
 800ee8a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ee8e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	685a      	ldr	r2, [r3, #4]
 800ee96:	6a3b      	ldr	r3, [r7, #32]
 800ee98:	0d5b      	lsrs	r3, r3, #21
 800ee9a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800ee9e:	4b0e      	ldr	r3, [pc, #56]	; (800eed8 <I2C_TransferConfig+0xe8>)
 800eea0:	430b      	orrs	r3, r1
 800eea2:	43db      	mvns	r3, r3
 800eea4:	ea02 0103 	and.w	r1, r2, r3
 800eea8:	68fb      	ldr	r3, [r7, #12]
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	697a      	ldr	r2, [r7, #20]
 800eeae:	430a      	orrs	r2, r1
 800eeb0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800eeb2:	bf00      	nop
 800eeb4:	3718      	adds	r7, #24
 800eeb6:	46bd      	mov	sp, r7
 800eeb8:	bd80      	pop	{r7, pc}
 800eeba:	bf00      	nop
 800eebc:	40005400 	.word	0x40005400
 800eec0:	40005800 	.word	0x40005800
 800eec4:	40005c00 	.word	0x40005c00
 800eec8:	08018d44 	.word	0x08018d44
 800eecc:	80004000 	.word	0x80004000
 800eed0:	80002400 	.word	0x80002400
 800eed4:	80002000 	.word	0x80002000
 800eed8:	03ff63ff 	.word	0x03ff63ff

0800eedc <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800eedc:	b480      	push	{r7}
 800eede:	b085      	sub	sp, #20
 800eee0:	af00      	add	r7, sp, #0
 800eee2:	6078      	str	r0, [r7, #4]
 800eee4:	460b      	mov	r3, r1
 800eee6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800eee8:	2300      	movs	r3, #0
 800eeea:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800eeec:	887b      	ldrh	r3, [r7, #2]
 800eeee:	f003 0301 	and.w	r3, r3, #1
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d00f      	beq.n	800ef16 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800eef6:	68fb      	ldr	r3, [r7, #12]
 800eef8:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800eefc:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ef04:	b2db      	uxtb	r3, r3
 800ef06:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800ef0a:	2b28      	cmp	r3, #40	; 0x28
 800ef0c:	d003      	beq.n	800ef16 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800ef14:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800ef16:	887b      	ldrh	r3, [r7, #2]
 800ef18:	f003 0302 	and.w	r3, r3, #2
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d00f      	beq.n	800ef40 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800ef26:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ef2e:	b2db      	uxtb	r3, r3
 800ef30:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800ef34:	2b28      	cmp	r3, #40	; 0x28
 800ef36:	d003      	beq.n	800ef40 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800ef3e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800ef40:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	da03      	bge.n	800ef50 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800ef4e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800ef50:	887b      	ldrh	r3, [r7, #2]
 800ef52:	2b10      	cmp	r3, #16
 800ef54:	d103      	bne.n	800ef5e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800ef5c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800ef5e:	887b      	ldrh	r3, [r7, #2]
 800ef60:	2b20      	cmp	r3, #32
 800ef62:	d103      	bne.n	800ef6c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	f043 0320 	orr.w	r3, r3, #32
 800ef6a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800ef6c:	887b      	ldrh	r3, [r7, #2]
 800ef6e:	2b40      	cmp	r3, #64	; 0x40
 800ef70:	d103      	bne.n	800ef7a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ef78:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	6819      	ldr	r1, [r3, #0]
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	43da      	mvns	r2, r3
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	400a      	ands	r2, r1
 800ef8a:	601a      	str	r2, [r3, #0]
}
 800ef8c:	bf00      	nop
 800ef8e:	3714      	adds	r7, #20
 800ef90:	46bd      	mov	sp, r7
 800ef92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef96:	4770      	bx	lr

0800ef98 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800ef98:	b580      	push	{r7, lr}
 800ef9a:	b082      	sub	sp, #8
 800ef9c:	af00      	add	r7, sp, #0
 800ef9e:	6078      	str	r0, [r7, #4]
 800efa0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	4a30      	ldr	r2, [pc, #192]	; (800f068 <HAL_I2CEx_ConfigAnalogFilter+0xd0>)
 800efa8:	4293      	cmp	r3, r2
 800efaa:	d00d      	beq.n	800efc8 <HAL_I2CEx_ConfigAnalogFilter+0x30>
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	4a2e      	ldr	r2, [pc, #184]	; (800f06c <HAL_I2CEx_ConfigAnalogFilter+0xd4>)
 800efb2:	4293      	cmp	r3, r2
 800efb4:	d008      	beq.n	800efc8 <HAL_I2CEx_ConfigAnalogFilter+0x30>
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	4a2d      	ldr	r2, [pc, #180]	; (800f070 <HAL_I2CEx_ConfigAnalogFilter+0xd8>)
 800efbc:	4293      	cmp	r3, r2
 800efbe:	d003      	beq.n	800efc8 <HAL_I2CEx_ConfigAnalogFilter+0x30>
 800efc0:	2163      	movs	r1, #99	; 0x63
 800efc2:	482c      	ldr	r0, [pc, #176]	; (800f074 <HAL_I2CEx_ConfigAnalogFilter+0xdc>)
 800efc4:	f7f5 fae6 	bl	8004594 <assert_failed>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 800efc8:	683b      	ldr	r3, [r7, #0]
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d007      	beq.n	800efde <HAL_I2CEx_ConfigAnalogFilter+0x46>
 800efce:	683b      	ldr	r3, [r7, #0]
 800efd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800efd4:	d003      	beq.n	800efde <HAL_I2CEx_ConfigAnalogFilter+0x46>
 800efd6:	2164      	movs	r1, #100	; 0x64
 800efd8:	4826      	ldr	r0, [pc, #152]	; (800f074 <HAL_I2CEx_ConfigAnalogFilter+0xdc>)
 800efda:	f7f5 fadb 	bl	8004594 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800efe4:	b2db      	uxtb	r3, r3
 800efe6:	2b20      	cmp	r3, #32
 800efe8:	d138      	bne.n	800f05c <HAL_I2CEx_ConfigAnalogFilter+0xc4>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800eff0:	2b01      	cmp	r3, #1
 800eff2:	d101      	bne.n	800eff8 <HAL_I2CEx_ConfigAnalogFilter+0x60>
 800eff4:	2302      	movs	r3, #2
 800eff6:	e032      	b.n	800f05e <HAL_I2CEx_ConfigAnalogFilter+0xc6>
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	2201      	movs	r2, #1
 800effc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	2224      	movs	r2, #36	; 0x24
 800f004:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	681a      	ldr	r2, [r3, #0]
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	681b      	ldr	r3, [r3, #0]
 800f012:	f022 0201 	bic.w	r2, r2, #1
 800f016:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	681a      	ldr	r2, [r3, #0]
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800f026:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	6819      	ldr	r1, [r3, #0]
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	683a      	ldr	r2, [r7, #0]
 800f034:	430a      	orrs	r2, r1
 800f036:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	681a      	ldr	r2, [r3, #0]
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	f042 0201 	orr.w	r2, r2, #1
 800f046:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	2220      	movs	r2, #32
 800f04c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	2200      	movs	r2, #0
 800f054:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800f058:	2300      	movs	r3, #0
 800f05a:	e000      	b.n	800f05e <HAL_I2CEx_ConfigAnalogFilter+0xc6>
  }
  else
  {
    return HAL_BUSY;
 800f05c:	2302      	movs	r3, #2
  }
}
 800f05e:	4618      	mov	r0, r3
 800f060:	3708      	adds	r7, #8
 800f062:	46bd      	mov	sp, r7
 800f064:	bd80      	pop	{r7, pc}
 800f066:	bf00      	nop
 800f068:	40005400 	.word	0x40005400
 800f06c:	40005800 	.word	0x40005800
 800f070:	40005c00 	.word	0x40005c00
 800f074:	08018d7c 	.word	0x08018d7c

0800f078 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800f078:	b580      	push	{r7, lr}
 800f07a:	b084      	sub	sp, #16
 800f07c:	af00      	add	r7, sp, #0
 800f07e:	6078      	str	r0, [r7, #4]
 800f080:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	4a2e      	ldr	r2, [pc, #184]	; (800f140 <HAL_I2CEx_ConfigDigitalFilter+0xc8>)
 800f088:	4293      	cmp	r3, r2
 800f08a:	d00d      	beq.n	800f0a8 <HAL_I2CEx_ConfigDigitalFilter+0x30>
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	4a2c      	ldr	r2, [pc, #176]	; (800f144 <HAL_I2CEx_ConfigDigitalFilter+0xcc>)
 800f092:	4293      	cmp	r3, r2
 800f094:	d008      	beq.n	800f0a8 <HAL_I2CEx_ConfigDigitalFilter+0x30>
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	4a2b      	ldr	r2, [pc, #172]	; (800f148 <HAL_I2CEx_ConfigDigitalFilter+0xd0>)
 800f09c:	4293      	cmp	r3, r2
 800f09e:	d003      	beq.n	800f0a8 <HAL_I2CEx_ConfigDigitalFilter+0x30>
 800f0a0:	2191      	movs	r1, #145	; 0x91
 800f0a2:	482a      	ldr	r0, [pc, #168]	; (800f14c <HAL_I2CEx_ConfigDigitalFilter+0xd4>)
 800f0a4:	f7f5 fa76 	bl	8004594 <assert_failed>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 800f0a8:	683b      	ldr	r3, [r7, #0]
 800f0aa:	2b0f      	cmp	r3, #15
 800f0ac:	d903      	bls.n	800f0b6 <HAL_I2CEx_ConfigDigitalFilter+0x3e>
 800f0ae:	2192      	movs	r1, #146	; 0x92
 800f0b0:	4826      	ldr	r0, [pc, #152]	; (800f14c <HAL_I2CEx_ConfigDigitalFilter+0xd4>)
 800f0b2:	f7f5 fa6f 	bl	8004594 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f0bc:	b2db      	uxtb	r3, r3
 800f0be:	2b20      	cmp	r3, #32
 800f0c0:	d139      	bne.n	800f136 <HAL_I2CEx_ConfigDigitalFilter+0xbe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f0c8:	2b01      	cmp	r3, #1
 800f0ca:	d101      	bne.n	800f0d0 <HAL_I2CEx_ConfigDigitalFilter+0x58>
 800f0cc:	2302      	movs	r3, #2
 800f0ce:	e033      	b.n	800f138 <HAL_I2CEx_ConfigDigitalFilter+0xc0>
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	2201      	movs	r2, #1
 800f0d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	2224      	movs	r2, #36	; 0x24
 800f0dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	681b      	ldr	r3, [r3, #0]
 800f0e4:	681a      	ldr	r2, [r3, #0]
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	f022 0201 	bic.w	r2, r2, #1
 800f0ee:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800f0fe:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800f100:	683b      	ldr	r3, [r7, #0]
 800f102:	021b      	lsls	r3, r3, #8
 800f104:	68fa      	ldr	r2, [r7, #12]
 800f106:	4313      	orrs	r3, r2
 800f108:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	68fa      	ldr	r2, [r7, #12]
 800f110:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	681a      	ldr	r2, [r3, #0]
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	f042 0201 	orr.w	r2, r2, #1
 800f120:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	2220      	movs	r2, #32
 800f126:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	2200      	movs	r2, #0
 800f12e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800f132:	2300      	movs	r3, #0
 800f134:	e000      	b.n	800f138 <HAL_I2CEx_ConfigDigitalFilter+0xc0>
  }
  else
  {
    return HAL_BUSY;
 800f136:	2302      	movs	r3, #2
  }
}
 800f138:	4618      	mov	r0, r3
 800f13a:	3710      	adds	r7, #16
 800f13c:	46bd      	mov	sp, r7
 800f13e:	bd80      	pop	{r7, pc}
 800f140:	40005400 	.word	0x40005400
 800f144:	40005800 	.word	0x40005800
 800f148:	40005c00 	.word	0x40005c00
 800f14c:	08018d7c 	.word	0x08018d7c

0800f150 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800f150:	b580      	push	{r7, lr}
 800f152:	b084      	sub	sp, #16
 800f154:	af00      	add	r7, sp, #0
 800f156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d101      	bne.n	800f162 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800f15e:	2301      	movs	r3, #1
 800f160:	e07c      	b.n	800f25c <HAL_IWDG_Init+0x10c>
  }

  /* Check the parameters */
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	4a3f      	ldr	r2, [pc, #252]	; (800f264 <HAL_IWDG_Init+0x114>)
 800f168:	4293      	cmp	r3, r2
 800f16a:	d003      	beq.n	800f174 <HAL_IWDG_Init+0x24>
 800f16c:	21b5      	movs	r1, #181	; 0xb5
 800f16e:	483e      	ldr	r0, [pc, #248]	; (800f268 <HAL_IWDG_Init+0x118>)
 800f170:	f7f5 fa10 	bl	8004594 <assert_failed>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	685b      	ldr	r3, [r3, #4]
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d01b      	beq.n	800f1b4 <HAL_IWDG_Init+0x64>
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	685b      	ldr	r3, [r3, #4]
 800f180:	2b01      	cmp	r3, #1
 800f182:	d017      	beq.n	800f1b4 <HAL_IWDG_Init+0x64>
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	685b      	ldr	r3, [r3, #4]
 800f188:	2b02      	cmp	r3, #2
 800f18a:	d013      	beq.n	800f1b4 <HAL_IWDG_Init+0x64>
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	685b      	ldr	r3, [r3, #4]
 800f190:	2b03      	cmp	r3, #3
 800f192:	d00f      	beq.n	800f1b4 <HAL_IWDG_Init+0x64>
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	685b      	ldr	r3, [r3, #4]
 800f198:	2b04      	cmp	r3, #4
 800f19a:	d00b      	beq.n	800f1b4 <HAL_IWDG_Init+0x64>
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	685b      	ldr	r3, [r3, #4]
 800f1a0:	2b05      	cmp	r3, #5
 800f1a2:	d007      	beq.n	800f1b4 <HAL_IWDG_Init+0x64>
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	685b      	ldr	r3, [r3, #4]
 800f1a8:	2b06      	cmp	r3, #6
 800f1aa:	d003      	beq.n	800f1b4 <HAL_IWDG_Init+0x64>
 800f1ac:	21b6      	movs	r1, #182	; 0xb6
 800f1ae:	482e      	ldr	r0, [pc, #184]	; (800f268 <HAL_IWDG_Init+0x118>)
 800f1b0:	f7f5 f9f0 	bl	8004594 <assert_failed>
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	689b      	ldr	r3, [r3, #8]
 800f1b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f1bc:	d303      	bcc.n	800f1c6 <HAL_IWDG_Init+0x76>
 800f1be:	21b7      	movs	r1, #183	; 0xb7
 800f1c0:	4829      	ldr	r0, [pc, #164]	; (800f268 <HAL_IWDG_Init+0x118>)
 800f1c2:	f7f5 f9e7 	bl	8004594 <assert_failed>
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	68db      	ldr	r3, [r3, #12]
 800f1ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f1ce:	d303      	bcc.n	800f1d8 <HAL_IWDG_Init+0x88>
 800f1d0:	21b8      	movs	r1, #184	; 0xb8
 800f1d2:	4825      	ldr	r0, [pc, #148]	; (800f268 <HAL_IWDG_Init+0x118>)
 800f1d4:	f7f5 f9de 	bl	8004594 <assert_failed>

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800f1e0:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	681b      	ldr	r3, [r3, #0]
 800f1e6:	f245 5255 	movw	r2, #21845	; 0x5555
 800f1ea:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	687a      	ldr	r2, [r7, #4]
 800f1f2:	6852      	ldr	r2, [r2, #4]
 800f1f4:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	687a      	ldr	r2, [r7, #4]
 800f1fc:	6892      	ldr	r2, [r2, #8]
 800f1fe:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800f200:	f7f9 fe5a 	bl	8008eb8 <HAL_GetTick>
 800f204:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800f206:	e00f      	b.n	800f228 <HAL_IWDG_Init+0xd8>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800f208:	f7f9 fe56 	bl	8008eb8 <HAL_GetTick>
 800f20c:	4602      	mov	r2, r0
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	1ad3      	subs	r3, r2, r3
 800f212:	2b31      	cmp	r3, #49	; 0x31
 800f214:	d908      	bls.n	800f228 <HAL_IWDG_Init+0xd8>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	68db      	ldr	r3, [r3, #12]
 800f21c:	f003 0307 	and.w	r3, r3, #7
 800f220:	2b00      	cmp	r3, #0
 800f222:	d001      	beq.n	800f228 <HAL_IWDG_Init+0xd8>
      {
        return HAL_TIMEOUT;
 800f224:	2303      	movs	r3, #3
 800f226:	e019      	b.n	800f25c <HAL_IWDG_Init+0x10c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	68db      	ldr	r3, [r3, #12]
 800f22e:	f003 0307 	and.w	r3, r3, #7
 800f232:	2b00      	cmp	r3, #0
 800f234:	d1e8      	bne.n	800f208 <HAL_IWDG_Init+0xb8>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	691a      	ldr	r2, [r3, #16]
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	68db      	ldr	r3, [r3, #12]
 800f240:	429a      	cmp	r2, r3
 800f242:	d005      	beq.n	800f250 <HAL_IWDG_Init+0x100>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	687a      	ldr	r2, [r7, #4]
 800f24a:	68d2      	ldr	r2, [r2, #12]
 800f24c:	611a      	str	r2, [r3, #16]
 800f24e:	e004      	b.n	800f25a <HAL_IWDG_Init+0x10a>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800f258:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f25a:	2300      	movs	r3, #0
}
 800f25c:	4618      	mov	r0, r3
 800f25e:	3710      	adds	r7, #16
 800f260:	46bd      	mov	sp, r7
 800f262:	bd80      	pop	{r7, pc}
 800f264:	40003000 	.word	0x40003000
 800f268:	08018db8 	.word	0x08018db8

0800f26c <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800f26c:	b480      	push	{r7}
 800f26e:	b083      	sub	sp, #12
 800f270:	af00      	add	r7, sp, #0
 800f272:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800f27c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800f27e:	2300      	movs	r3, #0
}
 800f280:	4618      	mov	r0, r3
 800f282:	370c      	adds	r7, #12
 800f284:	46bd      	mov	sp, r7
 800f286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f28a:	4770      	bx	lr

0800f28c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800f28c:	b480      	push	{r7}
 800f28e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800f290:	4b04      	ldr	r3, [pc, #16]	; (800f2a4 <HAL_PWREx_GetVoltageRange+0x18>)
 800f292:	681b      	ldr	r3, [r3, #0]
 800f294:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800f298:	4618      	mov	r0, r3
 800f29a:	46bd      	mov	sp, r7
 800f29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2a0:	4770      	bx	lr
 800f2a2:	bf00      	nop
 800f2a4:	40007000 	.word	0x40007000

0800f2a8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800f2a8:	b580      	push	{r7, lr}
 800f2aa:	b084      	sub	sp, #16
 800f2ac:	af00      	add	r7, sp, #0
 800f2ae:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f2b6:	d007      	beq.n	800f2c8 <HAL_PWREx_ControlVoltageScaling+0x20>
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f2be:	d003      	beq.n	800f2c8 <HAL_PWREx_ControlVoltageScaling+0x20>
 800f2c0:	21a7      	movs	r1, #167	; 0xa7
 800f2c2:	4826      	ldr	r0, [pc, #152]	; (800f35c <HAL_PWREx_ControlVoltageScaling+0xb4>)
 800f2c4:	f7f5 f966 	bl	8004594 <assert_failed>
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f2ce:	d130      	bne.n	800f332 <HAL_PWREx_ControlVoltageScaling+0x8a>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800f2d0:	4b23      	ldr	r3, [pc, #140]	; (800f360 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800f2d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f2dc:	d038      	beq.n	800f350 <HAL_PWREx_ControlVoltageScaling+0xa8>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800f2de:	4b20      	ldr	r3, [pc, #128]	; (800f360 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800f2e6:	4a1e      	ldr	r2, [pc, #120]	; (800f360 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 800f2e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800f2ec:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800f2ee:	4b1d      	ldr	r3, [pc, #116]	; (800f364 <HAL_PWREx_ControlVoltageScaling+0xbc>)
 800f2f0:	681b      	ldr	r3, [r3, #0]
 800f2f2:	2232      	movs	r2, #50	; 0x32
 800f2f4:	fb02 f303 	mul.w	r3, r2, r3
 800f2f8:	4a1b      	ldr	r2, [pc, #108]	; (800f368 <HAL_PWREx_ControlVoltageScaling+0xc0>)
 800f2fa:	fba2 2303 	umull	r2, r3, r2, r3
 800f2fe:	0c9b      	lsrs	r3, r3, #18
 800f300:	3301      	adds	r3, #1
 800f302:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800f304:	e002      	b.n	800f30c <HAL_PWREx_ControlVoltageScaling+0x64>
      {
        wait_loop_index--;
 800f306:	68fb      	ldr	r3, [r7, #12]
 800f308:	3b01      	subs	r3, #1
 800f30a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800f30c:	4b14      	ldr	r3, [pc, #80]	; (800f360 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 800f30e:	695b      	ldr	r3, [r3, #20]
 800f310:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f314:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f318:	d102      	bne.n	800f320 <HAL_PWREx_ControlVoltageScaling+0x78>
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d1f2      	bne.n	800f306 <HAL_PWREx_ControlVoltageScaling+0x5e>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800f320:	4b0f      	ldr	r3, [pc, #60]	; (800f360 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 800f322:	695b      	ldr	r3, [r3, #20]
 800f324:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f328:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f32c:	d110      	bne.n	800f350 <HAL_PWREx_ControlVoltageScaling+0xa8>
      {
        return HAL_TIMEOUT;
 800f32e:	2303      	movs	r3, #3
 800f330:	e00f      	b.n	800f352 <HAL_PWREx_ControlVoltageScaling+0xaa>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800f332:	4b0b      	ldr	r3, [pc, #44]	; (800f360 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800f33a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f33e:	d007      	beq.n	800f350 <HAL_PWREx_ControlVoltageScaling+0xa8>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800f340:	4b07      	ldr	r3, [pc, #28]	; (800f360 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800f348:	4a05      	ldr	r2, [pc, #20]	; (800f360 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 800f34a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800f34e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800f350:	2300      	movs	r3, #0
}
 800f352:	4618      	mov	r0, r3
 800f354:	3710      	adds	r7, #16
 800f356:	46bd      	mov	sp, r7
 800f358:	bd80      	pop	{r7, pc}
 800f35a:	bf00      	nop
 800f35c:	08018df4 	.word	0x08018df4
 800f360:	40007000 	.word	0x40007000
 800f364:	20000ff4 	.word	0x20000ff4
 800f368:	431bde83 	.word	0x431bde83

0800f36c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800f36c:	b580      	push	{r7, lr}
 800f36e:	b088      	sub	sp, #32
 800f370:	af00      	add	r7, sp, #0
 800f372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	2b00      	cmp	r3, #0
 800f378:	d102      	bne.n	800f380 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800f37a:	2301      	movs	r3, #1
 800f37c:	f000 bd39 	b.w	800fdf2 <HAL_RCC_OscConfig+0xa86>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	2b00      	cmp	r3, #0
 800f386:	d00a      	beq.n	800f39e <HAL_RCC_OscConfig+0x32>
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800f390:	2b00      	cmp	r3, #0
 800f392:	d004      	beq.n	800f39e <HAL_RCC_OscConfig+0x32>
 800f394:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 800f398:	48a3      	ldr	r0, [pc, #652]	; (800f628 <HAL_RCC_OscConfig+0x2bc>)
 800f39a:	f7f5 f8fb 	bl	8004594 <assert_failed>

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f39e:	4ba3      	ldr	r3, [pc, #652]	; (800f62c <HAL_RCC_OscConfig+0x2c0>)
 800f3a0:	689b      	ldr	r3, [r3, #8]
 800f3a2:	f003 030c 	and.w	r3, r3, #12
 800f3a6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800f3a8:	4ba0      	ldr	r3, [pc, #640]	; (800f62c <HAL_RCC_OscConfig+0x2c0>)
 800f3aa:	68db      	ldr	r3, [r3, #12]
 800f3ac:	f003 0303 	and.w	r3, r3, #3
 800f3b0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	f003 0310 	and.w	r3, r3, #16
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	f000 813f 	beq.w	800f63e <HAL_RCC_OscConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	699b      	ldr	r3, [r3, #24]
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d008      	beq.n	800f3da <HAL_RCC_OscConfig+0x6e>
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	699b      	ldr	r3, [r3, #24]
 800f3cc:	2b01      	cmp	r3, #1
 800f3ce:	d004      	beq.n	800f3da <HAL_RCC_OscConfig+0x6e>
 800f3d0:	f240 11a9 	movw	r1, #425	; 0x1a9
 800f3d4:	4894      	ldr	r0, [pc, #592]	; (800f628 <HAL_RCC_OscConfig+0x2bc>)
 800f3d6:	f7f5 f8dd 	bl	8004594 <assert_failed>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	69db      	ldr	r3, [r3, #28]
 800f3de:	2bff      	cmp	r3, #255	; 0xff
 800f3e0:	d904      	bls.n	800f3ec <HAL_RCC_OscConfig+0x80>
 800f3e2:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f3e6:	4890      	ldr	r0, [pc, #576]	; (800f628 <HAL_RCC_OscConfig+0x2bc>)
 800f3e8:	f7f5 f8d4 	bl	8004594 <assert_failed>
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	6a1b      	ldr	r3, [r3, #32]
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d030      	beq.n	800f456 <HAL_RCC_OscConfig+0xea>
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	6a1b      	ldr	r3, [r3, #32]
 800f3f8:	2b10      	cmp	r3, #16
 800f3fa:	d02c      	beq.n	800f456 <HAL_RCC_OscConfig+0xea>
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	6a1b      	ldr	r3, [r3, #32]
 800f400:	2b20      	cmp	r3, #32
 800f402:	d028      	beq.n	800f456 <HAL_RCC_OscConfig+0xea>
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	6a1b      	ldr	r3, [r3, #32]
 800f408:	2b30      	cmp	r3, #48	; 0x30
 800f40a:	d024      	beq.n	800f456 <HAL_RCC_OscConfig+0xea>
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	6a1b      	ldr	r3, [r3, #32]
 800f410:	2b40      	cmp	r3, #64	; 0x40
 800f412:	d020      	beq.n	800f456 <HAL_RCC_OscConfig+0xea>
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	6a1b      	ldr	r3, [r3, #32]
 800f418:	2b50      	cmp	r3, #80	; 0x50
 800f41a:	d01c      	beq.n	800f456 <HAL_RCC_OscConfig+0xea>
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	6a1b      	ldr	r3, [r3, #32]
 800f420:	2b60      	cmp	r3, #96	; 0x60
 800f422:	d018      	beq.n	800f456 <HAL_RCC_OscConfig+0xea>
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	6a1b      	ldr	r3, [r3, #32]
 800f428:	2b70      	cmp	r3, #112	; 0x70
 800f42a:	d014      	beq.n	800f456 <HAL_RCC_OscConfig+0xea>
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	6a1b      	ldr	r3, [r3, #32]
 800f430:	2b80      	cmp	r3, #128	; 0x80
 800f432:	d010      	beq.n	800f456 <HAL_RCC_OscConfig+0xea>
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	6a1b      	ldr	r3, [r3, #32]
 800f438:	2b90      	cmp	r3, #144	; 0x90
 800f43a:	d00c      	beq.n	800f456 <HAL_RCC_OscConfig+0xea>
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	6a1b      	ldr	r3, [r3, #32]
 800f440:	2ba0      	cmp	r3, #160	; 0xa0
 800f442:	d008      	beq.n	800f456 <HAL_RCC_OscConfig+0xea>
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	6a1b      	ldr	r3, [r3, #32]
 800f448:	2bb0      	cmp	r3, #176	; 0xb0
 800f44a:	d004      	beq.n	800f456 <HAL_RCC_OscConfig+0xea>
 800f44c:	f240 11ab 	movw	r1, #427	; 0x1ab
 800f450:	4875      	ldr	r0, [pc, #468]	; (800f628 <HAL_RCC_OscConfig+0x2bc>)
 800f452:	f7f5 f89f 	bl	8004594 <assert_failed>

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800f456:	69bb      	ldr	r3, [r7, #24]
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d007      	beq.n	800f46c <HAL_RCC_OscConfig+0x100>
 800f45c:	69bb      	ldr	r3, [r7, #24]
 800f45e:	2b0c      	cmp	r3, #12
 800f460:	f040 808f 	bne.w	800f582 <HAL_RCC_OscConfig+0x216>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800f464:	697b      	ldr	r3, [r7, #20]
 800f466:	2b01      	cmp	r3, #1
 800f468:	f040 808b 	bne.w	800f582 <HAL_RCC_OscConfig+0x216>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800f46c:	4b6f      	ldr	r3, [pc, #444]	; (800f62c <HAL_RCC_OscConfig+0x2c0>)
 800f46e:	681b      	ldr	r3, [r3, #0]
 800f470:	f003 0302 	and.w	r3, r3, #2
 800f474:	2b00      	cmp	r3, #0
 800f476:	d006      	beq.n	800f486 <HAL_RCC_OscConfig+0x11a>
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	699b      	ldr	r3, [r3, #24]
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d102      	bne.n	800f486 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 800f480:	2301      	movs	r3, #1
 800f482:	f000 bcb6 	b.w	800fdf2 <HAL_RCC_OscConfig+0xa86>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	6a1a      	ldr	r2, [r3, #32]
 800f48a:	4b68      	ldr	r3, [pc, #416]	; (800f62c <HAL_RCC_OscConfig+0x2c0>)
 800f48c:	681b      	ldr	r3, [r3, #0]
 800f48e:	f003 0308 	and.w	r3, r3, #8
 800f492:	2b00      	cmp	r3, #0
 800f494:	d004      	beq.n	800f4a0 <HAL_RCC_OscConfig+0x134>
 800f496:	4b65      	ldr	r3, [pc, #404]	; (800f62c <HAL_RCC_OscConfig+0x2c0>)
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f49e:	e005      	b.n	800f4ac <HAL_RCC_OscConfig+0x140>
 800f4a0:	4b62      	ldr	r3, [pc, #392]	; (800f62c <HAL_RCC_OscConfig+0x2c0>)
 800f4a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f4a6:	091b      	lsrs	r3, r3, #4
 800f4a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f4ac:	4293      	cmp	r3, r2
 800f4ae:	d224      	bcs.n	800f4fa <HAL_RCC_OscConfig+0x18e>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	6a1b      	ldr	r3, [r3, #32]
 800f4b4:	4618      	mov	r0, r3
 800f4b6:	f000 fed1 	bl	801025c <RCC_SetFlashLatencyFromMSIRange>
 800f4ba:	4603      	mov	r3, r0
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d002      	beq.n	800f4c6 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_ERROR;
 800f4c0:	2301      	movs	r3, #1
 800f4c2:	f000 bc96 	b.w	800fdf2 <HAL_RCC_OscConfig+0xa86>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800f4c6:	4b59      	ldr	r3, [pc, #356]	; (800f62c <HAL_RCC_OscConfig+0x2c0>)
 800f4c8:	681b      	ldr	r3, [r3, #0]
 800f4ca:	4a58      	ldr	r2, [pc, #352]	; (800f62c <HAL_RCC_OscConfig+0x2c0>)
 800f4cc:	f043 0308 	orr.w	r3, r3, #8
 800f4d0:	6013      	str	r3, [r2, #0]
 800f4d2:	4b56      	ldr	r3, [pc, #344]	; (800f62c <HAL_RCC_OscConfig+0x2c0>)
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	6a1b      	ldr	r3, [r3, #32]
 800f4de:	4953      	ldr	r1, [pc, #332]	; (800f62c <HAL_RCC_OscConfig+0x2c0>)
 800f4e0:	4313      	orrs	r3, r2
 800f4e2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800f4e4:	4b51      	ldr	r3, [pc, #324]	; (800f62c <HAL_RCC_OscConfig+0x2c0>)
 800f4e6:	685b      	ldr	r3, [r3, #4]
 800f4e8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	69db      	ldr	r3, [r3, #28]
 800f4f0:	021b      	lsls	r3, r3, #8
 800f4f2:	494e      	ldr	r1, [pc, #312]	; (800f62c <HAL_RCC_OscConfig+0x2c0>)
 800f4f4:	4313      	orrs	r3, r2
 800f4f6:	604b      	str	r3, [r1, #4]
 800f4f8:	e026      	b.n	800f548 <HAL_RCC_OscConfig+0x1dc>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800f4fa:	4b4c      	ldr	r3, [pc, #304]	; (800f62c <HAL_RCC_OscConfig+0x2c0>)
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	4a4b      	ldr	r2, [pc, #300]	; (800f62c <HAL_RCC_OscConfig+0x2c0>)
 800f500:	f043 0308 	orr.w	r3, r3, #8
 800f504:	6013      	str	r3, [r2, #0]
 800f506:	4b49      	ldr	r3, [pc, #292]	; (800f62c <HAL_RCC_OscConfig+0x2c0>)
 800f508:	681b      	ldr	r3, [r3, #0]
 800f50a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	6a1b      	ldr	r3, [r3, #32]
 800f512:	4946      	ldr	r1, [pc, #280]	; (800f62c <HAL_RCC_OscConfig+0x2c0>)
 800f514:	4313      	orrs	r3, r2
 800f516:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800f518:	4b44      	ldr	r3, [pc, #272]	; (800f62c <HAL_RCC_OscConfig+0x2c0>)
 800f51a:	685b      	ldr	r3, [r3, #4]
 800f51c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	69db      	ldr	r3, [r3, #28]
 800f524:	021b      	lsls	r3, r3, #8
 800f526:	4941      	ldr	r1, [pc, #260]	; (800f62c <HAL_RCC_OscConfig+0x2c0>)
 800f528:	4313      	orrs	r3, r2
 800f52a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800f52c:	69bb      	ldr	r3, [r7, #24]
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d10a      	bne.n	800f548 <HAL_RCC_OscConfig+0x1dc>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	6a1b      	ldr	r3, [r3, #32]
 800f536:	4618      	mov	r0, r3
 800f538:	f000 fe90 	bl	801025c <RCC_SetFlashLatencyFromMSIRange>
 800f53c:	4603      	mov	r3, r0
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d002      	beq.n	800f548 <HAL_RCC_OscConfig+0x1dc>
            {
              return HAL_ERROR;
 800f542:	2301      	movs	r3, #1
 800f544:	f000 bc55 	b.w	800fdf2 <HAL_RCC_OscConfig+0xa86>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800f548:	f000 fdfc 	bl	8010144 <HAL_RCC_GetSysClockFreq>
 800f54c:	4602      	mov	r2, r0
 800f54e:	4b37      	ldr	r3, [pc, #220]	; (800f62c <HAL_RCC_OscConfig+0x2c0>)
 800f550:	689b      	ldr	r3, [r3, #8]
 800f552:	091b      	lsrs	r3, r3, #4
 800f554:	f003 030f 	and.w	r3, r3, #15
 800f558:	4935      	ldr	r1, [pc, #212]	; (800f630 <HAL_RCC_OscConfig+0x2c4>)
 800f55a:	5ccb      	ldrb	r3, [r1, r3]
 800f55c:	f003 031f 	and.w	r3, r3, #31
 800f560:	fa22 f303 	lsr.w	r3, r2, r3
 800f564:	4a33      	ldr	r2, [pc, #204]	; (800f634 <HAL_RCC_OscConfig+0x2c8>)
 800f566:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800f568:	4b33      	ldr	r3, [pc, #204]	; (800f638 <HAL_RCC_OscConfig+0x2cc>)
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	4618      	mov	r0, r3
 800f56e:	f7f9 fc53 	bl	8008e18 <HAL_InitTick>
 800f572:	4603      	mov	r3, r0
 800f574:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800f576:	7bfb      	ldrb	r3, [r7, #15]
 800f578:	2b00      	cmp	r3, #0
 800f57a:	d05f      	beq.n	800f63c <HAL_RCC_OscConfig+0x2d0>
        {
          return status;
 800f57c:	7bfb      	ldrb	r3, [r7, #15]
 800f57e:	f000 bc38 	b.w	800fdf2 <HAL_RCC_OscConfig+0xa86>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	699b      	ldr	r3, [r3, #24]
 800f586:	2b00      	cmp	r3, #0
 800f588:	d033      	beq.n	800f5f2 <HAL_RCC_OscConfig+0x286>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800f58a:	4b28      	ldr	r3, [pc, #160]	; (800f62c <HAL_RCC_OscConfig+0x2c0>)
 800f58c:	681b      	ldr	r3, [r3, #0]
 800f58e:	4a27      	ldr	r2, [pc, #156]	; (800f62c <HAL_RCC_OscConfig+0x2c0>)
 800f590:	f043 0301 	orr.w	r3, r3, #1
 800f594:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800f596:	f7f9 fc8f 	bl	8008eb8 <HAL_GetTick>
 800f59a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800f59c:	e009      	b.n	800f5b2 <HAL_RCC_OscConfig+0x246>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800f59e:	f7f9 fc8b 	bl	8008eb8 <HAL_GetTick>
 800f5a2:	4602      	mov	r2, r0
 800f5a4:	693b      	ldr	r3, [r7, #16]
 800f5a6:	1ad3      	subs	r3, r2, r3
 800f5a8:	2b02      	cmp	r3, #2
 800f5aa:	d902      	bls.n	800f5b2 <HAL_RCC_OscConfig+0x246>
          {
            return HAL_TIMEOUT;
 800f5ac:	2303      	movs	r3, #3
 800f5ae:	f000 bc20 	b.w	800fdf2 <HAL_RCC_OscConfig+0xa86>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800f5b2:	4b1e      	ldr	r3, [pc, #120]	; (800f62c <HAL_RCC_OscConfig+0x2c0>)
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	f003 0302 	and.w	r3, r3, #2
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d0ef      	beq.n	800f59e <HAL_RCC_OscConfig+0x232>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800f5be:	4b1b      	ldr	r3, [pc, #108]	; (800f62c <HAL_RCC_OscConfig+0x2c0>)
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	4a1a      	ldr	r2, [pc, #104]	; (800f62c <HAL_RCC_OscConfig+0x2c0>)
 800f5c4:	f043 0308 	orr.w	r3, r3, #8
 800f5c8:	6013      	str	r3, [r2, #0]
 800f5ca:	4b18      	ldr	r3, [pc, #96]	; (800f62c <HAL_RCC_OscConfig+0x2c0>)
 800f5cc:	681b      	ldr	r3, [r3, #0]
 800f5ce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	6a1b      	ldr	r3, [r3, #32]
 800f5d6:	4915      	ldr	r1, [pc, #84]	; (800f62c <HAL_RCC_OscConfig+0x2c0>)
 800f5d8:	4313      	orrs	r3, r2
 800f5da:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800f5dc:	4b13      	ldr	r3, [pc, #76]	; (800f62c <HAL_RCC_OscConfig+0x2c0>)
 800f5de:	685b      	ldr	r3, [r3, #4]
 800f5e0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	69db      	ldr	r3, [r3, #28]
 800f5e8:	021b      	lsls	r3, r3, #8
 800f5ea:	4910      	ldr	r1, [pc, #64]	; (800f62c <HAL_RCC_OscConfig+0x2c0>)
 800f5ec:	4313      	orrs	r3, r2
 800f5ee:	604b      	str	r3, [r1, #4]
 800f5f0:	e025      	b.n	800f63e <HAL_RCC_OscConfig+0x2d2>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800f5f2:	4b0e      	ldr	r3, [pc, #56]	; (800f62c <HAL_RCC_OscConfig+0x2c0>)
 800f5f4:	681b      	ldr	r3, [r3, #0]
 800f5f6:	4a0d      	ldr	r2, [pc, #52]	; (800f62c <HAL_RCC_OscConfig+0x2c0>)
 800f5f8:	f023 0301 	bic.w	r3, r3, #1
 800f5fc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800f5fe:	f7f9 fc5b 	bl	8008eb8 <HAL_GetTick>
 800f602:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800f604:	e008      	b.n	800f618 <HAL_RCC_OscConfig+0x2ac>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800f606:	f7f9 fc57 	bl	8008eb8 <HAL_GetTick>
 800f60a:	4602      	mov	r2, r0
 800f60c:	693b      	ldr	r3, [r7, #16]
 800f60e:	1ad3      	subs	r3, r2, r3
 800f610:	2b02      	cmp	r3, #2
 800f612:	d901      	bls.n	800f618 <HAL_RCC_OscConfig+0x2ac>
          {
            return HAL_TIMEOUT;
 800f614:	2303      	movs	r3, #3
 800f616:	e3ec      	b.n	800fdf2 <HAL_RCC_OscConfig+0xa86>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800f618:	4b04      	ldr	r3, [pc, #16]	; (800f62c <HAL_RCC_OscConfig+0x2c0>)
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	f003 0302 	and.w	r3, r3, #2
 800f620:	2b00      	cmp	r3, #0
 800f622:	d1f0      	bne.n	800f606 <HAL_RCC_OscConfig+0x29a>
 800f624:	e00b      	b.n	800f63e <HAL_RCC_OscConfig+0x2d2>
 800f626:	bf00      	nop
 800f628:	08018e30 	.word	0x08018e30
 800f62c:	40021000 	.word	0x40021000
 800f630:	08019398 	.word	0x08019398
 800f634:	20000ff4 	.word	0x20000ff4
 800f638:	200014dc 	.word	0x200014dc
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800f63c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	f003 0301 	and.w	r3, r3, #1
 800f646:	2b00      	cmp	r3, #0
 800f648:	d07e      	beq.n	800f748 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	685b      	ldr	r3, [r3, #4]
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d00e      	beq.n	800f670 <HAL_RCC_OscConfig+0x304>
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	685b      	ldr	r3, [r3, #4]
 800f656:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f65a:	d009      	beq.n	800f670 <HAL_RCC_OscConfig+0x304>
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	685b      	ldr	r3, [r3, #4]
 800f660:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800f664:	d004      	beq.n	800f670 <HAL_RCC_OscConfig+0x304>
 800f666:	f240 2117 	movw	r1, #535	; 0x217
 800f66a:	489b      	ldr	r0, [pc, #620]	; (800f8d8 <HAL_RCC_OscConfig+0x56c>)
 800f66c:	f7f4 ff92 	bl	8004594 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800f670:	69bb      	ldr	r3, [r7, #24]
 800f672:	2b08      	cmp	r3, #8
 800f674:	d005      	beq.n	800f682 <HAL_RCC_OscConfig+0x316>
 800f676:	69bb      	ldr	r3, [r7, #24]
 800f678:	2b0c      	cmp	r3, #12
 800f67a:	d10e      	bne.n	800f69a <HAL_RCC_OscConfig+0x32e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800f67c:	697b      	ldr	r3, [r7, #20]
 800f67e:	2b03      	cmp	r3, #3
 800f680:	d10b      	bne.n	800f69a <HAL_RCC_OscConfig+0x32e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f682:	4b96      	ldr	r3, [pc, #600]	; (800f8dc <HAL_RCC_OscConfig+0x570>)
 800f684:	681b      	ldr	r3, [r3, #0]
 800f686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d05b      	beq.n	800f746 <HAL_RCC_OscConfig+0x3da>
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	685b      	ldr	r3, [r3, #4]
 800f692:	2b00      	cmp	r3, #0
 800f694:	d157      	bne.n	800f746 <HAL_RCC_OscConfig+0x3da>
      {
        return HAL_ERROR;
 800f696:	2301      	movs	r3, #1
 800f698:	e3ab      	b.n	800fdf2 <HAL_RCC_OscConfig+0xa86>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	685b      	ldr	r3, [r3, #4]
 800f69e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f6a2:	d106      	bne.n	800f6b2 <HAL_RCC_OscConfig+0x346>
 800f6a4:	4b8d      	ldr	r3, [pc, #564]	; (800f8dc <HAL_RCC_OscConfig+0x570>)
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	4a8c      	ldr	r2, [pc, #560]	; (800f8dc <HAL_RCC_OscConfig+0x570>)
 800f6aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f6ae:	6013      	str	r3, [r2, #0]
 800f6b0:	e01d      	b.n	800f6ee <HAL_RCC_OscConfig+0x382>
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	685b      	ldr	r3, [r3, #4]
 800f6b6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800f6ba:	d10c      	bne.n	800f6d6 <HAL_RCC_OscConfig+0x36a>
 800f6bc:	4b87      	ldr	r3, [pc, #540]	; (800f8dc <HAL_RCC_OscConfig+0x570>)
 800f6be:	681b      	ldr	r3, [r3, #0]
 800f6c0:	4a86      	ldr	r2, [pc, #536]	; (800f8dc <HAL_RCC_OscConfig+0x570>)
 800f6c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800f6c6:	6013      	str	r3, [r2, #0]
 800f6c8:	4b84      	ldr	r3, [pc, #528]	; (800f8dc <HAL_RCC_OscConfig+0x570>)
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	4a83      	ldr	r2, [pc, #524]	; (800f8dc <HAL_RCC_OscConfig+0x570>)
 800f6ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f6d2:	6013      	str	r3, [r2, #0]
 800f6d4:	e00b      	b.n	800f6ee <HAL_RCC_OscConfig+0x382>
 800f6d6:	4b81      	ldr	r3, [pc, #516]	; (800f8dc <HAL_RCC_OscConfig+0x570>)
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	4a80      	ldr	r2, [pc, #512]	; (800f8dc <HAL_RCC_OscConfig+0x570>)
 800f6dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f6e0:	6013      	str	r3, [r2, #0]
 800f6e2:	4b7e      	ldr	r3, [pc, #504]	; (800f8dc <HAL_RCC_OscConfig+0x570>)
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	4a7d      	ldr	r2, [pc, #500]	; (800f8dc <HAL_RCC_OscConfig+0x570>)
 800f6e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800f6ec:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	685b      	ldr	r3, [r3, #4]
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d013      	beq.n	800f71e <HAL_RCC_OscConfig+0x3b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f6f6:	f7f9 fbdf 	bl	8008eb8 <HAL_GetTick>
 800f6fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800f6fc:	e008      	b.n	800f710 <HAL_RCC_OscConfig+0x3a4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800f6fe:	f7f9 fbdb 	bl	8008eb8 <HAL_GetTick>
 800f702:	4602      	mov	r2, r0
 800f704:	693b      	ldr	r3, [r7, #16]
 800f706:	1ad3      	subs	r3, r2, r3
 800f708:	2b64      	cmp	r3, #100	; 0x64
 800f70a:	d901      	bls.n	800f710 <HAL_RCC_OscConfig+0x3a4>
          {
            return HAL_TIMEOUT;
 800f70c:	2303      	movs	r3, #3
 800f70e:	e370      	b.n	800fdf2 <HAL_RCC_OscConfig+0xa86>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800f710:	4b72      	ldr	r3, [pc, #456]	; (800f8dc <HAL_RCC_OscConfig+0x570>)
 800f712:	681b      	ldr	r3, [r3, #0]
 800f714:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d0f0      	beq.n	800f6fe <HAL_RCC_OscConfig+0x392>
 800f71c:	e014      	b.n	800f748 <HAL_RCC_OscConfig+0x3dc>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f71e:	f7f9 fbcb 	bl	8008eb8 <HAL_GetTick>
 800f722:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800f724:	e008      	b.n	800f738 <HAL_RCC_OscConfig+0x3cc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800f726:	f7f9 fbc7 	bl	8008eb8 <HAL_GetTick>
 800f72a:	4602      	mov	r2, r0
 800f72c:	693b      	ldr	r3, [r7, #16]
 800f72e:	1ad3      	subs	r3, r2, r3
 800f730:	2b64      	cmp	r3, #100	; 0x64
 800f732:	d901      	bls.n	800f738 <HAL_RCC_OscConfig+0x3cc>
          {
            return HAL_TIMEOUT;
 800f734:	2303      	movs	r3, #3
 800f736:	e35c      	b.n	800fdf2 <HAL_RCC_OscConfig+0xa86>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800f738:	4b68      	ldr	r3, [pc, #416]	; (800f8dc <HAL_RCC_OscConfig+0x570>)
 800f73a:	681b      	ldr	r3, [r3, #0]
 800f73c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f740:	2b00      	cmp	r3, #0
 800f742:	d1f0      	bne.n	800f726 <HAL_RCC_OscConfig+0x3ba>
 800f744:	e000      	b.n	800f748 <HAL_RCC_OscConfig+0x3dc>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f746:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	681b      	ldr	r3, [r3, #0]
 800f74c:	f003 0302 	and.w	r3, r3, #2
 800f750:	2b00      	cmp	r3, #0
 800f752:	d077      	beq.n	800f844 <HAL_RCC_OscConfig+0x4d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	68db      	ldr	r3, [r3, #12]
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d009      	beq.n	800f770 <HAL_RCC_OscConfig+0x404>
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	68db      	ldr	r3, [r3, #12]
 800f760:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f764:	d004      	beq.n	800f770 <HAL_RCC_OscConfig+0x404>
 800f766:	f240 214a 	movw	r1, #586	; 0x24a
 800f76a:	485b      	ldr	r0, [pc, #364]	; (800f8d8 <HAL_RCC_OscConfig+0x56c>)
 800f76c:	f7f4 ff12 	bl	8004594 <assert_failed>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	691b      	ldr	r3, [r3, #16]
 800f774:	2b1f      	cmp	r3, #31
 800f776:	d904      	bls.n	800f782 <HAL_RCC_OscConfig+0x416>
 800f778:	f240 214b 	movw	r1, #587	; 0x24b
 800f77c:	4856      	ldr	r0, [pc, #344]	; (800f8d8 <HAL_RCC_OscConfig+0x56c>)
 800f77e:	f7f4 ff09 	bl	8004594 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800f782:	69bb      	ldr	r3, [r7, #24]
 800f784:	2b04      	cmp	r3, #4
 800f786:	d005      	beq.n	800f794 <HAL_RCC_OscConfig+0x428>
 800f788:	69bb      	ldr	r3, [r7, #24]
 800f78a:	2b0c      	cmp	r3, #12
 800f78c:	d119      	bne.n	800f7c2 <HAL_RCC_OscConfig+0x456>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800f78e:	697b      	ldr	r3, [r7, #20]
 800f790:	2b02      	cmp	r3, #2
 800f792:	d116      	bne.n	800f7c2 <HAL_RCC_OscConfig+0x456>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800f794:	4b51      	ldr	r3, [pc, #324]	; (800f8dc <HAL_RCC_OscConfig+0x570>)
 800f796:	681b      	ldr	r3, [r3, #0]
 800f798:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d005      	beq.n	800f7ac <HAL_RCC_OscConfig+0x440>
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	68db      	ldr	r3, [r3, #12]
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d101      	bne.n	800f7ac <HAL_RCC_OscConfig+0x440>
      {
        return HAL_ERROR;
 800f7a8:	2301      	movs	r3, #1
 800f7aa:	e322      	b.n	800fdf2 <HAL_RCC_OscConfig+0xa86>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f7ac:	4b4b      	ldr	r3, [pc, #300]	; (800f8dc <HAL_RCC_OscConfig+0x570>)
 800f7ae:	685b      	ldr	r3, [r3, #4]
 800f7b0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	691b      	ldr	r3, [r3, #16]
 800f7b8:	061b      	lsls	r3, r3, #24
 800f7ba:	4948      	ldr	r1, [pc, #288]	; (800f8dc <HAL_RCC_OscConfig+0x570>)
 800f7bc:	4313      	orrs	r3, r2
 800f7be:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800f7c0:	e040      	b.n	800f844 <HAL_RCC_OscConfig+0x4d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	68db      	ldr	r3, [r3, #12]
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d023      	beq.n	800f812 <HAL_RCC_OscConfig+0x4a6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800f7ca:	4b44      	ldr	r3, [pc, #272]	; (800f8dc <HAL_RCC_OscConfig+0x570>)
 800f7cc:	681b      	ldr	r3, [r3, #0]
 800f7ce:	4a43      	ldr	r2, [pc, #268]	; (800f8dc <HAL_RCC_OscConfig+0x570>)
 800f7d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f7d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f7d6:	f7f9 fb6f 	bl	8008eb8 <HAL_GetTick>
 800f7da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800f7dc:	e008      	b.n	800f7f0 <HAL_RCC_OscConfig+0x484>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800f7de:	f7f9 fb6b 	bl	8008eb8 <HAL_GetTick>
 800f7e2:	4602      	mov	r2, r0
 800f7e4:	693b      	ldr	r3, [r7, #16]
 800f7e6:	1ad3      	subs	r3, r2, r3
 800f7e8:	2b02      	cmp	r3, #2
 800f7ea:	d901      	bls.n	800f7f0 <HAL_RCC_OscConfig+0x484>
          {
            return HAL_TIMEOUT;
 800f7ec:	2303      	movs	r3, #3
 800f7ee:	e300      	b.n	800fdf2 <HAL_RCC_OscConfig+0xa86>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800f7f0:	4b3a      	ldr	r3, [pc, #232]	; (800f8dc <HAL_RCC_OscConfig+0x570>)
 800f7f2:	681b      	ldr	r3, [r3, #0]
 800f7f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d0f0      	beq.n	800f7de <HAL_RCC_OscConfig+0x472>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f7fc:	4b37      	ldr	r3, [pc, #220]	; (800f8dc <HAL_RCC_OscConfig+0x570>)
 800f7fe:	685b      	ldr	r3, [r3, #4]
 800f800:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	691b      	ldr	r3, [r3, #16]
 800f808:	061b      	lsls	r3, r3, #24
 800f80a:	4934      	ldr	r1, [pc, #208]	; (800f8dc <HAL_RCC_OscConfig+0x570>)
 800f80c:	4313      	orrs	r3, r2
 800f80e:	604b      	str	r3, [r1, #4]
 800f810:	e018      	b.n	800f844 <HAL_RCC_OscConfig+0x4d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800f812:	4b32      	ldr	r3, [pc, #200]	; (800f8dc <HAL_RCC_OscConfig+0x570>)
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	4a31      	ldr	r2, [pc, #196]	; (800f8dc <HAL_RCC_OscConfig+0x570>)
 800f818:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f81c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f81e:	f7f9 fb4b 	bl	8008eb8 <HAL_GetTick>
 800f822:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800f824:	e008      	b.n	800f838 <HAL_RCC_OscConfig+0x4cc>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800f826:	f7f9 fb47 	bl	8008eb8 <HAL_GetTick>
 800f82a:	4602      	mov	r2, r0
 800f82c:	693b      	ldr	r3, [r7, #16]
 800f82e:	1ad3      	subs	r3, r2, r3
 800f830:	2b02      	cmp	r3, #2
 800f832:	d901      	bls.n	800f838 <HAL_RCC_OscConfig+0x4cc>
          {
            return HAL_TIMEOUT;
 800f834:	2303      	movs	r3, #3
 800f836:	e2dc      	b.n	800fdf2 <HAL_RCC_OscConfig+0xa86>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800f838:	4b28      	ldr	r3, [pc, #160]	; (800f8dc <HAL_RCC_OscConfig+0x570>)
 800f83a:	681b      	ldr	r3, [r3, #0]
 800f83c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f840:	2b00      	cmp	r3, #0
 800f842:	d1f0      	bne.n	800f826 <HAL_RCC_OscConfig+0x4ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	f003 0308 	and.w	r3, r3, #8
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d04e      	beq.n	800f8ee <HAL_RCC_OscConfig+0x582>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	695b      	ldr	r3, [r3, #20]
 800f854:	2b00      	cmp	r3, #0
 800f856:	d008      	beq.n	800f86a <HAL_RCC_OscConfig+0x4fe>
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	695b      	ldr	r3, [r3, #20]
 800f85c:	2b01      	cmp	r3, #1
 800f85e:	d004      	beq.n	800f86a <HAL_RCC_OscConfig+0x4fe>
 800f860:	f240 218b 	movw	r1, #651	; 0x28b
 800f864:	481c      	ldr	r0, [pc, #112]	; (800f8d8 <HAL_RCC_OscConfig+0x56c>)
 800f866:	f7f4 fe95 	bl	8004594 <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	695b      	ldr	r3, [r3, #20]
 800f86e:	2b00      	cmp	r3, #0
 800f870:	d01c      	beq.n	800f8ac <HAL_RCC_OscConfig+0x540>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800f872:	4b1a      	ldr	r3, [pc, #104]	; (800f8dc <HAL_RCC_OscConfig+0x570>)
 800f874:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f878:	4a18      	ldr	r2, [pc, #96]	; (800f8dc <HAL_RCC_OscConfig+0x570>)
 800f87a:	f043 0301 	orr.w	r3, r3, #1
 800f87e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f882:	f7f9 fb19 	bl	8008eb8 <HAL_GetTick>
 800f886:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800f888:	e008      	b.n	800f89c <HAL_RCC_OscConfig+0x530>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800f88a:	f7f9 fb15 	bl	8008eb8 <HAL_GetTick>
 800f88e:	4602      	mov	r2, r0
 800f890:	693b      	ldr	r3, [r7, #16]
 800f892:	1ad3      	subs	r3, r2, r3
 800f894:	2b02      	cmp	r3, #2
 800f896:	d901      	bls.n	800f89c <HAL_RCC_OscConfig+0x530>
        {
          return HAL_TIMEOUT;
 800f898:	2303      	movs	r3, #3
 800f89a:	e2aa      	b.n	800fdf2 <HAL_RCC_OscConfig+0xa86>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800f89c:	4b0f      	ldr	r3, [pc, #60]	; (800f8dc <HAL_RCC_OscConfig+0x570>)
 800f89e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f8a2:	f003 0302 	and.w	r3, r3, #2
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d0ef      	beq.n	800f88a <HAL_RCC_OscConfig+0x51e>
 800f8aa:	e020      	b.n	800f8ee <HAL_RCC_OscConfig+0x582>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800f8ac:	4b0b      	ldr	r3, [pc, #44]	; (800f8dc <HAL_RCC_OscConfig+0x570>)
 800f8ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f8b2:	4a0a      	ldr	r2, [pc, #40]	; (800f8dc <HAL_RCC_OscConfig+0x570>)
 800f8b4:	f023 0301 	bic.w	r3, r3, #1
 800f8b8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f8bc:	f7f9 fafc 	bl	8008eb8 <HAL_GetTick>
 800f8c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800f8c2:	e00d      	b.n	800f8e0 <HAL_RCC_OscConfig+0x574>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800f8c4:	f7f9 faf8 	bl	8008eb8 <HAL_GetTick>
 800f8c8:	4602      	mov	r2, r0
 800f8ca:	693b      	ldr	r3, [r7, #16]
 800f8cc:	1ad3      	subs	r3, r2, r3
 800f8ce:	2b02      	cmp	r3, #2
 800f8d0:	d906      	bls.n	800f8e0 <HAL_RCC_OscConfig+0x574>
        {
          return HAL_TIMEOUT;
 800f8d2:	2303      	movs	r3, #3
 800f8d4:	e28d      	b.n	800fdf2 <HAL_RCC_OscConfig+0xa86>
 800f8d6:	bf00      	nop
 800f8d8:	08018e30 	.word	0x08018e30
 800f8dc:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800f8e0:	4b84      	ldr	r3, [pc, #528]	; (800faf4 <HAL_RCC_OscConfig+0x788>)
 800f8e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f8e6:	f003 0302 	and.w	r3, r3, #2
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d1ea      	bne.n	800f8c4 <HAL_RCC_OscConfig+0x558>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	681b      	ldr	r3, [r3, #0]
 800f8f2:	f003 0304 	and.w	r3, r3, #4
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	f000 80b2 	beq.w	800fa60 <HAL_RCC_OscConfig+0x6f4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800f8fc:	2300      	movs	r3, #0
 800f8fe:	77fb      	strb	r3, [r7, #31]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	689b      	ldr	r3, [r3, #8]
 800f904:	2b00      	cmp	r3, #0
 800f906:	d00c      	beq.n	800f922 <HAL_RCC_OscConfig+0x5b6>
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	689b      	ldr	r3, [r3, #8]
 800f90c:	2b01      	cmp	r3, #1
 800f90e:	d008      	beq.n	800f922 <HAL_RCC_OscConfig+0x5b6>
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	689b      	ldr	r3, [r3, #8]
 800f914:	2b05      	cmp	r3, #5
 800f916:	d004      	beq.n	800f922 <HAL_RCC_OscConfig+0x5b6>
 800f918:	f240 21de 	movw	r1, #734	; 0x2de
 800f91c:	4876      	ldr	r0, [pc, #472]	; (800faf8 <HAL_RCC_OscConfig+0x78c>)
 800f91e:	f7f4 fe39 	bl	8004594 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800f922:	4b74      	ldr	r3, [pc, #464]	; (800faf4 <HAL_RCC_OscConfig+0x788>)
 800f924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	d10d      	bne.n	800f94a <HAL_RCC_OscConfig+0x5de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800f92e:	4b71      	ldr	r3, [pc, #452]	; (800faf4 <HAL_RCC_OscConfig+0x788>)
 800f930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f932:	4a70      	ldr	r2, [pc, #448]	; (800faf4 <HAL_RCC_OscConfig+0x788>)
 800f934:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f938:	6593      	str	r3, [r2, #88]	; 0x58
 800f93a:	4b6e      	ldr	r3, [pc, #440]	; (800faf4 <HAL_RCC_OscConfig+0x788>)
 800f93c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f93e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f942:	60bb      	str	r3, [r7, #8]
 800f944:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800f946:	2301      	movs	r3, #1
 800f948:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800f94a:	4b6c      	ldr	r3, [pc, #432]	; (800fafc <HAL_RCC_OscConfig+0x790>)
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f952:	2b00      	cmp	r3, #0
 800f954:	d118      	bne.n	800f988 <HAL_RCC_OscConfig+0x61c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800f956:	4b69      	ldr	r3, [pc, #420]	; (800fafc <HAL_RCC_OscConfig+0x790>)
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	4a68      	ldr	r2, [pc, #416]	; (800fafc <HAL_RCC_OscConfig+0x790>)
 800f95c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f960:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800f962:	f7f9 faa9 	bl	8008eb8 <HAL_GetTick>
 800f966:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800f968:	e008      	b.n	800f97c <HAL_RCC_OscConfig+0x610>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f96a:	f7f9 faa5 	bl	8008eb8 <HAL_GetTick>
 800f96e:	4602      	mov	r2, r0
 800f970:	693b      	ldr	r3, [r7, #16]
 800f972:	1ad3      	subs	r3, r2, r3
 800f974:	2b02      	cmp	r3, #2
 800f976:	d901      	bls.n	800f97c <HAL_RCC_OscConfig+0x610>
        {
          return HAL_TIMEOUT;
 800f978:	2303      	movs	r3, #3
 800f97a:	e23a      	b.n	800fdf2 <HAL_RCC_OscConfig+0xa86>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800f97c:	4b5f      	ldr	r3, [pc, #380]	; (800fafc <HAL_RCC_OscConfig+0x790>)
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f984:	2b00      	cmp	r3, #0
 800f986:	d0f0      	beq.n	800f96a <HAL_RCC_OscConfig+0x5fe>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	689b      	ldr	r3, [r3, #8]
 800f98c:	2b01      	cmp	r3, #1
 800f98e:	d108      	bne.n	800f9a2 <HAL_RCC_OscConfig+0x636>
 800f990:	4b58      	ldr	r3, [pc, #352]	; (800faf4 <HAL_RCC_OscConfig+0x788>)
 800f992:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f996:	4a57      	ldr	r2, [pc, #348]	; (800faf4 <HAL_RCC_OscConfig+0x788>)
 800f998:	f043 0301 	orr.w	r3, r3, #1
 800f99c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800f9a0:	e024      	b.n	800f9ec <HAL_RCC_OscConfig+0x680>
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	689b      	ldr	r3, [r3, #8]
 800f9a6:	2b05      	cmp	r3, #5
 800f9a8:	d110      	bne.n	800f9cc <HAL_RCC_OscConfig+0x660>
 800f9aa:	4b52      	ldr	r3, [pc, #328]	; (800faf4 <HAL_RCC_OscConfig+0x788>)
 800f9ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f9b0:	4a50      	ldr	r2, [pc, #320]	; (800faf4 <HAL_RCC_OscConfig+0x788>)
 800f9b2:	f043 0304 	orr.w	r3, r3, #4
 800f9b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800f9ba:	4b4e      	ldr	r3, [pc, #312]	; (800faf4 <HAL_RCC_OscConfig+0x788>)
 800f9bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f9c0:	4a4c      	ldr	r2, [pc, #304]	; (800faf4 <HAL_RCC_OscConfig+0x788>)
 800f9c2:	f043 0301 	orr.w	r3, r3, #1
 800f9c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800f9ca:	e00f      	b.n	800f9ec <HAL_RCC_OscConfig+0x680>
 800f9cc:	4b49      	ldr	r3, [pc, #292]	; (800faf4 <HAL_RCC_OscConfig+0x788>)
 800f9ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f9d2:	4a48      	ldr	r2, [pc, #288]	; (800faf4 <HAL_RCC_OscConfig+0x788>)
 800f9d4:	f023 0301 	bic.w	r3, r3, #1
 800f9d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800f9dc:	4b45      	ldr	r3, [pc, #276]	; (800faf4 <HAL_RCC_OscConfig+0x788>)
 800f9de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f9e2:	4a44      	ldr	r2, [pc, #272]	; (800faf4 <HAL_RCC_OscConfig+0x788>)
 800f9e4:	f023 0304 	bic.w	r3, r3, #4
 800f9e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	689b      	ldr	r3, [r3, #8]
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d016      	beq.n	800fa22 <HAL_RCC_OscConfig+0x6b6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f9f4:	f7f9 fa60 	bl	8008eb8 <HAL_GetTick>
 800f9f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800f9fa:	e00a      	b.n	800fa12 <HAL_RCC_OscConfig+0x6a6>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f9fc:	f7f9 fa5c 	bl	8008eb8 <HAL_GetTick>
 800fa00:	4602      	mov	r2, r0
 800fa02:	693b      	ldr	r3, [r7, #16]
 800fa04:	1ad3      	subs	r3, r2, r3
 800fa06:	f241 3288 	movw	r2, #5000	; 0x1388
 800fa0a:	4293      	cmp	r3, r2
 800fa0c:	d901      	bls.n	800fa12 <HAL_RCC_OscConfig+0x6a6>
        {
          return HAL_TIMEOUT;
 800fa0e:	2303      	movs	r3, #3
 800fa10:	e1ef      	b.n	800fdf2 <HAL_RCC_OscConfig+0xa86>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800fa12:	4b38      	ldr	r3, [pc, #224]	; (800faf4 <HAL_RCC_OscConfig+0x788>)
 800fa14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fa18:	f003 0302 	and.w	r3, r3, #2
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d0ed      	beq.n	800f9fc <HAL_RCC_OscConfig+0x690>
 800fa20:	e015      	b.n	800fa4e <HAL_RCC_OscConfig+0x6e2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800fa22:	f7f9 fa49 	bl	8008eb8 <HAL_GetTick>
 800fa26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800fa28:	e00a      	b.n	800fa40 <HAL_RCC_OscConfig+0x6d4>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800fa2a:	f7f9 fa45 	bl	8008eb8 <HAL_GetTick>
 800fa2e:	4602      	mov	r2, r0
 800fa30:	693b      	ldr	r3, [r7, #16]
 800fa32:	1ad3      	subs	r3, r2, r3
 800fa34:	f241 3288 	movw	r2, #5000	; 0x1388
 800fa38:	4293      	cmp	r3, r2
 800fa3a:	d901      	bls.n	800fa40 <HAL_RCC_OscConfig+0x6d4>
        {
          return HAL_TIMEOUT;
 800fa3c:	2303      	movs	r3, #3
 800fa3e:	e1d8      	b.n	800fdf2 <HAL_RCC_OscConfig+0xa86>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800fa40:	4b2c      	ldr	r3, [pc, #176]	; (800faf4 <HAL_RCC_OscConfig+0x788>)
 800fa42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fa46:	f003 0302 	and.w	r3, r3, #2
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d1ed      	bne.n	800fa2a <HAL_RCC_OscConfig+0x6be>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800fa4e:	7ffb      	ldrb	r3, [r7, #31]
 800fa50:	2b01      	cmp	r3, #1
 800fa52:	d105      	bne.n	800fa60 <HAL_RCC_OscConfig+0x6f4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800fa54:	4b27      	ldr	r3, [pc, #156]	; (800faf4 <HAL_RCC_OscConfig+0x788>)
 800fa56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fa58:	4a26      	ldr	r2, [pc, #152]	; (800faf4 <HAL_RCC_OscConfig+0x788>)
 800fa5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800fa5e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	681b      	ldr	r3, [r3, #0]
 800fa64:	f003 0320 	and.w	r3, r3, #32
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d050      	beq.n	800fb0e <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d008      	beq.n	800fa86 <HAL_RCC_OscConfig+0x71a>
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa78:	2b01      	cmp	r3, #1
 800fa7a:	d004      	beq.n	800fa86 <HAL_RCC_OscConfig+0x71a>
 800fa7c:	f240 3143 	movw	r1, #835	; 0x343
 800fa80:	481d      	ldr	r0, [pc, #116]	; (800faf8 <HAL_RCC_OscConfig+0x78c>)
 800fa82:	f7f4 fd87 	bl	8004594 <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d01c      	beq.n	800fac8 <HAL_RCC_OscConfig+0x75c>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800fa8e:	4b19      	ldr	r3, [pc, #100]	; (800faf4 <HAL_RCC_OscConfig+0x788>)
 800fa90:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800fa94:	4a17      	ldr	r2, [pc, #92]	; (800faf4 <HAL_RCC_OscConfig+0x788>)
 800fa96:	f043 0301 	orr.w	r3, r3, #1
 800fa9a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800fa9e:	f7f9 fa0b 	bl	8008eb8 <HAL_GetTick>
 800faa2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800faa4:	e008      	b.n	800fab8 <HAL_RCC_OscConfig+0x74c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800faa6:	f7f9 fa07 	bl	8008eb8 <HAL_GetTick>
 800faaa:	4602      	mov	r2, r0
 800faac:	693b      	ldr	r3, [r7, #16]
 800faae:	1ad3      	subs	r3, r2, r3
 800fab0:	2b02      	cmp	r3, #2
 800fab2:	d901      	bls.n	800fab8 <HAL_RCC_OscConfig+0x74c>
        {
          return HAL_TIMEOUT;
 800fab4:	2303      	movs	r3, #3
 800fab6:	e19c      	b.n	800fdf2 <HAL_RCC_OscConfig+0xa86>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800fab8:	4b0e      	ldr	r3, [pc, #56]	; (800faf4 <HAL_RCC_OscConfig+0x788>)
 800faba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800fabe:	f003 0302 	and.w	r3, r3, #2
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	d0ef      	beq.n	800faa6 <HAL_RCC_OscConfig+0x73a>
 800fac6:	e022      	b.n	800fb0e <HAL_RCC_OscConfig+0x7a2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800fac8:	4b0a      	ldr	r3, [pc, #40]	; (800faf4 <HAL_RCC_OscConfig+0x788>)
 800faca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800face:	4a09      	ldr	r2, [pc, #36]	; (800faf4 <HAL_RCC_OscConfig+0x788>)
 800fad0:	f023 0301 	bic.w	r3, r3, #1
 800fad4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800fad8:	f7f9 f9ee 	bl	8008eb8 <HAL_GetTick>
 800fadc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800fade:	e00f      	b.n	800fb00 <HAL_RCC_OscConfig+0x794>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800fae0:	f7f9 f9ea 	bl	8008eb8 <HAL_GetTick>
 800fae4:	4602      	mov	r2, r0
 800fae6:	693b      	ldr	r3, [r7, #16]
 800fae8:	1ad3      	subs	r3, r2, r3
 800faea:	2b02      	cmp	r3, #2
 800faec:	d908      	bls.n	800fb00 <HAL_RCC_OscConfig+0x794>
        {
          return HAL_TIMEOUT;
 800faee:	2303      	movs	r3, #3
 800faf0:	e17f      	b.n	800fdf2 <HAL_RCC_OscConfig+0xa86>
 800faf2:	bf00      	nop
 800faf4:	40021000 	.word	0x40021000
 800faf8:	08018e30 	.word	0x08018e30
 800fafc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800fb00:	4ba2      	ldr	r3, [pc, #648]	; (800fd8c <HAL_RCC_OscConfig+0xa20>)
 800fb02:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800fb06:	f003 0302 	and.w	r3, r3, #2
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d1e8      	bne.n	800fae0 <HAL_RCC_OscConfig+0x774>
    }
  }
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d00c      	beq.n	800fb30 <HAL_RCC_OscConfig+0x7c4>
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb1a:	2b01      	cmp	r3, #1
 800fb1c:	d008      	beq.n	800fb30 <HAL_RCC_OscConfig+0x7c4>
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb22:	2b02      	cmp	r3, #2
 800fb24:	d004      	beq.n	800fb30 <HAL_RCC_OscConfig+0x7c4>
 800fb26:	f44f 715b 	mov.w	r1, #876	; 0x36c
 800fb2a:	4899      	ldr	r0, [pc, #612]	; (800fd90 <HAL_RCC_OscConfig+0xa24>)
 800fb2c:	f7f4 fd32 	bl	8004594 <assert_failed>

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	f000 815b 	beq.w	800fdf0 <HAL_RCC_OscConfig+0xa84>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb3e:	2b02      	cmp	r3, #2
 800fb40:	f040 8131 	bne.w	800fda6 <HAL_RCC_OscConfig+0xa3a>
    {
      /* Check the parameters */
      assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	d010      	beq.n	800fb6e <HAL_RCC_OscConfig+0x802>
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb50:	2b01      	cmp	r3, #1
 800fb52:	d00c      	beq.n	800fb6e <HAL_RCC_OscConfig+0x802>
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb58:	2b02      	cmp	r3, #2
 800fb5a:	d008      	beq.n	800fb6e <HAL_RCC_OscConfig+0x802>
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb60:	2b03      	cmp	r3, #3
 800fb62:	d004      	beq.n	800fb6e <HAL_RCC_OscConfig+0x802>
 800fb64:	f44f 715d 	mov.w	r1, #884	; 0x374
 800fb68:	4889      	ldr	r0, [pc, #548]	; (800fd90 <HAL_RCC_OscConfig+0xa24>)
 800fb6a:	f7f4 fd13 	bl	8004594 <assert_failed>
      assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d003      	beq.n	800fb7e <HAL_RCC_OscConfig+0x812>
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fb7a:	2b08      	cmp	r3, #8
 800fb7c:	d904      	bls.n	800fb88 <HAL_RCC_OscConfig+0x81c>
 800fb7e:	f240 3175 	movw	r1, #885	; 0x375
 800fb82:	4883      	ldr	r0, [pc, #524]	; (800fd90 <HAL_RCC_OscConfig+0xa24>)
 800fb84:	f7f4 fd06 	bl	8004594 <assert_failed>
      assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fb8c:	2b07      	cmp	r3, #7
 800fb8e:	d903      	bls.n	800fb98 <HAL_RCC_OscConfig+0x82c>
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fb94:	2b56      	cmp	r3, #86	; 0x56
 800fb96:	d904      	bls.n	800fba2 <HAL_RCC_OscConfig+0x836>
 800fb98:	f240 3176 	movw	r1, #886	; 0x376
 800fb9c:	487c      	ldr	r0, [pc, #496]	; (800fd90 <HAL_RCC_OscConfig+0xa24>)
 800fb9e:	f7f4 fcf9 	bl	8004594 <assert_failed>
#if defined(RCC_PLLP_SUPPORT)
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fba6:	2b01      	cmp	r3, #1
 800fba8:	d903      	bls.n	800fbb2 <HAL_RCC_OscConfig+0x846>
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fbae:	2b1f      	cmp	r3, #31
 800fbb0:	d904      	bls.n	800fbbc <HAL_RCC_OscConfig+0x850>
 800fbb2:	f44f 715e 	mov.w	r1, #888	; 0x378
 800fbb6:	4876      	ldr	r0, [pc, #472]	; (800fd90 <HAL_RCC_OscConfig+0xa24>)
 800fbb8:	f7f4 fcec 	bl	8004594 <assert_failed>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fbc0:	2b02      	cmp	r3, #2
 800fbc2:	d010      	beq.n	800fbe6 <HAL_RCC_OscConfig+0x87a>
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fbc8:	2b04      	cmp	r3, #4
 800fbca:	d00c      	beq.n	800fbe6 <HAL_RCC_OscConfig+0x87a>
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fbd0:	2b06      	cmp	r3, #6
 800fbd2:	d008      	beq.n	800fbe6 <HAL_RCC_OscConfig+0x87a>
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fbd8:	2b08      	cmp	r3, #8
 800fbda:	d004      	beq.n	800fbe6 <HAL_RCC_OscConfig+0x87a>
 800fbdc:	f240 317a 	movw	r1, #890	; 0x37a
 800fbe0:	486b      	ldr	r0, [pc, #428]	; (800fd90 <HAL_RCC_OscConfig+0xa24>)
 800fbe2:	f7f4 fcd7 	bl	8004594 <assert_failed>
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fbea:	2b02      	cmp	r3, #2
 800fbec:	d010      	beq.n	800fc10 <HAL_RCC_OscConfig+0x8a4>
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fbf2:	2b04      	cmp	r3, #4
 800fbf4:	d00c      	beq.n	800fc10 <HAL_RCC_OscConfig+0x8a4>
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fbfa:	2b06      	cmp	r3, #6
 800fbfc:	d008      	beq.n	800fc10 <HAL_RCC_OscConfig+0x8a4>
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc02:	2b08      	cmp	r3, #8
 800fc04:	d004      	beq.n	800fc10 <HAL_RCC_OscConfig+0x8a4>
 800fc06:	f240 317b 	movw	r1, #891	; 0x37b
 800fc0a:	4861      	ldr	r0, [pc, #388]	; (800fd90 <HAL_RCC_OscConfig+0xa24>)
 800fc0c:	f7f4 fcc2 	bl	8004594 <assert_failed>

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800fc10:	4b5e      	ldr	r3, [pc, #376]	; (800fd8c <HAL_RCC_OscConfig+0xa20>)
 800fc12:	68db      	ldr	r3, [r3, #12]
 800fc14:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800fc16:	697b      	ldr	r3, [r7, #20]
 800fc18:	f003 0203 	and.w	r2, r3, #3
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc20:	429a      	cmp	r2, r3
 800fc22:	d12c      	bne.n	800fc7e <HAL_RCC_OscConfig+0x912>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800fc24:	697b      	ldr	r3, [r7, #20]
 800fc26:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fc2e:	3b01      	subs	r3, #1
 800fc30:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800fc32:	429a      	cmp	r2, r3
 800fc34:	d123      	bne.n	800fc7e <HAL_RCC_OscConfig+0x912>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800fc36:	697b      	ldr	r3, [r7, #20]
 800fc38:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fc40:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800fc42:	429a      	cmp	r2, r3
 800fc44:	d11b      	bne.n	800fc7e <HAL_RCC_OscConfig+0x912>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800fc46:	697b      	ldr	r3, [r7, #20]
 800fc48:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc50:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800fc52:	429a      	cmp	r2, r3
 800fc54:	d113      	bne.n	800fc7e <HAL_RCC_OscConfig+0x912>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800fc56:	697b      	ldr	r3, [r7, #20]
 800fc58:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fc60:	085b      	lsrs	r3, r3, #1
 800fc62:	3b01      	subs	r3, #1
 800fc64:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800fc66:	429a      	cmp	r2, r3
 800fc68:	d109      	bne.n	800fc7e <HAL_RCC_OscConfig+0x912>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800fc6a:	697b      	ldr	r3, [r7, #20]
 800fc6c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc74:	085b      	lsrs	r3, r3, #1
 800fc76:	3b01      	subs	r3, #1
 800fc78:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800fc7a:	429a      	cmp	r2, r3
 800fc7c:	d067      	beq.n	800fd4e <HAL_RCC_OscConfig+0x9e2>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800fc7e:	69bb      	ldr	r3, [r7, #24]
 800fc80:	2b0c      	cmp	r3, #12
 800fc82:	d062      	beq.n	800fd4a <HAL_RCC_OscConfig+0x9de>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800fc84:	4b41      	ldr	r3, [pc, #260]	; (800fd8c <HAL_RCC_OscConfig+0xa20>)
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	d001      	beq.n	800fc94 <HAL_RCC_OscConfig+0x928>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800fc90:	2301      	movs	r3, #1
 800fc92:	e0ae      	b.n	800fdf2 <HAL_RCC_OscConfig+0xa86>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800fc94:	4b3d      	ldr	r3, [pc, #244]	; (800fd8c <HAL_RCC_OscConfig+0xa20>)
 800fc96:	681b      	ldr	r3, [r3, #0]
 800fc98:	4a3c      	ldr	r2, [pc, #240]	; (800fd8c <HAL_RCC_OscConfig+0xa20>)
 800fc9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800fc9e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800fca0:	f7f9 f90a 	bl	8008eb8 <HAL_GetTick>
 800fca4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800fca6:	e008      	b.n	800fcba <HAL_RCC_OscConfig+0x94e>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800fca8:	f7f9 f906 	bl	8008eb8 <HAL_GetTick>
 800fcac:	4602      	mov	r2, r0
 800fcae:	693b      	ldr	r3, [r7, #16]
 800fcb0:	1ad3      	subs	r3, r2, r3
 800fcb2:	2b02      	cmp	r3, #2
 800fcb4:	d901      	bls.n	800fcba <HAL_RCC_OscConfig+0x94e>
              {
                return HAL_TIMEOUT;
 800fcb6:	2303      	movs	r3, #3
 800fcb8:	e09b      	b.n	800fdf2 <HAL_RCC_OscConfig+0xa86>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800fcba:	4b34      	ldr	r3, [pc, #208]	; (800fd8c <HAL_RCC_OscConfig+0xa20>)
 800fcbc:	681b      	ldr	r3, [r3, #0]
 800fcbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	d1f0      	bne.n	800fca8 <HAL_RCC_OscConfig+0x93c>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800fcc6:	4b31      	ldr	r3, [pc, #196]	; (800fd8c <HAL_RCC_OscConfig+0xa20>)
 800fcc8:	68da      	ldr	r2, [r3, #12]
 800fcca:	4b32      	ldr	r3, [pc, #200]	; (800fd94 <HAL_RCC_OscConfig+0xa28>)
 800fccc:	4013      	ands	r3, r2
 800fcce:	687a      	ldr	r2, [r7, #4]
 800fcd0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800fcd2:	687a      	ldr	r2, [r7, #4]
 800fcd4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800fcd6:	3a01      	subs	r2, #1
 800fcd8:	0112      	lsls	r2, r2, #4
 800fcda:	4311      	orrs	r1, r2
 800fcdc:	687a      	ldr	r2, [r7, #4]
 800fcde:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800fce0:	0212      	lsls	r2, r2, #8
 800fce2:	4311      	orrs	r1, r2
 800fce4:	687a      	ldr	r2, [r7, #4]
 800fce6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800fce8:	0852      	lsrs	r2, r2, #1
 800fcea:	3a01      	subs	r2, #1
 800fcec:	0552      	lsls	r2, r2, #21
 800fcee:	4311      	orrs	r1, r2
 800fcf0:	687a      	ldr	r2, [r7, #4]
 800fcf2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800fcf4:	0852      	lsrs	r2, r2, #1
 800fcf6:	3a01      	subs	r2, #1
 800fcf8:	0652      	lsls	r2, r2, #25
 800fcfa:	4311      	orrs	r1, r2
 800fcfc:	687a      	ldr	r2, [r7, #4]
 800fcfe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800fd00:	06d2      	lsls	r2, r2, #27
 800fd02:	430a      	orrs	r2, r1
 800fd04:	4921      	ldr	r1, [pc, #132]	; (800fd8c <HAL_RCC_OscConfig+0xa20>)
 800fd06:	4313      	orrs	r3, r2
 800fd08:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800fd0a:	4b20      	ldr	r3, [pc, #128]	; (800fd8c <HAL_RCC_OscConfig+0xa20>)
 800fd0c:	681b      	ldr	r3, [r3, #0]
 800fd0e:	4a1f      	ldr	r2, [pc, #124]	; (800fd8c <HAL_RCC_OscConfig+0xa20>)
 800fd10:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800fd14:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800fd16:	4b1d      	ldr	r3, [pc, #116]	; (800fd8c <HAL_RCC_OscConfig+0xa20>)
 800fd18:	68db      	ldr	r3, [r3, #12]
 800fd1a:	4a1c      	ldr	r2, [pc, #112]	; (800fd8c <HAL_RCC_OscConfig+0xa20>)
 800fd1c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800fd20:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800fd22:	f7f9 f8c9 	bl	8008eb8 <HAL_GetTick>
 800fd26:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800fd28:	e008      	b.n	800fd3c <HAL_RCC_OscConfig+0x9d0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800fd2a:	f7f9 f8c5 	bl	8008eb8 <HAL_GetTick>
 800fd2e:	4602      	mov	r2, r0
 800fd30:	693b      	ldr	r3, [r7, #16]
 800fd32:	1ad3      	subs	r3, r2, r3
 800fd34:	2b02      	cmp	r3, #2
 800fd36:	d901      	bls.n	800fd3c <HAL_RCC_OscConfig+0x9d0>
              {
                return HAL_TIMEOUT;
 800fd38:	2303      	movs	r3, #3
 800fd3a:	e05a      	b.n	800fdf2 <HAL_RCC_OscConfig+0xa86>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800fd3c:	4b13      	ldr	r3, [pc, #76]	; (800fd8c <HAL_RCC_OscConfig+0xa20>)
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d0f0      	beq.n	800fd2a <HAL_RCC_OscConfig+0x9be>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800fd48:	e052      	b.n	800fdf0 <HAL_RCC_OscConfig+0xa84>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800fd4a:	2301      	movs	r3, #1
 800fd4c:	e051      	b.n	800fdf2 <HAL_RCC_OscConfig+0xa86>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800fd4e:	4b0f      	ldr	r3, [pc, #60]	; (800fd8c <HAL_RCC_OscConfig+0xa20>)
 800fd50:	681b      	ldr	r3, [r3, #0]
 800fd52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d14a      	bne.n	800fdf0 <HAL_RCC_OscConfig+0xa84>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800fd5a:	4b0c      	ldr	r3, [pc, #48]	; (800fd8c <HAL_RCC_OscConfig+0xa20>)
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	4a0b      	ldr	r2, [pc, #44]	; (800fd8c <HAL_RCC_OscConfig+0xa20>)
 800fd60:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800fd64:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800fd66:	4b09      	ldr	r3, [pc, #36]	; (800fd8c <HAL_RCC_OscConfig+0xa20>)
 800fd68:	68db      	ldr	r3, [r3, #12]
 800fd6a:	4a08      	ldr	r2, [pc, #32]	; (800fd8c <HAL_RCC_OscConfig+0xa20>)
 800fd6c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800fd70:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800fd72:	f7f9 f8a1 	bl	8008eb8 <HAL_GetTick>
 800fd76:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800fd78:	e00e      	b.n	800fd98 <HAL_RCC_OscConfig+0xa2c>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800fd7a:	f7f9 f89d 	bl	8008eb8 <HAL_GetTick>
 800fd7e:	4602      	mov	r2, r0
 800fd80:	693b      	ldr	r3, [r7, #16]
 800fd82:	1ad3      	subs	r3, r2, r3
 800fd84:	2b02      	cmp	r3, #2
 800fd86:	d907      	bls.n	800fd98 <HAL_RCC_OscConfig+0xa2c>
            {
              return HAL_TIMEOUT;
 800fd88:	2303      	movs	r3, #3
 800fd8a:	e032      	b.n	800fdf2 <HAL_RCC_OscConfig+0xa86>
 800fd8c:	40021000 	.word	0x40021000
 800fd90:	08018e30 	.word	0x08018e30
 800fd94:	019d808c 	.word	0x019d808c
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800fd98:	4b18      	ldr	r3, [pc, #96]	; (800fdfc <HAL_RCC_OscConfig+0xa90>)
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d0ea      	beq.n	800fd7a <HAL_RCC_OscConfig+0xa0e>
 800fda4:	e024      	b.n	800fdf0 <HAL_RCC_OscConfig+0xa84>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800fda6:	69bb      	ldr	r3, [r7, #24]
 800fda8:	2b0c      	cmp	r3, #12
 800fdaa:	d01f      	beq.n	800fdec <HAL_RCC_OscConfig+0xa80>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800fdac:	4b13      	ldr	r3, [pc, #76]	; (800fdfc <HAL_RCC_OscConfig+0xa90>)
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	4a12      	ldr	r2, [pc, #72]	; (800fdfc <HAL_RCC_OscConfig+0xa90>)
 800fdb2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800fdb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800fdb8:	f7f9 f87e 	bl	8008eb8 <HAL_GetTick>
 800fdbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800fdbe:	e008      	b.n	800fdd2 <HAL_RCC_OscConfig+0xa66>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800fdc0:	f7f9 f87a 	bl	8008eb8 <HAL_GetTick>
 800fdc4:	4602      	mov	r2, r0
 800fdc6:	693b      	ldr	r3, [r7, #16]
 800fdc8:	1ad3      	subs	r3, r2, r3
 800fdca:	2b02      	cmp	r3, #2
 800fdcc:	d901      	bls.n	800fdd2 <HAL_RCC_OscConfig+0xa66>
          {
            return HAL_TIMEOUT;
 800fdce:	2303      	movs	r3, #3
 800fdd0:	e00f      	b.n	800fdf2 <HAL_RCC_OscConfig+0xa86>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800fdd2:	4b0a      	ldr	r3, [pc, #40]	; (800fdfc <HAL_RCC_OscConfig+0xa90>)
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d1f0      	bne.n	800fdc0 <HAL_RCC_OscConfig+0xa54>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800fdde:	4b07      	ldr	r3, [pc, #28]	; (800fdfc <HAL_RCC_OscConfig+0xa90>)
 800fde0:	68da      	ldr	r2, [r3, #12]
 800fde2:	4906      	ldr	r1, [pc, #24]	; (800fdfc <HAL_RCC_OscConfig+0xa90>)
 800fde4:	4b06      	ldr	r3, [pc, #24]	; (800fe00 <HAL_RCC_OscConfig+0xa94>)
 800fde6:	4013      	ands	r3, r2
 800fde8:	60cb      	str	r3, [r1, #12]
 800fdea:	e001      	b.n	800fdf0 <HAL_RCC_OscConfig+0xa84>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800fdec:	2301      	movs	r3, #1
 800fdee:	e000      	b.n	800fdf2 <HAL_RCC_OscConfig+0xa86>
      }
    }
  }
  return HAL_OK;
 800fdf0:	2300      	movs	r3, #0
}
 800fdf2:	4618      	mov	r0, r3
 800fdf4:	3720      	adds	r7, #32
 800fdf6:	46bd      	mov	sp, r7
 800fdf8:	bd80      	pop	{r7, pc}
 800fdfa:	bf00      	nop
 800fdfc:	40021000 	.word	0x40021000
 800fe00:	feeefffc 	.word	0xfeeefffc

0800fe04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800fe04:	b580      	push	{r7, lr}
 800fe06:	b084      	sub	sp, #16
 800fe08:	af00      	add	r7, sp, #0
 800fe0a:	6078      	str	r0, [r7, #4]
 800fe0c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d101      	bne.n	800fe18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800fe14:	2301      	movs	r3, #1
 800fe16:	e186      	b.n	8010126 <HAL_RCC_ClockConfig+0x322>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	681b      	ldr	r3, [r3, #0]
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d003      	beq.n	800fe28 <HAL_RCC_ClockConfig+0x24>
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	681b      	ldr	r3, [r3, #0]
 800fe24:	2b0f      	cmp	r3, #15
 800fe26:	d904      	bls.n	800fe32 <HAL_RCC_ClockConfig+0x2e>
 800fe28:	f240 4157 	movw	r1, #1111	; 0x457
 800fe2c:	4882      	ldr	r0, [pc, #520]	; (8010038 <HAL_RCC_ClockConfig+0x234>)
 800fe2e:	f7f4 fbb1 	bl	8004594 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800fe32:	683b      	ldr	r3, [r7, #0]
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	d010      	beq.n	800fe5a <HAL_RCC_ClockConfig+0x56>
 800fe38:	683b      	ldr	r3, [r7, #0]
 800fe3a:	2b01      	cmp	r3, #1
 800fe3c:	d00d      	beq.n	800fe5a <HAL_RCC_ClockConfig+0x56>
 800fe3e:	683b      	ldr	r3, [r7, #0]
 800fe40:	2b02      	cmp	r3, #2
 800fe42:	d00a      	beq.n	800fe5a <HAL_RCC_ClockConfig+0x56>
 800fe44:	683b      	ldr	r3, [r7, #0]
 800fe46:	2b03      	cmp	r3, #3
 800fe48:	d007      	beq.n	800fe5a <HAL_RCC_ClockConfig+0x56>
 800fe4a:	683b      	ldr	r3, [r7, #0]
 800fe4c:	2b04      	cmp	r3, #4
 800fe4e:	d004      	beq.n	800fe5a <HAL_RCC_ClockConfig+0x56>
 800fe50:	f44f 618b 	mov.w	r1, #1112	; 0x458
 800fe54:	4878      	ldr	r0, [pc, #480]	; (8010038 <HAL_RCC_ClockConfig+0x234>)
 800fe56:	f7f4 fb9d 	bl	8004594 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800fe5a:	4b78      	ldr	r3, [pc, #480]	; (801003c <HAL_RCC_ClockConfig+0x238>)
 800fe5c:	681b      	ldr	r3, [r3, #0]
 800fe5e:	f003 0307 	and.w	r3, r3, #7
 800fe62:	683a      	ldr	r2, [r7, #0]
 800fe64:	429a      	cmp	r2, r3
 800fe66:	d910      	bls.n	800fe8a <HAL_RCC_ClockConfig+0x86>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800fe68:	4b74      	ldr	r3, [pc, #464]	; (801003c <HAL_RCC_ClockConfig+0x238>)
 800fe6a:	681b      	ldr	r3, [r3, #0]
 800fe6c:	f023 0207 	bic.w	r2, r3, #7
 800fe70:	4972      	ldr	r1, [pc, #456]	; (801003c <HAL_RCC_ClockConfig+0x238>)
 800fe72:	683b      	ldr	r3, [r7, #0]
 800fe74:	4313      	orrs	r3, r2
 800fe76:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800fe78:	4b70      	ldr	r3, [pc, #448]	; (801003c <HAL_RCC_ClockConfig+0x238>)
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	f003 0307 	and.w	r3, r3, #7
 800fe80:	683a      	ldr	r2, [r7, #0]
 800fe82:	429a      	cmp	r2, r3
 800fe84:	d001      	beq.n	800fe8a <HAL_RCC_ClockConfig+0x86>
    {
      return HAL_ERROR;
 800fe86:	2301      	movs	r3, #1
 800fe88:	e14d      	b.n	8010126 <HAL_RCC_ClockConfig+0x322>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	f003 0302 	and.w	r3, r3, #2
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	d039      	beq.n	800ff0a <HAL_RCC_ClockConfig+0x106>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	689b      	ldr	r3, [r3, #8]
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	d024      	beq.n	800fee8 <HAL_RCC_ClockConfig+0xe4>
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	689b      	ldr	r3, [r3, #8]
 800fea2:	2b80      	cmp	r3, #128	; 0x80
 800fea4:	d020      	beq.n	800fee8 <HAL_RCC_ClockConfig+0xe4>
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	689b      	ldr	r3, [r3, #8]
 800feaa:	2b90      	cmp	r3, #144	; 0x90
 800feac:	d01c      	beq.n	800fee8 <HAL_RCC_ClockConfig+0xe4>
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	689b      	ldr	r3, [r3, #8]
 800feb2:	2ba0      	cmp	r3, #160	; 0xa0
 800feb4:	d018      	beq.n	800fee8 <HAL_RCC_ClockConfig+0xe4>
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	689b      	ldr	r3, [r3, #8]
 800feba:	2bb0      	cmp	r3, #176	; 0xb0
 800febc:	d014      	beq.n	800fee8 <HAL_RCC_ClockConfig+0xe4>
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	689b      	ldr	r3, [r3, #8]
 800fec2:	2bc0      	cmp	r3, #192	; 0xc0
 800fec4:	d010      	beq.n	800fee8 <HAL_RCC_ClockConfig+0xe4>
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	689b      	ldr	r3, [r3, #8]
 800feca:	2bd0      	cmp	r3, #208	; 0xd0
 800fecc:	d00c      	beq.n	800fee8 <HAL_RCC_ClockConfig+0xe4>
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	689b      	ldr	r3, [r3, #8]
 800fed2:	2be0      	cmp	r3, #224	; 0xe0
 800fed4:	d008      	beq.n	800fee8 <HAL_RCC_ClockConfig+0xe4>
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	689b      	ldr	r3, [r3, #8]
 800feda:	2bf0      	cmp	r3, #240	; 0xf0
 800fedc:	d004      	beq.n	800fee8 <HAL_RCC_ClockConfig+0xe4>
 800fede:	f44f 618e 	mov.w	r1, #1136	; 0x470
 800fee2:	4855      	ldr	r0, [pc, #340]	; (8010038 <HAL_RCC_ClockConfig+0x234>)
 800fee4:	f7f4 fb56 	bl	8004594 <assert_failed>

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	689a      	ldr	r2, [r3, #8]
 800feec:	4b54      	ldr	r3, [pc, #336]	; (8010040 <HAL_RCC_ClockConfig+0x23c>)
 800feee:	689b      	ldr	r3, [r3, #8]
 800fef0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fef4:	429a      	cmp	r2, r3
 800fef6:	d908      	bls.n	800ff0a <HAL_RCC_ClockConfig+0x106>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800fef8:	4b51      	ldr	r3, [pc, #324]	; (8010040 <HAL_RCC_ClockConfig+0x23c>)
 800fefa:	689b      	ldr	r3, [r3, #8]
 800fefc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	689b      	ldr	r3, [r3, #8]
 800ff04:	494e      	ldr	r1, [pc, #312]	; (8010040 <HAL_RCC_ClockConfig+0x23c>)
 800ff06:	4313      	orrs	r3, r2
 800ff08:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	681b      	ldr	r3, [r3, #0]
 800ff0e:	f003 0301 	and.w	r3, r3, #1
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d061      	beq.n	800ffda <HAL_RCC_ClockConfig+0x1d6>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	685b      	ldr	r3, [r3, #4]
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d010      	beq.n	800ff40 <HAL_RCC_ClockConfig+0x13c>
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	685b      	ldr	r3, [r3, #4]
 800ff22:	2b01      	cmp	r3, #1
 800ff24:	d00c      	beq.n	800ff40 <HAL_RCC_ClockConfig+0x13c>
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	685b      	ldr	r3, [r3, #4]
 800ff2a:	2b02      	cmp	r3, #2
 800ff2c:	d008      	beq.n	800ff40 <HAL_RCC_ClockConfig+0x13c>
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	685b      	ldr	r3, [r3, #4]
 800ff32:	2b03      	cmp	r3, #3
 800ff34:	d004      	beq.n	800ff40 <HAL_RCC_ClockConfig+0x13c>
 800ff36:	f240 417b 	movw	r1, #1147	; 0x47b
 800ff3a:	483f      	ldr	r0, [pc, #252]	; (8010038 <HAL_RCC_ClockConfig+0x234>)
 800ff3c:	f7f4 fb2a 	bl	8004594 <assert_failed>

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	685b      	ldr	r3, [r3, #4]
 800ff44:	2b03      	cmp	r3, #3
 800ff46:	d107      	bne.n	800ff58 <HAL_RCC_ClockConfig+0x154>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ff48:	4b3d      	ldr	r3, [pc, #244]	; (8010040 <HAL_RCC_ClockConfig+0x23c>)
 800ff4a:	681b      	ldr	r3, [r3, #0]
 800ff4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d121      	bne.n	800ff98 <HAL_RCC_ClockConfig+0x194>
      {
        return HAL_ERROR;
 800ff54:	2301      	movs	r3, #1
 800ff56:	e0e6      	b.n	8010126 <HAL_RCC_ClockConfig+0x322>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	685b      	ldr	r3, [r3, #4]
 800ff5c:	2b02      	cmp	r3, #2
 800ff5e:	d107      	bne.n	800ff70 <HAL_RCC_ClockConfig+0x16c>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800ff60:	4b37      	ldr	r3, [pc, #220]	; (8010040 <HAL_RCC_ClockConfig+0x23c>)
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d115      	bne.n	800ff98 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_ERROR;
 800ff6c:	2301      	movs	r3, #1
 800ff6e:	e0da      	b.n	8010126 <HAL_RCC_ClockConfig+0x322>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	685b      	ldr	r3, [r3, #4]
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	d107      	bne.n	800ff88 <HAL_RCC_ClockConfig+0x184>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800ff78:	4b31      	ldr	r3, [pc, #196]	; (8010040 <HAL_RCC_ClockConfig+0x23c>)
 800ff7a:	681b      	ldr	r3, [r3, #0]
 800ff7c:	f003 0302 	and.w	r3, r3, #2
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d109      	bne.n	800ff98 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_ERROR;
 800ff84:	2301      	movs	r3, #1
 800ff86:	e0ce      	b.n	8010126 <HAL_RCC_ClockConfig+0x322>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800ff88:	4b2d      	ldr	r3, [pc, #180]	; (8010040 <HAL_RCC_ClockConfig+0x23c>)
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	d101      	bne.n	800ff98 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_ERROR;
 800ff94:	2301      	movs	r3, #1
 800ff96:	e0c6      	b.n	8010126 <HAL_RCC_ClockConfig+0x322>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800ff98:	4b29      	ldr	r3, [pc, #164]	; (8010040 <HAL_RCC_ClockConfig+0x23c>)
 800ff9a:	689b      	ldr	r3, [r3, #8]
 800ff9c:	f023 0203 	bic.w	r2, r3, #3
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	685b      	ldr	r3, [r3, #4]
 800ffa4:	4926      	ldr	r1, [pc, #152]	; (8010040 <HAL_RCC_ClockConfig+0x23c>)
 800ffa6:	4313      	orrs	r3, r2
 800ffa8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ffaa:	f7f8 ff85 	bl	8008eb8 <HAL_GetTick>
 800ffae:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ffb0:	e00a      	b.n	800ffc8 <HAL_RCC_ClockConfig+0x1c4>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ffb2:	f7f8 ff81 	bl	8008eb8 <HAL_GetTick>
 800ffb6:	4602      	mov	r2, r0
 800ffb8:	68fb      	ldr	r3, [r7, #12]
 800ffba:	1ad3      	subs	r3, r2, r3
 800ffbc:	f241 3288 	movw	r2, #5000	; 0x1388
 800ffc0:	4293      	cmp	r3, r2
 800ffc2:	d901      	bls.n	800ffc8 <HAL_RCC_ClockConfig+0x1c4>
      {
        return HAL_TIMEOUT;
 800ffc4:	2303      	movs	r3, #3
 800ffc6:	e0ae      	b.n	8010126 <HAL_RCC_ClockConfig+0x322>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ffc8:	4b1d      	ldr	r3, [pc, #116]	; (8010040 <HAL_RCC_ClockConfig+0x23c>)
 800ffca:	689b      	ldr	r3, [r3, #8]
 800ffcc:	f003 020c 	and.w	r2, r3, #12
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	685b      	ldr	r3, [r3, #4]
 800ffd4:	009b      	lsls	r3, r3, #2
 800ffd6:	429a      	cmp	r2, r3
 800ffd8:	d1eb      	bne.n	800ffb2 <HAL_RCC_ClockConfig+0x1ae>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	f003 0302 	and.w	r3, r3, #2
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d010      	beq.n	8010008 <HAL_RCC_ClockConfig+0x204>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	689a      	ldr	r2, [r3, #8]
 800ffea:	4b15      	ldr	r3, [pc, #84]	; (8010040 <HAL_RCC_ClockConfig+0x23c>)
 800ffec:	689b      	ldr	r3, [r3, #8]
 800ffee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fff2:	429a      	cmp	r2, r3
 800fff4:	d208      	bcs.n	8010008 <HAL_RCC_ClockConfig+0x204>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800fff6:	4b12      	ldr	r3, [pc, #72]	; (8010040 <HAL_RCC_ClockConfig+0x23c>)
 800fff8:	689b      	ldr	r3, [r3, #8]
 800fffa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	689b      	ldr	r3, [r3, #8]
 8010002:	490f      	ldr	r1, [pc, #60]	; (8010040 <HAL_RCC_ClockConfig+0x23c>)
 8010004:	4313      	orrs	r3, r2
 8010006:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8010008:	4b0c      	ldr	r3, [pc, #48]	; (801003c <HAL_RCC_ClockConfig+0x238>)
 801000a:	681b      	ldr	r3, [r3, #0]
 801000c:	f003 0307 	and.w	r3, r3, #7
 8010010:	683a      	ldr	r2, [r7, #0]
 8010012:	429a      	cmp	r2, r3
 8010014:	d216      	bcs.n	8010044 <HAL_RCC_ClockConfig+0x240>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010016:	4b09      	ldr	r3, [pc, #36]	; (801003c <HAL_RCC_ClockConfig+0x238>)
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	f023 0207 	bic.w	r2, r3, #7
 801001e:	4907      	ldr	r1, [pc, #28]	; (801003c <HAL_RCC_ClockConfig+0x238>)
 8010020:	683b      	ldr	r3, [r7, #0]
 8010022:	4313      	orrs	r3, r2
 8010024:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8010026:	4b05      	ldr	r3, [pc, #20]	; (801003c <HAL_RCC_ClockConfig+0x238>)
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	f003 0307 	and.w	r3, r3, #7
 801002e:	683a      	ldr	r2, [r7, #0]
 8010030:	429a      	cmp	r2, r3
 8010032:	d007      	beq.n	8010044 <HAL_RCC_ClockConfig+0x240>
    {
      return HAL_ERROR;
 8010034:	2301      	movs	r3, #1
 8010036:	e076      	b.n	8010126 <HAL_RCC_ClockConfig+0x322>
 8010038:	08018e30 	.word	0x08018e30
 801003c:	40022000 	.word	0x40022000
 8010040:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	f003 0304 	and.w	r3, r3, #4
 801004c:	2b00      	cmp	r3, #0
 801004e:	d025      	beq.n	801009c <HAL_RCC_ClockConfig+0x298>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	68db      	ldr	r3, [r3, #12]
 8010054:	2b00      	cmp	r3, #0
 8010056:	d018      	beq.n	801008a <HAL_RCC_ClockConfig+0x286>
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	68db      	ldr	r3, [r3, #12]
 801005c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010060:	d013      	beq.n	801008a <HAL_RCC_ClockConfig+0x286>
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	68db      	ldr	r3, [r3, #12]
 8010066:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 801006a:	d00e      	beq.n	801008a <HAL_RCC_ClockConfig+0x286>
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	68db      	ldr	r3, [r3, #12]
 8010070:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8010074:	d009      	beq.n	801008a <HAL_RCC_ClockConfig+0x286>
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	68db      	ldr	r3, [r3, #12]
 801007a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801007e:	d004      	beq.n	801008a <HAL_RCC_ClockConfig+0x286>
 8010080:	f240 41f3 	movw	r1, #1267	; 0x4f3
 8010084:	482a      	ldr	r0, [pc, #168]	; (8010130 <HAL_RCC_ClockConfig+0x32c>)
 8010086:	f7f4 fa85 	bl	8004594 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801008a:	4b2a      	ldr	r3, [pc, #168]	; (8010134 <HAL_RCC_ClockConfig+0x330>)
 801008c:	689b      	ldr	r3, [r3, #8]
 801008e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	68db      	ldr	r3, [r3, #12]
 8010096:	4927      	ldr	r1, [pc, #156]	; (8010134 <HAL_RCC_ClockConfig+0x330>)
 8010098:	4313      	orrs	r3, r2
 801009a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	681b      	ldr	r3, [r3, #0]
 80100a0:	f003 0308 	and.w	r3, r3, #8
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	d026      	beq.n	80100f6 <HAL_RCC_ClockConfig+0x2f2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	691b      	ldr	r3, [r3, #16]
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	d018      	beq.n	80100e2 <HAL_RCC_ClockConfig+0x2de>
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	691b      	ldr	r3, [r3, #16]
 80100b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80100b8:	d013      	beq.n	80100e2 <HAL_RCC_ClockConfig+0x2de>
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	691b      	ldr	r3, [r3, #16]
 80100be:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80100c2:	d00e      	beq.n	80100e2 <HAL_RCC_ClockConfig+0x2de>
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	691b      	ldr	r3, [r3, #16]
 80100c8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80100cc:	d009      	beq.n	80100e2 <HAL_RCC_ClockConfig+0x2de>
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	691b      	ldr	r3, [r3, #16]
 80100d2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80100d6:	d004      	beq.n	80100e2 <HAL_RCC_ClockConfig+0x2de>
 80100d8:	f240 41fa 	movw	r1, #1274	; 0x4fa
 80100dc:	4814      	ldr	r0, [pc, #80]	; (8010130 <HAL_RCC_ClockConfig+0x32c>)
 80100de:	f7f4 fa59 	bl	8004594 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80100e2:	4b14      	ldr	r3, [pc, #80]	; (8010134 <HAL_RCC_ClockConfig+0x330>)
 80100e4:	689b      	ldr	r3, [r3, #8]
 80100e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	691b      	ldr	r3, [r3, #16]
 80100ee:	00db      	lsls	r3, r3, #3
 80100f0:	4910      	ldr	r1, [pc, #64]	; (8010134 <HAL_RCC_ClockConfig+0x330>)
 80100f2:	4313      	orrs	r3, r2
 80100f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80100f6:	f000 f825 	bl	8010144 <HAL_RCC_GetSysClockFreq>
 80100fa:	4602      	mov	r2, r0
 80100fc:	4b0d      	ldr	r3, [pc, #52]	; (8010134 <HAL_RCC_ClockConfig+0x330>)
 80100fe:	689b      	ldr	r3, [r3, #8]
 8010100:	091b      	lsrs	r3, r3, #4
 8010102:	f003 030f 	and.w	r3, r3, #15
 8010106:	490c      	ldr	r1, [pc, #48]	; (8010138 <HAL_RCC_ClockConfig+0x334>)
 8010108:	5ccb      	ldrb	r3, [r1, r3]
 801010a:	f003 031f 	and.w	r3, r3, #31
 801010e:	fa22 f303 	lsr.w	r3, r2, r3
 8010112:	4a0a      	ldr	r2, [pc, #40]	; (801013c <HAL_RCC_ClockConfig+0x338>)
 8010114:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8010116:	4b0a      	ldr	r3, [pc, #40]	; (8010140 <HAL_RCC_ClockConfig+0x33c>)
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	4618      	mov	r0, r3
 801011c:	f7f8 fe7c 	bl	8008e18 <HAL_InitTick>
 8010120:	4603      	mov	r3, r0
 8010122:	72fb      	strb	r3, [r7, #11]

  return status;
 8010124:	7afb      	ldrb	r3, [r7, #11]
}
 8010126:	4618      	mov	r0, r3
 8010128:	3710      	adds	r7, #16
 801012a:	46bd      	mov	sp, r7
 801012c:	bd80      	pop	{r7, pc}
 801012e:	bf00      	nop
 8010130:	08018e30 	.word	0x08018e30
 8010134:	40021000 	.word	0x40021000
 8010138:	08019398 	.word	0x08019398
 801013c:	20000ff4 	.word	0x20000ff4
 8010140:	200014dc 	.word	0x200014dc

08010144 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8010144:	b480      	push	{r7}
 8010146:	b089      	sub	sp, #36	; 0x24
 8010148:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 801014a:	2300      	movs	r3, #0
 801014c:	61fb      	str	r3, [r7, #28]
 801014e:	2300      	movs	r3, #0
 8010150:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8010152:	4b3e      	ldr	r3, [pc, #248]	; (801024c <HAL_RCC_GetSysClockFreq+0x108>)
 8010154:	689b      	ldr	r3, [r3, #8]
 8010156:	f003 030c 	and.w	r3, r3, #12
 801015a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 801015c:	4b3b      	ldr	r3, [pc, #236]	; (801024c <HAL_RCC_GetSysClockFreq+0x108>)
 801015e:	68db      	ldr	r3, [r3, #12]
 8010160:	f003 0303 	and.w	r3, r3, #3
 8010164:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8010166:	693b      	ldr	r3, [r7, #16]
 8010168:	2b00      	cmp	r3, #0
 801016a:	d005      	beq.n	8010178 <HAL_RCC_GetSysClockFreq+0x34>
 801016c:	693b      	ldr	r3, [r7, #16]
 801016e:	2b0c      	cmp	r3, #12
 8010170:	d121      	bne.n	80101b6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8010172:	68fb      	ldr	r3, [r7, #12]
 8010174:	2b01      	cmp	r3, #1
 8010176:	d11e      	bne.n	80101b6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8010178:	4b34      	ldr	r3, [pc, #208]	; (801024c <HAL_RCC_GetSysClockFreq+0x108>)
 801017a:	681b      	ldr	r3, [r3, #0]
 801017c:	f003 0308 	and.w	r3, r3, #8
 8010180:	2b00      	cmp	r3, #0
 8010182:	d107      	bne.n	8010194 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8010184:	4b31      	ldr	r3, [pc, #196]	; (801024c <HAL_RCC_GetSysClockFreq+0x108>)
 8010186:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801018a:	0a1b      	lsrs	r3, r3, #8
 801018c:	f003 030f 	and.w	r3, r3, #15
 8010190:	61fb      	str	r3, [r7, #28]
 8010192:	e005      	b.n	80101a0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8010194:	4b2d      	ldr	r3, [pc, #180]	; (801024c <HAL_RCC_GetSysClockFreq+0x108>)
 8010196:	681b      	ldr	r3, [r3, #0]
 8010198:	091b      	lsrs	r3, r3, #4
 801019a:	f003 030f 	and.w	r3, r3, #15
 801019e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80101a0:	4a2b      	ldr	r2, [pc, #172]	; (8010250 <HAL_RCC_GetSysClockFreq+0x10c>)
 80101a2:	69fb      	ldr	r3, [r7, #28]
 80101a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80101a8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80101aa:	693b      	ldr	r3, [r7, #16]
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	d10d      	bne.n	80101cc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80101b0:	69fb      	ldr	r3, [r7, #28]
 80101b2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80101b4:	e00a      	b.n	80101cc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80101b6:	693b      	ldr	r3, [r7, #16]
 80101b8:	2b04      	cmp	r3, #4
 80101ba:	d102      	bne.n	80101c2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80101bc:	4b25      	ldr	r3, [pc, #148]	; (8010254 <HAL_RCC_GetSysClockFreq+0x110>)
 80101be:	61bb      	str	r3, [r7, #24]
 80101c0:	e004      	b.n	80101cc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80101c2:	693b      	ldr	r3, [r7, #16]
 80101c4:	2b08      	cmp	r3, #8
 80101c6:	d101      	bne.n	80101cc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80101c8:	4b23      	ldr	r3, [pc, #140]	; (8010258 <HAL_RCC_GetSysClockFreq+0x114>)
 80101ca:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80101cc:	693b      	ldr	r3, [r7, #16]
 80101ce:	2b0c      	cmp	r3, #12
 80101d0:	d134      	bne.n	801023c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80101d2:	4b1e      	ldr	r3, [pc, #120]	; (801024c <HAL_RCC_GetSysClockFreq+0x108>)
 80101d4:	68db      	ldr	r3, [r3, #12]
 80101d6:	f003 0303 	and.w	r3, r3, #3
 80101da:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80101dc:	68bb      	ldr	r3, [r7, #8]
 80101de:	2b02      	cmp	r3, #2
 80101e0:	d003      	beq.n	80101ea <HAL_RCC_GetSysClockFreq+0xa6>
 80101e2:	68bb      	ldr	r3, [r7, #8]
 80101e4:	2b03      	cmp	r3, #3
 80101e6:	d003      	beq.n	80101f0 <HAL_RCC_GetSysClockFreq+0xac>
 80101e8:	e005      	b.n	80101f6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80101ea:	4b1a      	ldr	r3, [pc, #104]	; (8010254 <HAL_RCC_GetSysClockFreq+0x110>)
 80101ec:	617b      	str	r3, [r7, #20]
      break;
 80101ee:	e005      	b.n	80101fc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80101f0:	4b19      	ldr	r3, [pc, #100]	; (8010258 <HAL_RCC_GetSysClockFreq+0x114>)
 80101f2:	617b      	str	r3, [r7, #20]
      break;
 80101f4:	e002      	b.n	80101fc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80101f6:	69fb      	ldr	r3, [r7, #28]
 80101f8:	617b      	str	r3, [r7, #20]
      break;
 80101fa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80101fc:	4b13      	ldr	r3, [pc, #76]	; (801024c <HAL_RCC_GetSysClockFreq+0x108>)
 80101fe:	68db      	ldr	r3, [r3, #12]
 8010200:	091b      	lsrs	r3, r3, #4
 8010202:	f003 0307 	and.w	r3, r3, #7
 8010206:	3301      	adds	r3, #1
 8010208:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 801020a:	4b10      	ldr	r3, [pc, #64]	; (801024c <HAL_RCC_GetSysClockFreq+0x108>)
 801020c:	68db      	ldr	r3, [r3, #12]
 801020e:	0a1b      	lsrs	r3, r3, #8
 8010210:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010214:	697a      	ldr	r2, [r7, #20]
 8010216:	fb02 f203 	mul.w	r2, r2, r3
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	fbb2 f3f3 	udiv	r3, r2, r3
 8010220:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8010222:	4b0a      	ldr	r3, [pc, #40]	; (801024c <HAL_RCC_GetSysClockFreq+0x108>)
 8010224:	68db      	ldr	r3, [r3, #12]
 8010226:	0e5b      	lsrs	r3, r3, #25
 8010228:	f003 0303 	and.w	r3, r3, #3
 801022c:	3301      	adds	r3, #1
 801022e:	005b      	lsls	r3, r3, #1
 8010230:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8010232:	697a      	ldr	r2, [r7, #20]
 8010234:	683b      	ldr	r3, [r7, #0]
 8010236:	fbb2 f3f3 	udiv	r3, r2, r3
 801023a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 801023c:	69bb      	ldr	r3, [r7, #24]
}
 801023e:	4618      	mov	r0, r3
 8010240:	3724      	adds	r7, #36	; 0x24
 8010242:	46bd      	mov	sp, r7
 8010244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010248:	4770      	bx	lr
 801024a:	bf00      	nop
 801024c:	40021000 	.word	0x40021000
 8010250:	080193b0 	.word	0x080193b0
 8010254:	00f42400 	.word	0x00f42400
 8010258:	017d7840 	.word	0x017d7840

0801025c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 801025c:	b580      	push	{r7, lr}
 801025e:	b086      	sub	sp, #24
 8010260:	af00      	add	r7, sp, #0
 8010262:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8010264:	2300      	movs	r3, #0
 8010266:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8010268:	4b2a      	ldr	r3, [pc, #168]	; (8010314 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 801026a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801026c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010270:	2b00      	cmp	r3, #0
 8010272:	d003      	beq.n	801027c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8010274:	f7ff f80a 	bl	800f28c <HAL_PWREx_GetVoltageRange>
 8010278:	6178      	str	r0, [r7, #20]
 801027a:	e014      	b.n	80102a6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 801027c:	4b25      	ldr	r3, [pc, #148]	; (8010314 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 801027e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010280:	4a24      	ldr	r2, [pc, #144]	; (8010314 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8010282:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010286:	6593      	str	r3, [r2, #88]	; 0x58
 8010288:	4b22      	ldr	r3, [pc, #136]	; (8010314 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 801028a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801028c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010290:	60fb      	str	r3, [r7, #12]
 8010292:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8010294:	f7fe fffa 	bl	800f28c <HAL_PWREx_GetVoltageRange>
 8010298:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 801029a:	4b1e      	ldr	r3, [pc, #120]	; (8010314 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 801029c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801029e:	4a1d      	ldr	r2, [pc, #116]	; (8010314 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80102a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80102a4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80102a6:	697b      	ldr	r3, [r7, #20]
 80102a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80102ac:	d10b      	bne.n	80102c6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	2b80      	cmp	r3, #128	; 0x80
 80102b2:	d919      	bls.n	80102e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	2ba0      	cmp	r3, #160	; 0xa0
 80102b8:	d902      	bls.n	80102c0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80102ba:	2302      	movs	r3, #2
 80102bc:	613b      	str	r3, [r7, #16]
 80102be:	e013      	b.n	80102e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80102c0:	2301      	movs	r3, #1
 80102c2:	613b      	str	r3, [r7, #16]
 80102c4:	e010      	b.n	80102e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	2b80      	cmp	r3, #128	; 0x80
 80102ca:	d902      	bls.n	80102d2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80102cc:	2303      	movs	r3, #3
 80102ce:	613b      	str	r3, [r7, #16]
 80102d0:	e00a      	b.n	80102e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	2b80      	cmp	r3, #128	; 0x80
 80102d6:	d102      	bne.n	80102de <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80102d8:	2302      	movs	r3, #2
 80102da:	613b      	str	r3, [r7, #16]
 80102dc:	e004      	b.n	80102e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	2b70      	cmp	r3, #112	; 0x70
 80102e2:	d101      	bne.n	80102e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80102e4:	2301      	movs	r3, #1
 80102e6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80102e8:	4b0b      	ldr	r3, [pc, #44]	; (8010318 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80102ea:	681b      	ldr	r3, [r3, #0]
 80102ec:	f023 0207 	bic.w	r2, r3, #7
 80102f0:	4909      	ldr	r1, [pc, #36]	; (8010318 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80102f2:	693b      	ldr	r3, [r7, #16]
 80102f4:	4313      	orrs	r3, r2
 80102f6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80102f8:	4b07      	ldr	r3, [pc, #28]	; (8010318 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80102fa:	681b      	ldr	r3, [r3, #0]
 80102fc:	f003 0307 	and.w	r3, r3, #7
 8010300:	693a      	ldr	r2, [r7, #16]
 8010302:	429a      	cmp	r2, r3
 8010304:	d001      	beq.n	801030a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8010306:	2301      	movs	r3, #1
 8010308:	e000      	b.n	801030c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 801030a:	2300      	movs	r3, #0
}
 801030c:	4618      	mov	r0, r3
 801030e:	3718      	adds	r7, #24
 8010310:	46bd      	mov	sp, r7
 8010312:	bd80      	pop	{r7, pc}
 8010314:	40021000 	.word	0x40021000
 8010318:	40022000 	.word	0x40022000

0801031c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801031c:	b580      	push	{r7, lr}
 801031e:	b086      	sub	sp, #24
 8010320:	af00      	add	r7, sp, #0
 8010322:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8010324:	2300      	movs	r3, #0
 8010326:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8010328:	2300      	movs	r3, #0
 801032a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	681a      	ldr	r2, [r3, #0]
 8010330:	4b82      	ldr	r3, [pc, #520]	; (801053c <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8010332:	4013      	ands	r3, r2
 8010334:	2b00      	cmp	r3, #0
 8010336:	d005      	beq.n	8010344 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	681a      	ldr	r2, [r3, #0]
 801033c:	4b80      	ldr	r3, [pc, #512]	; (8010540 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 801033e:	4013      	ands	r3, r2
 8010340:	2b00      	cmp	r3, #0
 8010342:	d003      	beq.n	801034c <HAL_RCCEx_PeriphCLKConfig+0x30>
 8010344:	21c9      	movs	r1, #201	; 0xc9
 8010346:	487f      	ldr	r0, [pc, #508]	; (8010544 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8010348:	f7f4 f924 	bl	8004594 <assert_failed>

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	681b      	ldr	r3, [r3, #0]
 8010350:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010354:	2b00      	cmp	r3, #0
 8010356:	d043      	beq.n	80103e0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801035c:	2b00      	cmp	r3, #0
 801035e:	d00d      	beq.n	801037c <HAL_RCCEx_PeriphCLKConfig+0x60>
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010364:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8010368:	d008      	beq.n	801037c <HAL_RCCEx_PeriphCLKConfig+0x60>
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801036e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8010372:	d003      	beq.n	801037c <HAL_RCCEx_PeriphCLKConfig+0x60>
 8010374:	21d1      	movs	r1, #209	; 0xd1
 8010376:	4873      	ldr	r0, [pc, #460]	; (8010544 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8010378:	f7f4 f90c 	bl	8004594 <assert_failed>

    switch(PeriphClkInit->Sai1ClockSelection)
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010380:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8010384:	d01a      	beq.n	80103bc <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8010386:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 801038a:	d814      	bhi.n	80103b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
 801038c:	2b00      	cmp	r3, #0
 801038e:	d009      	beq.n	80103a4 <HAL_RCCEx_PeriphCLKConfig+0x88>
 8010390:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8010394:	d10f      	bne.n	80103b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8010396:	4b6c      	ldr	r3, [pc, #432]	; (8010548 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8010398:	68db      	ldr	r3, [r3, #12]
 801039a:	4a6b      	ldr	r2, [pc, #428]	; (8010548 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 801039c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80103a0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80103a2:	e00c      	b.n	80103be <HAL_RCCEx_PeriphCLKConfig+0xa2>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	3304      	adds	r3, #4
 80103a8:	2100      	movs	r1, #0
 80103aa:	4618      	mov	r0, r3
 80103ac:	f000 fb6e 	bl	8010a8c <RCCEx_PLLSAI1_Config>
 80103b0:	4603      	mov	r3, r0
 80103b2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80103b4:	e003      	b.n	80103be <HAL_RCCEx_PeriphCLKConfig+0xa2>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80103b6:	2301      	movs	r3, #1
 80103b8:	74fb      	strb	r3, [r7, #19]
      break;
 80103ba:	e000      	b.n	80103be <HAL_RCCEx_PeriphCLKConfig+0xa2>
      break;
 80103bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80103be:	7cfb      	ldrb	r3, [r7, #19]
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	d10b      	bne.n	80103dc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80103c4:	4b60      	ldr	r3, [pc, #384]	; (8010548 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80103c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80103ca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80103d2:	495d      	ldr	r1, [pc, #372]	; (8010548 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80103d4:	4313      	orrs	r3, r2
 80103d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80103da:	e001      	b.n	80103e0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80103dc:	7cfb      	ldrb	r3, [r7, #19]
 80103de:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	681b      	ldr	r3, [r3, #0]
 80103e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	f000 80bc 	beq.w	8010566 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80103ee:	2300      	movs	r3, #0
 80103f0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d013      	beq.n	8010422 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80103fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010402:	d00e      	beq.n	8010422 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010408:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801040c:	d009      	beq.n	8010422 <HAL_RCCEx_PeriphCLKConfig+0x106>
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010412:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010416:	d004      	beq.n	8010422 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8010418:	f44f 71a2 	mov.w	r1, #324	; 0x144
 801041c:	4849      	ldr	r0, [pc, #292]	; (8010544 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 801041e:	f7f4 f8b9 	bl	8004594 <assert_failed>

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8010422:	4b49      	ldr	r3, [pc, #292]	; (8010548 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8010424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010426:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801042a:	2b00      	cmp	r3, #0
 801042c:	d101      	bne.n	8010432 <HAL_RCCEx_PeriphCLKConfig+0x116>
 801042e:	2301      	movs	r3, #1
 8010430:	e000      	b.n	8010434 <HAL_RCCEx_PeriphCLKConfig+0x118>
 8010432:	2300      	movs	r3, #0
 8010434:	2b00      	cmp	r3, #0
 8010436:	d00d      	beq.n	8010454 <HAL_RCCEx_PeriphCLKConfig+0x138>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8010438:	4b43      	ldr	r3, [pc, #268]	; (8010548 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 801043a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801043c:	4a42      	ldr	r2, [pc, #264]	; (8010548 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 801043e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010442:	6593      	str	r3, [r2, #88]	; 0x58
 8010444:	4b40      	ldr	r3, [pc, #256]	; (8010548 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8010446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010448:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801044c:	60bb      	str	r3, [r7, #8]
 801044e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8010450:	2301      	movs	r3, #1
 8010452:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8010454:	4b3d      	ldr	r3, [pc, #244]	; (801054c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8010456:	681b      	ldr	r3, [r3, #0]
 8010458:	4a3c      	ldr	r2, [pc, #240]	; (801054c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 801045a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801045e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8010460:	f7f8 fd2a 	bl	8008eb8 <HAL_GetTick>
 8010464:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8010466:	e009      	b.n	801047c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8010468:	f7f8 fd26 	bl	8008eb8 <HAL_GetTick>
 801046c:	4602      	mov	r2, r0
 801046e:	68fb      	ldr	r3, [r7, #12]
 8010470:	1ad3      	subs	r3, r2, r3
 8010472:	2b02      	cmp	r3, #2
 8010474:	d902      	bls.n	801047c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        ret = HAL_TIMEOUT;
 8010476:	2303      	movs	r3, #3
 8010478:	74fb      	strb	r3, [r7, #19]
        break;
 801047a:	e005      	b.n	8010488 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 801047c:	4b33      	ldr	r3, [pc, #204]	; (801054c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 801047e:	681b      	ldr	r3, [r3, #0]
 8010480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010484:	2b00      	cmp	r3, #0
 8010486:	d0ef      	beq.n	8010468 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      }
    }

    if(ret == HAL_OK)
 8010488:	7cfb      	ldrb	r3, [r7, #19]
 801048a:	2b00      	cmp	r3, #0
 801048c:	d160      	bne.n	8010550 <HAL_RCCEx_PeriphCLKConfig+0x234>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 801048e:	4b2e      	ldr	r3, [pc, #184]	; (8010548 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8010490:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010494:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010498:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 801049a:	697b      	ldr	r3, [r7, #20]
 801049c:	2b00      	cmp	r3, #0
 801049e:	d01e      	beq.n	80104de <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80104a4:	697a      	ldr	r2, [r7, #20]
 80104a6:	429a      	cmp	r2, r3
 80104a8:	d019      	beq.n	80104de <HAL_RCCEx_PeriphCLKConfig+0x1c2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80104aa:	4b27      	ldr	r3, [pc, #156]	; (8010548 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80104ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80104b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80104b4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80104b6:	4b24      	ldr	r3, [pc, #144]	; (8010548 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80104b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80104bc:	4a22      	ldr	r2, [pc, #136]	; (8010548 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80104be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80104c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80104c6:	4b20      	ldr	r3, [pc, #128]	; (8010548 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80104c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80104cc:	4a1e      	ldr	r2, [pc, #120]	; (8010548 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80104ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80104d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80104d6:	4a1c      	ldr	r2, [pc, #112]	; (8010548 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80104d8:	697b      	ldr	r3, [r7, #20]
 80104da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80104de:	697b      	ldr	r3, [r7, #20]
 80104e0:	f003 0301 	and.w	r3, r3, #1
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	d016      	beq.n	8010516 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80104e8:	f7f8 fce6 	bl	8008eb8 <HAL_GetTick>
 80104ec:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80104ee:	e00b      	b.n	8010508 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80104f0:	f7f8 fce2 	bl	8008eb8 <HAL_GetTick>
 80104f4:	4602      	mov	r2, r0
 80104f6:	68fb      	ldr	r3, [r7, #12]
 80104f8:	1ad3      	subs	r3, r2, r3
 80104fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80104fe:	4293      	cmp	r3, r2
 8010500:	d902      	bls.n	8010508 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
          {
            ret = HAL_TIMEOUT;
 8010502:	2303      	movs	r3, #3
 8010504:	74fb      	strb	r3, [r7, #19]
            break;
 8010506:	e006      	b.n	8010516 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8010508:	4b0f      	ldr	r3, [pc, #60]	; (8010548 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 801050a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801050e:	f003 0302 	and.w	r3, r3, #2
 8010512:	2b00      	cmp	r3, #0
 8010514:	d0ec      	beq.n	80104f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
          }
        }
      }

      if(ret == HAL_OK)
 8010516:	7cfb      	ldrb	r3, [r7, #19]
 8010518:	2b00      	cmp	r3, #0
 801051a:	d10b      	bne.n	8010534 <HAL_RCCEx_PeriphCLKConfig+0x218>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801051c:	4b0a      	ldr	r3, [pc, #40]	; (8010548 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 801051e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010522:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801052a:	4907      	ldr	r1, [pc, #28]	; (8010548 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 801052c:	4313      	orrs	r3, r2
 801052e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8010532:	e00f      	b.n	8010554 <HAL_RCCEx_PeriphCLKConfig+0x238>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8010534:	7cfb      	ldrb	r3, [r7, #19]
 8010536:	74bb      	strb	r3, [r7, #18]
 8010538:	e00c      	b.n	8010554 <HAL_RCCEx_PeriphCLKConfig+0x238>
 801053a:	bf00      	nop
 801053c:	000eefe7 	.word	0x000eefe7
 8010540:	fff11018 	.word	0xfff11018
 8010544:	08018e68 	.word	0x08018e68
 8010548:	40021000 	.word	0x40021000
 801054c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010550:	7cfb      	ldrb	r3, [r7, #19]
 8010552:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8010554:	7c7b      	ldrb	r3, [r7, #17]
 8010556:	2b01      	cmp	r3, #1
 8010558:	d105      	bne.n	8010566 <HAL_RCCEx_PeriphCLKConfig+0x24a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801055a:	4b9e      	ldr	r3, [pc, #632]	; (80107d4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>)
 801055c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801055e:	4a9d      	ldr	r2, [pc, #628]	; (80107d4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>)
 8010560:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010564:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	681b      	ldr	r3, [r3, #0]
 801056a:	f003 0301 	and.w	r3, r3, #1
 801056e:	2b00      	cmp	r3, #0
 8010570:	d01f      	beq.n	80105b2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	6a1b      	ldr	r3, [r3, #32]
 8010576:	2b00      	cmp	r3, #0
 8010578:	d010      	beq.n	801059c <HAL_RCCEx_PeriphCLKConfig+0x280>
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	6a1b      	ldr	r3, [r3, #32]
 801057e:	2b01      	cmp	r3, #1
 8010580:	d00c      	beq.n	801059c <HAL_RCCEx_PeriphCLKConfig+0x280>
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	6a1b      	ldr	r3, [r3, #32]
 8010586:	2b03      	cmp	r3, #3
 8010588:	d008      	beq.n	801059c <HAL_RCCEx_PeriphCLKConfig+0x280>
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	6a1b      	ldr	r3, [r3, #32]
 801058e:	2b02      	cmp	r3, #2
 8010590:	d004      	beq.n	801059c <HAL_RCCEx_PeriphCLKConfig+0x280>
 8010592:	f240 1199 	movw	r1, #409	; 0x199
 8010596:	4890      	ldr	r0, [pc, #576]	; (80107d8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8010598:	f7f3 fffc 	bl	8004594 <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 801059c:	4b8d      	ldr	r3, [pc, #564]	; (80107d4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>)
 801059e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80105a2:	f023 0203 	bic.w	r2, r3, #3
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	6a1b      	ldr	r3, [r3, #32]
 80105aa:	498a      	ldr	r1, [pc, #552]	; (80107d4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>)
 80105ac:	4313      	orrs	r3, r2
 80105ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	681b      	ldr	r3, [r3, #0]
 80105b6:	f003 0302 	and.w	r3, r3, #2
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d01f      	beq.n	80105fe <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	d010      	beq.n	80105e8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105ca:	2b04      	cmp	r3, #4
 80105cc:	d00c      	beq.n	80105e8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105d2:	2b0c      	cmp	r3, #12
 80105d4:	d008      	beq.n	80105e8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105da:	2b08      	cmp	r3, #8
 80105dc:	d004      	beq.n	80105e8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80105de:	f240 11a3 	movw	r1, #419	; 0x1a3
 80105e2:	487d      	ldr	r0, [pc, #500]	; (80107d8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80105e4:	f7f3 ffd6 	bl	8004594 <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80105e8:	4b7a      	ldr	r3, [pc, #488]	; (80107d4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>)
 80105ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80105ee:	f023 020c 	bic.w	r2, r3, #12
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105f6:	4977      	ldr	r1, [pc, #476]	; (80107d4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>)
 80105f8:	4313      	orrs	r3, r2
 80105fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	681b      	ldr	r3, [r3, #0]
 8010602:	f003 0304 	and.w	r3, r3, #4
 8010606:	2b00      	cmp	r3, #0
 8010608:	d01f      	beq.n	801064a <HAL_RCCEx_PeriphCLKConfig+0x32e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801060e:	2b00      	cmp	r3, #0
 8010610:	d010      	beq.n	8010634 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010616:	2b10      	cmp	r3, #16
 8010618:	d00c      	beq.n	8010634 <HAL_RCCEx_PeriphCLKConfig+0x318>
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801061e:	2b30      	cmp	r3, #48	; 0x30
 8010620:	d008      	beq.n	8010634 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010626:	2b20      	cmp	r3, #32
 8010628:	d004      	beq.n	8010634 <HAL_RCCEx_PeriphCLKConfig+0x318>
 801062a:	f240 11af 	movw	r1, #431	; 0x1af
 801062e:	486a      	ldr	r0, [pc, #424]	; (80107d8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8010630:	f7f3 ffb0 	bl	8004594 <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8010634:	4b67      	ldr	r3, [pc, #412]	; (80107d4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>)
 8010636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801063a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010642:	4964      	ldr	r1, [pc, #400]	; (80107d4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>)
 8010644:	4313      	orrs	r3, r2
 8010646:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	681b      	ldr	r3, [r3, #0]
 801064e:	f003 0320 	and.w	r3, r3, #32
 8010652:	2b00      	cmp	r3, #0
 8010654:	d022      	beq.n	801069c <HAL_RCCEx_PeriphCLKConfig+0x380>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801065a:	2b00      	cmp	r3, #0
 801065c:	d013      	beq.n	8010686 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010662:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010666:	d00e      	beq.n	8010686 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801066c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8010670:	d009      	beq.n	8010686 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010676:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801067a:	d004      	beq.n	8010686 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 801067c:	f240 11d7 	movw	r1, #471	; 0x1d7
 8010680:	4855      	ldr	r0, [pc, #340]	; (80107d8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8010682:	f7f3 ff87 	bl	8004594 <assert_failed>

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8010686:	4b53      	ldr	r3, [pc, #332]	; (80107d4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>)
 8010688:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801068c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010694:	494f      	ldr	r1, [pc, #316]	; (80107d4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>)
 8010696:	4313      	orrs	r3, r2
 8010698:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	d022      	beq.n	80106ee <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d013      	beq.n	80106d8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80106b4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80106b8:	d00e      	beq.n	80106d8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80106be:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80106c2:	d009      	beq.n	80106d8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80106c8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80106cc:	d004      	beq.n	80106d8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80106ce:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80106d2:	4841      	ldr	r0, [pc, #260]	; (80107d8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80106d4:	f7f3 ff5e 	bl	8004594 <assert_failed>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80106d8:	4b3e      	ldr	r3, [pc, #248]	; (80107d4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>)
 80106da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80106de:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80106e6:	493b      	ldr	r1, [pc, #236]	; (80107d4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>)
 80106e8:	4313      	orrs	r3, r2
 80106ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	681b      	ldr	r3, [r3, #0]
 80106f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	d022      	beq.n	8010740 <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80106fe:	2b00      	cmp	r3, #0
 8010700:	d013      	beq.n	801072a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010706:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801070a:	d00e      	beq.n	801072a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010710:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010714:	d009      	beq.n	801072a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801071a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 801071e:	d004      	beq.n	801072a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8010720:	f240 11e7 	movw	r1, #487	; 0x1e7
 8010724:	482c      	ldr	r0, [pc, #176]	; (80107d8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 8010726:	f7f3 ff35 	bl	8004594 <assert_failed>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 801072a:	4b2a      	ldr	r3, [pc, #168]	; (80107d4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>)
 801072c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010730:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010738:	4926      	ldr	r1, [pc, #152]	; (80107d4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>)
 801073a:	4313      	orrs	r3, r2
 801073c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010748:	2b00      	cmp	r3, #0
 801074a:	d01d      	beq.n	8010788 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010750:	2b00      	cmp	r3, #0
 8010752:	d00e      	beq.n	8010772 <HAL_RCCEx_PeriphCLKConfig+0x456>
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010758:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801075c:	d009      	beq.n	8010772 <HAL_RCCEx_PeriphCLKConfig+0x456>
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010762:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010766:	d004      	beq.n	8010772 <HAL_RCCEx_PeriphCLKConfig+0x456>
 8010768:	f240 11ef 	movw	r1, #495	; 0x1ef
 801076c:	481a      	ldr	r0, [pc, #104]	; (80107d8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 801076e:	f7f3 ff11 	bl	8004594 <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8010772:	4b18      	ldr	r3, [pc, #96]	; (80107d4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>)
 8010774:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010778:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010780:	4914      	ldr	r1, [pc, #80]	; (80107d4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>)
 8010782:	4313      	orrs	r3, r2
 8010784:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	681b      	ldr	r3, [r3, #0]
 801078c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010790:	2b00      	cmp	r3, #0
 8010792:	d023      	beq.n	80107dc <HAL_RCCEx_PeriphCLKConfig+0x4c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010798:	2b00      	cmp	r3, #0
 801079a:	d00e      	beq.n	80107ba <HAL_RCCEx_PeriphCLKConfig+0x49e>
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80107a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80107a4:	d009      	beq.n	80107ba <HAL_RCCEx_PeriphCLKConfig+0x49e>
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80107aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80107ae:	d004      	beq.n	80107ba <HAL_RCCEx_PeriphCLKConfig+0x49e>
 80107b0:	f240 11fb 	movw	r1, #507	; 0x1fb
 80107b4:	4808      	ldr	r0, [pc, #32]	; (80107d8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
 80107b6:	f7f3 feed 	bl	8004594 <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80107ba:	4b06      	ldr	r3, [pc, #24]	; (80107d4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>)
 80107bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80107c0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80107c8:	4902      	ldr	r1, [pc, #8]	; (80107d4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>)
 80107ca:	4313      	orrs	r3, r2
 80107cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80107d0:	e004      	b.n	80107dc <HAL_RCCEx_PeriphCLKConfig+0x4c0>
 80107d2:	bf00      	nop
 80107d4:	40021000 	.word	0x40021000
 80107d8:	08018e68 	.word	0x08018e68
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	681b      	ldr	r3, [r3, #0]
 80107e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d01d      	beq.n	8010824 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	d00e      	beq.n	801080e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80107f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80107f8:	d009      	beq.n	801080e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80107fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010802:	d004      	beq.n	801080e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8010804:	f240 2107 	movw	r1, #519	; 0x207
 8010808:	489e      	ldr	r0, [pc, #632]	; (8010a84 <HAL_RCCEx_PeriphCLKConfig+0x768>)
 801080a:	f7f3 fec3 	bl	8004594 <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 801080e:	4b9e      	ldr	r3, [pc, #632]	; (8010a88 <HAL_RCCEx_PeriphCLKConfig+0x76c>)
 8010810:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010814:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801081c:	499a      	ldr	r1, [pc, #616]	; (8010a88 <HAL_RCCEx_PeriphCLKConfig+0x76c>)
 801081e:	4313      	orrs	r3, r2
 8010820:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	681b      	ldr	r3, [r3, #0]
 8010828:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801082c:	2b00      	cmp	r3, #0
 801082e:	d040      	beq.n	80108b2 <HAL_RCCEx_PeriphCLKConfig+0x596>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010834:	2b00      	cmp	r3, #0
 8010836:	d013      	beq.n	8010860 <HAL_RCCEx_PeriphCLKConfig+0x544>
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801083c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8010840:	d00e      	beq.n	8010860 <HAL_RCCEx_PeriphCLKConfig+0x544>
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010846:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801084a:	d009      	beq.n	8010860 <HAL_RCCEx_PeriphCLKConfig+0x544>
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010850:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8010854:	d004      	beq.n	8010860 <HAL_RCCEx_PeriphCLKConfig+0x544>
 8010856:	f44f 7108 	mov.w	r1, #544	; 0x220
 801085a:	488a      	ldr	r0, [pc, #552]	; (8010a84 <HAL_RCCEx_PeriphCLKConfig+0x768>)
 801085c:	f7f3 fe9a 	bl	8004594 <assert_failed>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8010860:	4b89      	ldr	r3, [pc, #548]	; (8010a88 <HAL_RCCEx_PeriphCLKConfig+0x76c>)
 8010862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010866:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801086e:	4986      	ldr	r1, [pc, #536]	; (8010a88 <HAL_RCCEx_PeriphCLKConfig+0x76c>)
 8010870:	4313      	orrs	r3, r2
 8010872:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801087a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801087e:	d106      	bne.n	801088e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8010880:	4b81      	ldr	r3, [pc, #516]	; (8010a88 <HAL_RCCEx_PeriphCLKConfig+0x76c>)
 8010882:	68db      	ldr	r3, [r3, #12]
 8010884:	4a80      	ldr	r2, [pc, #512]	; (8010a88 <HAL_RCCEx_PeriphCLKConfig+0x76c>)
 8010886:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801088a:	60d3      	str	r3, [r2, #12]
 801088c:	e011      	b.n	80108b2 <HAL_RCCEx_PeriphCLKConfig+0x596>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010892:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8010896:	d10c      	bne.n	80108b2 <HAL_RCCEx_PeriphCLKConfig+0x596>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	3304      	adds	r3, #4
 801089c:	2101      	movs	r1, #1
 801089e:	4618      	mov	r0, r3
 80108a0:	f000 f8f4 	bl	8010a8c <RCCEx_PLLSAI1_Config>
 80108a4:	4603      	mov	r3, r0
 80108a6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80108a8:	7cfb      	ldrb	r3, [r7, #19]
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	d001      	beq.n	80108b2 <HAL_RCCEx_PeriphCLKConfig+0x596>
        {
          /* set overall return value */
          status = ret;
 80108ae:	7cfb      	ldrb	r3, [r7, #19]
 80108b0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	681b      	ldr	r3, [r3, #0]
 80108b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	d040      	beq.n	8010940 <HAL_RCCEx_PeriphCLKConfig+0x624>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	d013      	beq.n	80108ee <HAL_RCCEx_PeriphCLKConfig+0x5d2>
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80108ca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80108ce:	d00e      	beq.n	80108ee <HAL_RCCEx_PeriphCLKConfig+0x5d2>
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80108d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80108d8:	d009      	beq.n	80108ee <HAL_RCCEx_PeriphCLKConfig+0x5d2>
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80108de:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80108e2:	d004      	beq.n	80108ee <HAL_RCCEx_PeriphCLKConfig+0x5d2>
 80108e4:	f240 2141 	movw	r1, #577	; 0x241
 80108e8:	4866      	ldr	r0, [pc, #408]	; (8010a84 <HAL_RCCEx_PeriphCLKConfig+0x768>)
 80108ea:	f7f3 fe53 	bl	8004594 <assert_failed>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80108ee:	4b66      	ldr	r3, [pc, #408]	; (8010a88 <HAL_RCCEx_PeriphCLKConfig+0x76c>)
 80108f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80108f4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80108fc:	4962      	ldr	r1, [pc, #392]	; (8010a88 <HAL_RCCEx_PeriphCLKConfig+0x76c>)
 80108fe:	4313      	orrs	r3, r2
 8010900:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010908:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801090c:	d106      	bne.n	801091c <HAL_RCCEx_PeriphCLKConfig+0x600>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801090e:	4b5e      	ldr	r3, [pc, #376]	; (8010a88 <HAL_RCCEx_PeriphCLKConfig+0x76c>)
 8010910:	68db      	ldr	r3, [r3, #12]
 8010912:	4a5d      	ldr	r2, [pc, #372]	; (8010a88 <HAL_RCCEx_PeriphCLKConfig+0x76c>)
 8010914:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010918:	60d3      	str	r3, [r2, #12]
 801091a:	e011      	b.n	8010940 <HAL_RCCEx_PeriphCLKConfig+0x624>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010920:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8010924:	d10c      	bne.n	8010940 <HAL_RCCEx_PeriphCLKConfig+0x624>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	3304      	adds	r3, #4
 801092a:	2101      	movs	r1, #1
 801092c:	4618      	mov	r0, r3
 801092e:	f000 f8ad 	bl	8010a8c <RCCEx_PLLSAI1_Config>
 8010932:	4603      	mov	r3, r0
 8010934:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8010936:	7cfb      	ldrb	r3, [r7, #19]
 8010938:	2b00      	cmp	r3, #0
 801093a:	d001      	beq.n	8010940 <HAL_RCCEx_PeriphCLKConfig+0x624>
      {
        /* set overall return value */
        status = ret;
 801093c:	7cfb      	ldrb	r3, [r7, #19]
 801093e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	681b      	ldr	r3, [r3, #0]
 8010944:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010948:	2b00      	cmp	r3, #0
 801094a:	d040      	beq.n	80109ce <HAL_RCCEx_PeriphCLKConfig+0x6b2>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010950:	2b00      	cmp	r3, #0
 8010952:	d013      	beq.n	801097c <HAL_RCCEx_PeriphCLKConfig+0x660>
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010958:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801095c:	d00e      	beq.n	801097c <HAL_RCCEx_PeriphCLKConfig+0x660>
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010962:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010966:	d009      	beq.n	801097c <HAL_RCCEx_PeriphCLKConfig+0x660>
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801096c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8010970:	d004      	beq.n	801097c <HAL_RCCEx_PeriphCLKConfig+0x660>
 8010972:	f240 2166 	movw	r1, #614	; 0x266
 8010976:	4843      	ldr	r0, [pc, #268]	; (8010a84 <HAL_RCCEx_PeriphCLKConfig+0x768>)
 8010978:	f7f3 fe0c 	bl	8004594 <assert_failed>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801097c:	4b42      	ldr	r3, [pc, #264]	; (8010a88 <HAL_RCCEx_PeriphCLKConfig+0x76c>)
 801097e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010982:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801098a:	493f      	ldr	r1, [pc, #252]	; (8010a88 <HAL_RCCEx_PeriphCLKConfig+0x76c>)
 801098c:	4313      	orrs	r3, r2
 801098e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010996:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801099a:	d106      	bne.n	80109aa <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801099c:	4b3a      	ldr	r3, [pc, #232]	; (8010a88 <HAL_RCCEx_PeriphCLKConfig+0x76c>)
 801099e:	68db      	ldr	r3, [r3, #12]
 80109a0:	4a39      	ldr	r2, [pc, #228]	; (8010a88 <HAL_RCCEx_PeriphCLKConfig+0x76c>)
 80109a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80109a6:	60d3      	str	r3, [r2, #12]
 80109a8:	e011      	b.n	80109ce <HAL_RCCEx_PeriphCLKConfig+0x6b2>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80109ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80109b2:	d10c      	bne.n	80109ce <HAL_RCCEx_PeriphCLKConfig+0x6b2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	3304      	adds	r3, #4
 80109b8:	2101      	movs	r1, #1
 80109ba:	4618      	mov	r0, r3
 80109bc:	f000 f866 	bl	8010a8c <RCCEx_PLLSAI1_Config>
 80109c0:	4603      	mov	r3, r0
 80109c2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80109c4:	7cfb      	ldrb	r3, [r7, #19]
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d001      	beq.n	80109ce <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* set overall return value */
        status = ret;
 80109ca:	7cfb      	ldrb	r3, [r7, #19]
 80109cc:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	681b      	ldr	r3, [r3, #0]
 80109d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	d02f      	beq.n	8010a3a <HAL_RCCEx_PeriphCLKConfig+0x71e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80109de:	2b00      	cmp	r3, #0
 80109e0:	d00e      	beq.n	8010a00 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80109e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80109ea:	d009      	beq.n	8010a00 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80109f0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80109f4:	d004      	beq.n	8010a00 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 80109f6:	f240 2186 	movw	r1, #646	; 0x286
 80109fa:	4822      	ldr	r0, [pc, #136]	; (8010a84 <HAL_RCCEx_PeriphCLKConfig+0x768>)
 80109fc:	f7f3 fdca 	bl	8004594 <assert_failed>

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8010a00:	4b21      	ldr	r3, [pc, #132]	; (8010a88 <HAL_RCCEx_PeriphCLKConfig+0x76c>)
 8010a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010a06:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010a0e:	491e      	ldr	r1, [pc, #120]	; (8010a88 <HAL_RCCEx_PeriphCLKConfig+0x76c>)
 8010a10:	4313      	orrs	r3, r2
 8010a12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010a1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010a1e:	d10c      	bne.n	8010a3a <HAL_RCCEx_PeriphCLKConfig+0x71e>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	3304      	adds	r3, #4
 8010a24:	2102      	movs	r1, #2
 8010a26:	4618      	mov	r0, r3
 8010a28:	f000 f830 	bl	8010a8c <RCCEx_PLLSAI1_Config>
 8010a2c:	4603      	mov	r3, r0
 8010a2e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8010a30:	7cfb      	ldrb	r3, [r7, #19]
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d001      	beq.n	8010a3a <HAL_RCCEx_PeriphCLKConfig+0x71e>
      {
        /* set overall return value */
        status = ret;
 8010a36:	7cfb      	ldrb	r3, [r7, #19]
 8010a38:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	681b      	ldr	r3, [r3, #0]
 8010a3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d018      	beq.n	8010a78 <HAL_RCCEx_PeriphCLKConfig+0x75c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	d009      	beq.n	8010a62 <HAL_RCCEx_PeriphCLKConfig+0x746>
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010a52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010a56:	d004      	beq.n	8010a62 <HAL_RCCEx_PeriphCLKConfig+0x746>
 8010a58:	f240 21b2 	movw	r1, #690	; 0x2b2
 8010a5c:	4809      	ldr	r0, [pc, #36]	; (8010a84 <HAL_RCCEx_PeriphCLKConfig+0x768>)
 8010a5e:	f7f3 fd99 	bl	8004594 <assert_failed>

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8010a62:	4b09      	ldr	r3, [pc, #36]	; (8010a88 <HAL_RCCEx_PeriphCLKConfig+0x76c>)
 8010a64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010a68:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010a70:	4905      	ldr	r1, [pc, #20]	; (8010a88 <HAL_RCCEx_PeriphCLKConfig+0x76c>)
 8010a72:	4313      	orrs	r3, r2
 8010a74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8010a78:	7cbb      	ldrb	r3, [r7, #18]
}
 8010a7a:	4618      	mov	r0, r3
 8010a7c:	3718      	adds	r7, #24
 8010a7e:	46bd      	mov	sp, r7
 8010a80:	bd80      	pop	{r7, pc}
 8010a82:	bf00      	nop
 8010a84:	08018e68 	.word	0x08018e68
 8010a88:	40021000 	.word	0x40021000

08010a8c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8010a8c:	b580      	push	{r7, lr}
 8010a8e:	b084      	sub	sp, #16
 8010a90:	af00      	add	r7, sp, #0
 8010a92:	6078      	str	r0, [r7, #4]
 8010a94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8010a96:	2300      	movs	r3, #0
 8010a98:	73fb      	strb	r3, [r7, #15]

  /* check for PLLSAI1 Parameters used to output PLLSAI1CLK */
  /* P, Q and R dividers are verified in each specific divider case below */
  assert_param(IS_RCC_PLLSAI1SOURCE(PllSai1->PLLSAI1Source));
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	681b      	ldr	r3, [r3, #0]
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	d010      	beq.n	8010ac4 <RCCEx_PLLSAI1_Config+0x38>
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	681b      	ldr	r3, [r3, #0]
 8010aa6:	2b01      	cmp	r3, #1
 8010aa8:	d00c      	beq.n	8010ac4 <RCCEx_PLLSAI1_Config+0x38>
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	681b      	ldr	r3, [r3, #0]
 8010aae:	2b02      	cmp	r3, #2
 8010ab0:	d008      	beq.n	8010ac4 <RCCEx_PLLSAI1_Config+0x38>
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	681b      	ldr	r3, [r3, #0]
 8010ab6:	2b03      	cmp	r3, #3
 8010ab8:	d004      	beq.n	8010ac4 <RCCEx_PLLSAI1_Config+0x38>
 8010aba:	f640 315e 	movw	r1, #2910	; 0xb5e
 8010abe:	48a4      	ldr	r0, [pc, #656]	; (8010d50 <RCCEx_PLLSAI1_Config+0x2c4>)
 8010ac0:	f7f3 fd68 	bl	8004594 <assert_failed>
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	685b      	ldr	r3, [r3, #4]
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d003      	beq.n	8010ad4 <RCCEx_PLLSAI1_Config+0x48>
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	685b      	ldr	r3, [r3, #4]
 8010ad0:	2b08      	cmp	r3, #8
 8010ad2:	d904      	bls.n	8010ade <RCCEx_PLLSAI1_Config+0x52>
 8010ad4:	f640 315f 	movw	r1, #2911	; 0xb5f
 8010ad8:	489d      	ldr	r0, [pc, #628]	; (8010d50 <RCCEx_PLLSAI1_Config+0x2c4>)
 8010ada:	f7f3 fd5b 	bl	8004594 <assert_failed>
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	689b      	ldr	r3, [r3, #8]
 8010ae2:	2b07      	cmp	r3, #7
 8010ae4:	d903      	bls.n	8010aee <RCCEx_PLLSAI1_Config+0x62>
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	689b      	ldr	r3, [r3, #8]
 8010aea:	2b56      	cmp	r3, #86	; 0x56
 8010aec:	d904      	bls.n	8010af8 <RCCEx_PLLSAI1_Config+0x6c>
 8010aee:	f44f 6136 	mov.w	r1, #2912	; 0xb60
 8010af2:	4897      	ldr	r0, [pc, #604]	; (8010d50 <RCCEx_PLLSAI1_Config+0x2c4>)
 8010af4:	f7f3 fd4e 	bl	8004594 <assert_failed>
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	699b      	ldr	r3, [r3, #24]
 8010afc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	d10b      	bne.n	8010b1c <RCCEx_PLLSAI1_Config+0x90>
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	699b      	ldr	r3, [r3, #24]
 8010b08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	d105      	bne.n	8010b1c <RCCEx_PLLSAI1_Config+0x90>
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	699b      	ldr	r3, [r3, #24]
 8010b14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	d007      	beq.n	8010b2c <RCCEx_PLLSAI1_Config+0xa0>
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	699b      	ldr	r3, [r3, #24]
 8010b20:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8010b24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010b28:	2b00      	cmp	r3, #0
 8010b2a:	d004      	beq.n	8010b36 <RCCEx_PLLSAI1_Config+0xaa>
 8010b2c:	f640 3161 	movw	r1, #2913	; 0xb61
 8010b30:	4887      	ldr	r0, [pc, #540]	; (8010d50 <RCCEx_PLLSAI1_Config+0x2c4>)
 8010b32:	f7f3 fd2f 	bl	8004594 <assert_failed>

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8010b36:	4b87      	ldr	r3, [pc, #540]	; (8010d54 <RCCEx_PLLSAI1_Config+0x2c8>)
 8010b38:	68db      	ldr	r3, [r3, #12]
 8010b3a:	f003 0303 	and.w	r3, r3, #3
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	d018      	beq.n	8010b74 <RCCEx_PLLSAI1_Config+0xe8>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8010b42:	4b84      	ldr	r3, [pc, #528]	; (8010d54 <RCCEx_PLLSAI1_Config+0x2c8>)
 8010b44:	68db      	ldr	r3, [r3, #12]
 8010b46:	f003 0203 	and.w	r2, r3, #3
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	681b      	ldr	r3, [r3, #0]
 8010b4e:	429a      	cmp	r2, r3
 8010b50:	d10d      	bne.n	8010b6e <RCCEx_PLLSAI1_Config+0xe2>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	681b      	ldr	r3, [r3, #0]
       ||
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d009      	beq.n	8010b6e <RCCEx_PLLSAI1_Config+0xe2>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8010b5a:	4b7e      	ldr	r3, [pc, #504]	; (8010d54 <RCCEx_PLLSAI1_Config+0x2c8>)
 8010b5c:	68db      	ldr	r3, [r3, #12]
 8010b5e:	091b      	lsrs	r3, r3, #4
 8010b60:	f003 0307 	and.w	r3, r3, #7
 8010b64:	1c5a      	adds	r2, r3, #1
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	685b      	ldr	r3, [r3, #4]
       ||
 8010b6a:	429a      	cmp	r2, r3
 8010b6c:	d047      	beq.n	8010bfe <RCCEx_PLLSAI1_Config+0x172>
#endif
      )
    {
      status = HAL_ERROR;
 8010b6e:	2301      	movs	r3, #1
 8010b70:	73fb      	strb	r3, [r7, #15]
 8010b72:	e044      	b.n	8010bfe <RCCEx_PLLSAI1_Config+0x172>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	681b      	ldr	r3, [r3, #0]
 8010b78:	2b03      	cmp	r3, #3
 8010b7a:	d018      	beq.n	8010bae <RCCEx_PLLSAI1_Config+0x122>
 8010b7c:	2b03      	cmp	r3, #3
 8010b7e:	d825      	bhi.n	8010bcc <RCCEx_PLLSAI1_Config+0x140>
 8010b80:	2b01      	cmp	r3, #1
 8010b82:	d002      	beq.n	8010b8a <RCCEx_PLLSAI1_Config+0xfe>
 8010b84:	2b02      	cmp	r3, #2
 8010b86:	d009      	beq.n	8010b9c <RCCEx_PLLSAI1_Config+0x110>
 8010b88:	e020      	b.n	8010bcc <RCCEx_PLLSAI1_Config+0x140>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8010b8a:	4b72      	ldr	r3, [pc, #456]	; (8010d54 <RCCEx_PLLSAI1_Config+0x2c8>)
 8010b8c:	681b      	ldr	r3, [r3, #0]
 8010b8e:	f003 0302 	and.w	r3, r3, #2
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	d11d      	bne.n	8010bd2 <RCCEx_PLLSAI1_Config+0x146>
      {
        status = HAL_ERROR;
 8010b96:	2301      	movs	r3, #1
 8010b98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8010b9a:	e01a      	b.n	8010bd2 <RCCEx_PLLSAI1_Config+0x146>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8010b9c:	4b6d      	ldr	r3, [pc, #436]	; (8010d54 <RCCEx_PLLSAI1_Config+0x2c8>)
 8010b9e:	681b      	ldr	r3, [r3, #0]
 8010ba0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	d116      	bne.n	8010bd6 <RCCEx_PLLSAI1_Config+0x14a>
      {
        status = HAL_ERROR;
 8010ba8:	2301      	movs	r3, #1
 8010baa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8010bac:	e013      	b.n	8010bd6 <RCCEx_PLLSAI1_Config+0x14a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8010bae:	4b69      	ldr	r3, [pc, #420]	; (8010d54 <RCCEx_PLLSAI1_Config+0x2c8>)
 8010bb0:	681b      	ldr	r3, [r3, #0]
 8010bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	d10f      	bne.n	8010bda <RCCEx_PLLSAI1_Config+0x14e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8010bba:	4b66      	ldr	r3, [pc, #408]	; (8010d54 <RCCEx_PLLSAI1_Config+0x2c8>)
 8010bbc:	681b      	ldr	r3, [r3, #0]
 8010bbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	d109      	bne.n	8010bda <RCCEx_PLLSAI1_Config+0x14e>
        {
          status = HAL_ERROR;
 8010bc6:	2301      	movs	r3, #1
 8010bc8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8010bca:	e006      	b.n	8010bda <RCCEx_PLLSAI1_Config+0x14e>
    default:
      status = HAL_ERROR;
 8010bcc:	2301      	movs	r3, #1
 8010bce:	73fb      	strb	r3, [r7, #15]
      break;
 8010bd0:	e004      	b.n	8010bdc <RCCEx_PLLSAI1_Config+0x150>
      break;
 8010bd2:	bf00      	nop
 8010bd4:	e002      	b.n	8010bdc <RCCEx_PLLSAI1_Config+0x150>
      break;
 8010bd6:	bf00      	nop
 8010bd8:	e000      	b.n	8010bdc <RCCEx_PLLSAI1_Config+0x150>
      break;
 8010bda:	bf00      	nop
    }

    if(status == HAL_OK)
 8010bdc:	7bfb      	ldrb	r3, [r7, #15]
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d10d      	bne.n	8010bfe <RCCEx_PLLSAI1_Config+0x172>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8010be2:	4b5c      	ldr	r3, [pc, #368]	; (8010d54 <RCCEx_PLLSAI1_Config+0x2c8>)
 8010be4:	68db      	ldr	r3, [r3, #12]
 8010be6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	6819      	ldr	r1, [r3, #0]
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	685b      	ldr	r3, [r3, #4]
 8010bf2:	3b01      	subs	r3, #1
 8010bf4:	011b      	lsls	r3, r3, #4
 8010bf6:	430b      	orrs	r3, r1
 8010bf8:	4956      	ldr	r1, [pc, #344]	; (8010d54 <RCCEx_PLLSAI1_Config+0x2c8>)
 8010bfa:	4313      	orrs	r3, r2
 8010bfc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8010bfe:	7bfb      	ldrb	r3, [r7, #15]
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	f040 80b9 	bne.w	8010d78 <RCCEx_PLLSAI1_Config+0x2ec>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8010c06:	4b53      	ldr	r3, [pc, #332]	; (8010d54 <RCCEx_PLLSAI1_Config+0x2c8>)
 8010c08:	681b      	ldr	r3, [r3, #0]
 8010c0a:	4a52      	ldr	r2, [pc, #328]	; (8010d54 <RCCEx_PLLSAI1_Config+0x2c8>)
 8010c0c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8010c10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8010c12:	f7f8 f951 	bl	8008eb8 <HAL_GetTick>
 8010c16:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8010c18:	e009      	b.n	8010c2e <RCCEx_PLLSAI1_Config+0x1a2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8010c1a:	f7f8 f94d 	bl	8008eb8 <HAL_GetTick>
 8010c1e:	4602      	mov	r2, r0
 8010c20:	68bb      	ldr	r3, [r7, #8]
 8010c22:	1ad3      	subs	r3, r2, r3
 8010c24:	2b02      	cmp	r3, #2
 8010c26:	d902      	bls.n	8010c2e <RCCEx_PLLSAI1_Config+0x1a2>
      {
        status = HAL_TIMEOUT;
 8010c28:	2303      	movs	r3, #3
 8010c2a:	73fb      	strb	r3, [r7, #15]
        break;
 8010c2c:	e005      	b.n	8010c3a <RCCEx_PLLSAI1_Config+0x1ae>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8010c2e:	4b49      	ldr	r3, [pc, #292]	; (8010d54 <RCCEx_PLLSAI1_Config+0x2c8>)
 8010c30:	681b      	ldr	r3, [r3, #0]
 8010c32:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d1ef      	bne.n	8010c1a <RCCEx_PLLSAI1_Config+0x18e>
      }
    }

    if(status == HAL_OK)
 8010c3a:	7bfb      	ldrb	r3, [r7, #15]
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	f040 809b 	bne.w	8010d78 <RCCEx_PLLSAI1_Config+0x2ec>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8010c42:	683b      	ldr	r3, [r7, #0]
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d11d      	bne.n	8010c84 <RCCEx_PLLSAI1_Config+0x1f8>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	68db      	ldr	r3, [r3, #12]
 8010c4c:	2b01      	cmp	r3, #1
 8010c4e:	d903      	bls.n	8010c58 <RCCEx_PLLSAI1_Config+0x1cc>
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	68db      	ldr	r3, [r3, #12]
 8010c54:	2b1f      	cmp	r3, #31
 8010c56:	d904      	bls.n	8010c62 <RCCEx_PLLSAI1_Config+0x1d6>
 8010c58:	f640 31b4 	movw	r1, #2996	; 0xbb4
 8010c5c:	483c      	ldr	r0, [pc, #240]	; (8010d50 <RCCEx_PLLSAI1_Config+0x2c4>)
 8010c5e:	f7f3 fc99 	bl	8004594 <assert_failed>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8010c62:	4b3c      	ldr	r3, [pc, #240]	; (8010d54 <RCCEx_PLLSAI1_Config+0x2c8>)
 8010c64:	691b      	ldr	r3, [r3, #16]
 8010c66:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8010c6a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8010c6e:	687a      	ldr	r2, [r7, #4]
 8010c70:	6892      	ldr	r2, [r2, #8]
 8010c72:	0211      	lsls	r1, r2, #8
 8010c74:	687a      	ldr	r2, [r7, #4]
 8010c76:	68d2      	ldr	r2, [r2, #12]
 8010c78:	06d2      	lsls	r2, r2, #27
 8010c7a:	430a      	orrs	r2, r1
 8010c7c:	4935      	ldr	r1, [pc, #212]	; (8010d54 <RCCEx_PLLSAI1_Config+0x2c8>)
 8010c7e:	4313      	orrs	r3, r2
 8010c80:	610b      	str	r3, [r1, #16]
 8010c82:	e051      	b.n	8010d28 <RCCEx_PLLSAI1_Config+0x29c>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8010c84:	683b      	ldr	r3, [r7, #0]
 8010c86:	2b01      	cmp	r3, #1
 8010c88:	d127      	bne.n	8010cda <RCCEx_PLLSAI1_Config+0x24e>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	691b      	ldr	r3, [r3, #16]
 8010c8e:	2b02      	cmp	r3, #2
 8010c90:	d010      	beq.n	8010cb4 <RCCEx_PLLSAI1_Config+0x228>
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	691b      	ldr	r3, [r3, #16]
 8010c96:	2b04      	cmp	r3, #4
 8010c98:	d00c      	beq.n	8010cb4 <RCCEx_PLLSAI1_Config+0x228>
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	691b      	ldr	r3, [r3, #16]
 8010c9e:	2b06      	cmp	r3, #6
 8010ca0:	d008      	beq.n	8010cb4 <RCCEx_PLLSAI1_Config+0x228>
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	691b      	ldr	r3, [r3, #16]
 8010ca6:	2b08      	cmp	r3, #8
 8010ca8:	d004      	beq.n	8010cb4 <RCCEx_PLLSAI1_Config+0x228>
 8010caa:	f640 31d8 	movw	r1, #3032	; 0xbd8
 8010cae:	4828      	ldr	r0, [pc, #160]	; (8010d50 <RCCEx_PLLSAI1_Config+0x2c4>)
 8010cb0:	f7f3 fc70 	bl	8004594 <assert_failed>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8010cb4:	4b27      	ldr	r3, [pc, #156]	; (8010d54 <RCCEx_PLLSAI1_Config+0x2c8>)
 8010cb6:	691b      	ldr	r3, [r3, #16]
 8010cb8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8010cbc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8010cc0:	687a      	ldr	r2, [r7, #4]
 8010cc2:	6892      	ldr	r2, [r2, #8]
 8010cc4:	0211      	lsls	r1, r2, #8
 8010cc6:	687a      	ldr	r2, [r7, #4]
 8010cc8:	6912      	ldr	r2, [r2, #16]
 8010cca:	0852      	lsrs	r2, r2, #1
 8010ccc:	3a01      	subs	r2, #1
 8010cce:	0552      	lsls	r2, r2, #21
 8010cd0:	430a      	orrs	r2, r1
 8010cd2:	4920      	ldr	r1, [pc, #128]	; (8010d54 <RCCEx_PLLSAI1_Config+0x2c8>)
 8010cd4:	4313      	orrs	r3, r2
 8010cd6:	610b      	str	r3, [r1, #16]
 8010cd8:	e026      	b.n	8010d28 <RCCEx_PLLSAI1_Config+0x29c>
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	695b      	ldr	r3, [r3, #20]
 8010cde:	2b02      	cmp	r3, #2
 8010ce0:	d010      	beq.n	8010d04 <RCCEx_PLLSAI1_Config+0x278>
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	695b      	ldr	r3, [r3, #20]
 8010ce6:	2b04      	cmp	r3, #4
 8010ce8:	d00c      	beq.n	8010d04 <RCCEx_PLLSAI1_Config+0x278>
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	695b      	ldr	r3, [r3, #20]
 8010cee:	2b06      	cmp	r3, #6
 8010cf0:	d008      	beq.n	8010d04 <RCCEx_PLLSAI1_Config+0x278>
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	695b      	ldr	r3, [r3, #20]
 8010cf6:	2b08      	cmp	r3, #8
 8010cf8:	d004      	beq.n	8010d04 <RCCEx_PLLSAI1_Config+0x278>
 8010cfa:	f640 31ea 	movw	r1, #3050	; 0xbea
 8010cfe:	4814      	ldr	r0, [pc, #80]	; (8010d50 <RCCEx_PLLSAI1_Config+0x2c4>)
 8010d00:	f7f3 fc48 	bl	8004594 <assert_failed>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8010d04:	4b13      	ldr	r3, [pc, #76]	; (8010d54 <RCCEx_PLLSAI1_Config+0x2c8>)
 8010d06:	691b      	ldr	r3, [r3, #16]
 8010d08:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8010d0c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8010d10:	687a      	ldr	r2, [r7, #4]
 8010d12:	6892      	ldr	r2, [r2, #8]
 8010d14:	0211      	lsls	r1, r2, #8
 8010d16:	687a      	ldr	r2, [r7, #4]
 8010d18:	6952      	ldr	r2, [r2, #20]
 8010d1a:	0852      	lsrs	r2, r2, #1
 8010d1c:	3a01      	subs	r2, #1
 8010d1e:	0652      	lsls	r2, r2, #25
 8010d20:	430a      	orrs	r2, r1
 8010d22:	490c      	ldr	r1, [pc, #48]	; (8010d54 <RCCEx_PLLSAI1_Config+0x2c8>)
 8010d24:	4313      	orrs	r3, r2
 8010d26:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8010d28:	4b0a      	ldr	r3, [pc, #40]	; (8010d54 <RCCEx_PLLSAI1_Config+0x2c8>)
 8010d2a:	681b      	ldr	r3, [r3, #0]
 8010d2c:	4a09      	ldr	r2, [pc, #36]	; (8010d54 <RCCEx_PLLSAI1_Config+0x2c8>)
 8010d2e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8010d32:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010d34:	f7f8 f8c0 	bl	8008eb8 <HAL_GetTick>
 8010d38:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8010d3a:	e00d      	b.n	8010d58 <RCCEx_PLLSAI1_Config+0x2cc>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8010d3c:	f7f8 f8bc 	bl	8008eb8 <HAL_GetTick>
 8010d40:	4602      	mov	r2, r0
 8010d42:	68bb      	ldr	r3, [r7, #8]
 8010d44:	1ad3      	subs	r3, r2, r3
 8010d46:	2b02      	cmp	r3, #2
 8010d48:	d906      	bls.n	8010d58 <RCCEx_PLLSAI1_Config+0x2cc>
        {
          status = HAL_TIMEOUT;
 8010d4a:	2303      	movs	r3, #3
 8010d4c:	73fb      	strb	r3, [r7, #15]
          break;
 8010d4e:	e009      	b.n	8010d64 <RCCEx_PLLSAI1_Config+0x2d8>
 8010d50:	08018e68 	.word	0x08018e68
 8010d54:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8010d58:	4b0a      	ldr	r3, [pc, #40]	; (8010d84 <RCCEx_PLLSAI1_Config+0x2f8>)
 8010d5a:	681b      	ldr	r3, [r3, #0]
 8010d5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	d0eb      	beq.n	8010d3c <RCCEx_PLLSAI1_Config+0x2b0>
        }
      }

      if(status == HAL_OK)
 8010d64:	7bfb      	ldrb	r3, [r7, #15]
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d106      	bne.n	8010d78 <RCCEx_PLLSAI1_Config+0x2ec>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8010d6a:	4b06      	ldr	r3, [pc, #24]	; (8010d84 <RCCEx_PLLSAI1_Config+0x2f8>)
 8010d6c:	691a      	ldr	r2, [r3, #16]
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	699b      	ldr	r3, [r3, #24]
 8010d72:	4904      	ldr	r1, [pc, #16]	; (8010d84 <RCCEx_PLLSAI1_Config+0x2f8>)
 8010d74:	4313      	orrs	r3, r2
 8010d76:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8010d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d7a:	4618      	mov	r0, r3
 8010d7c:	3710      	adds	r7, #16
 8010d7e:	46bd      	mov	sp, r7
 8010d80:	bd80      	pop	{r7, pc}
 8010d82:	bf00      	nop
 8010d84:	40021000 	.word	0x40021000

08010d88 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8010d88:	b580      	push	{r7, lr}
 8010d8a:	b084      	sub	sp, #16
 8010d8c:	af00      	add	r7, sp, #0
 8010d8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8010d90:	2301      	movs	r3, #1
 8010d92:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	f000 80d5 	beq.w	8010f46 <HAL_RTC_Init+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	681b      	ldr	r3, [r3, #0]
 8010da0:	4a6b      	ldr	r2, [pc, #428]	; (8010f50 <HAL_RTC_Init+0x1c8>)
 8010da2:	4293      	cmp	r3, r2
 8010da4:	d003      	beq.n	8010dae <HAL_RTC_Init+0x26>
 8010da6:	21fe      	movs	r1, #254	; 0xfe
 8010da8:	486a      	ldr	r0, [pc, #424]	; (8010f54 <HAL_RTC_Init+0x1cc>)
 8010daa:	f7f3 fbf3 	bl	8004594 <assert_failed>
    assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	685b      	ldr	r3, [r3, #4]
 8010db2:	2b40      	cmp	r3, #64	; 0x40
 8010db4:	d007      	beq.n	8010dc6 <HAL_RTC_Init+0x3e>
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	685b      	ldr	r3, [r3, #4]
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	d003      	beq.n	8010dc6 <HAL_RTC_Init+0x3e>
 8010dbe:	21ff      	movs	r1, #255	; 0xff
 8010dc0:	4864      	ldr	r0, [pc, #400]	; (8010f54 <HAL_RTC_Init+0x1cc>)
 8010dc2:	f7f3 fbe7 	bl	8004594 <assert_failed>
    assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	689b      	ldr	r3, [r3, #8]
 8010dca:	2b7f      	cmp	r3, #127	; 0x7f
 8010dcc:	d904      	bls.n	8010dd8 <HAL_RTC_Init+0x50>
 8010dce:	f44f 7180 	mov.w	r1, #256	; 0x100
 8010dd2:	4860      	ldr	r0, [pc, #384]	; (8010f54 <HAL_RTC_Init+0x1cc>)
 8010dd4:	f7f3 fbde 	bl	8004594 <assert_failed>
    assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	68db      	ldr	r3, [r3, #12]
 8010ddc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010de0:	d304      	bcc.n	8010dec <HAL_RTC_Init+0x64>
 8010de2:	f240 1101 	movw	r1, #257	; 0x101
 8010de6:	485b      	ldr	r0, [pc, #364]	; (8010f54 <HAL_RTC_Init+0x1cc>)
 8010de8:	f7f3 fbd4 	bl	8004594 <assert_failed>
    assert_param(IS_RTC_OUTPUT(hrtc->Init.OutPut));
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	691b      	ldr	r3, [r3, #16]
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d013      	beq.n	8010e1c <HAL_RTC_Init+0x94>
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	691b      	ldr	r3, [r3, #16]
 8010df8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010dfc:	d00e      	beq.n	8010e1c <HAL_RTC_Init+0x94>
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	691b      	ldr	r3, [r3, #16]
 8010e02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010e06:	d009      	beq.n	8010e1c <HAL_RTC_Init+0x94>
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	691b      	ldr	r3, [r3, #16]
 8010e0c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8010e10:	d004      	beq.n	8010e1c <HAL_RTC_Init+0x94>
 8010e12:	f44f 7181 	mov.w	r1, #258	; 0x102
 8010e16:	484f      	ldr	r0, [pc, #316]	; (8010f54 <HAL_RTC_Init+0x1cc>)
 8010e18:	f7f3 fbbc 	bl	8004594 <assert_failed>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	695b      	ldr	r3, [r3, #20]
 8010e20:	2b00      	cmp	r3, #0
 8010e22:	d008      	beq.n	8010e36 <HAL_RTC_Init+0xae>
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	695b      	ldr	r3, [r3, #20]
 8010e28:	2b02      	cmp	r3, #2
 8010e2a:	d004      	beq.n	8010e36 <HAL_RTC_Init+0xae>
 8010e2c:	f240 1103 	movw	r1, #259	; 0x103
 8010e30:	4848      	ldr	r0, [pc, #288]	; (8010f54 <HAL_RTC_Init+0x1cc>)
 8010e32:	f7f3 fbaf 	bl	8004594 <assert_failed>
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	699b      	ldr	r3, [r3, #24]
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	d009      	beq.n	8010e52 <HAL_RTC_Init+0xca>
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	699b      	ldr	r3, [r3, #24]
 8010e42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010e46:	d004      	beq.n	8010e52 <HAL_RTC_Init+0xca>
 8010e48:	f44f 7182 	mov.w	r1, #260	; 0x104
 8010e4c:	4841      	ldr	r0, [pc, #260]	; (8010f54 <HAL_RTC_Init+0x1cc>)
 8010e4e:	f7f3 fba1 	bl	8004594 <assert_failed>
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	69db      	ldr	r3, [r3, #28]
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	d008      	beq.n	8010e6c <HAL_RTC_Init+0xe4>
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	69db      	ldr	r3, [r3, #28]
 8010e5e:	2b01      	cmp	r3, #1
 8010e60:	d004      	beq.n	8010e6c <HAL_RTC_Init+0xe4>
 8010e62:	f240 1105 	movw	r1, #261	; 0x105
 8010e66:	483b      	ldr	r0, [pc, #236]	; (8010f54 <HAL_RTC_Init+0x1cc>)
 8010e68:	f7f3 fb94 	bl	8004594 <assert_failed>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8010e72:	b2db      	uxtb	r3, r3
 8010e74:	2b00      	cmp	r3, #0
 8010e76:	d106      	bne.n	8010e86 <HAL_RTC_Init+0xfe>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	2200      	movs	r2, #0
 8010e7c:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8010e80:	6878      	ldr	r0, [r7, #4]
 8010e82:	f7f5 f9f9 	bl	8006278 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	2202      	movs	r2, #2
 8010e8a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	681b      	ldr	r3, [r3, #0]
 8010e92:	22ca      	movs	r2, #202	; 0xca
 8010e94:	625a      	str	r2, [r3, #36]	; 0x24
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	681b      	ldr	r3, [r3, #0]
 8010e9a:	2253      	movs	r2, #83	; 0x53
 8010e9c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8010e9e:	6878      	ldr	r0, [r7, #4]
 8010ea0:	f000 fba0 	bl	80115e4 <RTC_EnterInitMode>
 8010ea4:	4603      	mov	r3, r0
 8010ea6:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8010ea8:	7bfb      	ldrb	r3, [r7, #15]
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	d14b      	bne.n	8010f46 <HAL_RTC_Init+0x1be>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	681b      	ldr	r3, [r3, #0]
 8010eb2:	689b      	ldr	r3, [r3, #8]
 8010eb4:	687a      	ldr	r2, [r7, #4]
 8010eb6:	6812      	ldr	r2, [r2, #0]
 8010eb8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010ebc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010ec0:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	681b      	ldr	r3, [r3, #0]
 8010ec6:	6899      	ldr	r1, [r3, #8]
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	685a      	ldr	r2, [r3, #4]
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	691b      	ldr	r3, [r3, #16]
 8010ed0:	431a      	orrs	r2, r3
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	699b      	ldr	r3, [r3, #24]
 8010ed6:	431a      	orrs	r2, r3
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	681b      	ldr	r3, [r3, #0]
 8010edc:	430a      	orrs	r2, r1
 8010ede:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	681b      	ldr	r3, [r3, #0]
 8010ee4:	687a      	ldr	r2, [r7, #4]
 8010ee6:	68d2      	ldr	r2, [r2, #12]
 8010ee8:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	681b      	ldr	r3, [r3, #0]
 8010eee:	6919      	ldr	r1, [r3, #16]
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	689b      	ldr	r3, [r3, #8]
 8010ef4:	041a      	lsls	r2, r3, #16
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	681b      	ldr	r3, [r3, #0]
 8010efa:	430a      	orrs	r2, r1
 8010efc:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8010efe:	6878      	ldr	r0, [r7, #4]
 8010f00:	f000 fba4 	bl	801164c <RTC_ExitInitMode>
 8010f04:	4603      	mov	r3, r0
 8010f06:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8010f08:	7bfb      	ldrb	r3, [r7, #15]
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d11b      	bne.n	8010f46 <HAL_RTC_Init+0x1be>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	681b      	ldr	r3, [r3, #0]
 8010f12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	681b      	ldr	r3, [r3, #0]
 8010f18:	f022 0203 	bic.w	r2, r2, #3
 8010f1c:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	681b      	ldr	r3, [r3, #0]
 8010f22:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	69da      	ldr	r2, [r3, #28]
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	695b      	ldr	r3, [r3, #20]
 8010f2c:	431a      	orrs	r2, r3
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	681b      	ldr	r3, [r3, #0]
 8010f32:	430a      	orrs	r2, r1
 8010f34:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	681b      	ldr	r3, [r3, #0]
 8010f3a:	22ff      	movs	r2, #255	; 0xff
 8010f3c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	2201      	movs	r2, #1
 8010f42:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8010f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f48:	4618      	mov	r0, r3
 8010f4a:	3710      	adds	r7, #16
 8010f4c:	46bd      	mov	sp, r7
 8010f4e:	bd80      	pop	{r7, pc}
 8010f50:	40002800 	.word	0x40002800
 8010f54:	08018ea4 	.word	0x08018ea4

08010f58 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8010f58:	b590      	push	{r4, r7, lr}
 8010f5a:	b087      	sub	sp, #28
 8010f5c:	af00      	add	r7, sp, #0
 8010f5e:	60f8      	str	r0, [r7, #12]
 8010f60:	60b9      	str	r1, [r7, #8]
 8010f62:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	d007      	beq.n	8010f7a <HAL_RTC_SetTime+0x22>
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	2b01      	cmp	r3, #1
 8010f6e:	d004      	beq.n	8010f7a <HAL_RTC_SetTime+0x22>
 8010f70:	f44f 61b5 	mov.w	r1, #1448	; 0x5a8
 8010f74:	489d      	ldr	r0, [pc, #628]	; (80111ec <HAL_RTC_SetTime+0x294>)
 8010f76:	f7f3 fb0d 	bl	8004594 <assert_failed>
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
 8010f7a:	68bb      	ldr	r3, [r7, #8]
 8010f7c:	68db      	ldr	r3, [r3, #12]
 8010f7e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010f82:	d00d      	beq.n	8010fa0 <HAL_RTC_SetTime+0x48>
 8010f84:	68bb      	ldr	r3, [r7, #8]
 8010f86:	68db      	ldr	r3, [r3, #12]
 8010f88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010f8c:	d008      	beq.n	8010fa0 <HAL_RTC_SetTime+0x48>
 8010f8e:	68bb      	ldr	r3, [r7, #8]
 8010f90:	68db      	ldr	r3, [r3, #12]
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	d004      	beq.n	8010fa0 <HAL_RTC_SetTime+0x48>
 8010f96:	f240 51a9 	movw	r1, #1449	; 0x5a9
 8010f9a:	4894      	ldr	r0, [pc, #592]	; (80111ec <HAL_RTC_SetTime+0x294>)
 8010f9c:	f7f3 fafa 	bl	8004594 <assert_failed>
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
 8010fa0:	68bb      	ldr	r3, [r7, #8]
 8010fa2:	691b      	ldr	r3, [r3, #16]
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	d009      	beq.n	8010fbc <HAL_RTC_SetTime+0x64>
 8010fa8:	68bb      	ldr	r3, [r7, #8]
 8010faa:	691b      	ldr	r3, [r3, #16]
 8010fac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8010fb0:	d004      	beq.n	8010fbc <HAL_RTC_SetTime+0x64>
 8010fb2:	f240 51aa 	movw	r1, #1450	; 0x5aa
 8010fb6:	488d      	ldr	r0, [pc, #564]	; (80111ec <HAL_RTC_SetTime+0x294>)
 8010fb8:	f7f3 faec 	bl	8004594 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8010fbc:	68fb      	ldr	r3, [r7, #12]
 8010fbe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010fc2:	2b01      	cmp	r3, #1
 8010fc4:	d101      	bne.n	8010fca <HAL_RTC_SetTime+0x72>
 8010fc6:	2302      	movs	r3, #2
 8010fc8:	e10c      	b.n	80111e4 <HAL_RTC_SetTime+0x28c>
 8010fca:	68fb      	ldr	r3, [r7, #12]
 8010fcc:	2201      	movs	r2, #1
 8010fce:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8010fd2:	68fb      	ldr	r3, [r7, #12]
 8010fd4:	2202      	movs	r2, #2
 8010fd6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8010fda:	68fb      	ldr	r3, [r7, #12]
 8010fdc:	681b      	ldr	r3, [r3, #0]
 8010fde:	22ca      	movs	r2, #202	; 0xca
 8010fe0:	625a      	str	r2, [r3, #36]	; 0x24
 8010fe2:	68fb      	ldr	r3, [r7, #12]
 8010fe4:	681b      	ldr	r3, [r3, #0]
 8010fe6:	2253      	movs	r2, #83	; 0x53
 8010fe8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8010fea:	68f8      	ldr	r0, [r7, #12]
 8010fec:	f000 fafa 	bl	80115e4 <RTC_EnterInitMode>
 8010ff0:	4603      	mov	r3, r0
 8010ff2:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8010ff4:	7cfb      	ldrb	r3, [r7, #19]
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	f040 80e4 	bne.w	80111c4 <HAL_RTC_SetTime+0x26c>
  {
    if (Format == RTC_FORMAT_BIN)
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	d15c      	bne.n	80110bc <HAL_RTC_SetTime+0x164>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8011002:	68fb      	ldr	r3, [r7, #12]
 8011004:	681b      	ldr	r3, [r3, #0]
 8011006:	689b      	ldr	r3, [r3, #8]
 8011008:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801100c:	2b00      	cmp	r3, #0
 801100e:	d01a      	beq.n	8011046 <HAL_RTC_SetTime+0xee>
      {
        assert_param(IS_RTC_HOUR12(sTime->Hours));
 8011010:	68bb      	ldr	r3, [r7, #8]
 8011012:	781b      	ldrb	r3, [r3, #0]
 8011014:	2b00      	cmp	r3, #0
 8011016:	d003      	beq.n	8011020 <HAL_RTC_SetTime+0xc8>
 8011018:	68bb      	ldr	r3, [r7, #8]
 801101a:	781b      	ldrb	r3, [r3, #0]
 801101c:	2b0c      	cmp	r3, #12
 801101e:	d904      	bls.n	801102a <HAL_RTC_SetTime+0xd2>
 8011020:	f240 51bc 	movw	r1, #1468	; 0x5bc
 8011024:	4871      	ldr	r0, [pc, #452]	; (80111ec <HAL_RTC_SetTime+0x294>)
 8011026:	f7f3 fab5 	bl	8004594 <assert_failed>
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 801102a:	68bb      	ldr	r3, [r7, #8]
 801102c:	78db      	ldrb	r3, [r3, #3]
 801102e:	2b00      	cmp	r3, #0
 8011030:	d015      	beq.n	801105e <HAL_RTC_SetTime+0x106>
 8011032:	68bb      	ldr	r3, [r7, #8]
 8011034:	78db      	ldrb	r3, [r3, #3]
 8011036:	2b01      	cmp	r3, #1
 8011038:	d011      	beq.n	801105e <HAL_RTC_SetTime+0x106>
 801103a:	f240 51bd 	movw	r1, #1469	; 0x5bd
 801103e:	486b      	ldr	r0, [pc, #428]	; (80111ec <HAL_RTC_SetTime+0x294>)
 8011040:	f7f3 faa8 	bl	8004594 <assert_failed>
 8011044:	e00b      	b.n	801105e <HAL_RTC_SetTime+0x106>
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8011046:	68bb      	ldr	r3, [r7, #8]
 8011048:	2200      	movs	r2, #0
 801104a:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
 801104c:	68bb      	ldr	r3, [r7, #8]
 801104e:	781b      	ldrb	r3, [r3, #0]
 8011050:	2b17      	cmp	r3, #23
 8011052:	d904      	bls.n	801105e <HAL_RTC_SetTime+0x106>
 8011054:	f240 51c2 	movw	r1, #1474	; 0x5c2
 8011058:	4864      	ldr	r0, [pc, #400]	; (80111ec <HAL_RTC_SetTime+0x294>)
 801105a:	f7f3 fa9b 	bl	8004594 <assert_failed>
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
 801105e:	68bb      	ldr	r3, [r7, #8]
 8011060:	785b      	ldrb	r3, [r3, #1]
 8011062:	2b3b      	cmp	r3, #59	; 0x3b
 8011064:	d904      	bls.n	8011070 <HAL_RTC_SetTime+0x118>
 8011066:	f240 51c4 	movw	r1, #1476	; 0x5c4
 801106a:	4860      	ldr	r0, [pc, #384]	; (80111ec <HAL_RTC_SetTime+0x294>)
 801106c:	f7f3 fa92 	bl	8004594 <assert_failed>
      assert_param(IS_RTC_SECONDS(sTime->Seconds));
 8011070:	68bb      	ldr	r3, [r7, #8]
 8011072:	789b      	ldrb	r3, [r3, #2]
 8011074:	2b3b      	cmp	r3, #59	; 0x3b
 8011076:	d904      	bls.n	8011082 <HAL_RTC_SetTime+0x12a>
 8011078:	f240 51c5 	movw	r1, #1477	; 0x5c5
 801107c:	485b      	ldr	r0, [pc, #364]	; (80111ec <HAL_RTC_SetTime+0x294>)
 801107e:	f7f3 fa89 	bl	8004594 <assert_failed>

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8011082:	68bb      	ldr	r3, [r7, #8]
 8011084:	781b      	ldrb	r3, [r3, #0]
 8011086:	4618      	mov	r0, r3
 8011088:	f000 fb1e 	bl	80116c8 <RTC_ByteToBcd2>
 801108c:	4603      	mov	r3, r0
 801108e:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8011090:	68bb      	ldr	r3, [r7, #8]
 8011092:	785b      	ldrb	r3, [r3, #1]
 8011094:	4618      	mov	r0, r3
 8011096:	f000 fb17 	bl	80116c8 <RTC_ByteToBcd2>
 801109a:	4603      	mov	r3, r0
 801109c:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 801109e:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80110a0:	68bb      	ldr	r3, [r7, #8]
 80110a2:	789b      	ldrb	r3, [r3, #2]
 80110a4:	4618      	mov	r0, r3
 80110a6:	f000 fb0f 	bl	80116c8 <RTC_ByteToBcd2>
 80110aa:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80110ac:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80110b0:	68bb      	ldr	r3, [r7, #8]
 80110b2:	78db      	ldrb	r3, [r3, #3]
 80110b4:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80110b6:	4313      	orrs	r3, r2
 80110b8:	617b      	str	r3, [r7, #20]
 80110ba:	e062      	b.n	8011182 <HAL_RTC_SetTime+0x22a>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80110bc:	68fb      	ldr	r3, [r7, #12]
 80110be:	681b      	ldr	r3, [r3, #0]
 80110c0:	689b      	ldr	r3, [r3, #8]
 80110c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d022      	beq.n	8011110 <HAL_RTC_SetTime+0x1b8>
      {
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
 80110ca:	68bb      	ldr	r3, [r7, #8]
 80110cc:	781b      	ldrb	r3, [r3, #0]
 80110ce:	4618      	mov	r0, r3
 80110d0:	f000 fb1a 	bl	8011708 <RTC_Bcd2ToByte>
 80110d4:	4603      	mov	r3, r0
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	d007      	beq.n	80110ea <HAL_RTC_SetTime+0x192>
 80110da:	68bb      	ldr	r3, [r7, #8]
 80110dc:	781b      	ldrb	r3, [r3, #0]
 80110de:	4618      	mov	r0, r3
 80110e0:	f000 fb12 	bl	8011708 <RTC_Bcd2ToByte>
 80110e4:	4603      	mov	r3, r0
 80110e6:	2b0c      	cmp	r3, #12
 80110e8:	d904      	bls.n	80110f4 <HAL_RTC_SetTime+0x19c>
 80110ea:	f44f 61ba 	mov.w	r1, #1488	; 0x5d0
 80110ee:	483f      	ldr	r0, [pc, #252]	; (80111ec <HAL_RTC_SetTime+0x294>)
 80110f0:	f7f3 fa50 	bl	8004594 <assert_failed>
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 80110f4:	68bb      	ldr	r3, [r7, #8]
 80110f6:	78db      	ldrb	r3, [r3, #3]
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	d019      	beq.n	8011130 <HAL_RTC_SetTime+0x1d8>
 80110fc:	68bb      	ldr	r3, [r7, #8]
 80110fe:	78db      	ldrb	r3, [r3, #3]
 8011100:	2b01      	cmp	r3, #1
 8011102:	d015      	beq.n	8011130 <HAL_RTC_SetTime+0x1d8>
 8011104:	f240 51d1 	movw	r1, #1489	; 0x5d1
 8011108:	4838      	ldr	r0, [pc, #224]	; (80111ec <HAL_RTC_SetTime+0x294>)
 801110a:	f7f3 fa43 	bl	8004594 <assert_failed>
 801110e:	e00f      	b.n	8011130 <HAL_RTC_SetTime+0x1d8>
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8011110:	68bb      	ldr	r3, [r7, #8]
 8011112:	2200      	movs	r2, #0
 8011114:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 8011116:	68bb      	ldr	r3, [r7, #8]
 8011118:	781b      	ldrb	r3, [r3, #0]
 801111a:	4618      	mov	r0, r3
 801111c:	f000 faf4 	bl	8011708 <RTC_Bcd2ToByte>
 8011120:	4603      	mov	r3, r0
 8011122:	2b17      	cmp	r3, #23
 8011124:	d904      	bls.n	8011130 <HAL_RTC_SetTime+0x1d8>
 8011126:	f240 51d6 	movw	r1, #1494	; 0x5d6
 801112a:	4830      	ldr	r0, [pc, #192]	; (80111ec <HAL_RTC_SetTime+0x294>)
 801112c:	f7f3 fa32 	bl	8004594 <assert_failed>
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 8011130:	68bb      	ldr	r3, [r7, #8]
 8011132:	785b      	ldrb	r3, [r3, #1]
 8011134:	4618      	mov	r0, r3
 8011136:	f000 fae7 	bl	8011708 <RTC_Bcd2ToByte>
 801113a:	4603      	mov	r3, r0
 801113c:	2b3b      	cmp	r3, #59	; 0x3b
 801113e:	d904      	bls.n	801114a <HAL_RTC_SetTime+0x1f2>
 8011140:	f44f 61bb 	mov.w	r1, #1496	; 0x5d8
 8011144:	4829      	ldr	r0, [pc, #164]	; (80111ec <HAL_RTC_SetTime+0x294>)
 8011146:	f7f3 fa25 	bl	8004594 <assert_failed>
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 801114a:	68bb      	ldr	r3, [r7, #8]
 801114c:	789b      	ldrb	r3, [r3, #2]
 801114e:	4618      	mov	r0, r3
 8011150:	f000 fada 	bl	8011708 <RTC_Bcd2ToByte>
 8011154:	4603      	mov	r3, r0
 8011156:	2b3b      	cmp	r3, #59	; 0x3b
 8011158:	d904      	bls.n	8011164 <HAL_RTC_SetTime+0x20c>
 801115a:	f240 51d9 	movw	r1, #1497	; 0x5d9
 801115e:	4823      	ldr	r0, [pc, #140]	; (80111ec <HAL_RTC_SetTime+0x294>)
 8011160:	f7f3 fa18 	bl	8004594 <assert_failed>
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8011164:	68bb      	ldr	r3, [r7, #8]
 8011166:	781b      	ldrb	r3, [r3, #0]
 8011168:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 801116a:	68bb      	ldr	r3, [r7, #8]
 801116c:	785b      	ldrb	r3, [r3, #1]
 801116e:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8011170:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8011172:	68ba      	ldr	r2, [r7, #8]
 8011174:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8011176:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8011178:	68bb      	ldr	r3, [r7, #8]
 801117a:	78db      	ldrb	r3, [r3, #3]
 801117c:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 801117e:	4313      	orrs	r3, r2
 8011180:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8011182:	68fb      	ldr	r3, [r7, #12]
 8011184:	681a      	ldr	r2, [r3, #0]
 8011186:	697b      	ldr	r3, [r7, #20]
 8011188:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 801118c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8011190:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8011192:	68fb      	ldr	r3, [r7, #12]
 8011194:	681b      	ldr	r3, [r3, #0]
 8011196:	689a      	ldr	r2, [r3, #8]
 8011198:	68fb      	ldr	r3, [r7, #12]
 801119a:	681b      	ldr	r3, [r3, #0]
 801119c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80111a0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80111a2:	68fb      	ldr	r3, [r7, #12]
 80111a4:	681b      	ldr	r3, [r3, #0]
 80111a6:	6899      	ldr	r1, [r3, #8]
 80111a8:	68bb      	ldr	r3, [r7, #8]
 80111aa:	68da      	ldr	r2, [r3, #12]
 80111ac:	68bb      	ldr	r3, [r7, #8]
 80111ae:	691b      	ldr	r3, [r3, #16]
 80111b0:	431a      	orrs	r2, r3
 80111b2:	68fb      	ldr	r3, [r7, #12]
 80111b4:	681b      	ldr	r3, [r3, #0]
 80111b6:	430a      	orrs	r2, r1
 80111b8:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80111ba:	68f8      	ldr	r0, [r7, #12]
 80111bc:	f000 fa46 	bl	801164c <RTC_ExitInitMode>
 80111c0:	4603      	mov	r3, r0
 80111c2:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80111c4:	68fb      	ldr	r3, [r7, #12]
 80111c6:	681b      	ldr	r3, [r3, #0]
 80111c8:	22ff      	movs	r2, #255	; 0xff
 80111ca:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80111cc:	7cfb      	ldrb	r3, [r7, #19]
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	d103      	bne.n	80111da <HAL_RTC_SetTime+0x282>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80111d2:	68fb      	ldr	r3, [r7, #12]
 80111d4:	2201      	movs	r2, #1
 80111d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80111da:	68fb      	ldr	r3, [r7, #12]
 80111dc:	2200      	movs	r2, #0
 80111de:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80111e2:	7cfb      	ldrb	r3, [r7, #19]
}
 80111e4:	4618      	mov	r0, r3
 80111e6:	371c      	adds	r7, #28
 80111e8:	46bd      	mov	sp, r7
 80111ea:	bd90      	pop	{r4, r7, pc}
 80111ec:	08018ea4 	.word	0x08018ea4

080111f0 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80111f0:	b580      	push	{r7, lr}
 80111f2:	b086      	sub	sp, #24
 80111f4:	af00      	add	r7, sp, #0
 80111f6:	60f8      	str	r0, [r7, #12]
 80111f8:	60b9      	str	r1, [r7, #8]
 80111fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d007      	beq.n	8011212 <HAL_RTC_GetTime+0x22>
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	2b01      	cmp	r3, #1
 8011206:	d004      	beq.n	8011212 <HAL_RTC_GetTime+0x22>
 8011208:	f240 6115 	movw	r1, #1557	; 0x615
 801120c:	482c      	ldr	r0, [pc, #176]	; (80112c0 <HAL_RTC_GetTime+0xd0>)
 801120e:	f7f3 f9c1 	bl	8004594 <assert_failed>

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8011212:	68fb      	ldr	r3, [r7, #12]
 8011214:	681b      	ldr	r3, [r3, #0]
 8011216:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011218:	68bb      	ldr	r3, [r7, #8]
 801121a:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 801121c:	68fb      	ldr	r3, [r7, #12]
 801121e:	681b      	ldr	r3, [r3, #0]
 8011220:	691b      	ldr	r3, [r3, #16]
 8011222:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8011226:	68bb      	ldr	r3, [r7, #8]
 8011228:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 801122a:	68fb      	ldr	r3, [r7, #12]
 801122c:	681b      	ldr	r3, [r3, #0]
 801122e:	681b      	ldr	r3, [r3, #0]
 8011230:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8011234:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8011238:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 801123a:	697b      	ldr	r3, [r7, #20]
 801123c:	0c1b      	lsrs	r3, r3, #16
 801123e:	b2db      	uxtb	r3, r3
 8011240:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011244:	b2da      	uxtb	r2, r3
 8011246:	68bb      	ldr	r3, [r7, #8]
 8011248:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 801124a:	697b      	ldr	r3, [r7, #20]
 801124c:	0a1b      	lsrs	r3, r3, #8
 801124e:	b2db      	uxtb	r3, r3
 8011250:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011254:	b2da      	uxtb	r2, r3
 8011256:	68bb      	ldr	r3, [r7, #8]
 8011258:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 801125a:	697b      	ldr	r3, [r7, #20]
 801125c:	b2db      	uxtb	r3, r3
 801125e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011262:	b2da      	uxtb	r2, r3
 8011264:	68bb      	ldr	r3, [r7, #8]
 8011266:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8011268:	697b      	ldr	r3, [r7, #20]
 801126a:	0d9b      	lsrs	r3, r3, #22
 801126c:	b2db      	uxtb	r3, r3
 801126e:	f003 0301 	and.w	r3, r3, #1
 8011272:	b2da      	uxtb	r2, r3
 8011274:	68bb      	ldr	r3, [r7, #8]
 8011276:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	2b00      	cmp	r3, #0
 801127c:	d11a      	bne.n	80112b4 <HAL_RTC_GetTime+0xc4>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 801127e:	68bb      	ldr	r3, [r7, #8]
 8011280:	781b      	ldrb	r3, [r3, #0]
 8011282:	4618      	mov	r0, r3
 8011284:	f000 fa40 	bl	8011708 <RTC_Bcd2ToByte>
 8011288:	4603      	mov	r3, r0
 801128a:	461a      	mov	r2, r3
 801128c:	68bb      	ldr	r3, [r7, #8]
 801128e:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8011290:	68bb      	ldr	r3, [r7, #8]
 8011292:	785b      	ldrb	r3, [r3, #1]
 8011294:	4618      	mov	r0, r3
 8011296:	f000 fa37 	bl	8011708 <RTC_Bcd2ToByte>
 801129a:	4603      	mov	r3, r0
 801129c:	461a      	mov	r2, r3
 801129e:	68bb      	ldr	r3, [r7, #8]
 80112a0:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80112a2:	68bb      	ldr	r3, [r7, #8]
 80112a4:	789b      	ldrb	r3, [r3, #2]
 80112a6:	4618      	mov	r0, r3
 80112a8:	f000 fa2e 	bl	8011708 <RTC_Bcd2ToByte>
 80112ac:	4603      	mov	r3, r0
 80112ae:	461a      	mov	r2, r3
 80112b0:	68bb      	ldr	r3, [r7, #8]
 80112b2:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80112b4:	2300      	movs	r3, #0
}
 80112b6:	4618      	mov	r0, r3
 80112b8:	3718      	adds	r7, #24
 80112ba:	46bd      	mov	sp, r7
 80112bc:	bd80      	pop	{r7, pc}
 80112be:	bf00      	nop
 80112c0:	08018ea4 	.word	0x08018ea4

080112c4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80112c4:	b590      	push	{r4, r7, lr}
 80112c6:	b087      	sub	sp, #28
 80112c8:	af00      	add	r7, sp, #0
 80112ca:	60f8      	str	r0, [r7, #12]
 80112cc:	60b9      	str	r1, [r7, #8]
 80112ce:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	2b00      	cmp	r3, #0
 80112d4:	d007      	beq.n	80112e6 <HAL_RTC_SetDate+0x22>
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	2b01      	cmp	r3, #1
 80112da:	d004      	beq.n	80112e6 <HAL_RTC_SetDate+0x22>
 80112dc:	f240 6142 	movw	r1, #1602	; 0x642
 80112e0:	487f      	ldr	r0, [pc, #508]	; (80114e0 <HAL_RTC_SetDate+0x21c>)
 80112e2:	f7f3 f957 	bl	8004594 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80112e6:	68fb      	ldr	r3, [r7, #12]
 80112e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80112ec:	2b01      	cmp	r3, #1
 80112ee:	d101      	bne.n	80112f4 <HAL_RTC_SetDate+0x30>
 80112f0:	2302      	movs	r3, #2
 80112f2:	e0f0      	b.n	80114d6 <HAL_RTC_SetDate+0x212>
 80112f4:	68fb      	ldr	r3, [r7, #12]
 80112f6:	2201      	movs	r2, #1
 80112f8:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80112fc:	68fb      	ldr	r3, [r7, #12]
 80112fe:	2202      	movs	r2, #2
 8011300:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	2b00      	cmp	r3, #0
 8011308:	d10e      	bne.n	8011328 <HAL_RTC_SetDate+0x64>
 801130a:	68bb      	ldr	r3, [r7, #8]
 801130c:	785b      	ldrb	r3, [r3, #1]
 801130e:	f003 0310 	and.w	r3, r3, #16
 8011312:	2b00      	cmp	r3, #0
 8011314:	d008      	beq.n	8011328 <HAL_RTC_SetDate+0x64>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8011316:	68bb      	ldr	r3, [r7, #8]
 8011318:	785b      	ldrb	r3, [r3, #1]
 801131a:	f023 0310 	bic.w	r3, r3, #16
 801131e:	b2db      	uxtb	r3, r3
 8011320:	330a      	adds	r3, #10
 8011322:	b2da      	uxtb	r2, r3
 8011324:	68bb      	ldr	r3, [r7, #8]
 8011326:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
 8011328:	68bb      	ldr	r3, [r7, #8]
 801132a:	781b      	ldrb	r3, [r3, #0]
 801132c:	2b01      	cmp	r3, #1
 801132e:	d01c      	beq.n	801136a <HAL_RTC_SetDate+0xa6>
 8011330:	68bb      	ldr	r3, [r7, #8]
 8011332:	781b      	ldrb	r3, [r3, #0]
 8011334:	2b02      	cmp	r3, #2
 8011336:	d018      	beq.n	801136a <HAL_RTC_SetDate+0xa6>
 8011338:	68bb      	ldr	r3, [r7, #8]
 801133a:	781b      	ldrb	r3, [r3, #0]
 801133c:	2b03      	cmp	r3, #3
 801133e:	d014      	beq.n	801136a <HAL_RTC_SetDate+0xa6>
 8011340:	68bb      	ldr	r3, [r7, #8]
 8011342:	781b      	ldrb	r3, [r3, #0]
 8011344:	2b04      	cmp	r3, #4
 8011346:	d010      	beq.n	801136a <HAL_RTC_SetDate+0xa6>
 8011348:	68bb      	ldr	r3, [r7, #8]
 801134a:	781b      	ldrb	r3, [r3, #0]
 801134c:	2b05      	cmp	r3, #5
 801134e:	d00c      	beq.n	801136a <HAL_RTC_SetDate+0xa6>
 8011350:	68bb      	ldr	r3, [r7, #8]
 8011352:	781b      	ldrb	r3, [r3, #0]
 8011354:	2b06      	cmp	r3, #6
 8011356:	d008      	beq.n	801136a <HAL_RTC_SetDate+0xa6>
 8011358:	68bb      	ldr	r3, [r7, #8]
 801135a:	781b      	ldrb	r3, [r3, #0]
 801135c:	2b07      	cmp	r3, #7
 801135e:	d004      	beq.n	801136a <HAL_RTC_SetDate+0xa6>
 8011360:	f240 614e 	movw	r1, #1614	; 0x64e
 8011364:	485e      	ldr	r0, [pc, #376]	; (80114e0 <HAL_RTC_SetDate+0x21c>)
 8011366:	f7f3 f915 	bl	8004594 <assert_failed>

  if (Format == RTC_FORMAT_BIN)
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	2b00      	cmp	r3, #0
 801136e:	d13f      	bne.n	80113f0 <HAL_RTC_SetDate+0x12c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
 8011370:	68bb      	ldr	r3, [r7, #8]
 8011372:	78db      	ldrb	r3, [r3, #3]
 8011374:	2b63      	cmp	r3, #99	; 0x63
 8011376:	d904      	bls.n	8011382 <HAL_RTC_SetDate+0xbe>
 8011378:	f240 6152 	movw	r1, #1618	; 0x652
 801137c:	4858      	ldr	r0, [pc, #352]	; (80114e0 <HAL_RTC_SetDate+0x21c>)
 801137e:	f7f3 f909 	bl	8004594 <assert_failed>
    assert_param(IS_RTC_MONTH(sDate->Month));
 8011382:	68bb      	ldr	r3, [r7, #8]
 8011384:	785b      	ldrb	r3, [r3, #1]
 8011386:	2b00      	cmp	r3, #0
 8011388:	d003      	beq.n	8011392 <HAL_RTC_SetDate+0xce>
 801138a:	68bb      	ldr	r3, [r7, #8]
 801138c:	785b      	ldrb	r3, [r3, #1]
 801138e:	2b0c      	cmp	r3, #12
 8011390:	d904      	bls.n	801139c <HAL_RTC_SetDate+0xd8>
 8011392:	f240 6153 	movw	r1, #1619	; 0x653
 8011396:	4852      	ldr	r0, [pc, #328]	; (80114e0 <HAL_RTC_SetDate+0x21c>)
 8011398:	f7f3 f8fc 	bl	8004594 <assert_failed>
    assert_param(IS_RTC_DATE(sDate->Date));
 801139c:	68bb      	ldr	r3, [r7, #8]
 801139e:	789b      	ldrb	r3, [r3, #2]
 80113a0:	2b00      	cmp	r3, #0
 80113a2:	d003      	beq.n	80113ac <HAL_RTC_SetDate+0xe8>
 80113a4:	68bb      	ldr	r3, [r7, #8]
 80113a6:	789b      	ldrb	r3, [r3, #2]
 80113a8:	2b1f      	cmp	r3, #31
 80113aa:	d904      	bls.n	80113b6 <HAL_RTC_SetDate+0xf2>
 80113ac:	f240 6154 	movw	r1, #1620	; 0x654
 80113b0:	484b      	ldr	r0, [pc, #300]	; (80114e0 <HAL_RTC_SetDate+0x21c>)
 80113b2:	f7f3 f8ef 	bl	8004594 <assert_failed>

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80113b6:	68bb      	ldr	r3, [r7, #8]
 80113b8:	78db      	ldrb	r3, [r3, #3]
 80113ba:	4618      	mov	r0, r3
 80113bc:	f000 f984 	bl	80116c8 <RTC_ByteToBcd2>
 80113c0:	4603      	mov	r3, r0
 80113c2:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80113c4:	68bb      	ldr	r3, [r7, #8]
 80113c6:	785b      	ldrb	r3, [r3, #1]
 80113c8:	4618      	mov	r0, r3
 80113ca:	f000 f97d 	bl	80116c8 <RTC_ByteToBcd2>
 80113ce:	4603      	mov	r3, r0
 80113d0:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80113d2:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 80113d4:	68bb      	ldr	r3, [r7, #8]
 80113d6:	789b      	ldrb	r3, [r3, #2]
 80113d8:	4618      	mov	r0, r3
 80113da:	f000 f975 	bl	80116c8 <RTC_ByteToBcd2>
 80113de:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80113e0:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80113e4:	68bb      	ldr	r3, [r7, #8]
 80113e6:	781b      	ldrb	r3, [r3, #0]
 80113e8:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80113ea:	4313      	orrs	r3, r2
 80113ec:	617b      	str	r3, [r7, #20]
 80113ee:	e045      	b.n	801147c <HAL_RTC_SetDate+0x1b8>
  }
  else
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 80113f0:	68bb      	ldr	r3, [r7, #8]
 80113f2:	78db      	ldrb	r3, [r3, #3]
 80113f4:	4618      	mov	r0, r3
 80113f6:	f000 f987 	bl	8011708 <RTC_Bcd2ToByte>
 80113fa:	4603      	mov	r3, r0
 80113fc:	2b63      	cmp	r3, #99	; 0x63
 80113fe:	d904      	bls.n	801140a <HAL_RTC_SetDate+0x146>
 8011400:	f240 615d 	movw	r1, #1629	; 0x65d
 8011404:	4836      	ldr	r0, [pc, #216]	; (80114e0 <HAL_RTC_SetDate+0x21c>)
 8011406:	f7f3 f8c5 	bl	8004594 <assert_failed>
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
 801140a:	68bb      	ldr	r3, [r7, #8]
 801140c:	785b      	ldrb	r3, [r3, #1]
 801140e:	4618      	mov	r0, r3
 8011410:	f000 f97a 	bl	8011708 <RTC_Bcd2ToByte>
 8011414:	4603      	mov	r3, r0
 8011416:	2b00      	cmp	r3, #0
 8011418:	d007      	beq.n	801142a <HAL_RTC_SetDate+0x166>
 801141a:	68bb      	ldr	r3, [r7, #8]
 801141c:	785b      	ldrb	r3, [r3, #1]
 801141e:	4618      	mov	r0, r3
 8011420:	f000 f972 	bl	8011708 <RTC_Bcd2ToByte>
 8011424:	4603      	mov	r3, r0
 8011426:	2b0c      	cmp	r3, #12
 8011428:	d904      	bls.n	8011434 <HAL_RTC_SetDate+0x170>
 801142a:	f240 615e 	movw	r1, #1630	; 0x65e
 801142e:	482c      	ldr	r0, [pc, #176]	; (80114e0 <HAL_RTC_SetDate+0x21c>)
 8011430:	f7f3 f8b0 	bl	8004594 <assert_failed>
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
 8011434:	68bb      	ldr	r3, [r7, #8]
 8011436:	789b      	ldrb	r3, [r3, #2]
 8011438:	4618      	mov	r0, r3
 801143a:	f000 f965 	bl	8011708 <RTC_Bcd2ToByte>
 801143e:	4603      	mov	r3, r0
 8011440:	2b00      	cmp	r3, #0
 8011442:	d007      	beq.n	8011454 <HAL_RTC_SetDate+0x190>
 8011444:	68bb      	ldr	r3, [r7, #8]
 8011446:	789b      	ldrb	r3, [r3, #2]
 8011448:	4618      	mov	r0, r3
 801144a:	f000 f95d 	bl	8011708 <RTC_Bcd2ToByte>
 801144e:	4603      	mov	r3, r0
 8011450:	2b1f      	cmp	r3, #31
 8011452:	d904      	bls.n	801145e <HAL_RTC_SetDate+0x19a>
 8011454:	f240 615f 	movw	r1, #1631	; 0x65f
 8011458:	4821      	ldr	r0, [pc, #132]	; (80114e0 <HAL_RTC_SetDate+0x21c>)
 801145a:	f7f3 f89b 	bl	8004594 <assert_failed>

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 801145e:	68bb      	ldr	r3, [r7, #8]
 8011460:	78db      	ldrb	r3, [r3, #3]
 8011462:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8011464:	68bb      	ldr	r3, [r7, #8]
 8011466:	785b      	ldrb	r3, [r3, #1]
 8011468:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 801146a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 801146c:	68ba      	ldr	r2, [r7, #8]
 801146e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8011470:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8011472:	68bb      	ldr	r3, [r7, #8]
 8011474:	781b      	ldrb	r3, [r3, #0]
 8011476:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8011478:	4313      	orrs	r3, r2
 801147a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801147c:	68fb      	ldr	r3, [r7, #12]
 801147e:	681b      	ldr	r3, [r3, #0]
 8011480:	22ca      	movs	r2, #202	; 0xca
 8011482:	625a      	str	r2, [r3, #36]	; 0x24
 8011484:	68fb      	ldr	r3, [r7, #12]
 8011486:	681b      	ldr	r3, [r3, #0]
 8011488:	2253      	movs	r2, #83	; 0x53
 801148a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 801148c:	68f8      	ldr	r0, [r7, #12]
 801148e:	f000 f8a9 	bl	80115e4 <RTC_EnterInitMode>
 8011492:	4603      	mov	r3, r0
 8011494:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8011496:	7cfb      	ldrb	r3, [r7, #19]
 8011498:	2b00      	cmp	r3, #0
 801149a:	d10c      	bne.n	80114b6 <HAL_RTC_SetDate+0x1f2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 801149c:	68fb      	ldr	r3, [r7, #12]
 801149e:	681a      	ldr	r2, [r3, #0]
 80114a0:	697b      	ldr	r3, [r7, #20]
 80114a2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80114a6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80114aa:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80114ac:	68f8      	ldr	r0, [r7, #12]
 80114ae:	f000 f8cd 	bl	801164c <RTC_ExitInitMode>
 80114b2:	4603      	mov	r3, r0
 80114b4:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80114b6:	68fb      	ldr	r3, [r7, #12]
 80114b8:	681b      	ldr	r3, [r3, #0]
 80114ba:	22ff      	movs	r2, #255	; 0xff
 80114bc:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80114be:	7cfb      	ldrb	r3, [r7, #19]
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	d103      	bne.n	80114cc <HAL_RTC_SetDate+0x208>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 80114c4:	68fb      	ldr	r3, [r7, #12]
 80114c6:	2201      	movs	r2, #1
 80114c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80114cc:	68fb      	ldr	r3, [r7, #12]
 80114ce:	2200      	movs	r2, #0
 80114d0:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80114d4:	7cfb      	ldrb	r3, [r7, #19]
}
 80114d6:	4618      	mov	r0, r3
 80114d8:	371c      	adds	r7, #28
 80114da:	46bd      	mov	sp, r7
 80114dc:	bd90      	pop	{r4, r7, pc}
 80114de:	bf00      	nop
 80114e0:	08018ea4 	.word	0x08018ea4

080114e4 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80114e4:	b580      	push	{r7, lr}
 80114e6:	b086      	sub	sp, #24
 80114e8:	af00      	add	r7, sp, #0
 80114ea:	60f8      	str	r0, [r7, #12]
 80114ec:	60b9      	str	r1, [r7, #8]
 80114ee:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg;

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d007      	beq.n	8011506 <HAL_RTC_GetDate+0x22>
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	2b01      	cmp	r3, #1
 80114fa:	d004      	beq.n	8011506 <HAL_RTC_GetDate+0x22>
 80114fc:	f240 6195 	movw	r1, #1685	; 0x695
 8011500:	4824      	ldr	r0, [pc, #144]	; (8011594 <HAL_RTC_GetDate+0xb0>)
 8011502:	f7f3 f847 	bl	8004594 <assert_failed>

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8011506:	68fb      	ldr	r3, [r7, #12]
 8011508:	681b      	ldr	r3, [r3, #0]
 801150a:	685b      	ldr	r3, [r3, #4]
 801150c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8011510:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8011514:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8011516:	697b      	ldr	r3, [r7, #20]
 8011518:	0c1b      	lsrs	r3, r3, #16
 801151a:	b2da      	uxtb	r2, r3
 801151c:	68bb      	ldr	r3, [r7, #8]
 801151e:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8011520:	697b      	ldr	r3, [r7, #20]
 8011522:	0a1b      	lsrs	r3, r3, #8
 8011524:	b2db      	uxtb	r3, r3
 8011526:	f003 031f 	and.w	r3, r3, #31
 801152a:	b2da      	uxtb	r2, r3
 801152c:	68bb      	ldr	r3, [r7, #8]
 801152e:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8011530:	697b      	ldr	r3, [r7, #20]
 8011532:	b2db      	uxtb	r3, r3
 8011534:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011538:	b2da      	uxtb	r2, r3
 801153a:	68bb      	ldr	r3, [r7, #8]
 801153c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 801153e:	697b      	ldr	r3, [r7, #20]
 8011540:	0b5b      	lsrs	r3, r3, #13
 8011542:	b2db      	uxtb	r3, r3
 8011544:	f003 0307 	and.w	r3, r3, #7
 8011548:	b2da      	uxtb	r2, r3
 801154a:	68bb      	ldr	r3, [r7, #8]
 801154c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	2b00      	cmp	r3, #0
 8011552:	d11a      	bne.n	801158a <HAL_RTC_GetDate+0xa6>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8011554:	68bb      	ldr	r3, [r7, #8]
 8011556:	78db      	ldrb	r3, [r3, #3]
 8011558:	4618      	mov	r0, r3
 801155a:	f000 f8d5 	bl	8011708 <RTC_Bcd2ToByte>
 801155e:	4603      	mov	r3, r0
 8011560:	461a      	mov	r2, r3
 8011562:	68bb      	ldr	r3, [r7, #8]
 8011564:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8011566:	68bb      	ldr	r3, [r7, #8]
 8011568:	785b      	ldrb	r3, [r3, #1]
 801156a:	4618      	mov	r0, r3
 801156c:	f000 f8cc 	bl	8011708 <RTC_Bcd2ToByte>
 8011570:	4603      	mov	r3, r0
 8011572:	461a      	mov	r2, r3
 8011574:	68bb      	ldr	r3, [r7, #8]
 8011576:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8011578:	68bb      	ldr	r3, [r7, #8]
 801157a:	789b      	ldrb	r3, [r3, #2]
 801157c:	4618      	mov	r0, r3
 801157e:	f000 f8c3 	bl	8011708 <RTC_Bcd2ToByte>
 8011582:	4603      	mov	r3, r0
 8011584:	461a      	mov	r2, r3
 8011586:	68bb      	ldr	r3, [r7, #8]
 8011588:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 801158a:	2300      	movs	r3, #0
}
 801158c:	4618      	mov	r0, r3
 801158e:	3718      	adds	r7, #24
 8011590:	46bd      	mov	sp, r7
 8011592:	bd80      	pop	{r7, pc}
 8011594:	08018ea4 	.word	0x08018ea4

08011598 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8011598:	b580      	push	{r7, lr}
 801159a:	b084      	sub	sp, #16
 801159c:	af00      	add	r7, sp, #0
 801159e:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	681b      	ldr	r3, [r3, #0]
 80115a4:	68da      	ldr	r2, [r3, #12]
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	681b      	ldr	r3, [r3, #0]
 80115aa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80115ae:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80115b0:	f7f7 fc82 	bl	8008eb8 <HAL_GetTick>
 80115b4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80115b6:	e009      	b.n	80115cc <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80115b8:	f7f7 fc7e 	bl	8008eb8 <HAL_GetTick>
 80115bc:	4602      	mov	r2, r0
 80115be:	68fb      	ldr	r3, [r7, #12]
 80115c0:	1ad3      	subs	r3, r2, r3
 80115c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80115c6:	d901      	bls.n	80115cc <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80115c8:	2303      	movs	r3, #3
 80115ca:	e007      	b.n	80115dc <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	681b      	ldr	r3, [r3, #0]
 80115d0:	68db      	ldr	r3, [r3, #12]
 80115d2:	f003 0320 	and.w	r3, r3, #32
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	d0ee      	beq.n	80115b8 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80115da:	2300      	movs	r3, #0
}
 80115dc:	4618      	mov	r0, r3
 80115de:	3710      	adds	r7, #16
 80115e0:	46bd      	mov	sp, r7
 80115e2:	bd80      	pop	{r7, pc}

080115e4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80115e4:	b580      	push	{r7, lr}
 80115e6:	b084      	sub	sp, #16
 80115e8:	af00      	add	r7, sp, #0
 80115ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80115ec:	2300      	movs	r3, #0
 80115ee:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	681b      	ldr	r3, [r3, #0]
 80115f4:	68db      	ldr	r3, [r3, #12]
 80115f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	d120      	bne.n	8011640 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	681b      	ldr	r3, [r3, #0]
 8011602:	f04f 32ff 	mov.w	r2, #4294967295
 8011606:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8011608:	f7f7 fc56 	bl	8008eb8 <HAL_GetTick>
 801160c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 801160e:	e00d      	b.n	801162c <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8011610:	f7f7 fc52 	bl	8008eb8 <HAL_GetTick>
 8011614:	4602      	mov	r2, r0
 8011616:	68bb      	ldr	r3, [r7, #8]
 8011618:	1ad3      	subs	r3, r2, r3
 801161a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801161e:	d905      	bls.n	801162c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8011620:	2303      	movs	r3, #3
 8011622:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	2203      	movs	r2, #3
 8011628:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	681b      	ldr	r3, [r3, #0]
 8011630:	68db      	ldr	r3, [r3, #12]
 8011632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011636:	2b00      	cmp	r3, #0
 8011638:	d102      	bne.n	8011640 <RTC_EnterInitMode+0x5c>
 801163a:	7bfb      	ldrb	r3, [r7, #15]
 801163c:	2b03      	cmp	r3, #3
 801163e:	d1e7      	bne.n	8011610 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8011640:	7bfb      	ldrb	r3, [r7, #15]
}
 8011642:	4618      	mov	r0, r3
 8011644:	3710      	adds	r7, #16
 8011646:	46bd      	mov	sp, r7
 8011648:	bd80      	pop	{r7, pc}
	...

0801164c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 801164c:	b580      	push	{r7, lr}
 801164e:	b084      	sub	sp, #16
 8011650:	af00      	add	r7, sp, #0
 8011652:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011654:	2300      	movs	r3, #0
 8011656:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8011658:	4b1a      	ldr	r3, [pc, #104]	; (80116c4 <RTC_ExitInitMode+0x78>)
 801165a:	68db      	ldr	r3, [r3, #12]
 801165c:	4a19      	ldr	r2, [pc, #100]	; (80116c4 <RTC_ExitInitMode+0x78>)
 801165e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011662:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8011664:	4b17      	ldr	r3, [pc, #92]	; (80116c4 <RTC_ExitInitMode+0x78>)
 8011666:	689b      	ldr	r3, [r3, #8]
 8011668:	f003 0320 	and.w	r3, r3, #32
 801166c:	2b00      	cmp	r3, #0
 801166e:	d10c      	bne.n	801168a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8011670:	6878      	ldr	r0, [r7, #4]
 8011672:	f7ff ff91 	bl	8011598 <HAL_RTC_WaitForSynchro>
 8011676:	4603      	mov	r3, r0
 8011678:	2b00      	cmp	r3, #0
 801167a:	d01e      	beq.n	80116ba <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	2203      	movs	r2, #3
 8011680:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8011684:	2303      	movs	r3, #3
 8011686:	73fb      	strb	r3, [r7, #15]
 8011688:	e017      	b.n	80116ba <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 801168a:	4b0e      	ldr	r3, [pc, #56]	; (80116c4 <RTC_ExitInitMode+0x78>)
 801168c:	689b      	ldr	r3, [r3, #8]
 801168e:	4a0d      	ldr	r2, [pc, #52]	; (80116c4 <RTC_ExitInitMode+0x78>)
 8011690:	f023 0320 	bic.w	r3, r3, #32
 8011694:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8011696:	6878      	ldr	r0, [r7, #4]
 8011698:	f7ff ff7e 	bl	8011598 <HAL_RTC_WaitForSynchro>
 801169c:	4603      	mov	r3, r0
 801169e:	2b00      	cmp	r3, #0
 80116a0:	d005      	beq.n	80116ae <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	2203      	movs	r2, #3
 80116a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80116aa:	2303      	movs	r3, #3
 80116ac:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80116ae:	4b05      	ldr	r3, [pc, #20]	; (80116c4 <RTC_ExitInitMode+0x78>)
 80116b0:	689b      	ldr	r3, [r3, #8]
 80116b2:	4a04      	ldr	r2, [pc, #16]	; (80116c4 <RTC_ExitInitMode+0x78>)
 80116b4:	f043 0320 	orr.w	r3, r3, #32
 80116b8:	6093      	str	r3, [r2, #8]
  }

  return status;
 80116ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80116bc:	4618      	mov	r0, r3
 80116be:	3710      	adds	r7, #16
 80116c0:	46bd      	mov	sp, r7
 80116c2:	bd80      	pop	{r7, pc}
 80116c4:	40002800 	.word	0x40002800

080116c8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80116c8:	b480      	push	{r7}
 80116ca:	b085      	sub	sp, #20
 80116cc:	af00      	add	r7, sp, #0
 80116ce:	4603      	mov	r3, r0
 80116d0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80116d2:	2300      	movs	r3, #0
 80116d4:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 80116d6:	79fb      	ldrb	r3, [r7, #7]
 80116d8:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 80116da:	e005      	b.n	80116e8 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80116dc:	68fb      	ldr	r3, [r7, #12]
 80116de:	3301      	adds	r3, #1
 80116e0:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 80116e2:	7afb      	ldrb	r3, [r7, #11]
 80116e4:	3b0a      	subs	r3, #10
 80116e6:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 80116e8:	7afb      	ldrb	r3, [r7, #11]
 80116ea:	2b09      	cmp	r3, #9
 80116ec:	d8f6      	bhi.n	80116dc <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 80116ee:	68fb      	ldr	r3, [r7, #12]
 80116f0:	b2db      	uxtb	r3, r3
 80116f2:	011b      	lsls	r3, r3, #4
 80116f4:	b2da      	uxtb	r2, r3
 80116f6:	7afb      	ldrb	r3, [r7, #11]
 80116f8:	4313      	orrs	r3, r2
 80116fa:	b2db      	uxtb	r3, r3
}
 80116fc:	4618      	mov	r0, r3
 80116fe:	3714      	adds	r7, #20
 8011700:	46bd      	mov	sp, r7
 8011702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011706:	4770      	bx	lr

08011708 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8011708:	b480      	push	{r7}
 801170a:	b085      	sub	sp, #20
 801170c:	af00      	add	r7, sp, #0
 801170e:	4603      	mov	r3, r0
 8011710:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8011712:	79fb      	ldrb	r3, [r7, #7]
 8011714:	091b      	lsrs	r3, r3, #4
 8011716:	b2db      	uxtb	r3, r3
 8011718:	461a      	mov	r2, r3
 801171a:	0092      	lsls	r2, r2, #2
 801171c:	4413      	add	r3, r2
 801171e:	005b      	lsls	r3, r3, #1
 8011720:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8011722:	79fb      	ldrb	r3, [r7, #7]
 8011724:	f003 030f 	and.w	r3, r3, #15
 8011728:	b2da      	uxtb	r2, r3
 801172a:	7bfb      	ldrb	r3, [r7, #15]
 801172c:	4413      	add	r3, r2
 801172e:	b2db      	uxtb	r3, r3
}
 8011730:	4618      	mov	r0, r3
 8011732:	3714      	adds	r7, #20
 8011734:	46bd      	mov	sp, r7
 8011736:	f85d 7b04 	ldr.w	r7, [sp], #4
 801173a:	4770      	bx	lr

0801173c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 801173c:	b580      	push	{r7, lr}
 801173e:	b084      	sub	sp, #16
 8011740:	af00      	add	r7, sp, #0
 8011742:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	2b00      	cmp	r3, #0
 8011748:	d101      	bne.n	801174e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801174a:	2301      	movs	r3, #1
 801174c:	e1dc      	b.n	8011b08 <HAL_SPI_Init+0x3cc>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	681b      	ldr	r3, [r3, #0]
 8011752:	4a92      	ldr	r2, [pc, #584]	; (801199c <HAL_SPI_Init+0x260>)
 8011754:	4293      	cmp	r3, r2
 8011756:	d00e      	beq.n	8011776 <HAL_SPI_Init+0x3a>
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	681b      	ldr	r3, [r3, #0]
 801175c:	4a90      	ldr	r2, [pc, #576]	; (80119a0 <HAL_SPI_Init+0x264>)
 801175e:	4293      	cmp	r3, r2
 8011760:	d009      	beq.n	8011776 <HAL_SPI_Init+0x3a>
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	681b      	ldr	r3, [r3, #0]
 8011766:	4a8f      	ldr	r2, [pc, #572]	; (80119a4 <HAL_SPI_Init+0x268>)
 8011768:	4293      	cmp	r3, r2
 801176a:	d004      	beq.n	8011776 <HAL_SPI_Init+0x3a>
 801176c:	f240 1145 	movw	r1, #325	; 0x145
 8011770:	488d      	ldr	r0, [pc, #564]	; (80119a8 <HAL_SPI_Init+0x26c>)
 8011772:	f7f2 ff0f 	bl	8004594 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	685b      	ldr	r3, [r3, #4]
 801177a:	2b00      	cmp	r3, #0
 801177c:	d009      	beq.n	8011792 <HAL_SPI_Init+0x56>
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	685b      	ldr	r3, [r3, #4]
 8011782:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8011786:	d004      	beq.n	8011792 <HAL_SPI_Init+0x56>
 8011788:	f44f 71a3 	mov.w	r1, #326	; 0x146
 801178c:	4886      	ldr	r0, [pc, #536]	; (80119a8 <HAL_SPI_Init+0x26c>)
 801178e:	f7f2 ff01 	bl	8004594 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	689b      	ldr	r3, [r3, #8]
 8011796:	2b00      	cmp	r3, #0
 8011798:	d00e      	beq.n	80117b8 <HAL_SPI_Init+0x7c>
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	689b      	ldr	r3, [r3, #8]
 801179e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80117a2:	d009      	beq.n	80117b8 <HAL_SPI_Init+0x7c>
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	689b      	ldr	r3, [r3, #8]
 80117a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80117ac:	d004      	beq.n	80117b8 <HAL_SPI_Init+0x7c>
 80117ae:	f240 1147 	movw	r1, #327	; 0x147
 80117b2:	487d      	ldr	r0, [pc, #500]	; (80119a8 <HAL_SPI_Init+0x26c>)
 80117b4:	f7f2 feee 	bl	8004594 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	68db      	ldr	r3, [r3, #12]
 80117bc:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80117c0:	d040      	beq.n	8011844 <HAL_SPI_Init+0x108>
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	68db      	ldr	r3, [r3, #12]
 80117c6:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 80117ca:	d03b      	beq.n	8011844 <HAL_SPI_Init+0x108>
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	68db      	ldr	r3, [r3, #12]
 80117d0:	f5b3 6f50 	cmp.w	r3, #3328	; 0xd00
 80117d4:	d036      	beq.n	8011844 <HAL_SPI_Init+0x108>
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	68db      	ldr	r3, [r3, #12]
 80117da:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80117de:	d031      	beq.n	8011844 <HAL_SPI_Init+0x108>
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	68db      	ldr	r3, [r3, #12]
 80117e4:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 80117e8:	d02c      	beq.n	8011844 <HAL_SPI_Init+0x108>
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	68db      	ldr	r3, [r3, #12]
 80117ee:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80117f2:	d027      	beq.n	8011844 <HAL_SPI_Init+0x108>
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	68db      	ldr	r3, [r3, #12]
 80117f8:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 80117fc:	d022      	beq.n	8011844 <HAL_SPI_Init+0x108>
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	68db      	ldr	r3, [r3, #12]
 8011802:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011806:	d01d      	beq.n	8011844 <HAL_SPI_Init+0x108>
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	68db      	ldr	r3, [r3, #12]
 801180c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8011810:	d018      	beq.n	8011844 <HAL_SPI_Init+0x108>
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	68db      	ldr	r3, [r3, #12]
 8011816:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 801181a:	d013      	beq.n	8011844 <HAL_SPI_Init+0x108>
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	68db      	ldr	r3, [r3, #12]
 8011820:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8011824:	d00e      	beq.n	8011844 <HAL_SPI_Init+0x108>
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	68db      	ldr	r3, [r3, #12]
 801182a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801182e:	d009      	beq.n	8011844 <HAL_SPI_Init+0x108>
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	68db      	ldr	r3, [r3, #12]
 8011834:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011838:	d004      	beq.n	8011844 <HAL_SPI_Init+0x108>
 801183a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 801183e:	485a      	ldr	r0, [pc, #360]	; (80119a8 <HAL_SPI_Init+0x26c>)
 8011840:	f7f2 fea8 	bl	8004594 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	699b      	ldr	r3, [r3, #24]
 8011848:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801184c:	d00d      	beq.n	801186a <HAL_SPI_Init+0x12e>
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	699b      	ldr	r3, [r3, #24]
 8011852:	2b00      	cmp	r3, #0
 8011854:	d009      	beq.n	801186a <HAL_SPI_Init+0x12e>
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	699b      	ldr	r3, [r3, #24]
 801185a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 801185e:	d004      	beq.n	801186a <HAL_SPI_Init+0x12e>
 8011860:	f240 1149 	movw	r1, #329	; 0x149
 8011864:	4850      	ldr	r0, [pc, #320]	; (80119a8 <HAL_SPI_Init+0x26c>)
 8011866:	f7f2 fe95 	bl	8004594 <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801186e:	2b08      	cmp	r3, #8
 8011870:	d008      	beq.n	8011884 <HAL_SPI_Init+0x148>
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011876:	2b00      	cmp	r3, #0
 8011878:	d004      	beq.n	8011884 <HAL_SPI_Init+0x148>
 801187a:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 801187e:	484a      	ldr	r0, [pc, #296]	; (80119a8 <HAL_SPI_Init+0x26c>)
 8011880:	f7f2 fe88 	bl	8004594 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	69db      	ldr	r3, [r3, #28]
 8011888:	2b00      	cmp	r3, #0
 801188a:	d020      	beq.n	80118ce <HAL_SPI_Init+0x192>
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	69db      	ldr	r3, [r3, #28]
 8011890:	2b08      	cmp	r3, #8
 8011892:	d01c      	beq.n	80118ce <HAL_SPI_Init+0x192>
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	69db      	ldr	r3, [r3, #28]
 8011898:	2b10      	cmp	r3, #16
 801189a:	d018      	beq.n	80118ce <HAL_SPI_Init+0x192>
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	69db      	ldr	r3, [r3, #28]
 80118a0:	2b18      	cmp	r3, #24
 80118a2:	d014      	beq.n	80118ce <HAL_SPI_Init+0x192>
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	69db      	ldr	r3, [r3, #28]
 80118a8:	2b20      	cmp	r3, #32
 80118aa:	d010      	beq.n	80118ce <HAL_SPI_Init+0x192>
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	69db      	ldr	r3, [r3, #28]
 80118b0:	2b28      	cmp	r3, #40	; 0x28
 80118b2:	d00c      	beq.n	80118ce <HAL_SPI_Init+0x192>
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	69db      	ldr	r3, [r3, #28]
 80118b8:	2b30      	cmp	r3, #48	; 0x30
 80118ba:	d008      	beq.n	80118ce <HAL_SPI_Init+0x192>
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	69db      	ldr	r3, [r3, #28]
 80118c0:	2b38      	cmp	r3, #56	; 0x38
 80118c2:	d004      	beq.n	80118ce <HAL_SPI_Init+0x192>
 80118c4:	f240 114b 	movw	r1, #331	; 0x14b
 80118c8:	4837      	ldr	r0, [pc, #220]	; (80119a8 <HAL_SPI_Init+0x26c>)
 80118ca:	f7f2 fe63 	bl	8004594 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	6a1b      	ldr	r3, [r3, #32]
 80118d2:	2b00      	cmp	r3, #0
 80118d4:	d008      	beq.n	80118e8 <HAL_SPI_Init+0x1ac>
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	6a1b      	ldr	r3, [r3, #32]
 80118da:	2b80      	cmp	r3, #128	; 0x80
 80118dc:	d004      	beq.n	80118e8 <HAL_SPI_Init+0x1ac>
 80118de:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 80118e2:	4831      	ldr	r0, [pc, #196]	; (80119a8 <HAL_SPI_Init+0x26c>)
 80118e4:	f7f2 fe56 	bl	8004594 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	d008      	beq.n	8011902 <HAL_SPI_Init+0x1c6>
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80118f4:	2b10      	cmp	r3, #16
 80118f6:	d004      	beq.n	8011902 <HAL_SPI_Init+0x1c6>
 80118f8:	f240 114d 	movw	r1, #333	; 0x14d
 80118fc:	482a      	ldr	r0, [pc, #168]	; (80119a8 <HAL_SPI_Init+0x26c>)
 80118fe:	f7f2 fe49 	bl	8004594 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011906:	2b00      	cmp	r3, #0
 8011908:	d150      	bne.n	80119ac <HAL_SPI_Init+0x270>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	691b      	ldr	r3, [r3, #16]
 801190e:	2b00      	cmp	r3, #0
 8011910:	d008      	beq.n	8011924 <HAL_SPI_Init+0x1e8>
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	691b      	ldr	r3, [r3, #16]
 8011916:	2b02      	cmp	r3, #2
 8011918:	d004      	beq.n	8011924 <HAL_SPI_Init+0x1e8>
 801191a:	f44f 71a8 	mov.w	r1, #336	; 0x150
 801191e:	4822      	ldr	r0, [pc, #136]	; (80119a8 <HAL_SPI_Init+0x26c>)
 8011920:	f7f2 fe38 	bl	8004594 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	695b      	ldr	r3, [r3, #20]
 8011928:	2b00      	cmp	r3, #0
 801192a:	d008      	beq.n	801193e <HAL_SPI_Init+0x202>
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	695b      	ldr	r3, [r3, #20]
 8011930:	2b01      	cmp	r3, #1
 8011932:	d004      	beq.n	801193e <HAL_SPI_Init+0x202>
 8011934:	f240 1151 	movw	r1, #337	; 0x151
 8011938:	481b      	ldr	r0, [pc, #108]	; (80119a8 <HAL_SPI_Init+0x26c>)
 801193a:	f7f2 fe2b 	bl	8004594 <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	685b      	ldr	r3, [r3, #4]
 8011942:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8011946:	d125      	bne.n	8011994 <HAL_SPI_Init+0x258>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	69db      	ldr	r3, [r3, #28]
 801194c:	2b00      	cmp	r3, #0
 801194e:	d058      	beq.n	8011a02 <HAL_SPI_Init+0x2c6>
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	69db      	ldr	r3, [r3, #28]
 8011954:	2b08      	cmp	r3, #8
 8011956:	d054      	beq.n	8011a02 <HAL_SPI_Init+0x2c6>
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	69db      	ldr	r3, [r3, #28]
 801195c:	2b10      	cmp	r3, #16
 801195e:	d050      	beq.n	8011a02 <HAL_SPI_Init+0x2c6>
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	69db      	ldr	r3, [r3, #28]
 8011964:	2b18      	cmp	r3, #24
 8011966:	d04c      	beq.n	8011a02 <HAL_SPI_Init+0x2c6>
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	69db      	ldr	r3, [r3, #28]
 801196c:	2b20      	cmp	r3, #32
 801196e:	d048      	beq.n	8011a02 <HAL_SPI_Init+0x2c6>
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	69db      	ldr	r3, [r3, #28]
 8011974:	2b28      	cmp	r3, #40	; 0x28
 8011976:	d044      	beq.n	8011a02 <HAL_SPI_Init+0x2c6>
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	69db      	ldr	r3, [r3, #28]
 801197c:	2b30      	cmp	r3, #48	; 0x30
 801197e:	d040      	beq.n	8011a02 <HAL_SPI_Init+0x2c6>
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	69db      	ldr	r3, [r3, #28]
 8011984:	2b38      	cmp	r3, #56	; 0x38
 8011986:	d03c      	beq.n	8011a02 <HAL_SPI_Init+0x2c6>
 8011988:	f240 1155 	movw	r1, #341	; 0x155
 801198c:	4806      	ldr	r0, [pc, #24]	; (80119a8 <HAL_SPI_Init+0x26c>)
 801198e:	f7f2 fe01 	bl	8004594 <assert_failed>
 8011992:	e036      	b.n	8011a02 <HAL_SPI_Init+0x2c6>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	2200      	movs	r2, #0
 8011998:	61da      	str	r2, [r3, #28]
 801199a:	e032      	b.n	8011a02 <HAL_SPI_Init+0x2c6>
 801199c:	40013000 	.word	0x40013000
 80119a0:	40003800 	.word	0x40003800
 80119a4:	40003c00 	.word	0x40003c00
 80119a8:	08018edc 	.word	0x08018edc
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	69db      	ldr	r3, [r3, #28]
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	d020      	beq.n	80119f6 <HAL_SPI_Init+0x2ba>
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	69db      	ldr	r3, [r3, #28]
 80119b8:	2b08      	cmp	r3, #8
 80119ba:	d01c      	beq.n	80119f6 <HAL_SPI_Init+0x2ba>
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	69db      	ldr	r3, [r3, #28]
 80119c0:	2b10      	cmp	r3, #16
 80119c2:	d018      	beq.n	80119f6 <HAL_SPI_Init+0x2ba>
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	69db      	ldr	r3, [r3, #28]
 80119c8:	2b18      	cmp	r3, #24
 80119ca:	d014      	beq.n	80119f6 <HAL_SPI_Init+0x2ba>
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	69db      	ldr	r3, [r3, #28]
 80119d0:	2b20      	cmp	r3, #32
 80119d2:	d010      	beq.n	80119f6 <HAL_SPI_Init+0x2ba>
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	69db      	ldr	r3, [r3, #28]
 80119d8:	2b28      	cmp	r3, #40	; 0x28
 80119da:	d00c      	beq.n	80119f6 <HAL_SPI_Init+0x2ba>
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	69db      	ldr	r3, [r3, #28]
 80119e0:	2b30      	cmp	r3, #48	; 0x30
 80119e2:	d008      	beq.n	80119f6 <HAL_SPI_Init+0x2ba>
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	69db      	ldr	r3, [r3, #28]
 80119e8:	2b38      	cmp	r3, #56	; 0x38
 80119ea:	d004      	beq.n	80119f6 <HAL_SPI_Init+0x2ba>
 80119ec:	f240 115f 	movw	r1, #351	; 0x15f
 80119f0:	4847      	ldr	r0, [pc, #284]	; (8011b10 <HAL_SPI_Init+0x3d4>)
 80119f2:	f7f2 fdcf 	bl	8004594 <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	2200      	movs	r2, #0
 80119fa:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	2200      	movs	r2, #0
 8011a00:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	2200      	movs	r2, #0
 8011a06:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8011a0e:	b2db      	uxtb	r3, r3
 8011a10:	2b00      	cmp	r3, #0
 8011a12:	d106      	bne.n	8011a22 <HAL_SPI_Init+0x2e6>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	2200      	movs	r2, #0
 8011a18:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8011a1c:	6878      	ldr	r0, [r7, #4]
 8011a1e:	f7f5 faab 	bl	8006f78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	2202      	movs	r2, #2
 8011a26:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	681b      	ldr	r3, [r3, #0]
 8011a2e:	681a      	ldr	r2, [r3, #0]
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	681b      	ldr	r3, [r3, #0]
 8011a34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011a38:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	68db      	ldr	r3, [r3, #12]
 8011a3e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8011a42:	d902      	bls.n	8011a4a <HAL_SPI_Init+0x30e>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8011a44:	2300      	movs	r3, #0
 8011a46:	60fb      	str	r3, [r7, #12]
 8011a48:	e002      	b.n	8011a50 <HAL_SPI_Init+0x314>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8011a4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011a4e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	68db      	ldr	r3, [r3, #12]
 8011a54:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8011a58:	d007      	beq.n	8011a6a <HAL_SPI_Init+0x32e>
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	68db      	ldr	r3, [r3, #12]
 8011a5e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8011a62:	d002      	beq.n	8011a6a <HAL_SPI_Init+0x32e>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	2200      	movs	r2, #0
 8011a68:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	685b      	ldr	r3, [r3, #4]
 8011a6e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	689b      	ldr	r3, [r3, #8]
 8011a76:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8011a7a:	431a      	orrs	r2, r3
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	691b      	ldr	r3, [r3, #16]
 8011a80:	f003 0302 	and.w	r3, r3, #2
 8011a84:	431a      	orrs	r2, r3
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	695b      	ldr	r3, [r3, #20]
 8011a8a:	f003 0301 	and.w	r3, r3, #1
 8011a8e:	431a      	orrs	r2, r3
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	699b      	ldr	r3, [r3, #24]
 8011a94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011a98:	431a      	orrs	r2, r3
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	69db      	ldr	r3, [r3, #28]
 8011a9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011aa2:	431a      	orrs	r2, r3
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	6a1b      	ldr	r3, [r3, #32]
 8011aa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011aac:	ea42 0103 	orr.w	r1, r2, r3
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011ab4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	681b      	ldr	r3, [r3, #0]
 8011abc:	430a      	orrs	r2, r1
 8011abe:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	699b      	ldr	r3, [r3, #24]
 8011ac4:	0c1b      	lsrs	r3, r3, #16
 8011ac6:	f003 0204 	and.w	r2, r3, #4
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ace:	f003 0310 	and.w	r3, r3, #16
 8011ad2:	431a      	orrs	r2, r3
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011ad8:	f003 0308 	and.w	r3, r3, #8
 8011adc:	431a      	orrs	r2, r3
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	68db      	ldr	r3, [r3, #12]
 8011ae2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8011ae6:	ea42 0103 	orr.w	r1, r2, r3
 8011aea:	68fb      	ldr	r3, [r7, #12]
 8011aec:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	681b      	ldr	r3, [r3, #0]
 8011af4:	430a      	orrs	r2, r1
 8011af6:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	2200      	movs	r2, #0
 8011afc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	2201      	movs	r2, #1
 8011b02:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8011b06:	2300      	movs	r3, #0
}
 8011b08:	4618      	mov	r0, r3
 8011b0a:	3710      	adds	r7, #16
 8011b0c:	46bd      	mov	sp, r7
 8011b0e:	bd80      	pop	{r7, pc}
 8011b10:	08018edc 	.word	0x08018edc

08011b14 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8011b14:	b580      	push	{r7, lr}
 8011b16:	b086      	sub	sp, #24
 8011b18:	af00      	add	r7, sp, #0
 8011b1a:	60f8      	str	r0, [r7, #12]
 8011b1c:	60b9      	str	r1, [r7, #8]
 8011b1e:	4613      	mov	r3, r2
 8011b20:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8011b22:	2300      	movs	r3, #0
 8011b24:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 8011b26:	68fb      	ldr	r3, [r7, #12]
 8011b28:	689b      	ldr	r3, [r3, #8]
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d009      	beq.n	8011b42 <HAL_SPI_Transmit_IT+0x2e>
 8011b2e:	68fb      	ldr	r3, [r7, #12]
 8011b30:	689b      	ldr	r3, [r3, #8]
 8011b32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011b36:	d004      	beq.n	8011b42 <HAL_SPI_Transmit_IT+0x2e>
 8011b38:	f44f 61c3 	mov.w	r1, #1560	; 0x618
 8011b3c:	4840      	ldr	r0, [pc, #256]	; (8011c40 <HAL_SPI_Transmit_IT+0x12c>)
 8011b3e:	f7f2 fd29 	bl	8004594 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8011b42:	68fb      	ldr	r3, [r7, #12]
 8011b44:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8011b48:	2b01      	cmp	r3, #1
 8011b4a:	d101      	bne.n	8011b50 <HAL_SPI_Transmit_IT+0x3c>
 8011b4c:	2302      	movs	r3, #2
 8011b4e:	e072      	b.n	8011c36 <HAL_SPI_Transmit_IT+0x122>
 8011b50:	68fb      	ldr	r3, [r7, #12]
 8011b52:	2201      	movs	r2, #1
 8011b54:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if ((pData == NULL) || (Size == 0U))
 8011b58:	68bb      	ldr	r3, [r7, #8]
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	d002      	beq.n	8011b64 <HAL_SPI_Transmit_IT+0x50>
 8011b5e:	88fb      	ldrh	r3, [r7, #6]
 8011b60:	2b00      	cmp	r3, #0
 8011b62:	d102      	bne.n	8011b6a <HAL_SPI_Transmit_IT+0x56>
  {
    errorcode = HAL_ERROR;
 8011b64:	2301      	movs	r3, #1
 8011b66:	75fb      	strb	r3, [r7, #23]
    goto error;
 8011b68:	e060      	b.n	8011c2c <HAL_SPI_Transmit_IT+0x118>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8011b6a:	68fb      	ldr	r3, [r7, #12]
 8011b6c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8011b70:	b2db      	uxtb	r3, r3
 8011b72:	2b01      	cmp	r3, #1
 8011b74:	d002      	beq.n	8011b7c <HAL_SPI_Transmit_IT+0x68>
  {
    errorcode = HAL_BUSY;
 8011b76:	2302      	movs	r3, #2
 8011b78:	75fb      	strb	r3, [r7, #23]
    goto error;
 8011b7a:	e057      	b.n	8011c2c <HAL_SPI_Transmit_IT+0x118>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8011b7c:	68fb      	ldr	r3, [r7, #12]
 8011b7e:	2203      	movs	r2, #3
 8011b80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8011b84:	68fb      	ldr	r3, [r7, #12]
 8011b86:	2200      	movs	r2, #0
 8011b88:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8011b8a:	68fb      	ldr	r3, [r7, #12]
 8011b8c:	68ba      	ldr	r2, [r7, #8]
 8011b8e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8011b90:	68fb      	ldr	r3, [r7, #12]
 8011b92:	88fa      	ldrh	r2, [r7, #6]
 8011b94:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8011b96:	68fb      	ldr	r3, [r7, #12]
 8011b98:	88fa      	ldrh	r2, [r7, #6]
 8011b9a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8011b9c:	68fb      	ldr	r3, [r7, #12]
 8011b9e:	2200      	movs	r2, #0
 8011ba0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8011ba2:	68fb      	ldr	r3, [r7, #12]
 8011ba4:	2200      	movs	r2, #0
 8011ba6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8011baa:	68fb      	ldr	r3, [r7, #12]
 8011bac:	2200      	movs	r2, #0
 8011bae:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 8011bb2:	68fb      	ldr	r3, [r7, #12]
 8011bb4:	2200      	movs	r2, #0
 8011bb6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8011bb8:	68fb      	ldr	r3, [r7, #12]
 8011bba:	68db      	ldr	r3, [r3, #12]
 8011bbc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8011bc0:	d903      	bls.n	8011bca <HAL_SPI_Transmit_IT+0xb6>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8011bc2:	68fb      	ldr	r3, [r7, #12]
 8011bc4:	4a1f      	ldr	r2, [pc, #124]	; (8011c44 <HAL_SPI_Transmit_IT+0x130>)
 8011bc6:	651a      	str	r2, [r3, #80]	; 0x50
 8011bc8:	e002      	b.n	8011bd0 <HAL_SPI_Transmit_IT+0xbc>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8011bca:	68fb      	ldr	r3, [r7, #12]
 8011bcc:	4a1e      	ldr	r2, [pc, #120]	; (8011c48 <HAL_SPI_Transmit_IT+0x134>)
 8011bce:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011bd0:	68fb      	ldr	r3, [r7, #12]
 8011bd2:	689b      	ldr	r3, [r3, #8]
 8011bd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011bd8:	d10f      	bne.n	8011bfa <HAL_SPI_Transmit_IT+0xe6>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8011bda:	68fb      	ldr	r3, [r7, #12]
 8011bdc:	681b      	ldr	r3, [r3, #0]
 8011bde:	681a      	ldr	r2, [r3, #0]
 8011be0:	68fb      	ldr	r3, [r7, #12]
 8011be2:	681b      	ldr	r3, [r3, #0]
 8011be4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011be8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8011bea:	68fb      	ldr	r3, [r7, #12]
 8011bec:	681b      	ldr	r3, [r3, #0]
 8011bee:	681a      	ldr	r2, [r3, #0]
 8011bf0:	68fb      	ldr	r3, [r7, #12]
 8011bf2:	681b      	ldr	r3, [r3, #0]
 8011bf4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8011bf8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8011bfa:	68fb      	ldr	r3, [r7, #12]
 8011bfc:	681b      	ldr	r3, [r3, #0]
 8011bfe:	685a      	ldr	r2, [r3, #4]
 8011c00:	68fb      	ldr	r3, [r7, #12]
 8011c02:	681b      	ldr	r3, [r3, #0]
 8011c04:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8011c08:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8011c0a:	68fb      	ldr	r3, [r7, #12]
 8011c0c:	681b      	ldr	r3, [r3, #0]
 8011c0e:	681b      	ldr	r3, [r3, #0]
 8011c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011c14:	2b40      	cmp	r3, #64	; 0x40
 8011c16:	d008      	beq.n	8011c2a <HAL_SPI_Transmit_IT+0x116>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8011c18:	68fb      	ldr	r3, [r7, #12]
 8011c1a:	681b      	ldr	r3, [r3, #0]
 8011c1c:	681a      	ldr	r2, [r3, #0]
 8011c1e:	68fb      	ldr	r3, [r7, #12]
 8011c20:	681b      	ldr	r3, [r3, #0]
 8011c22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011c26:	601a      	str	r2, [r3, #0]
 8011c28:	e000      	b.n	8011c2c <HAL_SPI_Transmit_IT+0x118>
  }

error :
 8011c2a:	bf00      	nop
  __HAL_UNLOCK(hspi);
 8011c2c:	68fb      	ldr	r3, [r7, #12]
 8011c2e:	2200      	movs	r2, #0
 8011c30:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8011c34:	7dfb      	ldrb	r3, [r7, #23]
}
 8011c36:	4618      	mov	r0, r3
 8011c38:	3718      	adds	r7, #24
 8011c3a:	46bd      	mov	sp, r7
 8011c3c:	bd80      	pop	{r7, pc}
 8011c3e:	bf00      	nop
 8011c40:	08018edc 	.word	0x08018edc
 8011c44:	08012457 	.word	0x08012457
 8011c48:	08012411 	.word	0x08012411

08011c4c <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8011c4c:	b580      	push	{r7, lr}
 8011c4e:	b086      	sub	sp, #24
 8011c50:	af00      	add	r7, sp, #0
 8011c52:	60f8      	str	r0, [r7, #12]
 8011c54:	60b9      	str	r1, [r7, #8]
 8011c56:	4613      	mov	r3, r2
 8011c58:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8011c5a:	2300      	movs	r3, #0
 8011c5c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8011c5e:	68fb      	ldr	r3, [r7, #12]
 8011c60:	689b      	ldr	r3, [r3, #8]
 8011c62:	2b00      	cmp	r3, #0
 8011c64:	d110      	bne.n	8011c88 <HAL_SPI_Receive_IT+0x3c>
 8011c66:	68fb      	ldr	r3, [r7, #12]
 8011c68:	685b      	ldr	r3, [r3, #4]
 8011c6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8011c6e:	d10b      	bne.n	8011c88 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8011c70:	68fb      	ldr	r3, [r7, #12]
 8011c72:	2204      	movs	r2, #4
 8011c74:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8011c78:	88fb      	ldrh	r3, [r7, #6]
 8011c7a:	68ba      	ldr	r2, [r7, #8]
 8011c7c:	68b9      	ldr	r1, [r7, #8]
 8011c7e:	68f8      	ldr	r0, [r7, #12]
 8011c80:	f000 f894 	bl	8011dac <HAL_SPI_TransmitReceive_IT>
 8011c84:	4603      	mov	r3, r0
 8011c86:	e089      	b.n	8011d9c <HAL_SPI_Receive_IT+0x150>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8011c88:	68fb      	ldr	r3, [r7, #12]
 8011c8a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8011c8e:	2b01      	cmp	r3, #1
 8011c90:	d101      	bne.n	8011c96 <HAL_SPI_Receive_IT+0x4a>
 8011c92:	2302      	movs	r3, #2
 8011c94:	e082      	b.n	8011d9c <HAL_SPI_Receive_IT+0x150>
 8011c96:	68fb      	ldr	r3, [r7, #12]
 8011c98:	2201      	movs	r2, #1
 8011c9a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8011c9e:	68fb      	ldr	r3, [r7, #12]
 8011ca0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8011ca4:	b2db      	uxtb	r3, r3
 8011ca6:	2b01      	cmp	r3, #1
 8011ca8:	d002      	beq.n	8011cb0 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 8011caa:	2302      	movs	r3, #2
 8011cac:	75fb      	strb	r3, [r7, #23]
    goto error;
 8011cae:	e070      	b.n	8011d92 <HAL_SPI_Receive_IT+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 8011cb0:	68bb      	ldr	r3, [r7, #8]
 8011cb2:	2b00      	cmp	r3, #0
 8011cb4:	d002      	beq.n	8011cbc <HAL_SPI_Receive_IT+0x70>
 8011cb6:	88fb      	ldrh	r3, [r7, #6]
 8011cb8:	2b00      	cmp	r3, #0
 8011cba:	d102      	bne.n	8011cc2 <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8011cbc:	2301      	movs	r3, #1
 8011cbe:	75fb      	strb	r3, [r7, #23]
    goto error;
 8011cc0:	e067      	b.n	8011d92 <HAL_SPI_Receive_IT+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8011cc2:	68fb      	ldr	r3, [r7, #12]
 8011cc4:	2204      	movs	r2, #4
 8011cc6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8011cca:	68fb      	ldr	r3, [r7, #12]
 8011ccc:	2200      	movs	r2, #0
 8011cce:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8011cd0:	68fb      	ldr	r3, [r7, #12]
 8011cd2:	68ba      	ldr	r2, [r7, #8]
 8011cd4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8011cd6:	68fb      	ldr	r3, [r7, #12]
 8011cd8:	88fa      	ldrh	r2, [r7, #6]
 8011cda:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8011cde:	68fb      	ldr	r3, [r7, #12]
 8011ce0:	88fa      	ldrh	r2, [r7, #6]
 8011ce2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8011ce6:	68fb      	ldr	r3, [r7, #12]
 8011ce8:	2200      	movs	r2, #0
 8011cea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8011cec:	68fb      	ldr	r3, [r7, #12]
 8011cee:	2200      	movs	r2, #0
 8011cf0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8011cf2:	68fb      	ldr	r3, [r7, #12]
 8011cf4:	2200      	movs	r2, #0
 8011cf6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8011cf8:	68fb      	ldr	r3, [r7, #12]
 8011cfa:	2200      	movs	r2, #0
 8011cfc:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8011cfe:	68fb      	ldr	r3, [r7, #12]
 8011d00:	68db      	ldr	r3, [r3, #12]
 8011d02:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8011d06:	d90b      	bls.n	8011d20 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8011d08:	68fb      	ldr	r3, [r7, #12]
 8011d0a:	681b      	ldr	r3, [r3, #0]
 8011d0c:	685a      	ldr	r2, [r3, #4]
 8011d0e:	68fb      	ldr	r3, [r7, #12]
 8011d10:	681b      	ldr	r3, [r3, #0]
 8011d12:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8011d16:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8011d18:	68fb      	ldr	r3, [r7, #12]
 8011d1a:	4a22      	ldr	r2, [pc, #136]	; (8011da4 <HAL_SPI_Receive_IT+0x158>)
 8011d1c:	64da      	str	r2, [r3, #76]	; 0x4c
 8011d1e:	e00a      	b.n	8011d36 <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8011d20:	68fb      	ldr	r3, [r7, #12]
 8011d22:	681b      	ldr	r3, [r3, #0]
 8011d24:	685a      	ldr	r2, [r3, #4]
 8011d26:	68fb      	ldr	r3, [r7, #12]
 8011d28:	681b      	ldr	r3, [r3, #0]
 8011d2a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8011d2e:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8011d30:	68fb      	ldr	r3, [r7, #12]
 8011d32:	4a1d      	ldr	r2, [pc, #116]	; (8011da8 <HAL_SPI_Receive_IT+0x15c>)
 8011d34:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011d36:	68fb      	ldr	r3, [r7, #12]
 8011d38:	689b      	ldr	r3, [r3, #8]
 8011d3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011d3e:	d10f      	bne.n	8011d60 <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8011d40:	68fb      	ldr	r3, [r7, #12]
 8011d42:	681b      	ldr	r3, [r3, #0]
 8011d44:	681a      	ldr	r2, [r3, #0]
 8011d46:	68fb      	ldr	r3, [r7, #12]
 8011d48:	681b      	ldr	r3, [r3, #0]
 8011d4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011d4e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8011d50:	68fb      	ldr	r3, [r7, #12]
 8011d52:	681b      	ldr	r3, [r3, #0]
 8011d54:	681a      	ldr	r2, [r3, #0]
 8011d56:	68fb      	ldr	r3, [r7, #12]
 8011d58:	681b      	ldr	r3, [r3, #0]
 8011d5a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8011d5e:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8011d60:	68fb      	ldr	r3, [r7, #12]
 8011d62:	681b      	ldr	r3, [r3, #0]
 8011d64:	685a      	ldr	r2, [r3, #4]
 8011d66:	68fb      	ldr	r3, [r7, #12]
 8011d68:	681b      	ldr	r3, [r3, #0]
 8011d6a:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8011d6e:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8011d70:	68fb      	ldr	r3, [r7, #12]
 8011d72:	681b      	ldr	r3, [r3, #0]
 8011d74:	681b      	ldr	r3, [r3, #0]
 8011d76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011d7a:	2b40      	cmp	r3, #64	; 0x40
 8011d7c:	d008      	beq.n	8011d90 <HAL_SPI_Receive_IT+0x144>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8011d7e:	68fb      	ldr	r3, [r7, #12]
 8011d80:	681b      	ldr	r3, [r3, #0]
 8011d82:	681a      	ldr	r2, [r3, #0]
 8011d84:	68fb      	ldr	r3, [r7, #12]
 8011d86:	681b      	ldr	r3, [r3, #0]
 8011d88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011d8c:	601a      	str	r2, [r3, #0]
 8011d8e:	e000      	b.n	8011d92 <HAL_SPI_Receive_IT+0x146>
  }

error :
 8011d90:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8011d92:	68fb      	ldr	r3, [r7, #12]
 8011d94:	2200      	movs	r2, #0
 8011d96:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8011d9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8011d9c:	4618      	mov	r0, r3
 8011d9e:	3718      	adds	r7, #24
 8011da0:	46bd      	mov	sp, r7
 8011da2:	bd80      	pop	{r7, pc}
 8011da4:	080123c5 	.word	0x080123c5
 8011da8:	08012375 	.word	0x08012375

08011dac <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8011dac:	b580      	push	{r7, lr}
 8011dae:	b086      	sub	sp, #24
 8011db0:	af00      	add	r7, sp, #0
 8011db2:	60f8      	str	r0, [r7, #12]
 8011db4:	60b9      	str	r1, [r7, #8]
 8011db6:	607a      	str	r2, [r7, #4]
 8011db8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8011dba:	2300      	movs	r3, #0
 8011dbc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8011dbe:	68fb      	ldr	r3, [r7, #12]
 8011dc0:	689b      	ldr	r3, [r3, #8]
 8011dc2:	2b00      	cmp	r3, #0
 8011dc4:	d004      	beq.n	8011dd0 <HAL_SPI_TransmitReceive_IT+0x24>
 8011dc6:	f240 61da 	movw	r1, #1754	; 0x6da
 8011dca:	4850      	ldr	r0, [pc, #320]	; (8011f0c <HAL_SPI_TransmitReceive_IT+0x160>)
 8011dcc:	f7f2 fbe2 	bl	8004594 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hspi);
 8011dd0:	68fb      	ldr	r3, [r7, #12]
 8011dd2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8011dd6:	2b01      	cmp	r3, #1
 8011dd8:	d101      	bne.n	8011dde <HAL_SPI_TransmitReceive_IT+0x32>
 8011dda:	2302      	movs	r3, #2
 8011ddc:	e091      	b.n	8011f02 <HAL_SPI_TransmitReceive_IT+0x156>
 8011dde:	68fb      	ldr	r3, [r7, #12]
 8011de0:	2201      	movs	r2, #1
 8011de2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8011de6:	68fb      	ldr	r3, [r7, #12]
 8011de8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8011dec:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8011dee:	68fb      	ldr	r3, [r7, #12]
 8011df0:	685b      	ldr	r3, [r3, #4]
 8011df2:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8011df4:	7dbb      	ldrb	r3, [r7, #22]
 8011df6:	2b01      	cmp	r3, #1
 8011df8:	d00d      	beq.n	8011e16 <HAL_SPI_TransmitReceive_IT+0x6a>
 8011dfa:	693b      	ldr	r3, [r7, #16]
 8011dfc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8011e00:	d106      	bne.n	8011e10 <HAL_SPI_TransmitReceive_IT+0x64>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8011e02:	68fb      	ldr	r3, [r7, #12]
 8011e04:	689b      	ldr	r3, [r3, #8]
 8011e06:	2b00      	cmp	r3, #0
 8011e08:	d102      	bne.n	8011e10 <HAL_SPI_TransmitReceive_IT+0x64>
 8011e0a:	7dbb      	ldrb	r3, [r7, #22]
 8011e0c:	2b04      	cmp	r3, #4
 8011e0e:	d002      	beq.n	8011e16 <HAL_SPI_TransmitReceive_IT+0x6a>
  {
    errorcode = HAL_BUSY;
 8011e10:	2302      	movs	r3, #2
 8011e12:	75fb      	strb	r3, [r7, #23]
    goto error;
 8011e14:	e070      	b.n	8011ef8 <HAL_SPI_TransmitReceive_IT+0x14c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8011e16:	68bb      	ldr	r3, [r7, #8]
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	d005      	beq.n	8011e28 <HAL_SPI_TransmitReceive_IT+0x7c>
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	2b00      	cmp	r3, #0
 8011e20:	d002      	beq.n	8011e28 <HAL_SPI_TransmitReceive_IT+0x7c>
 8011e22:	887b      	ldrh	r3, [r7, #2]
 8011e24:	2b00      	cmp	r3, #0
 8011e26:	d102      	bne.n	8011e2e <HAL_SPI_TransmitReceive_IT+0x82>
  {
    errorcode = HAL_ERROR;
 8011e28:	2301      	movs	r3, #1
 8011e2a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8011e2c:	e064      	b.n	8011ef8 <HAL_SPI_TransmitReceive_IT+0x14c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8011e2e:	68fb      	ldr	r3, [r7, #12]
 8011e30:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8011e34:	b2db      	uxtb	r3, r3
 8011e36:	2b04      	cmp	r3, #4
 8011e38:	d003      	beq.n	8011e42 <HAL_SPI_TransmitReceive_IT+0x96>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8011e3a:	68fb      	ldr	r3, [r7, #12]
 8011e3c:	2205      	movs	r2, #5
 8011e3e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8011e42:	68fb      	ldr	r3, [r7, #12]
 8011e44:	2200      	movs	r2, #0
 8011e46:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8011e48:	68fb      	ldr	r3, [r7, #12]
 8011e4a:	68ba      	ldr	r2, [r7, #8]
 8011e4c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8011e4e:	68fb      	ldr	r3, [r7, #12]
 8011e50:	887a      	ldrh	r2, [r7, #2]
 8011e52:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8011e54:	68fb      	ldr	r3, [r7, #12]
 8011e56:	887a      	ldrh	r2, [r7, #2]
 8011e58:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8011e5a:	68fb      	ldr	r3, [r7, #12]
 8011e5c:	687a      	ldr	r2, [r7, #4]
 8011e5e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8011e60:	68fb      	ldr	r3, [r7, #12]
 8011e62:	887a      	ldrh	r2, [r7, #2]
 8011e64:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8011e68:	68fb      	ldr	r3, [r7, #12]
 8011e6a:	887a      	ldrh	r2, [r7, #2]
 8011e6c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8011e70:	68fb      	ldr	r3, [r7, #12]
 8011e72:	68db      	ldr	r3, [r3, #12]
 8011e74:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8011e78:	d906      	bls.n	8011e88 <HAL_SPI_TransmitReceive_IT+0xdc>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8011e7a:	68fb      	ldr	r3, [r7, #12]
 8011e7c:	4a24      	ldr	r2, [pc, #144]	; (8011f10 <HAL_SPI_TransmitReceive_IT+0x164>)
 8011e7e:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8011e80:	68fb      	ldr	r3, [r7, #12]
 8011e82:	4a24      	ldr	r2, [pc, #144]	; (8011f14 <HAL_SPI_TransmitReceive_IT+0x168>)
 8011e84:	651a      	str	r2, [r3, #80]	; 0x50
 8011e86:	e005      	b.n	8011e94 <HAL_SPI_TransmitReceive_IT+0xe8>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8011e88:	68fb      	ldr	r3, [r7, #12]
 8011e8a:	4a23      	ldr	r2, [pc, #140]	; (8011f18 <HAL_SPI_TransmitReceive_IT+0x16c>)
 8011e8c:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8011e8e:	68fb      	ldr	r3, [r7, #12]
 8011e90:	4a22      	ldr	r2, [pc, #136]	; (8011f1c <HAL_SPI_TransmitReceive_IT+0x170>)
 8011e92:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8011e94:	68fb      	ldr	r3, [r7, #12]
 8011e96:	68db      	ldr	r3, [r3, #12]
 8011e98:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8011e9c:	d802      	bhi.n	8011ea4 <HAL_SPI_TransmitReceive_IT+0xf8>
 8011e9e:	887b      	ldrh	r3, [r7, #2]
 8011ea0:	2b01      	cmp	r3, #1
 8011ea2:	d908      	bls.n	8011eb6 <HAL_SPI_TransmitReceive_IT+0x10a>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8011ea4:	68fb      	ldr	r3, [r7, #12]
 8011ea6:	681b      	ldr	r3, [r3, #0]
 8011ea8:	685a      	ldr	r2, [r3, #4]
 8011eaa:	68fb      	ldr	r3, [r7, #12]
 8011eac:	681b      	ldr	r3, [r3, #0]
 8011eae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8011eb2:	605a      	str	r2, [r3, #4]
 8011eb4:	e007      	b.n	8011ec6 <HAL_SPI_TransmitReceive_IT+0x11a>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8011eb6:	68fb      	ldr	r3, [r7, #12]
 8011eb8:	681b      	ldr	r3, [r3, #0]
 8011eba:	685a      	ldr	r2, [r3, #4]
 8011ebc:	68fb      	ldr	r3, [r7, #12]
 8011ebe:	681b      	ldr	r3, [r3, #0]
 8011ec0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8011ec4:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8011ec6:	68fb      	ldr	r3, [r7, #12]
 8011ec8:	681b      	ldr	r3, [r3, #0]
 8011eca:	685a      	ldr	r2, [r3, #4]
 8011ecc:	68fb      	ldr	r3, [r7, #12]
 8011ece:	681b      	ldr	r3, [r3, #0]
 8011ed0:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8011ed4:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8011ed6:	68fb      	ldr	r3, [r7, #12]
 8011ed8:	681b      	ldr	r3, [r3, #0]
 8011eda:	681b      	ldr	r3, [r3, #0]
 8011edc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011ee0:	2b40      	cmp	r3, #64	; 0x40
 8011ee2:	d008      	beq.n	8011ef6 <HAL_SPI_TransmitReceive_IT+0x14a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8011ee4:	68fb      	ldr	r3, [r7, #12]
 8011ee6:	681b      	ldr	r3, [r3, #0]
 8011ee8:	681a      	ldr	r2, [r3, #0]
 8011eea:	68fb      	ldr	r3, [r7, #12]
 8011eec:	681b      	ldr	r3, [r3, #0]
 8011eee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011ef2:	601a      	str	r2, [r3, #0]
 8011ef4:	e000      	b.n	8011ef8 <HAL_SPI_TransmitReceive_IT+0x14c>
  }

error :
 8011ef6:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8011ef8:	68fb      	ldr	r3, [r7, #12]
 8011efa:	2200      	movs	r2, #0
 8011efc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8011f00:	7dfb      	ldrb	r3, [r7, #23]
}
 8011f02:	4618      	mov	r0, r3
 8011f04:	3718      	adds	r7, #24
 8011f06:	46bd      	mov	sp, r7
 8011f08:	bd80      	pop	{r7, pc}
 8011f0a:	bf00      	nop
 8011f0c:	08018edc 	.word	0x08018edc
 8011f10:	080122af 	.word	0x080122af
 8011f14:	08012315 	.word	0x08012315
 8011f18:	0801215f 	.word	0x0801215f
 8011f1c:	0801221d 	.word	0x0801221d

08011f20 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8011f20:	b580      	push	{r7, lr}
 8011f22:	b088      	sub	sp, #32
 8011f24:	af00      	add	r7, sp, #0
 8011f26:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	681b      	ldr	r3, [r3, #0]
 8011f2c:	685b      	ldr	r3, [r3, #4]
 8011f2e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	681b      	ldr	r3, [r3, #0]
 8011f34:	689b      	ldr	r3, [r3, #8]
 8011f36:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8011f38:	69bb      	ldr	r3, [r7, #24]
 8011f3a:	099b      	lsrs	r3, r3, #6
 8011f3c:	f003 0301 	and.w	r3, r3, #1
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	d10f      	bne.n	8011f64 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8011f44:	69bb      	ldr	r3, [r7, #24]
 8011f46:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8011f4a:	2b00      	cmp	r3, #0
 8011f4c:	d00a      	beq.n	8011f64 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8011f4e:	69fb      	ldr	r3, [r7, #28]
 8011f50:	099b      	lsrs	r3, r3, #6
 8011f52:	f003 0301 	and.w	r3, r3, #1
 8011f56:	2b00      	cmp	r3, #0
 8011f58:	d004      	beq.n	8011f64 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011f5e:	6878      	ldr	r0, [r7, #4]
 8011f60:	4798      	blx	r3
    return;
 8011f62:	e0d7      	b.n	8012114 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8011f64:	69bb      	ldr	r3, [r7, #24]
 8011f66:	085b      	lsrs	r3, r3, #1
 8011f68:	f003 0301 	and.w	r3, r3, #1
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	d00a      	beq.n	8011f86 <HAL_SPI_IRQHandler+0x66>
 8011f70:	69fb      	ldr	r3, [r7, #28]
 8011f72:	09db      	lsrs	r3, r3, #7
 8011f74:	f003 0301 	and.w	r3, r3, #1
 8011f78:	2b00      	cmp	r3, #0
 8011f7a:	d004      	beq.n	8011f86 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011f80:	6878      	ldr	r0, [r7, #4]
 8011f82:	4798      	blx	r3
    return;
 8011f84:	e0c6      	b.n	8012114 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8011f86:	69bb      	ldr	r3, [r7, #24]
 8011f88:	095b      	lsrs	r3, r3, #5
 8011f8a:	f003 0301 	and.w	r3, r3, #1
 8011f8e:	2b00      	cmp	r3, #0
 8011f90:	d10c      	bne.n	8011fac <HAL_SPI_IRQHandler+0x8c>
 8011f92:	69bb      	ldr	r3, [r7, #24]
 8011f94:	099b      	lsrs	r3, r3, #6
 8011f96:	f003 0301 	and.w	r3, r3, #1
 8011f9a:	2b00      	cmp	r3, #0
 8011f9c:	d106      	bne.n	8011fac <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8011f9e:	69bb      	ldr	r3, [r7, #24]
 8011fa0:	0a1b      	lsrs	r3, r3, #8
 8011fa2:	f003 0301 	and.w	r3, r3, #1
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	f000 80b4 	beq.w	8012114 <HAL_SPI_IRQHandler+0x1f4>
 8011fac:	69fb      	ldr	r3, [r7, #28]
 8011fae:	095b      	lsrs	r3, r3, #5
 8011fb0:	f003 0301 	and.w	r3, r3, #1
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	f000 80ad 	beq.w	8012114 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8011fba:	69bb      	ldr	r3, [r7, #24]
 8011fbc:	099b      	lsrs	r3, r3, #6
 8011fbe:	f003 0301 	and.w	r3, r3, #1
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	d023      	beq.n	801200e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8011fcc:	b2db      	uxtb	r3, r3
 8011fce:	2b03      	cmp	r3, #3
 8011fd0:	d011      	beq.n	8011ff6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011fd6:	f043 0204 	orr.w	r2, r3, #4
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8011fde:	2300      	movs	r3, #0
 8011fe0:	617b      	str	r3, [r7, #20]
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	681b      	ldr	r3, [r3, #0]
 8011fe6:	68db      	ldr	r3, [r3, #12]
 8011fe8:	617b      	str	r3, [r7, #20]
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	681b      	ldr	r3, [r3, #0]
 8011fee:	689b      	ldr	r3, [r3, #8]
 8011ff0:	617b      	str	r3, [r7, #20]
 8011ff2:	697b      	ldr	r3, [r7, #20]
 8011ff4:	e00b      	b.n	801200e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8011ff6:	2300      	movs	r3, #0
 8011ff8:	613b      	str	r3, [r7, #16]
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	681b      	ldr	r3, [r3, #0]
 8011ffe:	68db      	ldr	r3, [r3, #12]
 8012000:	613b      	str	r3, [r7, #16]
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	681b      	ldr	r3, [r3, #0]
 8012006:	689b      	ldr	r3, [r3, #8]
 8012008:	613b      	str	r3, [r7, #16]
 801200a:	693b      	ldr	r3, [r7, #16]
        return;
 801200c:	e082      	b.n	8012114 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 801200e:	69bb      	ldr	r3, [r7, #24]
 8012010:	095b      	lsrs	r3, r3, #5
 8012012:	f003 0301 	and.w	r3, r3, #1
 8012016:	2b00      	cmp	r3, #0
 8012018:	d014      	beq.n	8012044 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801201e:	f043 0201 	orr.w	r2, r3, #1
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8012026:	2300      	movs	r3, #0
 8012028:	60fb      	str	r3, [r7, #12]
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	681b      	ldr	r3, [r3, #0]
 801202e:	689b      	ldr	r3, [r3, #8]
 8012030:	60fb      	str	r3, [r7, #12]
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	681b      	ldr	r3, [r3, #0]
 8012036:	681a      	ldr	r2, [r3, #0]
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	681b      	ldr	r3, [r3, #0]
 801203c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8012040:	601a      	str	r2, [r3, #0]
 8012042:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8012044:	69bb      	ldr	r3, [r7, #24]
 8012046:	0a1b      	lsrs	r3, r3, #8
 8012048:	f003 0301 	and.w	r3, r3, #1
 801204c:	2b00      	cmp	r3, #0
 801204e:	d00c      	beq.n	801206a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012054:	f043 0208 	orr.w	r2, r3, #8
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 801205c:	2300      	movs	r3, #0
 801205e:	60bb      	str	r3, [r7, #8]
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	681b      	ldr	r3, [r3, #0]
 8012064:	689b      	ldr	r3, [r3, #8]
 8012066:	60bb      	str	r3, [r7, #8]
 8012068:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801206e:	2b00      	cmp	r3, #0
 8012070:	d04f      	beq.n	8012112 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	681b      	ldr	r3, [r3, #0]
 8012076:	685a      	ldr	r2, [r3, #4]
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	681b      	ldr	r3, [r3, #0]
 801207c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8012080:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	2201      	movs	r2, #1
 8012086:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 801208a:	69fb      	ldr	r3, [r7, #28]
 801208c:	f003 0302 	and.w	r3, r3, #2
 8012090:	2b00      	cmp	r3, #0
 8012092:	d104      	bne.n	801209e <HAL_SPI_IRQHandler+0x17e>
 8012094:	69fb      	ldr	r3, [r7, #28]
 8012096:	f003 0301 	and.w	r3, r3, #1
 801209a:	2b00      	cmp	r3, #0
 801209c:	d034      	beq.n	8012108 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	681b      	ldr	r3, [r3, #0]
 80120a2:	685a      	ldr	r2, [r3, #4]
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	681b      	ldr	r3, [r3, #0]
 80120a8:	f022 0203 	bic.w	r2, r2, #3
 80120ac:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80120b2:	2b00      	cmp	r3, #0
 80120b4:	d011      	beq.n	80120da <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80120ba:	4a18      	ldr	r2, [pc, #96]	; (801211c <HAL_SPI_IRQHandler+0x1fc>)
 80120bc:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80120c2:	4618      	mov	r0, r3
 80120c4:	f7fa fb38 	bl	800c738 <HAL_DMA_Abort_IT>
 80120c8:	4603      	mov	r3, r0
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	d005      	beq.n	80120da <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80120d2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80120de:	2b00      	cmp	r3, #0
 80120e0:	d016      	beq.n	8012110 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80120e6:	4a0d      	ldr	r2, [pc, #52]	; (801211c <HAL_SPI_IRQHandler+0x1fc>)
 80120e8:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80120ee:	4618      	mov	r0, r3
 80120f0:	f7fa fb22 	bl	800c738 <HAL_DMA_Abort_IT>
 80120f4:	4603      	mov	r3, r0
 80120f6:	2b00      	cmp	r3, #0
 80120f8:	d00a      	beq.n	8012110 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80120fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8012106:	e003      	b.n	8012110 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8012108:	6878      	ldr	r0, [r7, #4]
 801210a:	f000 f809 	bl	8012120 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 801210e:	e000      	b.n	8012112 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8012110:	bf00      	nop
    return;
 8012112:	bf00      	nop
  }
}
 8012114:	3720      	adds	r7, #32
 8012116:	46bd      	mov	sp, r7
 8012118:	bd80      	pop	{r7, pc}
 801211a:	bf00      	nop
 801211c:	08012135 	.word	0x08012135

08012120 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8012120:	b480      	push	{r7}
 8012122:	b083      	sub	sp, #12
 8012124:	af00      	add	r7, sp, #0
 8012126:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8012128:	bf00      	nop
 801212a:	370c      	adds	r7, #12
 801212c:	46bd      	mov	sp, r7
 801212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012132:	4770      	bx	lr

08012134 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8012134:	b580      	push	{r7, lr}
 8012136:	b084      	sub	sp, #16
 8012138:	af00      	add	r7, sp, #0
 801213a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012140:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8012142:	68fb      	ldr	r3, [r7, #12]
 8012144:	2200      	movs	r2, #0
 8012146:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 801214a:	68fb      	ldr	r3, [r7, #12]
 801214c:	2200      	movs	r2, #0
 801214e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8012150:	68f8      	ldr	r0, [r7, #12]
 8012152:	f7ff ffe5 	bl	8012120 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8012156:	bf00      	nop
 8012158:	3710      	adds	r7, #16
 801215a:	46bd      	mov	sp, r7
 801215c:	bd80      	pop	{r7, pc}

0801215e <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 801215e:	b580      	push	{r7, lr}
 8012160:	b082      	sub	sp, #8
 8012162:	af00      	add	r7, sp, #0
 8012164:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801216c:	b29b      	uxth	r3, r3
 801216e:	2b01      	cmp	r3, #1
 8012170:	d923      	bls.n	80121ba <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	681b      	ldr	r3, [r3, #0]
 8012176:	68da      	ldr	r2, [r3, #12]
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801217c:	b292      	uxth	r2, r2
 801217e:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012184:	1c9a      	adds	r2, r3, #2
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 801218a:	687b      	ldr	r3, [r7, #4]
 801218c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8012190:	b29b      	uxth	r3, r3
 8012192:	3b02      	subs	r3, #2
 8012194:	b29a      	uxth	r2, r3
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80121a2:	b29b      	uxth	r3, r3
 80121a4:	2b01      	cmp	r3, #1
 80121a6:	d11f      	bne.n	80121e8 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	681b      	ldr	r3, [r3, #0]
 80121ac:	685a      	ldr	r2, [r3, #4]
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	681b      	ldr	r3, [r3, #0]
 80121b2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80121b6:	605a      	str	r2, [r3, #4]
 80121b8:	e016      	b.n	80121e8 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	681b      	ldr	r3, [r3, #0]
 80121be:	f103 020c 	add.w	r2, r3, #12
 80121c2:	687b      	ldr	r3, [r7, #4]
 80121c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80121c6:	7812      	ldrb	r2, [r2, #0]
 80121c8:	b2d2      	uxtb	r2, r2
 80121ca:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80121d0:	1c5a      	adds	r2, r3, #1
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80121dc:	b29b      	uxth	r3, r3
 80121de:	3b01      	subs	r3, #1
 80121e0:	b29a      	uxth	r2, r3
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80121ee:	b29b      	uxth	r3, r3
 80121f0:	2b00      	cmp	r3, #0
 80121f2:	d10f      	bne.n	8012214 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	681b      	ldr	r3, [r3, #0]
 80121f8:	685a      	ldr	r2, [r3, #4]
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	681b      	ldr	r3, [r3, #0]
 80121fe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8012202:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012208:	b29b      	uxth	r3, r3
 801220a:	2b00      	cmp	r3, #0
 801220c:	d102      	bne.n	8012214 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 801220e:	6878      	ldr	r0, [r7, #4]
 8012210:	f000 fb00 	bl	8012814 <SPI_CloseRxTx_ISR>
    }
  }
}
 8012214:	bf00      	nop
 8012216:	3708      	adds	r7, #8
 8012218:	46bd      	mov	sp, r7
 801221a:	bd80      	pop	{r7, pc}

0801221c <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 801221c:	b580      	push	{r7, lr}
 801221e:	b082      	sub	sp, #8
 8012220:	af00      	add	r7, sp, #0
 8012222:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012228:	b29b      	uxth	r3, r3
 801222a:	2b01      	cmp	r3, #1
 801222c:	d912      	bls.n	8012254 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012232:	881a      	ldrh	r2, [r3, #0]
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	681b      	ldr	r3, [r3, #0]
 8012238:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801223e:	1c9a      	adds	r2, r3, #2
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012248:	b29b      	uxth	r3, r3
 801224a:	3b02      	subs	r3, #2
 801224c:	b29a      	uxth	r2, r3
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	87da      	strh	r2, [r3, #62]	; 0x3e
 8012252:	e012      	b.n	801227a <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	681b      	ldr	r3, [r3, #0]
 801225c:	330c      	adds	r3, #12
 801225e:	7812      	ldrb	r2, [r2, #0]
 8012260:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012266:	1c5a      	adds	r2, r3, #1
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 801226c:	687b      	ldr	r3, [r7, #4]
 801226e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012270:	b29b      	uxth	r3, r3
 8012272:	3b01      	subs	r3, #1
 8012274:	b29a      	uxth	r2, r3
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801227e:	b29b      	uxth	r3, r3
 8012280:	2b00      	cmp	r3, #0
 8012282:	d110      	bne.n	80122a6 <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	681b      	ldr	r3, [r3, #0]
 8012288:	685a      	ldr	r2, [r3, #4]
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	681b      	ldr	r3, [r3, #0]
 801228e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8012292:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801229a:	b29b      	uxth	r3, r3
 801229c:	2b00      	cmp	r3, #0
 801229e:	d102      	bne.n	80122a6 <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 80122a0:	6878      	ldr	r0, [r7, #4]
 80122a2:	f000 fab7 	bl	8012814 <SPI_CloseRxTx_ISR>
    }
  }
}
 80122a6:	bf00      	nop
 80122a8:	3708      	adds	r7, #8
 80122aa:	46bd      	mov	sp, r7
 80122ac:	bd80      	pop	{r7, pc}

080122ae <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80122ae:	b580      	push	{r7, lr}
 80122b0:	b082      	sub	sp, #8
 80122b2:	af00      	add	r7, sp, #0
 80122b4:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	681b      	ldr	r3, [r3, #0]
 80122ba:	68da      	ldr	r2, [r3, #12]
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80122c0:	b292      	uxth	r2, r2
 80122c2:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80122c8:	1c9a      	adds	r2, r3, #2
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80122d4:	b29b      	uxth	r3, r3
 80122d6:	3b01      	subs	r3, #1
 80122d8:	b29a      	uxth	r2, r3
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80122e6:	b29b      	uxth	r3, r3
 80122e8:	2b00      	cmp	r3, #0
 80122ea:	d10f      	bne.n	801230c <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	681b      	ldr	r3, [r3, #0]
 80122f0:	685a      	ldr	r2, [r3, #4]
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	681b      	ldr	r3, [r3, #0]
 80122f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80122fa:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012300:	b29b      	uxth	r3, r3
 8012302:	2b00      	cmp	r3, #0
 8012304:	d102      	bne.n	801230c <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8012306:	6878      	ldr	r0, [r7, #4]
 8012308:	f000 fa84 	bl	8012814 <SPI_CloseRxTx_ISR>
    }
  }
}
 801230c:	bf00      	nop
 801230e:	3708      	adds	r7, #8
 8012310:	46bd      	mov	sp, r7
 8012312:	bd80      	pop	{r7, pc}

08012314 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8012314:	b580      	push	{r7, lr}
 8012316:	b082      	sub	sp, #8
 8012318:	af00      	add	r7, sp, #0
 801231a:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012320:	881a      	ldrh	r2, [r3, #0]
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	681b      	ldr	r3, [r3, #0]
 8012326:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801232c:	1c9a      	adds	r2, r3, #2
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012336:	b29b      	uxth	r3, r3
 8012338:	3b01      	subs	r3, #1
 801233a:	b29a      	uxth	r2, r3
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012344:	b29b      	uxth	r3, r3
 8012346:	2b00      	cmp	r3, #0
 8012348:	d110      	bne.n	801236c <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	681b      	ldr	r3, [r3, #0]
 801234e:	685a      	ldr	r2, [r3, #4]
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	681b      	ldr	r3, [r3, #0]
 8012354:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8012358:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8012360:	b29b      	uxth	r3, r3
 8012362:	2b00      	cmp	r3, #0
 8012364:	d102      	bne.n	801236c <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8012366:	6878      	ldr	r0, [r7, #4]
 8012368:	f000 fa54 	bl	8012814 <SPI_CloseRxTx_ISR>
    }
  }
}
 801236c:	bf00      	nop
 801236e:	3708      	adds	r7, #8
 8012370:	46bd      	mov	sp, r7
 8012372:	bd80      	pop	{r7, pc}

08012374 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8012374:	b580      	push	{r7, lr}
 8012376:	b082      	sub	sp, #8
 8012378:	af00      	add	r7, sp, #0
 801237a:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	681b      	ldr	r3, [r3, #0]
 8012380:	f103 020c 	add.w	r2, r3, #12
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012388:	7812      	ldrb	r2, [r2, #0]
 801238a:	b2d2      	uxtb	r2, r2
 801238c:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012392:	1c5a      	adds	r2, r3, #1
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801239e:	b29b      	uxth	r3, r3
 80123a0:	3b01      	subs	r3, #1
 80123a2:	b29a      	uxth	r2, r3
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80123b0:	b29b      	uxth	r3, r3
 80123b2:	2b00      	cmp	r3, #0
 80123b4:	d102      	bne.n	80123bc <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80123b6:	6878      	ldr	r0, [r7, #4]
 80123b8:	f000 fa6e 	bl	8012898 <SPI_CloseRx_ISR>
  }
}
 80123bc:	bf00      	nop
 80123be:	3708      	adds	r7, #8
 80123c0:	46bd      	mov	sp, r7
 80123c2:	bd80      	pop	{r7, pc}

080123c4 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80123c4:	b580      	push	{r7, lr}
 80123c6:	b082      	sub	sp, #8
 80123c8:	af00      	add	r7, sp, #0
 80123ca:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	681b      	ldr	r3, [r3, #0]
 80123d0:	68da      	ldr	r2, [r3, #12]
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80123d6:	b292      	uxth	r2, r2
 80123d8:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80123de:	1c9a      	adds	r2, r3, #2
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80123ea:	b29b      	uxth	r3, r3
 80123ec:	3b01      	subs	r3, #1
 80123ee:	b29a      	uxth	r2, r3
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80123fc:	b29b      	uxth	r3, r3
 80123fe:	2b00      	cmp	r3, #0
 8012400:	d102      	bne.n	8012408 <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8012402:	6878      	ldr	r0, [r7, #4]
 8012404:	f000 fa48 	bl	8012898 <SPI_CloseRx_ISR>
  }
}
 8012408:	bf00      	nop
 801240a:	3708      	adds	r7, #8
 801240c:	46bd      	mov	sp, r7
 801240e:	bd80      	pop	{r7, pc}

08012410 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8012410:	b580      	push	{r7, lr}
 8012412:	b082      	sub	sp, #8
 8012414:	af00      	add	r7, sp, #0
 8012416:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	681b      	ldr	r3, [r3, #0]
 8012420:	330c      	adds	r3, #12
 8012422:	7812      	ldrb	r2, [r2, #0]
 8012424:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801242a:	1c5a      	adds	r2, r3, #1
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012434:	b29b      	uxth	r3, r3
 8012436:	3b01      	subs	r3, #1
 8012438:	b29a      	uxth	r2, r3
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012442:	b29b      	uxth	r3, r3
 8012444:	2b00      	cmp	r3, #0
 8012446:	d102      	bne.n	801244e <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8012448:	6878      	ldr	r0, [r7, #4]
 801244a:	f000 fa55 	bl	80128f8 <SPI_CloseTx_ISR>
  }
}
 801244e:	bf00      	nop
 8012450:	3708      	adds	r7, #8
 8012452:	46bd      	mov	sp, r7
 8012454:	bd80      	pop	{r7, pc}

08012456 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8012456:	b580      	push	{r7, lr}
 8012458:	b082      	sub	sp, #8
 801245a:	af00      	add	r7, sp, #0
 801245c:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012462:	881a      	ldrh	r2, [r3, #0]
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	681b      	ldr	r3, [r3, #0]
 8012468:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801246e:	1c9a      	adds	r2, r3, #2
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012478:	b29b      	uxth	r3, r3
 801247a:	3b01      	subs	r3, #1
 801247c:	b29a      	uxth	r2, r3
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012486:	b29b      	uxth	r3, r3
 8012488:	2b00      	cmp	r3, #0
 801248a:	d102      	bne.n	8012492 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 801248c:	6878      	ldr	r0, [r7, #4]
 801248e:	f000 fa33 	bl	80128f8 <SPI_CloseTx_ISR>
  }
}
 8012492:	bf00      	nop
 8012494:	3708      	adds	r7, #8
 8012496:	46bd      	mov	sp, r7
 8012498:	bd80      	pop	{r7, pc}
	...

0801249c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801249c:	b580      	push	{r7, lr}
 801249e:	b088      	sub	sp, #32
 80124a0:	af00      	add	r7, sp, #0
 80124a2:	60f8      	str	r0, [r7, #12]
 80124a4:	60b9      	str	r1, [r7, #8]
 80124a6:	603b      	str	r3, [r7, #0]
 80124a8:	4613      	mov	r3, r2
 80124aa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80124ac:	f7f6 fd04 	bl	8008eb8 <HAL_GetTick>
 80124b0:	4602      	mov	r2, r0
 80124b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124b4:	1a9b      	subs	r3, r3, r2
 80124b6:	683a      	ldr	r2, [r7, #0]
 80124b8:	4413      	add	r3, r2
 80124ba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80124bc:	f7f6 fcfc 	bl	8008eb8 <HAL_GetTick>
 80124c0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80124c2:	4b39      	ldr	r3, [pc, #228]	; (80125a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80124c4:	681b      	ldr	r3, [r3, #0]
 80124c6:	015b      	lsls	r3, r3, #5
 80124c8:	0d1b      	lsrs	r3, r3, #20
 80124ca:	69fa      	ldr	r2, [r7, #28]
 80124cc:	fb02 f303 	mul.w	r3, r2, r3
 80124d0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80124d2:	e054      	b.n	801257e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80124d4:	683b      	ldr	r3, [r7, #0]
 80124d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80124da:	d050      	beq.n	801257e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80124dc:	f7f6 fcec 	bl	8008eb8 <HAL_GetTick>
 80124e0:	4602      	mov	r2, r0
 80124e2:	69bb      	ldr	r3, [r7, #24]
 80124e4:	1ad3      	subs	r3, r2, r3
 80124e6:	69fa      	ldr	r2, [r7, #28]
 80124e8:	429a      	cmp	r2, r3
 80124ea:	d902      	bls.n	80124f2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80124ec:	69fb      	ldr	r3, [r7, #28]
 80124ee:	2b00      	cmp	r3, #0
 80124f0:	d13d      	bne.n	801256e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80124f2:	68fb      	ldr	r3, [r7, #12]
 80124f4:	681b      	ldr	r3, [r3, #0]
 80124f6:	685a      	ldr	r2, [r3, #4]
 80124f8:	68fb      	ldr	r3, [r7, #12]
 80124fa:	681b      	ldr	r3, [r3, #0]
 80124fc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8012500:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8012502:	68fb      	ldr	r3, [r7, #12]
 8012504:	685b      	ldr	r3, [r3, #4]
 8012506:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801250a:	d111      	bne.n	8012530 <SPI_WaitFlagStateUntilTimeout+0x94>
 801250c:	68fb      	ldr	r3, [r7, #12]
 801250e:	689b      	ldr	r3, [r3, #8]
 8012510:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012514:	d004      	beq.n	8012520 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8012516:	68fb      	ldr	r3, [r7, #12]
 8012518:	689b      	ldr	r3, [r3, #8]
 801251a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801251e:	d107      	bne.n	8012530 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8012520:	68fb      	ldr	r3, [r7, #12]
 8012522:	681b      	ldr	r3, [r3, #0]
 8012524:	681a      	ldr	r2, [r3, #0]
 8012526:	68fb      	ldr	r3, [r7, #12]
 8012528:	681b      	ldr	r3, [r3, #0]
 801252a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801252e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8012530:	68fb      	ldr	r3, [r7, #12]
 8012532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012534:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012538:	d10f      	bne.n	801255a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 801253a:	68fb      	ldr	r3, [r7, #12]
 801253c:	681b      	ldr	r3, [r3, #0]
 801253e:	681a      	ldr	r2, [r3, #0]
 8012540:	68fb      	ldr	r3, [r7, #12]
 8012542:	681b      	ldr	r3, [r3, #0]
 8012544:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8012548:	601a      	str	r2, [r3, #0]
 801254a:	68fb      	ldr	r3, [r7, #12]
 801254c:	681b      	ldr	r3, [r3, #0]
 801254e:	681a      	ldr	r2, [r3, #0]
 8012550:	68fb      	ldr	r3, [r7, #12]
 8012552:	681b      	ldr	r3, [r3, #0]
 8012554:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8012558:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801255a:	68fb      	ldr	r3, [r7, #12]
 801255c:	2201      	movs	r2, #1
 801255e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8012562:	68fb      	ldr	r3, [r7, #12]
 8012564:	2200      	movs	r2, #0
 8012566:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 801256a:	2303      	movs	r3, #3
 801256c:	e017      	b.n	801259e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 801256e:	697b      	ldr	r3, [r7, #20]
 8012570:	2b00      	cmp	r3, #0
 8012572:	d101      	bne.n	8012578 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8012574:	2300      	movs	r3, #0
 8012576:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8012578:	697b      	ldr	r3, [r7, #20]
 801257a:	3b01      	subs	r3, #1
 801257c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801257e:	68fb      	ldr	r3, [r7, #12]
 8012580:	681b      	ldr	r3, [r3, #0]
 8012582:	689a      	ldr	r2, [r3, #8]
 8012584:	68bb      	ldr	r3, [r7, #8]
 8012586:	4013      	ands	r3, r2
 8012588:	68ba      	ldr	r2, [r7, #8]
 801258a:	429a      	cmp	r2, r3
 801258c:	bf0c      	ite	eq
 801258e:	2301      	moveq	r3, #1
 8012590:	2300      	movne	r3, #0
 8012592:	b2db      	uxtb	r3, r3
 8012594:	461a      	mov	r2, r3
 8012596:	79fb      	ldrb	r3, [r7, #7]
 8012598:	429a      	cmp	r2, r3
 801259a:	d19b      	bne.n	80124d4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 801259c:	2300      	movs	r3, #0
}
 801259e:	4618      	mov	r0, r3
 80125a0:	3720      	adds	r7, #32
 80125a2:	46bd      	mov	sp, r7
 80125a4:	bd80      	pop	{r7, pc}
 80125a6:	bf00      	nop
 80125a8:	20000ff4 	.word	0x20000ff4

080125ac <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80125ac:	b580      	push	{r7, lr}
 80125ae:	b08a      	sub	sp, #40	; 0x28
 80125b0:	af00      	add	r7, sp, #0
 80125b2:	60f8      	str	r0, [r7, #12]
 80125b4:	60b9      	str	r1, [r7, #8]
 80125b6:	607a      	str	r2, [r7, #4]
 80125b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80125ba:	2300      	movs	r3, #0
 80125bc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80125be:	f7f6 fc7b 	bl	8008eb8 <HAL_GetTick>
 80125c2:	4602      	mov	r2, r0
 80125c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125c6:	1a9b      	subs	r3, r3, r2
 80125c8:	683a      	ldr	r2, [r7, #0]
 80125ca:	4413      	add	r3, r2
 80125cc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80125ce:	f7f6 fc73 	bl	8008eb8 <HAL_GetTick>
 80125d2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80125d4:	68fb      	ldr	r3, [r7, #12]
 80125d6:	681b      	ldr	r3, [r3, #0]
 80125d8:	330c      	adds	r3, #12
 80125da:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80125dc:	4b3d      	ldr	r3, [pc, #244]	; (80126d4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80125de:	681a      	ldr	r2, [r3, #0]
 80125e0:	4613      	mov	r3, r2
 80125e2:	009b      	lsls	r3, r3, #2
 80125e4:	4413      	add	r3, r2
 80125e6:	00da      	lsls	r2, r3, #3
 80125e8:	1ad3      	subs	r3, r2, r3
 80125ea:	0d1b      	lsrs	r3, r3, #20
 80125ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80125ee:	fb02 f303 	mul.w	r3, r2, r3
 80125f2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80125f4:	e060      	b.n	80126b8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80125f6:	68bb      	ldr	r3, [r7, #8]
 80125f8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80125fc:	d107      	bne.n	801260e <SPI_WaitFifoStateUntilTimeout+0x62>
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	2b00      	cmp	r3, #0
 8012602:	d104      	bne.n	801260e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8012604:	69fb      	ldr	r3, [r7, #28]
 8012606:	781b      	ldrb	r3, [r3, #0]
 8012608:	b2db      	uxtb	r3, r3
 801260a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 801260c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 801260e:	683b      	ldr	r3, [r7, #0]
 8012610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012614:	d050      	beq.n	80126b8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8012616:	f7f6 fc4f 	bl	8008eb8 <HAL_GetTick>
 801261a:	4602      	mov	r2, r0
 801261c:	6a3b      	ldr	r3, [r7, #32]
 801261e:	1ad3      	subs	r3, r2, r3
 8012620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012622:	429a      	cmp	r2, r3
 8012624:	d902      	bls.n	801262c <SPI_WaitFifoStateUntilTimeout+0x80>
 8012626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012628:	2b00      	cmp	r3, #0
 801262a:	d13d      	bne.n	80126a8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801262c:	68fb      	ldr	r3, [r7, #12]
 801262e:	681b      	ldr	r3, [r3, #0]
 8012630:	685a      	ldr	r2, [r3, #4]
 8012632:	68fb      	ldr	r3, [r7, #12]
 8012634:	681b      	ldr	r3, [r3, #0]
 8012636:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801263a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801263c:	68fb      	ldr	r3, [r7, #12]
 801263e:	685b      	ldr	r3, [r3, #4]
 8012640:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8012644:	d111      	bne.n	801266a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8012646:	68fb      	ldr	r3, [r7, #12]
 8012648:	689b      	ldr	r3, [r3, #8]
 801264a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801264e:	d004      	beq.n	801265a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8012650:	68fb      	ldr	r3, [r7, #12]
 8012652:	689b      	ldr	r3, [r3, #8]
 8012654:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012658:	d107      	bne.n	801266a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801265a:	68fb      	ldr	r3, [r7, #12]
 801265c:	681b      	ldr	r3, [r3, #0]
 801265e:	681a      	ldr	r2, [r3, #0]
 8012660:	68fb      	ldr	r3, [r7, #12]
 8012662:	681b      	ldr	r3, [r3, #0]
 8012664:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8012668:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801266a:	68fb      	ldr	r3, [r7, #12]
 801266c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801266e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012672:	d10f      	bne.n	8012694 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8012674:	68fb      	ldr	r3, [r7, #12]
 8012676:	681b      	ldr	r3, [r3, #0]
 8012678:	681a      	ldr	r2, [r3, #0]
 801267a:	68fb      	ldr	r3, [r7, #12]
 801267c:	681b      	ldr	r3, [r3, #0]
 801267e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8012682:	601a      	str	r2, [r3, #0]
 8012684:	68fb      	ldr	r3, [r7, #12]
 8012686:	681b      	ldr	r3, [r3, #0]
 8012688:	681a      	ldr	r2, [r3, #0]
 801268a:	68fb      	ldr	r3, [r7, #12]
 801268c:	681b      	ldr	r3, [r3, #0]
 801268e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8012692:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8012694:	68fb      	ldr	r3, [r7, #12]
 8012696:	2201      	movs	r2, #1
 8012698:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801269c:	68fb      	ldr	r3, [r7, #12]
 801269e:	2200      	movs	r2, #0
 80126a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80126a4:	2303      	movs	r3, #3
 80126a6:	e010      	b.n	80126ca <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80126a8:	69bb      	ldr	r3, [r7, #24]
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	d101      	bne.n	80126b2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80126ae:	2300      	movs	r3, #0
 80126b0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80126b2:	69bb      	ldr	r3, [r7, #24]
 80126b4:	3b01      	subs	r3, #1
 80126b6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80126b8:	68fb      	ldr	r3, [r7, #12]
 80126ba:	681b      	ldr	r3, [r3, #0]
 80126bc:	689a      	ldr	r2, [r3, #8]
 80126be:	68bb      	ldr	r3, [r7, #8]
 80126c0:	4013      	ands	r3, r2
 80126c2:	687a      	ldr	r2, [r7, #4]
 80126c4:	429a      	cmp	r2, r3
 80126c6:	d196      	bne.n	80125f6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80126c8:	2300      	movs	r3, #0
}
 80126ca:	4618      	mov	r0, r3
 80126cc:	3728      	adds	r7, #40	; 0x28
 80126ce:	46bd      	mov	sp, r7
 80126d0:	bd80      	pop	{r7, pc}
 80126d2:	bf00      	nop
 80126d4:	20000ff4 	.word	0x20000ff4

080126d8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80126d8:	b580      	push	{r7, lr}
 80126da:	b086      	sub	sp, #24
 80126dc:	af02      	add	r7, sp, #8
 80126de:	60f8      	str	r0, [r7, #12]
 80126e0:	60b9      	str	r1, [r7, #8]
 80126e2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80126e4:	68fb      	ldr	r3, [r7, #12]
 80126e6:	685b      	ldr	r3, [r3, #4]
 80126e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80126ec:	d111      	bne.n	8012712 <SPI_EndRxTransaction+0x3a>
 80126ee:	68fb      	ldr	r3, [r7, #12]
 80126f0:	689b      	ldr	r3, [r3, #8]
 80126f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80126f6:	d004      	beq.n	8012702 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80126f8:	68fb      	ldr	r3, [r7, #12]
 80126fa:	689b      	ldr	r3, [r3, #8]
 80126fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012700:	d107      	bne.n	8012712 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8012702:	68fb      	ldr	r3, [r7, #12]
 8012704:	681b      	ldr	r3, [r3, #0]
 8012706:	681a      	ldr	r2, [r3, #0]
 8012708:	68fb      	ldr	r3, [r7, #12]
 801270a:	681b      	ldr	r3, [r3, #0]
 801270c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8012710:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	9300      	str	r3, [sp, #0]
 8012716:	68bb      	ldr	r3, [r7, #8]
 8012718:	2200      	movs	r2, #0
 801271a:	2180      	movs	r1, #128	; 0x80
 801271c:	68f8      	ldr	r0, [r7, #12]
 801271e:	f7ff febd 	bl	801249c <SPI_WaitFlagStateUntilTimeout>
 8012722:	4603      	mov	r3, r0
 8012724:	2b00      	cmp	r3, #0
 8012726:	d007      	beq.n	8012738 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8012728:	68fb      	ldr	r3, [r7, #12]
 801272a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801272c:	f043 0220 	orr.w	r2, r3, #32
 8012730:	68fb      	ldr	r3, [r7, #12]
 8012732:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8012734:	2303      	movs	r3, #3
 8012736:	e023      	b.n	8012780 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8012738:	68fb      	ldr	r3, [r7, #12]
 801273a:	685b      	ldr	r3, [r3, #4]
 801273c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8012740:	d11d      	bne.n	801277e <SPI_EndRxTransaction+0xa6>
 8012742:	68fb      	ldr	r3, [r7, #12]
 8012744:	689b      	ldr	r3, [r3, #8]
 8012746:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801274a:	d004      	beq.n	8012756 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801274c:	68fb      	ldr	r3, [r7, #12]
 801274e:	689b      	ldr	r3, [r3, #8]
 8012750:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012754:	d113      	bne.n	801277e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	9300      	str	r3, [sp, #0]
 801275a:	68bb      	ldr	r3, [r7, #8]
 801275c:	2200      	movs	r2, #0
 801275e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8012762:	68f8      	ldr	r0, [r7, #12]
 8012764:	f7ff ff22 	bl	80125ac <SPI_WaitFifoStateUntilTimeout>
 8012768:	4603      	mov	r3, r0
 801276a:	2b00      	cmp	r3, #0
 801276c:	d007      	beq.n	801277e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801276e:	68fb      	ldr	r3, [r7, #12]
 8012770:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012772:	f043 0220 	orr.w	r2, r3, #32
 8012776:	68fb      	ldr	r3, [r7, #12]
 8012778:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 801277a:	2303      	movs	r3, #3
 801277c:	e000      	b.n	8012780 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 801277e:	2300      	movs	r3, #0
}
 8012780:	4618      	mov	r0, r3
 8012782:	3710      	adds	r7, #16
 8012784:	46bd      	mov	sp, r7
 8012786:	bd80      	pop	{r7, pc}

08012788 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8012788:	b580      	push	{r7, lr}
 801278a:	b086      	sub	sp, #24
 801278c:	af02      	add	r7, sp, #8
 801278e:	60f8      	str	r0, [r7, #12]
 8012790:	60b9      	str	r1, [r7, #8]
 8012792:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	9300      	str	r3, [sp, #0]
 8012798:	68bb      	ldr	r3, [r7, #8]
 801279a:	2200      	movs	r2, #0
 801279c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80127a0:	68f8      	ldr	r0, [r7, #12]
 80127a2:	f7ff ff03 	bl	80125ac <SPI_WaitFifoStateUntilTimeout>
 80127a6:	4603      	mov	r3, r0
 80127a8:	2b00      	cmp	r3, #0
 80127aa:	d007      	beq.n	80127bc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80127ac:	68fb      	ldr	r3, [r7, #12]
 80127ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80127b0:	f043 0220 	orr.w	r2, r3, #32
 80127b4:	68fb      	ldr	r3, [r7, #12]
 80127b6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80127b8:	2303      	movs	r3, #3
 80127ba:	e027      	b.n	801280c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	9300      	str	r3, [sp, #0]
 80127c0:	68bb      	ldr	r3, [r7, #8]
 80127c2:	2200      	movs	r2, #0
 80127c4:	2180      	movs	r1, #128	; 0x80
 80127c6:	68f8      	ldr	r0, [r7, #12]
 80127c8:	f7ff fe68 	bl	801249c <SPI_WaitFlagStateUntilTimeout>
 80127cc:	4603      	mov	r3, r0
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	d007      	beq.n	80127e2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80127d2:	68fb      	ldr	r3, [r7, #12]
 80127d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80127d6:	f043 0220 	orr.w	r2, r3, #32
 80127da:	68fb      	ldr	r3, [r7, #12]
 80127dc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80127de:	2303      	movs	r3, #3
 80127e0:	e014      	b.n	801280c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80127e2:	687b      	ldr	r3, [r7, #4]
 80127e4:	9300      	str	r3, [sp, #0]
 80127e6:	68bb      	ldr	r3, [r7, #8]
 80127e8:	2200      	movs	r2, #0
 80127ea:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80127ee:	68f8      	ldr	r0, [r7, #12]
 80127f0:	f7ff fedc 	bl	80125ac <SPI_WaitFifoStateUntilTimeout>
 80127f4:	4603      	mov	r3, r0
 80127f6:	2b00      	cmp	r3, #0
 80127f8:	d007      	beq.n	801280a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80127fa:	68fb      	ldr	r3, [r7, #12]
 80127fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80127fe:	f043 0220 	orr.w	r2, r3, #32
 8012802:	68fb      	ldr	r3, [r7, #12]
 8012804:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8012806:	2303      	movs	r3, #3
 8012808:	e000      	b.n	801280c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 801280a:	2300      	movs	r3, #0
}
 801280c:	4618      	mov	r0, r3
 801280e:	3710      	adds	r7, #16
 8012810:	46bd      	mov	sp, r7
 8012812:	bd80      	pop	{r7, pc}

08012814 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8012814:	b580      	push	{r7, lr}
 8012816:	b084      	sub	sp, #16
 8012818:	af00      	add	r7, sp, #0
 801281a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801281c:	f7f6 fb4c 	bl	8008eb8 <HAL_GetTick>
 8012820:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	681b      	ldr	r3, [r3, #0]
 8012826:	685a      	ldr	r2, [r3, #4]
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	681b      	ldr	r3, [r3, #0]
 801282c:	f022 0220 	bic.w	r2, r2, #32
 8012830:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8012832:	68fa      	ldr	r2, [r7, #12]
 8012834:	2164      	movs	r1, #100	; 0x64
 8012836:	6878      	ldr	r0, [r7, #4]
 8012838:	f7ff ffa6 	bl	8012788 <SPI_EndRxTxTransaction>
 801283c:	4603      	mov	r3, r0
 801283e:	2b00      	cmp	r3, #0
 8012840:	d005      	beq.n	801284e <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012846:	f043 0220 	orr.w	r2, r3, #32
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012852:	2b00      	cmp	r3, #0
 8012854:	d115      	bne.n	8012882 <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801285c:	b2db      	uxtb	r3, r3
 801285e:	2b04      	cmp	r3, #4
 8012860:	d107      	bne.n	8012872 <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	2201      	movs	r2, #1
 8012866:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 801286a:	6878      	ldr	r0, [r7, #4]
 801286c:	f7f4 fb22 	bl	8006eb4 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8012870:	e00e      	b.n	8012890 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	2201      	movs	r2, #1
 8012876:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 801287a:	6878      	ldr	r0, [r7, #4]
 801287c:	f7f4 fb2a 	bl	8006ed4 <HAL_SPI_TxRxCpltCallback>
}
 8012880:	e006      	b.n	8012890 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	2201      	movs	r2, #1
 8012886:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 801288a:	6878      	ldr	r0, [r7, #4]
 801288c:	f7ff fc48 	bl	8012120 <HAL_SPI_ErrorCallback>
}
 8012890:	bf00      	nop
 8012892:	3710      	adds	r7, #16
 8012894:	46bd      	mov	sp, r7
 8012896:	bd80      	pop	{r7, pc}

08012898 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8012898:	b580      	push	{r7, lr}
 801289a:	b082      	sub	sp, #8
 801289c:	af00      	add	r7, sp, #0
 801289e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	681b      	ldr	r3, [r3, #0]
 80128a4:	685a      	ldr	r2, [r3, #4]
 80128a6:	687b      	ldr	r3, [r7, #4]
 80128a8:	681b      	ldr	r3, [r3, #0]
 80128aa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80128ae:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 80128b0:	f7f6 fb02 	bl	8008eb8 <HAL_GetTick>
 80128b4:	4603      	mov	r3, r0
 80128b6:	461a      	mov	r2, r3
 80128b8:	2164      	movs	r1, #100	; 0x64
 80128ba:	6878      	ldr	r0, [r7, #4]
 80128bc:	f7ff ff0c 	bl	80126d8 <SPI_EndRxTransaction>
 80128c0:	4603      	mov	r3, r0
 80128c2:	2b00      	cmp	r3, #0
 80128c4:	d005      	beq.n	80128d2 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80128ca:	f043 0220 	orr.w	r2, r3, #32
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	2201      	movs	r2, #1
 80128d6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80128de:	2b00      	cmp	r3, #0
 80128e0:	d103      	bne.n	80128ea <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 80128e2:	6878      	ldr	r0, [r7, #4]
 80128e4:	f7f4 fae6 	bl	8006eb4 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80128e8:	e002      	b.n	80128f0 <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 80128ea:	6878      	ldr	r0, [r7, #4]
 80128ec:	f7ff fc18 	bl	8012120 <HAL_SPI_ErrorCallback>
}
 80128f0:	bf00      	nop
 80128f2:	3708      	adds	r7, #8
 80128f4:	46bd      	mov	sp, r7
 80128f6:	bd80      	pop	{r7, pc}

080128f8 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 80128f8:	b580      	push	{r7, lr}
 80128fa:	b084      	sub	sp, #16
 80128fc:	af00      	add	r7, sp, #0
 80128fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8012900:	f7f6 fada 	bl	8008eb8 <HAL_GetTick>
 8012904:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	681b      	ldr	r3, [r3, #0]
 801290a:	685a      	ldr	r2, [r3, #4]
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	681b      	ldr	r3, [r3, #0]
 8012910:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8012914:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8012916:	68fa      	ldr	r2, [r7, #12]
 8012918:	2164      	movs	r1, #100	; 0x64
 801291a:	6878      	ldr	r0, [r7, #4]
 801291c:	f7ff ff34 	bl	8012788 <SPI_EndRxTxTransaction>
 8012920:	4603      	mov	r3, r0
 8012922:	2b00      	cmp	r3, #0
 8012924:	d005      	beq.n	8012932 <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801292a:	f043 0220 	orr.w	r2, r3, #32
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	689b      	ldr	r3, [r3, #8]
 8012936:	2b00      	cmp	r3, #0
 8012938:	d10a      	bne.n	8012950 <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801293a:	2300      	movs	r3, #0
 801293c:	60bb      	str	r3, [r7, #8]
 801293e:	687b      	ldr	r3, [r7, #4]
 8012940:	681b      	ldr	r3, [r3, #0]
 8012942:	68db      	ldr	r3, [r3, #12]
 8012944:	60bb      	str	r3, [r7, #8]
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	681b      	ldr	r3, [r3, #0]
 801294a:	689b      	ldr	r3, [r3, #8]
 801294c:	60bb      	str	r3, [r7, #8]
 801294e:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	2201      	movs	r2, #1
 8012954:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801295c:	2b00      	cmp	r3, #0
 801295e:	d003      	beq.n	8012968 <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8012960:	6878      	ldr	r0, [r7, #4]
 8012962:	f7ff fbdd 	bl	8012120 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8012966:	e002      	b.n	801296e <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 8012968:	6878      	ldr	r0, [r7, #4]
 801296a:	f7f4 fa93 	bl	8006e94 <HAL_SPI_TxCpltCallback>
}
 801296e:	bf00      	nop
 8012970:	3710      	adds	r7, #16
 8012972:	46bd      	mov	sp, r7
 8012974:	bd80      	pop	{r7, pc}
	...

08012978 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8012978:	b580      	push	{r7, lr}
 801297a:	b082      	sub	sp, #8
 801297c:	af00      	add	r7, sp, #0
 801297e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	2b00      	cmp	r3, #0
 8012984:	d101      	bne.n	801298a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8012986:	2301      	movs	r3, #1
 8012988:	e0c8      	b.n	8012b1c <HAL_TIM_Base_Init+0x1a4>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	681b      	ldr	r3, [r3, #0]
 801298e:	4a65      	ldr	r2, [pc, #404]	; (8012b24 <HAL_TIM_Base_Init+0x1ac>)
 8012990:	4293      	cmp	r3, r2
 8012992:	d01d      	beq.n	80129d0 <HAL_TIM_Base_Init+0x58>
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	681b      	ldr	r3, [r3, #0]
 8012998:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801299c:	d018      	beq.n	80129d0 <HAL_TIM_Base_Init+0x58>
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	681b      	ldr	r3, [r3, #0]
 80129a2:	4a61      	ldr	r2, [pc, #388]	; (8012b28 <HAL_TIM_Base_Init+0x1b0>)
 80129a4:	4293      	cmp	r3, r2
 80129a6:	d013      	beq.n	80129d0 <HAL_TIM_Base_Init+0x58>
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	681b      	ldr	r3, [r3, #0]
 80129ac:	4a5f      	ldr	r2, [pc, #380]	; (8012b2c <HAL_TIM_Base_Init+0x1b4>)
 80129ae:	4293      	cmp	r3, r2
 80129b0:	d00e      	beq.n	80129d0 <HAL_TIM_Base_Init+0x58>
 80129b2:	687b      	ldr	r3, [r7, #4]
 80129b4:	681b      	ldr	r3, [r3, #0]
 80129b6:	4a5e      	ldr	r2, [pc, #376]	; (8012b30 <HAL_TIM_Base_Init+0x1b8>)
 80129b8:	4293      	cmp	r3, r2
 80129ba:	d009      	beq.n	80129d0 <HAL_TIM_Base_Init+0x58>
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	681b      	ldr	r3, [r3, #0]
 80129c0:	4a5c      	ldr	r2, [pc, #368]	; (8012b34 <HAL_TIM_Base_Init+0x1bc>)
 80129c2:	4293      	cmp	r3, r2
 80129c4:	d004      	beq.n	80129d0 <HAL_TIM_Base_Init+0x58>
 80129c6:	f44f 718b 	mov.w	r1, #278	; 0x116
 80129ca:	485b      	ldr	r0, [pc, #364]	; (8012b38 <HAL_TIM_Base_Init+0x1c0>)
 80129cc:	f7f1 fde2 	bl	8004594 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	689b      	ldr	r3, [r3, #8]
 80129d4:	2b00      	cmp	r3, #0
 80129d6:	d014      	beq.n	8012a02 <HAL_TIM_Base_Init+0x8a>
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	689b      	ldr	r3, [r3, #8]
 80129dc:	2b10      	cmp	r3, #16
 80129de:	d010      	beq.n	8012a02 <HAL_TIM_Base_Init+0x8a>
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	689b      	ldr	r3, [r3, #8]
 80129e4:	2b20      	cmp	r3, #32
 80129e6:	d00c      	beq.n	8012a02 <HAL_TIM_Base_Init+0x8a>
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	689b      	ldr	r3, [r3, #8]
 80129ec:	2b40      	cmp	r3, #64	; 0x40
 80129ee:	d008      	beq.n	8012a02 <HAL_TIM_Base_Init+0x8a>
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	689b      	ldr	r3, [r3, #8]
 80129f4:	2b60      	cmp	r3, #96	; 0x60
 80129f6:	d004      	beq.n	8012a02 <HAL_TIM_Base_Init+0x8a>
 80129f8:	f240 1117 	movw	r1, #279	; 0x117
 80129fc:	484e      	ldr	r0, [pc, #312]	; (8012b38 <HAL_TIM_Base_Init+0x1c0>)
 80129fe:	f7f1 fdc9 	bl	8004594 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	691b      	ldr	r3, [r3, #16]
 8012a06:	2b00      	cmp	r3, #0
 8012a08:	d00e      	beq.n	8012a28 <HAL_TIM_Base_Init+0xb0>
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	691b      	ldr	r3, [r3, #16]
 8012a0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012a12:	d009      	beq.n	8012a28 <HAL_TIM_Base_Init+0xb0>
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	691b      	ldr	r3, [r3, #16]
 8012a18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012a1c:	d004      	beq.n	8012a28 <HAL_TIM_Base_Init+0xb0>
 8012a1e:	f44f 718c 	mov.w	r1, #280	; 0x118
 8012a22:	4845      	ldr	r0, [pc, #276]	; (8012b38 <HAL_TIM_Base_Init+0x1c0>)
 8012a24:	f7f1 fdb6 	bl	8004594 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	681b      	ldr	r3, [r3, #0]
 8012a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012a30:	d00f      	beq.n	8012a52 <HAL_TIM_Base_Init+0xda>
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	68db      	ldr	r3, [r3, #12]
 8012a36:	2b00      	cmp	r3, #0
 8012a38:	d006      	beq.n	8012a48 <HAL_TIM_Base_Init+0xd0>
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	68db      	ldr	r3, [r3, #12]
 8012a3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012a42:	d201      	bcs.n	8012a48 <HAL_TIM_Base_Init+0xd0>
 8012a44:	2301      	movs	r3, #1
 8012a46:	e000      	b.n	8012a4a <HAL_TIM_Base_Init+0xd2>
 8012a48:	2300      	movs	r3, #0
 8012a4a:	f003 0301 	and.w	r3, r3, #1
 8012a4e:	b2db      	uxtb	r3, r3
 8012a50:	e006      	b.n	8012a60 <HAL_TIM_Base_Init+0xe8>
 8012a52:	687b      	ldr	r3, [r7, #4]
 8012a54:	68db      	ldr	r3, [r3, #12]
 8012a56:	2b00      	cmp	r3, #0
 8012a58:	bf14      	ite	ne
 8012a5a:	2301      	movne	r3, #1
 8012a5c:	2300      	moveq	r3, #0
 8012a5e:	b2db      	uxtb	r3, r3
 8012a60:	2b00      	cmp	r3, #0
 8012a62:	d104      	bne.n	8012a6e <HAL_TIM_Base_Init+0xf6>
 8012a64:	f240 1119 	movw	r1, #281	; 0x119
 8012a68:	4833      	ldr	r0, [pc, #204]	; (8012b38 <HAL_TIM_Base_Init+0x1c0>)
 8012a6a:	f7f1 fd93 	bl	8004594 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	699b      	ldr	r3, [r3, #24]
 8012a72:	2b00      	cmp	r3, #0
 8012a74:	d008      	beq.n	8012a88 <HAL_TIM_Base_Init+0x110>
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	699b      	ldr	r3, [r3, #24]
 8012a7a:	2b80      	cmp	r3, #128	; 0x80
 8012a7c:	d004      	beq.n	8012a88 <HAL_TIM_Base_Init+0x110>
 8012a7e:	f44f 718d 	mov.w	r1, #282	; 0x11a
 8012a82:	482d      	ldr	r0, [pc, #180]	; (8012b38 <HAL_TIM_Base_Init+0x1c0>)
 8012a84:	f7f1 fd86 	bl	8004594 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012a8e:	b2db      	uxtb	r3, r3
 8012a90:	2b00      	cmp	r3, #0
 8012a92:	d106      	bne.n	8012aa2 <HAL_TIM_Base_Init+0x12a>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	2200      	movs	r2, #0
 8012a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8012a9c:	6878      	ldr	r0, [r7, #4]
 8012a9e:	f7f4 fccd 	bl	800743c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	2202      	movs	r2, #2
 8012aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	681a      	ldr	r2, [r3, #0]
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	3304      	adds	r3, #4
 8012ab2:	4619      	mov	r1, r3
 8012ab4:	4610      	mov	r0, r2
 8012ab6:	f000 f9fd 	bl	8012eb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	2201      	movs	r2, #1
 8012abe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	2201      	movs	r2, #1
 8012ac6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	2201      	movs	r2, #1
 8012ace:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	2201      	movs	r2, #1
 8012ad6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	2201      	movs	r2, #1
 8012ade:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	2201      	movs	r2, #1
 8012ae6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	2201      	movs	r2, #1
 8012aee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012af2:	687b      	ldr	r3, [r7, #4]
 8012af4:	2201      	movs	r2, #1
 8012af6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	2201      	movs	r2, #1
 8012afe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	2201      	movs	r2, #1
 8012b06:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	2201      	movs	r2, #1
 8012b0e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	2201      	movs	r2, #1
 8012b16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8012b1a:	2300      	movs	r3, #0
}
 8012b1c:	4618      	mov	r0, r3
 8012b1e:	3708      	adds	r7, #8
 8012b20:	46bd      	mov	sp, r7
 8012b22:	bd80      	pop	{r7, pc}
 8012b24:	40012c00 	.word	0x40012c00
 8012b28:	40001000 	.word	0x40001000
 8012b2c:	40001400 	.word	0x40001400
 8012b30:	40014000 	.word	0x40014000
 8012b34:	40014400 	.word	0x40014400
 8012b38:	08018f14 	.word	0x08018f14

08012b3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8012b3c:	b580      	push	{r7, lr}
 8012b3e:	b084      	sub	sp, #16
 8012b40:	af00      	add	r7, sp, #0
 8012b42:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	681b      	ldr	r3, [r3, #0]
 8012b48:	4a34      	ldr	r2, [pc, #208]	; (8012c1c <HAL_TIM_Base_Start_IT+0xe0>)
 8012b4a:	4293      	cmp	r3, r2
 8012b4c:	d01d      	beq.n	8012b8a <HAL_TIM_Base_Start_IT+0x4e>
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	681b      	ldr	r3, [r3, #0]
 8012b52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012b56:	d018      	beq.n	8012b8a <HAL_TIM_Base_Start_IT+0x4e>
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	681b      	ldr	r3, [r3, #0]
 8012b5c:	4a30      	ldr	r2, [pc, #192]	; (8012c20 <HAL_TIM_Base_Start_IT+0xe4>)
 8012b5e:	4293      	cmp	r3, r2
 8012b60:	d013      	beq.n	8012b8a <HAL_TIM_Base_Start_IT+0x4e>
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	681b      	ldr	r3, [r3, #0]
 8012b66:	4a2f      	ldr	r2, [pc, #188]	; (8012c24 <HAL_TIM_Base_Start_IT+0xe8>)
 8012b68:	4293      	cmp	r3, r2
 8012b6a:	d00e      	beq.n	8012b8a <HAL_TIM_Base_Start_IT+0x4e>
 8012b6c:	687b      	ldr	r3, [r7, #4]
 8012b6e:	681b      	ldr	r3, [r3, #0]
 8012b70:	4a2d      	ldr	r2, [pc, #180]	; (8012c28 <HAL_TIM_Base_Start_IT+0xec>)
 8012b72:	4293      	cmp	r3, r2
 8012b74:	d009      	beq.n	8012b8a <HAL_TIM_Base_Start_IT+0x4e>
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	681b      	ldr	r3, [r3, #0]
 8012b7a:	4a2c      	ldr	r2, [pc, #176]	; (8012c2c <HAL_TIM_Base_Start_IT+0xf0>)
 8012b7c:	4293      	cmp	r3, r2
 8012b7e:	d004      	beq.n	8012b8a <HAL_TIM_Base_Start_IT+0x4e>
 8012b80:	f240 11d3 	movw	r1, #467	; 0x1d3
 8012b84:	482a      	ldr	r0, [pc, #168]	; (8012c30 <HAL_TIM_Base_Start_IT+0xf4>)
 8012b86:	f7f1 fd05 	bl	8004594 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012b90:	b2db      	uxtb	r3, r3
 8012b92:	2b01      	cmp	r3, #1
 8012b94:	d001      	beq.n	8012b9a <HAL_TIM_Base_Start_IT+0x5e>
  {
    return HAL_ERROR;
 8012b96:	2301      	movs	r3, #1
 8012b98:	e03b      	b.n	8012c12 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	2202      	movs	r2, #2
 8012b9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	681b      	ldr	r3, [r3, #0]
 8012ba6:	68da      	ldr	r2, [r3, #12]
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	681b      	ldr	r3, [r3, #0]
 8012bac:	f042 0201 	orr.w	r2, r2, #1
 8012bb0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	681b      	ldr	r3, [r3, #0]
 8012bb6:	4a19      	ldr	r2, [pc, #100]	; (8012c1c <HAL_TIM_Base_Start_IT+0xe0>)
 8012bb8:	4293      	cmp	r3, r2
 8012bba:	d009      	beq.n	8012bd0 <HAL_TIM_Base_Start_IT+0x94>
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	681b      	ldr	r3, [r3, #0]
 8012bc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012bc4:	d004      	beq.n	8012bd0 <HAL_TIM_Base_Start_IT+0x94>
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	681b      	ldr	r3, [r3, #0]
 8012bca:	4a17      	ldr	r2, [pc, #92]	; (8012c28 <HAL_TIM_Base_Start_IT+0xec>)
 8012bcc:	4293      	cmp	r3, r2
 8012bce:	d115      	bne.n	8012bfc <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8012bd0:	687b      	ldr	r3, [r7, #4]
 8012bd2:	681b      	ldr	r3, [r3, #0]
 8012bd4:	689a      	ldr	r2, [r3, #8]
 8012bd6:	4b17      	ldr	r3, [pc, #92]	; (8012c34 <HAL_TIM_Base_Start_IT+0xf8>)
 8012bd8:	4013      	ands	r3, r2
 8012bda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012bdc:	68fb      	ldr	r3, [r7, #12]
 8012bde:	2b06      	cmp	r3, #6
 8012be0:	d015      	beq.n	8012c0e <HAL_TIM_Base_Start_IT+0xd2>
 8012be2:	68fb      	ldr	r3, [r7, #12]
 8012be4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012be8:	d011      	beq.n	8012c0e <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	681b      	ldr	r3, [r3, #0]
 8012bee:	681a      	ldr	r2, [r3, #0]
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	681b      	ldr	r3, [r3, #0]
 8012bf4:	f042 0201 	orr.w	r2, r2, #1
 8012bf8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012bfa:	e008      	b.n	8012c0e <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	681b      	ldr	r3, [r3, #0]
 8012c00:	681a      	ldr	r2, [r3, #0]
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	681b      	ldr	r3, [r3, #0]
 8012c06:	f042 0201 	orr.w	r2, r2, #1
 8012c0a:	601a      	str	r2, [r3, #0]
 8012c0c:	e000      	b.n	8012c10 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012c0e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8012c10:	2300      	movs	r3, #0
}
 8012c12:	4618      	mov	r0, r3
 8012c14:	3710      	adds	r7, #16
 8012c16:	46bd      	mov	sp, r7
 8012c18:	bd80      	pop	{r7, pc}
 8012c1a:	bf00      	nop
 8012c1c:	40012c00 	.word	0x40012c00
 8012c20:	40001000 	.word	0x40001000
 8012c24:	40001400 	.word	0x40001400
 8012c28:	40014000 	.word	0x40014000
 8012c2c:	40014400 	.word	0x40014400
 8012c30:	08018f14 	.word	0x08018f14
 8012c34:	00010007 	.word	0x00010007

08012c38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8012c38:	b580      	push	{r7, lr}
 8012c3a:	b082      	sub	sp, #8
 8012c3c:	af00      	add	r7, sp, #0
 8012c3e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	681b      	ldr	r3, [r3, #0]
 8012c44:	691b      	ldr	r3, [r3, #16]
 8012c46:	f003 0302 	and.w	r3, r3, #2
 8012c4a:	2b02      	cmp	r3, #2
 8012c4c:	d122      	bne.n	8012c94 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	681b      	ldr	r3, [r3, #0]
 8012c52:	68db      	ldr	r3, [r3, #12]
 8012c54:	f003 0302 	and.w	r3, r3, #2
 8012c58:	2b02      	cmp	r3, #2
 8012c5a:	d11b      	bne.n	8012c94 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8012c5c:	687b      	ldr	r3, [r7, #4]
 8012c5e:	681b      	ldr	r3, [r3, #0]
 8012c60:	f06f 0202 	mvn.w	r2, #2
 8012c64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	2201      	movs	r2, #1
 8012c6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	681b      	ldr	r3, [r3, #0]
 8012c70:	699b      	ldr	r3, [r3, #24]
 8012c72:	f003 0303 	and.w	r3, r3, #3
 8012c76:	2b00      	cmp	r3, #0
 8012c78:	d003      	beq.n	8012c82 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8012c7a:	6878      	ldr	r0, [r7, #4]
 8012c7c:	f7f6 f880 	bl	8008d80 <HAL_TIM_IC_CaptureCallback>
 8012c80:	e005      	b.n	8012c8e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8012c82:	6878      	ldr	r0, [r7, #4]
 8012c84:	f000 f8f7 	bl	8012e76 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012c88:	6878      	ldr	r0, [r7, #4]
 8012c8a:	f000 f8fe 	bl	8012e8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	2200      	movs	r2, #0
 8012c92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	681b      	ldr	r3, [r3, #0]
 8012c98:	691b      	ldr	r3, [r3, #16]
 8012c9a:	f003 0304 	and.w	r3, r3, #4
 8012c9e:	2b04      	cmp	r3, #4
 8012ca0:	d122      	bne.n	8012ce8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	681b      	ldr	r3, [r3, #0]
 8012ca6:	68db      	ldr	r3, [r3, #12]
 8012ca8:	f003 0304 	and.w	r3, r3, #4
 8012cac:	2b04      	cmp	r3, #4
 8012cae:	d11b      	bne.n	8012ce8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	681b      	ldr	r3, [r3, #0]
 8012cb4:	f06f 0204 	mvn.w	r2, #4
 8012cb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	2202      	movs	r2, #2
 8012cbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	681b      	ldr	r3, [r3, #0]
 8012cc4:	699b      	ldr	r3, [r3, #24]
 8012cc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8012cca:	2b00      	cmp	r3, #0
 8012ccc:	d003      	beq.n	8012cd6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8012cce:	6878      	ldr	r0, [r7, #4]
 8012cd0:	f7f6 f856 	bl	8008d80 <HAL_TIM_IC_CaptureCallback>
 8012cd4:	e005      	b.n	8012ce2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012cd6:	6878      	ldr	r0, [r7, #4]
 8012cd8:	f000 f8cd 	bl	8012e76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012cdc:	6878      	ldr	r0, [r7, #4]
 8012cde:	f000 f8d4 	bl	8012e8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	2200      	movs	r2, #0
 8012ce6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	681b      	ldr	r3, [r3, #0]
 8012cec:	691b      	ldr	r3, [r3, #16]
 8012cee:	f003 0308 	and.w	r3, r3, #8
 8012cf2:	2b08      	cmp	r3, #8
 8012cf4:	d122      	bne.n	8012d3c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	681b      	ldr	r3, [r3, #0]
 8012cfa:	68db      	ldr	r3, [r3, #12]
 8012cfc:	f003 0308 	and.w	r3, r3, #8
 8012d00:	2b08      	cmp	r3, #8
 8012d02:	d11b      	bne.n	8012d3c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	681b      	ldr	r3, [r3, #0]
 8012d08:	f06f 0208 	mvn.w	r2, #8
 8012d0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	2204      	movs	r2, #4
 8012d12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8012d14:	687b      	ldr	r3, [r7, #4]
 8012d16:	681b      	ldr	r3, [r3, #0]
 8012d18:	69db      	ldr	r3, [r3, #28]
 8012d1a:	f003 0303 	and.w	r3, r3, #3
 8012d1e:	2b00      	cmp	r3, #0
 8012d20:	d003      	beq.n	8012d2a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8012d22:	6878      	ldr	r0, [r7, #4]
 8012d24:	f7f6 f82c 	bl	8008d80 <HAL_TIM_IC_CaptureCallback>
 8012d28:	e005      	b.n	8012d36 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012d2a:	6878      	ldr	r0, [r7, #4]
 8012d2c:	f000 f8a3 	bl	8012e76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012d30:	6878      	ldr	r0, [r7, #4]
 8012d32:	f000 f8aa 	bl	8012e8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	2200      	movs	r2, #0
 8012d3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	681b      	ldr	r3, [r3, #0]
 8012d40:	691b      	ldr	r3, [r3, #16]
 8012d42:	f003 0310 	and.w	r3, r3, #16
 8012d46:	2b10      	cmp	r3, #16
 8012d48:	d122      	bne.n	8012d90 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	681b      	ldr	r3, [r3, #0]
 8012d4e:	68db      	ldr	r3, [r3, #12]
 8012d50:	f003 0310 	and.w	r3, r3, #16
 8012d54:	2b10      	cmp	r3, #16
 8012d56:	d11b      	bne.n	8012d90 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8012d58:	687b      	ldr	r3, [r7, #4]
 8012d5a:	681b      	ldr	r3, [r3, #0]
 8012d5c:	f06f 0210 	mvn.w	r2, #16
 8012d60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	2208      	movs	r2, #8
 8012d66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	681b      	ldr	r3, [r3, #0]
 8012d6c:	69db      	ldr	r3, [r3, #28]
 8012d6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8012d72:	2b00      	cmp	r3, #0
 8012d74:	d003      	beq.n	8012d7e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8012d76:	6878      	ldr	r0, [r7, #4]
 8012d78:	f7f6 f802 	bl	8008d80 <HAL_TIM_IC_CaptureCallback>
 8012d7c:	e005      	b.n	8012d8a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012d7e:	6878      	ldr	r0, [r7, #4]
 8012d80:	f000 f879 	bl	8012e76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012d84:	6878      	ldr	r0, [r7, #4]
 8012d86:	f000 f880 	bl	8012e8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	2200      	movs	r2, #0
 8012d8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8012d90:	687b      	ldr	r3, [r7, #4]
 8012d92:	681b      	ldr	r3, [r3, #0]
 8012d94:	691b      	ldr	r3, [r3, #16]
 8012d96:	f003 0301 	and.w	r3, r3, #1
 8012d9a:	2b01      	cmp	r3, #1
 8012d9c:	d10e      	bne.n	8012dbc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8012d9e:	687b      	ldr	r3, [r7, #4]
 8012da0:	681b      	ldr	r3, [r3, #0]
 8012da2:	68db      	ldr	r3, [r3, #12]
 8012da4:	f003 0301 	and.w	r3, r3, #1
 8012da8:	2b01      	cmp	r3, #1
 8012daa:	d107      	bne.n	8012dbc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	681b      	ldr	r3, [r3, #0]
 8012db0:	f06f 0201 	mvn.w	r2, #1
 8012db4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8012db6:	6878      	ldr	r0, [r7, #4]
 8012db8:	f7f5 feee 	bl	8008b98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	681b      	ldr	r3, [r3, #0]
 8012dc0:	691b      	ldr	r3, [r3, #16]
 8012dc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012dc6:	2b80      	cmp	r3, #128	; 0x80
 8012dc8:	d10e      	bne.n	8012de8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	681b      	ldr	r3, [r3, #0]
 8012dce:	68db      	ldr	r3, [r3, #12]
 8012dd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012dd4:	2b80      	cmp	r3, #128	; 0x80
 8012dd6:	d107      	bne.n	8012de8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8012dd8:	687b      	ldr	r3, [r7, #4]
 8012dda:	681b      	ldr	r3, [r3, #0]
 8012ddc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8012de0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8012de2:	6878      	ldr	r0, [r7, #4]
 8012de4:	f000 f9e8 	bl	80131b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	681b      	ldr	r3, [r3, #0]
 8012dec:	691b      	ldr	r3, [r3, #16]
 8012dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012df2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012df6:	d10e      	bne.n	8012e16 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	681b      	ldr	r3, [r3, #0]
 8012dfc:	68db      	ldr	r3, [r3, #12]
 8012dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012e02:	2b80      	cmp	r3, #128	; 0x80
 8012e04:	d107      	bne.n	8012e16 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8012e06:	687b      	ldr	r3, [r7, #4]
 8012e08:	681b      	ldr	r3, [r3, #0]
 8012e0a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8012e0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8012e10:	6878      	ldr	r0, [r7, #4]
 8012e12:	f000 f9db 	bl	80131cc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8012e16:	687b      	ldr	r3, [r7, #4]
 8012e18:	681b      	ldr	r3, [r3, #0]
 8012e1a:	691b      	ldr	r3, [r3, #16]
 8012e1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012e20:	2b40      	cmp	r3, #64	; 0x40
 8012e22:	d10e      	bne.n	8012e42 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	681b      	ldr	r3, [r3, #0]
 8012e28:	68db      	ldr	r3, [r3, #12]
 8012e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012e2e:	2b40      	cmp	r3, #64	; 0x40
 8012e30:	d107      	bne.n	8012e42 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8012e32:	687b      	ldr	r3, [r7, #4]
 8012e34:	681b      	ldr	r3, [r3, #0]
 8012e36:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8012e3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8012e3c:	6878      	ldr	r0, [r7, #4]
 8012e3e:	f000 f82e 	bl	8012e9e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	681b      	ldr	r3, [r3, #0]
 8012e46:	691b      	ldr	r3, [r3, #16]
 8012e48:	f003 0320 	and.w	r3, r3, #32
 8012e4c:	2b20      	cmp	r3, #32
 8012e4e:	d10e      	bne.n	8012e6e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	681b      	ldr	r3, [r3, #0]
 8012e54:	68db      	ldr	r3, [r3, #12]
 8012e56:	f003 0320 	and.w	r3, r3, #32
 8012e5a:	2b20      	cmp	r3, #32
 8012e5c:	d107      	bne.n	8012e6e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	681b      	ldr	r3, [r3, #0]
 8012e62:	f06f 0220 	mvn.w	r2, #32
 8012e66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8012e68:	6878      	ldr	r0, [r7, #4]
 8012e6a:	f000 f99b 	bl	80131a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8012e6e:	bf00      	nop
 8012e70:	3708      	adds	r7, #8
 8012e72:	46bd      	mov	sp, r7
 8012e74:	bd80      	pop	{r7, pc}

08012e76 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8012e76:	b480      	push	{r7}
 8012e78:	b083      	sub	sp, #12
 8012e7a:	af00      	add	r7, sp, #0
 8012e7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8012e7e:	bf00      	nop
 8012e80:	370c      	adds	r7, #12
 8012e82:	46bd      	mov	sp, r7
 8012e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e88:	4770      	bx	lr

08012e8a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8012e8a:	b480      	push	{r7}
 8012e8c:	b083      	sub	sp, #12
 8012e8e:	af00      	add	r7, sp, #0
 8012e90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8012e92:	bf00      	nop
 8012e94:	370c      	adds	r7, #12
 8012e96:	46bd      	mov	sp, r7
 8012e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e9c:	4770      	bx	lr

08012e9e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8012e9e:	b480      	push	{r7}
 8012ea0:	b083      	sub	sp, #12
 8012ea2:	af00      	add	r7, sp, #0
 8012ea4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8012ea6:	bf00      	nop
 8012ea8:	370c      	adds	r7, #12
 8012eaa:	46bd      	mov	sp, r7
 8012eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eb0:	4770      	bx	lr
	...

08012eb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8012eb4:	b480      	push	{r7}
 8012eb6:	b085      	sub	sp, #20
 8012eb8:	af00      	add	r7, sp, #0
 8012eba:	6078      	str	r0, [r7, #4]
 8012ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	681b      	ldr	r3, [r3, #0]
 8012ec2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	4a2a      	ldr	r2, [pc, #168]	; (8012f70 <TIM_Base_SetConfig+0xbc>)
 8012ec8:	4293      	cmp	r3, r2
 8012eca:	d003      	beq.n	8012ed4 <TIM_Base_SetConfig+0x20>
 8012ecc:	687b      	ldr	r3, [r7, #4]
 8012ece:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012ed2:	d108      	bne.n	8012ee6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8012ed4:	68fb      	ldr	r3, [r7, #12]
 8012ed6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012eda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8012edc:	683b      	ldr	r3, [r7, #0]
 8012ede:	685b      	ldr	r3, [r3, #4]
 8012ee0:	68fa      	ldr	r2, [r7, #12]
 8012ee2:	4313      	orrs	r3, r2
 8012ee4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8012ee6:	687b      	ldr	r3, [r7, #4]
 8012ee8:	4a21      	ldr	r2, [pc, #132]	; (8012f70 <TIM_Base_SetConfig+0xbc>)
 8012eea:	4293      	cmp	r3, r2
 8012eec:	d00b      	beq.n	8012f06 <TIM_Base_SetConfig+0x52>
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012ef4:	d007      	beq.n	8012f06 <TIM_Base_SetConfig+0x52>
 8012ef6:	687b      	ldr	r3, [r7, #4]
 8012ef8:	4a1e      	ldr	r2, [pc, #120]	; (8012f74 <TIM_Base_SetConfig+0xc0>)
 8012efa:	4293      	cmp	r3, r2
 8012efc:	d003      	beq.n	8012f06 <TIM_Base_SetConfig+0x52>
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	4a1d      	ldr	r2, [pc, #116]	; (8012f78 <TIM_Base_SetConfig+0xc4>)
 8012f02:	4293      	cmp	r3, r2
 8012f04:	d108      	bne.n	8012f18 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8012f06:	68fb      	ldr	r3, [r7, #12]
 8012f08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012f0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8012f0e:	683b      	ldr	r3, [r7, #0]
 8012f10:	68db      	ldr	r3, [r3, #12]
 8012f12:	68fa      	ldr	r2, [r7, #12]
 8012f14:	4313      	orrs	r3, r2
 8012f16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8012f18:	68fb      	ldr	r3, [r7, #12]
 8012f1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8012f1e:	683b      	ldr	r3, [r7, #0]
 8012f20:	695b      	ldr	r3, [r3, #20]
 8012f22:	4313      	orrs	r3, r2
 8012f24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	68fa      	ldr	r2, [r7, #12]
 8012f2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012f2c:	683b      	ldr	r3, [r7, #0]
 8012f2e:	689a      	ldr	r2, [r3, #8]
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8012f34:	683b      	ldr	r3, [r7, #0]
 8012f36:	681a      	ldr	r2, [r3, #0]
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	4a0c      	ldr	r2, [pc, #48]	; (8012f70 <TIM_Base_SetConfig+0xbc>)
 8012f40:	4293      	cmp	r3, r2
 8012f42:	d007      	beq.n	8012f54 <TIM_Base_SetConfig+0xa0>
 8012f44:	687b      	ldr	r3, [r7, #4]
 8012f46:	4a0b      	ldr	r2, [pc, #44]	; (8012f74 <TIM_Base_SetConfig+0xc0>)
 8012f48:	4293      	cmp	r3, r2
 8012f4a:	d003      	beq.n	8012f54 <TIM_Base_SetConfig+0xa0>
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	4a0a      	ldr	r2, [pc, #40]	; (8012f78 <TIM_Base_SetConfig+0xc4>)
 8012f50:	4293      	cmp	r3, r2
 8012f52:	d103      	bne.n	8012f5c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8012f54:	683b      	ldr	r3, [r7, #0]
 8012f56:	691a      	ldr	r2, [r3, #16]
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8012f5c:	687b      	ldr	r3, [r7, #4]
 8012f5e:	2201      	movs	r2, #1
 8012f60:	615a      	str	r2, [r3, #20]
}
 8012f62:	bf00      	nop
 8012f64:	3714      	adds	r7, #20
 8012f66:	46bd      	mov	sp, r7
 8012f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f6c:	4770      	bx	lr
 8012f6e:	bf00      	nop
 8012f70:	40012c00 	.word	0x40012c00
 8012f74:	40014000 	.word	0x40014000
 8012f78:	40014400 	.word	0x40014400

08012f7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8012f7c:	b580      	push	{r7, lr}
 8012f7e:	b084      	sub	sp, #16
 8012f80:	af00      	add	r7, sp, #0
 8012f82:	6078      	str	r0, [r7, #4]
 8012f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	681b      	ldr	r3, [r3, #0]
 8012f8a:	4a81      	ldr	r2, [pc, #516]	; (8013190 <HAL_TIMEx_MasterConfigSynchronization+0x214>)
 8012f8c:	4293      	cmp	r3, r2
 8012f8e:	d018      	beq.n	8012fc2 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8012f90:	687b      	ldr	r3, [r7, #4]
 8012f92:	681b      	ldr	r3, [r3, #0]
 8012f94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012f98:	d013      	beq.n	8012fc2 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8012f9a:	687b      	ldr	r3, [r7, #4]
 8012f9c:	681b      	ldr	r3, [r3, #0]
 8012f9e:	4a7d      	ldr	r2, [pc, #500]	; (8013194 <HAL_TIMEx_MasterConfigSynchronization+0x218>)
 8012fa0:	4293      	cmp	r3, r2
 8012fa2:	d00e      	beq.n	8012fc2 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8012fa4:	687b      	ldr	r3, [r7, #4]
 8012fa6:	681b      	ldr	r3, [r3, #0]
 8012fa8:	4a7b      	ldr	r2, [pc, #492]	; (8013198 <HAL_TIMEx_MasterConfigSynchronization+0x21c>)
 8012faa:	4293      	cmp	r3, r2
 8012fac:	d009      	beq.n	8012fc2 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	681b      	ldr	r3, [r3, #0]
 8012fb2:	4a7a      	ldr	r2, [pc, #488]	; (801319c <HAL_TIMEx_MasterConfigSynchronization+0x220>)
 8012fb4:	4293      	cmp	r3, r2
 8012fb6:	d004      	beq.n	8012fc2 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8012fb8:	f240 71b7 	movw	r1, #1975	; 0x7b7
 8012fbc:	4878      	ldr	r0, [pc, #480]	; (80131a0 <HAL_TIMEx_MasterConfigSynchronization+0x224>)
 8012fbe:	f7f1 fae9 	bl	8004594 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8012fc2:	683b      	ldr	r3, [r7, #0]
 8012fc4:	681b      	ldr	r3, [r3, #0]
 8012fc6:	2b00      	cmp	r3, #0
 8012fc8:	d020      	beq.n	801300c <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8012fca:	683b      	ldr	r3, [r7, #0]
 8012fcc:	681b      	ldr	r3, [r3, #0]
 8012fce:	2b10      	cmp	r3, #16
 8012fd0:	d01c      	beq.n	801300c <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8012fd2:	683b      	ldr	r3, [r7, #0]
 8012fd4:	681b      	ldr	r3, [r3, #0]
 8012fd6:	2b20      	cmp	r3, #32
 8012fd8:	d018      	beq.n	801300c <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8012fda:	683b      	ldr	r3, [r7, #0]
 8012fdc:	681b      	ldr	r3, [r3, #0]
 8012fde:	2b30      	cmp	r3, #48	; 0x30
 8012fe0:	d014      	beq.n	801300c <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8012fe2:	683b      	ldr	r3, [r7, #0]
 8012fe4:	681b      	ldr	r3, [r3, #0]
 8012fe6:	2b40      	cmp	r3, #64	; 0x40
 8012fe8:	d010      	beq.n	801300c <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8012fea:	683b      	ldr	r3, [r7, #0]
 8012fec:	681b      	ldr	r3, [r3, #0]
 8012fee:	2b50      	cmp	r3, #80	; 0x50
 8012ff0:	d00c      	beq.n	801300c <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8012ff2:	683b      	ldr	r3, [r7, #0]
 8012ff4:	681b      	ldr	r3, [r3, #0]
 8012ff6:	2b60      	cmp	r3, #96	; 0x60
 8012ff8:	d008      	beq.n	801300c <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8012ffa:	683b      	ldr	r3, [r7, #0]
 8012ffc:	681b      	ldr	r3, [r3, #0]
 8012ffe:	2b70      	cmp	r3, #112	; 0x70
 8013000:	d004      	beq.n	801300c <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8013002:	f44f 61f7 	mov.w	r1, #1976	; 0x7b8
 8013006:	4866      	ldr	r0, [pc, #408]	; (80131a0 <HAL_TIMEx_MasterConfigSynchronization+0x224>)
 8013008:	f7f1 fac4 	bl	8004594 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 801300c:	683b      	ldr	r3, [r7, #0]
 801300e:	689b      	ldr	r3, [r3, #8]
 8013010:	2b80      	cmp	r3, #128	; 0x80
 8013012:	d008      	beq.n	8013026 <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 8013014:	683b      	ldr	r3, [r7, #0]
 8013016:	689b      	ldr	r3, [r3, #8]
 8013018:	2b00      	cmp	r3, #0
 801301a:	d004      	beq.n	8013026 <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 801301c:	f240 71b9 	movw	r1, #1977	; 0x7b9
 8013020:	485f      	ldr	r0, [pc, #380]	; (80131a0 <HAL_TIMEx_MasterConfigSynchronization+0x224>)
 8013022:	f7f1 fab7 	bl	8004594 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8013026:	687b      	ldr	r3, [r7, #4]
 8013028:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801302c:	2b01      	cmp	r3, #1
 801302e:	d101      	bne.n	8013034 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8013030:	2302      	movs	r3, #2
 8013032:	e0a8      	b.n	8013186 <HAL_TIMEx_MasterConfigSynchronization+0x20a>
 8013034:	687b      	ldr	r3, [r7, #4]
 8013036:	2201      	movs	r2, #1
 8013038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801303c:	687b      	ldr	r3, [r7, #4]
 801303e:	2202      	movs	r2, #2
 8013040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8013044:	687b      	ldr	r3, [r7, #4]
 8013046:	681b      	ldr	r3, [r3, #0]
 8013048:	685b      	ldr	r3, [r3, #4]
 801304a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801304c:	687b      	ldr	r3, [r7, #4]
 801304e:	681b      	ldr	r3, [r3, #0]
 8013050:	689b      	ldr	r3, [r3, #8]
 8013052:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	681b      	ldr	r3, [r3, #0]
 8013058:	4a4d      	ldr	r2, [pc, #308]	; (8013190 <HAL_TIMEx_MasterConfigSynchronization+0x214>)
 801305a:	4293      	cmp	r3, r2
 801305c:	d161      	bne.n	8013122 <HAL_TIMEx_MasterConfigSynchronization+0x1a6>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 801305e:	683b      	ldr	r3, [r7, #0]
 8013060:	685b      	ldr	r3, [r3, #4]
 8013062:	2b00      	cmp	r3, #0
 8013064:	d054      	beq.n	8013110 <HAL_TIMEx_MasterConfigSynchronization+0x194>
 8013066:	683b      	ldr	r3, [r7, #0]
 8013068:	685b      	ldr	r3, [r3, #4]
 801306a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801306e:	d04f      	beq.n	8013110 <HAL_TIMEx_MasterConfigSynchronization+0x194>
 8013070:	683b      	ldr	r3, [r7, #0]
 8013072:	685b      	ldr	r3, [r3, #4]
 8013074:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8013078:	d04a      	beq.n	8013110 <HAL_TIMEx_MasterConfigSynchronization+0x194>
 801307a:	683b      	ldr	r3, [r7, #0]
 801307c:	685b      	ldr	r3, [r3, #4]
 801307e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8013082:	d045      	beq.n	8013110 <HAL_TIMEx_MasterConfigSynchronization+0x194>
 8013084:	683b      	ldr	r3, [r7, #0]
 8013086:	685b      	ldr	r3, [r3, #4]
 8013088:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801308c:	d040      	beq.n	8013110 <HAL_TIMEx_MasterConfigSynchronization+0x194>
 801308e:	683b      	ldr	r3, [r7, #0]
 8013090:	685b      	ldr	r3, [r3, #4]
 8013092:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8013096:	d03b      	beq.n	8013110 <HAL_TIMEx_MasterConfigSynchronization+0x194>
 8013098:	683b      	ldr	r3, [r7, #0]
 801309a:	685b      	ldr	r3, [r3, #4]
 801309c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80130a0:	d036      	beq.n	8013110 <HAL_TIMEx_MasterConfigSynchronization+0x194>
 80130a2:	683b      	ldr	r3, [r7, #0]
 80130a4:	685b      	ldr	r3, [r3, #4]
 80130a6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80130aa:	d031      	beq.n	8013110 <HAL_TIMEx_MasterConfigSynchronization+0x194>
 80130ac:	683b      	ldr	r3, [r7, #0]
 80130ae:	685b      	ldr	r3, [r3, #4]
 80130b0:	f5b3 0fe0 	cmp.w	r3, #7340032	; 0x700000
 80130b4:	d02c      	beq.n	8013110 <HAL_TIMEx_MasterConfigSynchronization+0x194>
 80130b6:	683b      	ldr	r3, [r7, #0]
 80130b8:	685b      	ldr	r3, [r3, #4]
 80130ba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80130be:	d027      	beq.n	8013110 <HAL_TIMEx_MasterConfigSynchronization+0x194>
 80130c0:	683b      	ldr	r3, [r7, #0]
 80130c2:	685b      	ldr	r3, [r3, #4]
 80130c4:	f5b3 0f10 	cmp.w	r3, #9437184	; 0x900000
 80130c8:	d022      	beq.n	8013110 <HAL_TIMEx_MasterConfigSynchronization+0x194>
 80130ca:	683b      	ldr	r3, [r7, #0]
 80130cc:	685b      	ldr	r3, [r3, #4]
 80130ce:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80130d2:	d01d      	beq.n	8013110 <HAL_TIMEx_MasterConfigSynchronization+0x194>
 80130d4:	683b      	ldr	r3, [r7, #0]
 80130d6:	685b      	ldr	r3, [r3, #4]
 80130d8:	f5b3 0f30 	cmp.w	r3, #11534336	; 0xb00000
 80130dc:	d018      	beq.n	8013110 <HAL_TIMEx_MasterConfigSynchronization+0x194>
 80130de:	683b      	ldr	r3, [r7, #0]
 80130e0:	685b      	ldr	r3, [r3, #4]
 80130e2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80130e6:	d013      	beq.n	8013110 <HAL_TIMEx_MasterConfigSynchronization+0x194>
 80130e8:	683b      	ldr	r3, [r7, #0]
 80130ea:	685b      	ldr	r3, [r3, #4]
 80130ec:	f5b3 0f50 	cmp.w	r3, #13631488	; 0xd00000
 80130f0:	d00e      	beq.n	8013110 <HAL_TIMEx_MasterConfigSynchronization+0x194>
 80130f2:	683b      	ldr	r3, [r7, #0]
 80130f4:	685b      	ldr	r3, [r3, #4]
 80130f6:	f5b3 0f60 	cmp.w	r3, #14680064	; 0xe00000
 80130fa:	d009      	beq.n	8013110 <HAL_TIMEx_MasterConfigSynchronization+0x194>
 80130fc:	683b      	ldr	r3, [r7, #0]
 80130fe:	685b      	ldr	r3, [r3, #4]
 8013100:	f5b3 0f70 	cmp.w	r3, #15728640	; 0xf00000
 8013104:	d004      	beq.n	8013110 <HAL_TIMEx_MasterConfigSynchronization+0x194>
 8013106:	f240 71cb 	movw	r1, #1995	; 0x7cb
 801310a:	4825      	ldr	r0, [pc, #148]	; (80131a0 <HAL_TIMEx_MasterConfigSynchronization+0x224>)
 801310c:	f7f1 fa42 	bl	8004594 <assert_failed>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8013110:	68fb      	ldr	r3, [r7, #12]
 8013112:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8013116:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8013118:	683b      	ldr	r3, [r7, #0]
 801311a:	685b      	ldr	r3, [r3, #4]
 801311c:	68fa      	ldr	r2, [r7, #12]
 801311e:	4313      	orrs	r3, r2
 8013120:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8013122:	68fb      	ldr	r3, [r7, #12]
 8013124:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013128:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801312a:	683b      	ldr	r3, [r7, #0]
 801312c:	681b      	ldr	r3, [r3, #0]
 801312e:	68fa      	ldr	r2, [r7, #12]
 8013130:	4313      	orrs	r3, r2
 8013132:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	681b      	ldr	r3, [r3, #0]
 8013138:	68fa      	ldr	r2, [r7, #12]
 801313a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	681b      	ldr	r3, [r3, #0]
 8013140:	4a13      	ldr	r2, [pc, #76]	; (8013190 <HAL_TIMEx_MasterConfigSynchronization+0x214>)
 8013142:	4293      	cmp	r3, r2
 8013144:	d009      	beq.n	801315a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8013146:	687b      	ldr	r3, [r7, #4]
 8013148:	681b      	ldr	r3, [r3, #0]
 801314a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801314e:	d004      	beq.n	801315a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8013150:	687b      	ldr	r3, [r7, #4]
 8013152:	681b      	ldr	r3, [r3, #0]
 8013154:	4a11      	ldr	r2, [pc, #68]	; (801319c <HAL_TIMEx_MasterConfigSynchronization+0x220>)
 8013156:	4293      	cmp	r3, r2
 8013158:	d10c      	bne.n	8013174 <HAL_TIMEx_MasterConfigSynchronization+0x1f8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801315a:	68bb      	ldr	r3, [r7, #8]
 801315c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013160:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8013162:	683b      	ldr	r3, [r7, #0]
 8013164:	689b      	ldr	r3, [r3, #8]
 8013166:	68ba      	ldr	r2, [r7, #8]
 8013168:	4313      	orrs	r3, r2
 801316a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	681b      	ldr	r3, [r3, #0]
 8013170:	68ba      	ldr	r2, [r7, #8]
 8013172:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	2201      	movs	r2, #1
 8013178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	2200      	movs	r2, #0
 8013180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8013184:	2300      	movs	r3, #0
}
 8013186:	4618      	mov	r0, r3
 8013188:	3710      	adds	r7, #16
 801318a:	46bd      	mov	sp, r7
 801318c:	bd80      	pop	{r7, pc}
 801318e:	bf00      	nop
 8013190:	40012c00 	.word	0x40012c00
 8013194:	40001000 	.word	0x40001000
 8013198:	40001400 	.word	0x40001400
 801319c:	40014000 	.word	0x40014000
 80131a0:	08018f4c 	.word	0x08018f4c

080131a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80131a4:	b480      	push	{r7}
 80131a6:	b083      	sub	sp, #12
 80131a8:	af00      	add	r7, sp, #0
 80131aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80131ac:	bf00      	nop
 80131ae:	370c      	adds	r7, #12
 80131b0:	46bd      	mov	sp, r7
 80131b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131b6:	4770      	bx	lr

080131b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80131b8:	b480      	push	{r7}
 80131ba:	b083      	sub	sp, #12
 80131bc:	af00      	add	r7, sp, #0
 80131be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80131c0:	bf00      	nop
 80131c2:	370c      	adds	r7, #12
 80131c4:	46bd      	mov	sp, r7
 80131c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131ca:	4770      	bx	lr

080131cc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80131cc:	b480      	push	{r7}
 80131ce:	b083      	sub	sp, #12
 80131d0:	af00      	add	r7, sp, #0
 80131d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80131d4:	bf00      	nop
 80131d6:	370c      	adds	r7, #12
 80131d8:	46bd      	mov	sp, r7
 80131da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131de:	4770      	bx	lr

080131e0 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80131e0:	b480      	push	{r7}
 80131e2:	b08b      	sub	sp, #44	; 0x2c
 80131e4:	af00      	add	r7, sp, #0
 80131e6:	60f8      	str	r0, [r7, #12]
 80131e8:	60b9      	str	r1, [r7, #8]
 80131ea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80131ec:	68fb      	ldr	r3, [r7, #12]
 80131ee:	681a      	ldr	r2, [r3, #0]
 80131f0:	68bb      	ldr	r3, [r7, #8]
 80131f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80131f4:	697b      	ldr	r3, [r7, #20]
 80131f6:	fa93 f3a3 	rbit	r3, r3
 80131fa:	613b      	str	r3, [r7, #16]
  return result;
 80131fc:	693b      	ldr	r3, [r7, #16]
 80131fe:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8013200:	69bb      	ldr	r3, [r7, #24]
 8013202:	2b00      	cmp	r3, #0
 8013204:	d101      	bne.n	801320a <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8013206:	2320      	movs	r3, #32
 8013208:	e003      	b.n	8013212 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 801320a:	69bb      	ldr	r3, [r7, #24]
 801320c:	fab3 f383 	clz	r3, r3
 8013210:	b2db      	uxtb	r3, r3
 8013212:	005b      	lsls	r3, r3, #1
 8013214:	2103      	movs	r1, #3
 8013216:	fa01 f303 	lsl.w	r3, r1, r3
 801321a:	43db      	mvns	r3, r3
 801321c:	401a      	ands	r2, r3
 801321e:	68bb      	ldr	r3, [r7, #8]
 8013220:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8013222:	6a3b      	ldr	r3, [r7, #32]
 8013224:	fa93 f3a3 	rbit	r3, r3
 8013228:	61fb      	str	r3, [r7, #28]
  return result;
 801322a:	69fb      	ldr	r3, [r7, #28]
 801322c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 801322e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013230:	2b00      	cmp	r3, #0
 8013232:	d101      	bne.n	8013238 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8013234:	2320      	movs	r3, #32
 8013236:	e003      	b.n	8013240 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8013238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801323a:	fab3 f383 	clz	r3, r3
 801323e:	b2db      	uxtb	r3, r3
 8013240:	005b      	lsls	r3, r3, #1
 8013242:	6879      	ldr	r1, [r7, #4]
 8013244:	fa01 f303 	lsl.w	r3, r1, r3
 8013248:	431a      	orrs	r2, r3
 801324a:	68fb      	ldr	r3, [r7, #12]
 801324c:	601a      	str	r2, [r3, #0]
}
 801324e:	bf00      	nop
 8013250:	372c      	adds	r7, #44	; 0x2c
 8013252:	46bd      	mov	sp, r7
 8013254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013258:	4770      	bx	lr

0801325a <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 801325a:	b480      	push	{r7}
 801325c:	b085      	sub	sp, #20
 801325e:	af00      	add	r7, sp, #0
 8013260:	60f8      	str	r0, [r7, #12]
 8013262:	60b9      	str	r1, [r7, #8]
 8013264:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8013266:	68fb      	ldr	r3, [r7, #12]
 8013268:	685a      	ldr	r2, [r3, #4]
 801326a:	68bb      	ldr	r3, [r7, #8]
 801326c:	43db      	mvns	r3, r3
 801326e:	401a      	ands	r2, r3
 8013270:	68bb      	ldr	r3, [r7, #8]
 8013272:	6879      	ldr	r1, [r7, #4]
 8013274:	fb01 f303 	mul.w	r3, r1, r3
 8013278:	431a      	orrs	r2, r3
 801327a:	68fb      	ldr	r3, [r7, #12]
 801327c:	605a      	str	r2, [r3, #4]
}
 801327e:	bf00      	nop
 8013280:	3714      	adds	r7, #20
 8013282:	46bd      	mov	sp, r7
 8013284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013288:	4770      	bx	lr

0801328a <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 801328a:	b480      	push	{r7}
 801328c:	b08b      	sub	sp, #44	; 0x2c
 801328e:	af00      	add	r7, sp, #0
 8013290:	60f8      	str	r0, [r7, #12]
 8013292:	60b9      	str	r1, [r7, #8]
 8013294:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8013296:	68fb      	ldr	r3, [r7, #12]
 8013298:	689a      	ldr	r2, [r3, #8]
 801329a:	68bb      	ldr	r3, [r7, #8]
 801329c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801329e:	697b      	ldr	r3, [r7, #20]
 80132a0:	fa93 f3a3 	rbit	r3, r3
 80132a4:	613b      	str	r3, [r7, #16]
  return result;
 80132a6:	693b      	ldr	r3, [r7, #16]
 80132a8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80132aa:	69bb      	ldr	r3, [r7, #24]
 80132ac:	2b00      	cmp	r3, #0
 80132ae:	d101      	bne.n	80132b4 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 80132b0:	2320      	movs	r3, #32
 80132b2:	e003      	b.n	80132bc <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 80132b4:	69bb      	ldr	r3, [r7, #24]
 80132b6:	fab3 f383 	clz	r3, r3
 80132ba:	b2db      	uxtb	r3, r3
 80132bc:	005b      	lsls	r3, r3, #1
 80132be:	2103      	movs	r1, #3
 80132c0:	fa01 f303 	lsl.w	r3, r1, r3
 80132c4:	43db      	mvns	r3, r3
 80132c6:	401a      	ands	r2, r3
 80132c8:	68bb      	ldr	r3, [r7, #8]
 80132ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80132cc:	6a3b      	ldr	r3, [r7, #32]
 80132ce:	fa93 f3a3 	rbit	r3, r3
 80132d2:	61fb      	str	r3, [r7, #28]
  return result;
 80132d4:	69fb      	ldr	r3, [r7, #28]
 80132d6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80132d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132da:	2b00      	cmp	r3, #0
 80132dc:	d101      	bne.n	80132e2 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 80132de:	2320      	movs	r3, #32
 80132e0:	e003      	b.n	80132ea <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 80132e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132e4:	fab3 f383 	clz	r3, r3
 80132e8:	b2db      	uxtb	r3, r3
 80132ea:	005b      	lsls	r3, r3, #1
 80132ec:	6879      	ldr	r1, [r7, #4]
 80132ee:	fa01 f303 	lsl.w	r3, r1, r3
 80132f2:	431a      	orrs	r2, r3
 80132f4:	68fb      	ldr	r3, [r7, #12]
 80132f6:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 80132f8:	bf00      	nop
 80132fa:	372c      	adds	r7, #44	; 0x2c
 80132fc:	46bd      	mov	sp, r7
 80132fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013302:	4770      	bx	lr

08013304 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8013304:	b480      	push	{r7}
 8013306:	b08b      	sub	sp, #44	; 0x2c
 8013308:	af00      	add	r7, sp, #0
 801330a:	60f8      	str	r0, [r7, #12]
 801330c:	60b9      	str	r1, [r7, #8]
 801330e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8013310:	68fb      	ldr	r3, [r7, #12]
 8013312:	68da      	ldr	r2, [r3, #12]
 8013314:	68bb      	ldr	r3, [r7, #8]
 8013316:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8013318:	697b      	ldr	r3, [r7, #20]
 801331a:	fa93 f3a3 	rbit	r3, r3
 801331e:	613b      	str	r3, [r7, #16]
  return result;
 8013320:	693b      	ldr	r3, [r7, #16]
 8013322:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8013324:	69bb      	ldr	r3, [r7, #24]
 8013326:	2b00      	cmp	r3, #0
 8013328:	d101      	bne.n	801332e <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 801332a:	2320      	movs	r3, #32
 801332c:	e003      	b.n	8013336 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 801332e:	69bb      	ldr	r3, [r7, #24]
 8013330:	fab3 f383 	clz	r3, r3
 8013334:	b2db      	uxtb	r3, r3
 8013336:	005b      	lsls	r3, r3, #1
 8013338:	2103      	movs	r1, #3
 801333a:	fa01 f303 	lsl.w	r3, r1, r3
 801333e:	43db      	mvns	r3, r3
 8013340:	401a      	ands	r2, r3
 8013342:	68bb      	ldr	r3, [r7, #8]
 8013344:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8013346:	6a3b      	ldr	r3, [r7, #32]
 8013348:	fa93 f3a3 	rbit	r3, r3
 801334c:	61fb      	str	r3, [r7, #28]
  return result;
 801334e:	69fb      	ldr	r3, [r7, #28]
 8013350:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8013352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013354:	2b00      	cmp	r3, #0
 8013356:	d101      	bne.n	801335c <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8013358:	2320      	movs	r3, #32
 801335a:	e003      	b.n	8013364 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 801335c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801335e:	fab3 f383 	clz	r3, r3
 8013362:	b2db      	uxtb	r3, r3
 8013364:	005b      	lsls	r3, r3, #1
 8013366:	6879      	ldr	r1, [r7, #4]
 8013368:	fa01 f303 	lsl.w	r3, r1, r3
 801336c:	431a      	orrs	r2, r3
 801336e:	68fb      	ldr	r3, [r7, #12]
 8013370:	60da      	str	r2, [r3, #12]
}
 8013372:	bf00      	nop
 8013374:	372c      	adds	r7, #44	; 0x2c
 8013376:	46bd      	mov	sp, r7
 8013378:	f85d 7b04 	ldr.w	r7, [sp], #4
 801337c:	4770      	bx	lr

0801337e <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 801337e:	b480      	push	{r7}
 8013380:	b08b      	sub	sp, #44	; 0x2c
 8013382:	af00      	add	r7, sp, #0
 8013384:	60f8      	str	r0, [r7, #12]
 8013386:	60b9      	str	r1, [r7, #8]
 8013388:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 801338a:	68fb      	ldr	r3, [r7, #12]
 801338c:	6a1a      	ldr	r2, [r3, #32]
 801338e:	68bb      	ldr	r3, [r7, #8]
 8013390:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8013392:	697b      	ldr	r3, [r7, #20]
 8013394:	fa93 f3a3 	rbit	r3, r3
 8013398:	613b      	str	r3, [r7, #16]
  return result;
 801339a:	693b      	ldr	r3, [r7, #16]
 801339c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 801339e:	69bb      	ldr	r3, [r7, #24]
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	d101      	bne.n	80133a8 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 80133a4:	2320      	movs	r3, #32
 80133a6:	e003      	b.n	80133b0 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 80133a8:	69bb      	ldr	r3, [r7, #24]
 80133aa:	fab3 f383 	clz	r3, r3
 80133ae:	b2db      	uxtb	r3, r3
 80133b0:	009b      	lsls	r3, r3, #2
 80133b2:	210f      	movs	r1, #15
 80133b4:	fa01 f303 	lsl.w	r3, r1, r3
 80133b8:	43db      	mvns	r3, r3
 80133ba:	401a      	ands	r2, r3
 80133bc:	68bb      	ldr	r3, [r7, #8]
 80133be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80133c0:	6a3b      	ldr	r3, [r7, #32]
 80133c2:	fa93 f3a3 	rbit	r3, r3
 80133c6:	61fb      	str	r3, [r7, #28]
  return result;
 80133c8:	69fb      	ldr	r3, [r7, #28]
 80133ca:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80133cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133ce:	2b00      	cmp	r3, #0
 80133d0:	d101      	bne.n	80133d6 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 80133d2:	2320      	movs	r3, #32
 80133d4:	e003      	b.n	80133de <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 80133d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133d8:	fab3 f383 	clz	r3, r3
 80133dc:	b2db      	uxtb	r3, r3
 80133de:	009b      	lsls	r3, r3, #2
 80133e0:	6879      	ldr	r1, [r7, #4]
 80133e2:	fa01 f303 	lsl.w	r3, r1, r3
 80133e6:	431a      	orrs	r2, r3
 80133e8:	68fb      	ldr	r3, [r7, #12]
 80133ea:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 80133ec:	bf00      	nop
 80133ee:	372c      	adds	r7, #44	; 0x2c
 80133f0:	46bd      	mov	sp, r7
 80133f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133f6:	4770      	bx	lr

080133f8 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80133f8:	b480      	push	{r7}
 80133fa:	b08b      	sub	sp, #44	; 0x2c
 80133fc:	af00      	add	r7, sp, #0
 80133fe:	60f8      	str	r0, [r7, #12]
 8013400:	60b9      	str	r1, [r7, #8]
 8013402:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8013404:	68fb      	ldr	r3, [r7, #12]
 8013406:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013408:	68bb      	ldr	r3, [r7, #8]
 801340a:	0a1b      	lsrs	r3, r3, #8
 801340c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801340e:	697b      	ldr	r3, [r7, #20]
 8013410:	fa93 f3a3 	rbit	r3, r3
 8013414:	613b      	str	r3, [r7, #16]
  return result;
 8013416:	693b      	ldr	r3, [r7, #16]
 8013418:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 801341a:	69bb      	ldr	r3, [r7, #24]
 801341c:	2b00      	cmp	r3, #0
 801341e:	d101      	bne.n	8013424 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8013420:	2320      	movs	r3, #32
 8013422:	e003      	b.n	801342c <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8013424:	69bb      	ldr	r3, [r7, #24]
 8013426:	fab3 f383 	clz	r3, r3
 801342a:	b2db      	uxtb	r3, r3
 801342c:	009b      	lsls	r3, r3, #2
 801342e:	210f      	movs	r1, #15
 8013430:	fa01 f303 	lsl.w	r3, r1, r3
 8013434:	43db      	mvns	r3, r3
 8013436:	401a      	ands	r2, r3
 8013438:	68bb      	ldr	r3, [r7, #8]
 801343a:	0a1b      	lsrs	r3, r3, #8
 801343c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801343e:	6a3b      	ldr	r3, [r7, #32]
 8013440:	fa93 f3a3 	rbit	r3, r3
 8013444:	61fb      	str	r3, [r7, #28]
  return result;
 8013446:	69fb      	ldr	r3, [r7, #28]
 8013448:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 801344a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801344c:	2b00      	cmp	r3, #0
 801344e:	d101      	bne.n	8013454 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8013450:	2320      	movs	r3, #32
 8013452:	e003      	b.n	801345c <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8013454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013456:	fab3 f383 	clz	r3, r3
 801345a:	b2db      	uxtb	r3, r3
 801345c:	009b      	lsls	r3, r3, #2
 801345e:	6879      	ldr	r1, [r7, #4]
 8013460:	fa01 f303 	lsl.w	r3, r1, r3
 8013464:	431a      	orrs	r2, r3
 8013466:	68fb      	ldr	r3, [r7, #12]
 8013468:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 801346a:	bf00      	nop
 801346c:	372c      	adds	r7, #44	; 0x2c
 801346e:	46bd      	mov	sp, r7
 8013470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013474:	4770      	bx	lr
	...

08013478 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8013478:	b580      	push	{r7, lr}
 801347a:	b088      	sub	sp, #32
 801347c:	af00      	add	r7, sp, #0
 801347e:	6078      	str	r0, [r7, #4]
 8013480:	6039      	str	r1, [r7, #0]
  uint32_t pinpos;
  uint32_t currentpin;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8013482:	687b      	ldr	r3, [r7, #4]
 8013484:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8013488:	d017      	beq.n	80134ba <LL_GPIO_Init+0x42>
 801348a:	687b      	ldr	r3, [r7, #4]
 801348c:	4a8b      	ldr	r2, [pc, #556]	; (80136bc <LL_GPIO_Init+0x244>)
 801348e:	4293      	cmp	r3, r2
 8013490:	d013      	beq.n	80134ba <LL_GPIO_Init+0x42>
 8013492:	687b      	ldr	r3, [r7, #4]
 8013494:	4a8a      	ldr	r2, [pc, #552]	; (80136c0 <LL_GPIO_Init+0x248>)
 8013496:	4293      	cmp	r3, r2
 8013498:	d00f      	beq.n	80134ba <LL_GPIO_Init+0x42>
 801349a:	687b      	ldr	r3, [r7, #4]
 801349c:	4a89      	ldr	r2, [pc, #548]	; (80136c4 <LL_GPIO_Init+0x24c>)
 801349e:	4293      	cmp	r3, r2
 80134a0:	d00b      	beq.n	80134ba <LL_GPIO_Init+0x42>
 80134a2:	687b      	ldr	r3, [r7, #4]
 80134a4:	4a88      	ldr	r2, [pc, #544]	; (80136c8 <LL_GPIO_Init+0x250>)
 80134a6:	4293      	cmp	r3, r2
 80134a8:	d007      	beq.n	80134ba <LL_GPIO_Init+0x42>
 80134aa:	687b      	ldr	r3, [r7, #4]
 80134ac:	4a87      	ldr	r2, [pc, #540]	; (80136cc <LL_GPIO_Init+0x254>)
 80134ae:	4293      	cmp	r3, r2
 80134b0:	d003      	beq.n	80134ba <LL_GPIO_Init+0x42>
 80134b2:	21c4      	movs	r1, #196	; 0xc4
 80134b4:	4886      	ldr	r0, [pc, #536]	; (80136d0 <LL_GPIO_Init+0x258>)
 80134b6:	f7f1 f86d 	bl	8004594 <assert_failed>
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));
 80134ba:	683b      	ldr	r3, [r7, #0]
 80134bc:	681b      	ldr	r3, [r3, #0]
 80134be:	2b00      	cmp	r3, #0
 80134c0:	d004      	beq.n	80134cc <LL_GPIO_Init+0x54>
 80134c2:	683b      	ldr	r3, [r7, #0]
 80134c4:	681b      	ldr	r3, [r3, #0]
 80134c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80134ca:	d303      	bcc.n	80134d4 <LL_GPIO_Init+0x5c>
 80134cc:	21c5      	movs	r1, #197	; 0xc5
 80134ce:	4880      	ldr	r0, [pc, #512]	; (80136d0 <LL_GPIO_Init+0x258>)
 80134d0:	f7f1 f860 	bl	8004594 <assert_failed>
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
 80134d4:	683b      	ldr	r3, [r7, #0]
 80134d6:	685b      	ldr	r3, [r3, #4]
 80134d8:	2b00      	cmp	r3, #0
 80134da:	d00f      	beq.n	80134fc <LL_GPIO_Init+0x84>
 80134dc:	683b      	ldr	r3, [r7, #0]
 80134de:	685b      	ldr	r3, [r3, #4]
 80134e0:	2b01      	cmp	r3, #1
 80134e2:	d00b      	beq.n	80134fc <LL_GPIO_Init+0x84>
 80134e4:	683b      	ldr	r3, [r7, #0]
 80134e6:	685b      	ldr	r3, [r3, #4]
 80134e8:	2b02      	cmp	r3, #2
 80134ea:	d007      	beq.n	80134fc <LL_GPIO_Init+0x84>
 80134ec:	683b      	ldr	r3, [r7, #0]
 80134ee:	685b      	ldr	r3, [r3, #4]
 80134f0:	2b03      	cmp	r3, #3
 80134f2:	d003      	beq.n	80134fc <LL_GPIO_Init+0x84>
 80134f4:	21c6      	movs	r1, #198	; 0xc6
 80134f6:	4876      	ldr	r0, [pc, #472]	; (80136d0 <LL_GPIO_Init+0x258>)
 80134f8:	f7f1 f84c 	bl	8004594 <assert_failed>
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));
 80134fc:	683b      	ldr	r3, [r7, #0]
 80134fe:	691b      	ldr	r3, [r3, #16]
 8013500:	2b00      	cmp	r3, #0
 8013502:	d00b      	beq.n	801351c <LL_GPIO_Init+0xa4>
 8013504:	683b      	ldr	r3, [r7, #0]
 8013506:	691b      	ldr	r3, [r3, #16]
 8013508:	2b01      	cmp	r3, #1
 801350a:	d007      	beq.n	801351c <LL_GPIO_Init+0xa4>
 801350c:	683b      	ldr	r3, [r7, #0]
 801350e:	691b      	ldr	r3, [r3, #16]
 8013510:	2b02      	cmp	r3, #2
 8013512:	d003      	beq.n	801351c <LL_GPIO_Init+0xa4>
 8013514:	21c7      	movs	r1, #199	; 0xc7
 8013516:	486e      	ldr	r0, [pc, #440]	; (80136d0 <LL_GPIO_Init+0x258>)
 8013518:	f7f1 f83c 	bl	8004594 <assert_failed>

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 801351c:	683b      	ldr	r3, [r7, #0]
 801351e:	681b      	ldr	r3, [r3, #0]
 8013520:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8013522:	693b      	ldr	r3, [r7, #16]
 8013524:	fa93 f3a3 	rbit	r3, r3
 8013528:	60fb      	str	r3, [r7, #12]
  return result;
 801352a:	68fb      	ldr	r3, [r7, #12]
 801352c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 801352e:	697b      	ldr	r3, [r7, #20]
 8013530:	2b00      	cmp	r3, #0
 8013532:	d101      	bne.n	8013538 <LL_GPIO_Init+0xc0>
    return 32U;
 8013534:	2320      	movs	r3, #32
 8013536:	e003      	b.n	8013540 <LL_GPIO_Init+0xc8>
  return __builtin_clz(value);
 8013538:	697b      	ldr	r3, [r7, #20]
 801353a:	fab3 f383 	clz	r3, r3
 801353e:	b2db      	uxtb	r3, r3
 8013540:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8013542:	e0ad      	b.n	80136a0 <LL_GPIO_Init+0x228>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8013544:	683b      	ldr	r3, [r7, #0]
 8013546:	681a      	ldr	r2, [r3, #0]
 8013548:	2101      	movs	r1, #1
 801354a:	69fb      	ldr	r3, [r7, #28]
 801354c:	fa01 f303 	lsl.w	r3, r1, r3
 8013550:	4013      	ands	r3, r2
 8013552:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8013554:	69bb      	ldr	r3, [r7, #24]
 8013556:	2b00      	cmp	r3, #0
 8013558:	f000 809f 	beq.w	801369a <LL_GPIO_Init+0x222>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 801355c:	683b      	ldr	r3, [r7, #0]
 801355e:	685b      	ldr	r3, [r3, #4]
 8013560:	2b01      	cmp	r3, #1
 8013562:	d003      	beq.n	801356c <LL_GPIO_Init+0xf4>
 8013564:	683b      	ldr	r3, [r7, #0]
 8013566:	685b      	ldr	r3, [r3, #4]
 8013568:	2b02      	cmp	r3, #2
 801356a:	d12e      	bne.n	80135ca <LL_GPIO_Init+0x152>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
 801356c:	683b      	ldr	r3, [r7, #0]
 801356e:	689b      	ldr	r3, [r3, #8]
 8013570:	2b00      	cmp	r3, #0
 8013572:	d00f      	beq.n	8013594 <LL_GPIO_Init+0x11c>
 8013574:	683b      	ldr	r3, [r7, #0]
 8013576:	689b      	ldr	r3, [r3, #8]
 8013578:	2b01      	cmp	r3, #1
 801357a:	d00b      	beq.n	8013594 <LL_GPIO_Init+0x11c>
 801357c:	683b      	ldr	r3, [r7, #0]
 801357e:	689b      	ldr	r3, [r3, #8]
 8013580:	2b02      	cmp	r3, #2
 8013582:	d007      	beq.n	8013594 <LL_GPIO_Init+0x11c>
 8013584:	683b      	ldr	r3, [r7, #0]
 8013586:	689b      	ldr	r3, [r3, #8]
 8013588:	2b03      	cmp	r3, #3
 801358a:	d003      	beq.n	8013594 <LL_GPIO_Init+0x11c>
 801358c:	21d8      	movs	r1, #216	; 0xd8
 801358e:	4850      	ldr	r0, [pc, #320]	; (80136d0 <LL_GPIO_Init+0x258>)
 8013590:	f7f1 f800 	bl	8004594 <assert_failed>

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8013594:	683b      	ldr	r3, [r7, #0]
 8013596:	689b      	ldr	r3, [r3, #8]
 8013598:	461a      	mov	r2, r3
 801359a:	69b9      	ldr	r1, [r7, #24]
 801359c:	6878      	ldr	r0, [r7, #4]
 801359e:	f7ff fe74 	bl	801328a <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
 80135a2:	683b      	ldr	r3, [r7, #0]
 80135a4:	68db      	ldr	r3, [r3, #12]
 80135a6:	2b00      	cmp	r3, #0
 80135a8:	d007      	beq.n	80135ba <LL_GPIO_Init+0x142>
 80135aa:	683b      	ldr	r3, [r7, #0]
 80135ac:	68db      	ldr	r3, [r3, #12]
 80135ae:	2b01      	cmp	r3, #1
 80135b0:	d003      	beq.n	80135ba <LL_GPIO_Init+0x142>
 80135b2:	21de      	movs	r1, #222	; 0xde
 80135b4:	4846      	ldr	r0, [pc, #280]	; (80136d0 <LL_GPIO_Init+0x258>)
 80135b6:	f7f0 ffed 	bl	8004594 <assert_failed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80135ba:	683b      	ldr	r3, [r7, #0]
 80135bc:	6819      	ldr	r1, [r3, #0]
 80135be:	683b      	ldr	r3, [r7, #0]
 80135c0:	68db      	ldr	r3, [r3, #12]
 80135c2:	461a      	mov	r2, r3
 80135c4:	6878      	ldr	r0, [r7, #4]
 80135c6:	f7ff fe48 	bl	801325a <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80135ca:	683b      	ldr	r3, [r7, #0]
 80135cc:	691b      	ldr	r3, [r3, #16]
 80135ce:	461a      	mov	r2, r3
 80135d0:	69b9      	ldr	r1, [r7, #24]
 80135d2:	6878      	ldr	r0, [r7, #4]
 80135d4:	f7ff fe96 	bl	8013304 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80135d8:	683b      	ldr	r3, [r7, #0]
 80135da:	685b      	ldr	r3, [r3, #4]
 80135dc:	2b02      	cmp	r3, #2
 80135de:	d155      	bne.n	801368c <LL_GPIO_Init+0x214>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
 80135e0:	683b      	ldr	r3, [r7, #0]
 80135e2:	695b      	ldr	r3, [r3, #20]
 80135e4:	2b00      	cmp	r3, #0
 80135e6:	d03f      	beq.n	8013668 <LL_GPIO_Init+0x1f0>
 80135e8:	683b      	ldr	r3, [r7, #0]
 80135ea:	695b      	ldr	r3, [r3, #20]
 80135ec:	2b01      	cmp	r3, #1
 80135ee:	d03b      	beq.n	8013668 <LL_GPIO_Init+0x1f0>
 80135f0:	683b      	ldr	r3, [r7, #0]
 80135f2:	695b      	ldr	r3, [r3, #20]
 80135f4:	2b02      	cmp	r3, #2
 80135f6:	d037      	beq.n	8013668 <LL_GPIO_Init+0x1f0>
 80135f8:	683b      	ldr	r3, [r7, #0]
 80135fa:	695b      	ldr	r3, [r3, #20]
 80135fc:	2b03      	cmp	r3, #3
 80135fe:	d033      	beq.n	8013668 <LL_GPIO_Init+0x1f0>
 8013600:	683b      	ldr	r3, [r7, #0]
 8013602:	695b      	ldr	r3, [r3, #20]
 8013604:	2b04      	cmp	r3, #4
 8013606:	d02f      	beq.n	8013668 <LL_GPIO_Init+0x1f0>
 8013608:	683b      	ldr	r3, [r7, #0]
 801360a:	695b      	ldr	r3, [r3, #20]
 801360c:	2b05      	cmp	r3, #5
 801360e:	d02b      	beq.n	8013668 <LL_GPIO_Init+0x1f0>
 8013610:	683b      	ldr	r3, [r7, #0]
 8013612:	695b      	ldr	r3, [r3, #20]
 8013614:	2b06      	cmp	r3, #6
 8013616:	d027      	beq.n	8013668 <LL_GPIO_Init+0x1f0>
 8013618:	683b      	ldr	r3, [r7, #0]
 801361a:	695b      	ldr	r3, [r3, #20]
 801361c:	2b07      	cmp	r3, #7
 801361e:	d023      	beq.n	8013668 <LL_GPIO_Init+0x1f0>
 8013620:	683b      	ldr	r3, [r7, #0]
 8013622:	695b      	ldr	r3, [r3, #20]
 8013624:	2b08      	cmp	r3, #8
 8013626:	d01f      	beq.n	8013668 <LL_GPIO_Init+0x1f0>
 8013628:	683b      	ldr	r3, [r7, #0]
 801362a:	695b      	ldr	r3, [r3, #20]
 801362c:	2b09      	cmp	r3, #9
 801362e:	d01b      	beq.n	8013668 <LL_GPIO_Init+0x1f0>
 8013630:	683b      	ldr	r3, [r7, #0]
 8013632:	695b      	ldr	r3, [r3, #20]
 8013634:	2b0a      	cmp	r3, #10
 8013636:	d017      	beq.n	8013668 <LL_GPIO_Init+0x1f0>
 8013638:	683b      	ldr	r3, [r7, #0]
 801363a:	695b      	ldr	r3, [r3, #20]
 801363c:	2b0b      	cmp	r3, #11
 801363e:	d013      	beq.n	8013668 <LL_GPIO_Init+0x1f0>
 8013640:	683b      	ldr	r3, [r7, #0]
 8013642:	695b      	ldr	r3, [r3, #20]
 8013644:	2b0c      	cmp	r3, #12
 8013646:	d00f      	beq.n	8013668 <LL_GPIO_Init+0x1f0>
 8013648:	683b      	ldr	r3, [r7, #0]
 801364a:	695b      	ldr	r3, [r3, #20]
 801364c:	2b0d      	cmp	r3, #13
 801364e:	d00b      	beq.n	8013668 <LL_GPIO_Init+0x1f0>
 8013650:	683b      	ldr	r3, [r7, #0]
 8013652:	695b      	ldr	r3, [r3, #20]
 8013654:	2b0e      	cmp	r3, #14
 8013656:	d007      	beq.n	8013668 <LL_GPIO_Init+0x1f0>
 8013658:	683b      	ldr	r3, [r7, #0]
 801365a:	695b      	ldr	r3, [r3, #20]
 801365c:	2b0f      	cmp	r3, #15
 801365e:	d003      	beq.n	8013668 <LL_GPIO_Init+0x1f0>
 8013660:	21ea      	movs	r1, #234	; 0xea
 8013662:	481b      	ldr	r0, [pc, #108]	; (80136d0 <LL_GPIO_Init+0x258>)
 8013664:	f7f0 ff96 	bl	8004594 <assert_failed>

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8013668:	69bb      	ldr	r3, [r7, #24]
 801366a:	2bff      	cmp	r3, #255	; 0xff
 801366c:	d807      	bhi.n	801367e <LL_GPIO_Init+0x206>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 801366e:	683b      	ldr	r3, [r7, #0]
 8013670:	695b      	ldr	r3, [r3, #20]
 8013672:	461a      	mov	r2, r3
 8013674:	69b9      	ldr	r1, [r7, #24]
 8013676:	6878      	ldr	r0, [r7, #4]
 8013678:	f7ff fe81 	bl	801337e <LL_GPIO_SetAFPin_0_7>
 801367c:	e006      	b.n	801368c <LL_GPIO_Init+0x214>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 801367e:	683b      	ldr	r3, [r7, #0]
 8013680:	695b      	ldr	r3, [r3, #20]
 8013682:	461a      	mov	r2, r3
 8013684:	69b9      	ldr	r1, [r7, #24]
 8013686:	6878      	ldr	r0, [r7, #4]
 8013688:	f7ff feb6 	bl	80133f8 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 801368c:	683b      	ldr	r3, [r7, #0]
 801368e:	685b      	ldr	r3, [r3, #4]
 8013690:	461a      	mov	r2, r3
 8013692:	69b9      	ldr	r1, [r7, #24]
 8013694:	6878      	ldr	r0, [r7, #4]
 8013696:	f7ff fda3 	bl	80131e0 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 801369a:	69fb      	ldr	r3, [r7, #28]
 801369c:	3301      	adds	r3, #1
 801369e:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80136a0:	683b      	ldr	r3, [r7, #0]
 80136a2:	681a      	ldr	r2, [r3, #0]
 80136a4:	69fb      	ldr	r3, [r7, #28]
 80136a6:	fa22 f303 	lsr.w	r3, r2, r3
 80136aa:	2b00      	cmp	r3, #0
 80136ac:	f47f af4a 	bne.w	8013544 <LL_GPIO_Init+0xcc>
  }

  return (SUCCESS);
 80136b0:	2300      	movs	r3, #0
}
 80136b2:	4618      	mov	r0, r3
 80136b4:	3720      	adds	r7, #32
 80136b6:	46bd      	mov	sp, r7
 80136b8:	bd80      	pop	{r7, pc}
 80136ba:	bf00      	nop
 80136bc:	48000400 	.word	0x48000400
 80136c0:	48000800 	.word	0x48000800
 80136c4:	48000c00 	.word	0x48000c00
 80136c8:	48001000 	.word	0x48001000
 80136cc:	48001c00 	.word	0x48001c00
 80136d0:	08018f88 	.word	0x08018f88

080136d4 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80136d4:	b480      	push	{r7}
 80136d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 80136d8:	4b07      	ldr	r3, [pc, #28]	; (80136f8 <LL_RCC_HSI_IsReady+0x24>)
 80136da:	681b      	ldr	r3, [r3, #0]
 80136dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80136e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80136e4:	d101      	bne.n	80136ea <LL_RCC_HSI_IsReady+0x16>
 80136e6:	2301      	movs	r3, #1
 80136e8:	e000      	b.n	80136ec <LL_RCC_HSI_IsReady+0x18>
 80136ea:	2300      	movs	r3, #0
}
 80136ec:	4618      	mov	r0, r3
 80136ee:	46bd      	mov	sp, r7
 80136f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136f4:	4770      	bx	lr
 80136f6:	bf00      	nop
 80136f8:	40021000 	.word	0x40021000

080136fc <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80136fc:	b480      	push	{r7}
 80136fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 8013700:	4b07      	ldr	r3, [pc, #28]	; (8013720 <LL_RCC_LSE_IsReady+0x24>)
 8013702:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013706:	f003 0302 	and.w	r3, r3, #2
 801370a:	2b02      	cmp	r3, #2
 801370c:	d101      	bne.n	8013712 <LL_RCC_LSE_IsReady+0x16>
 801370e:	2301      	movs	r3, #1
 8013710:	e000      	b.n	8013714 <LL_RCC_LSE_IsReady+0x18>
 8013712:	2300      	movs	r3, #0
}
 8013714:	4618      	mov	r0, r3
 8013716:	46bd      	mov	sp, r7
 8013718:	f85d 7b04 	ldr.w	r7, [sp], #4
 801371c:	4770      	bx	lr
 801371e:	bf00      	nop
 8013720:	40021000 	.word	0x40021000

08013724 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8013724:	b480      	push	{r7}
 8013726:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 8013728:	4b06      	ldr	r3, [pc, #24]	; (8013744 <LL_RCC_MSI_IsEnabledRangeSelect+0x20>)
 801372a:	681b      	ldr	r3, [r3, #0]
 801372c:	f003 0308 	and.w	r3, r3, #8
 8013730:	2b08      	cmp	r3, #8
 8013732:	d101      	bne.n	8013738 <LL_RCC_MSI_IsEnabledRangeSelect+0x14>
 8013734:	2301      	movs	r3, #1
 8013736:	e000      	b.n	801373a <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8013738:	2300      	movs	r3, #0
}
 801373a:	4618      	mov	r0, r3
 801373c:	46bd      	mov	sp, r7
 801373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013742:	4770      	bx	lr
 8013744:	40021000 	.word	0x40021000

08013748 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8013748:	b480      	push	{r7}
 801374a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 801374c:	4b04      	ldr	r3, [pc, #16]	; (8013760 <LL_RCC_MSI_GetRange+0x18>)
 801374e:	681b      	ldr	r3, [r3, #0]
 8013750:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8013754:	4618      	mov	r0, r3
 8013756:	46bd      	mov	sp, r7
 8013758:	f85d 7b04 	ldr.w	r7, [sp], #4
 801375c:	4770      	bx	lr
 801375e:	bf00      	nop
 8013760:	40021000 	.word	0x40021000

08013764 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8013764:	b480      	push	{r7}
 8013766:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8013768:	4b04      	ldr	r3, [pc, #16]	; (801377c <LL_RCC_MSI_GetRangeAfterStandby+0x18>)
 801376a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801376e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8013772:	4618      	mov	r0, r3
 8013774:	46bd      	mov	sp, r7
 8013776:	f85d 7b04 	ldr.w	r7, [sp], #4
 801377a:	4770      	bx	lr
 801377c:	40021000 	.word	0x40021000

08013780 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8013780:	b480      	push	{r7}
 8013782:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8013784:	4b04      	ldr	r3, [pc, #16]	; (8013798 <LL_RCC_GetSysClkSource+0x18>)
 8013786:	689b      	ldr	r3, [r3, #8]
 8013788:	f003 030c 	and.w	r3, r3, #12
}
 801378c:	4618      	mov	r0, r3
 801378e:	46bd      	mov	sp, r7
 8013790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013794:	4770      	bx	lr
 8013796:	bf00      	nop
 8013798:	40021000 	.word	0x40021000

0801379c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 801379c:	b480      	push	{r7}
 801379e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80137a0:	4b04      	ldr	r3, [pc, #16]	; (80137b4 <LL_RCC_GetAHBPrescaler+0x18>)
 80137a2:	689b      	ldr	r3, [r3, #8]
 80137a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80137a8:	4618      	mov	r0, r3
 80137aa:	46bd      	mov	sp, r7
 80137ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137b0:	4770      	bx	lr
 80137b2:	bf00      	nop
 80137b4:	40021000 	.word	0x40021000

080137b8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80137b8:	b480      	push	{r7}
 80137ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80137bc:	4b04      	ldr	r3, [pc, #16]	; (80137d0 <LL_RCC_GetAPB1Prescaler+0x18>)
 80137be:	689b      	ldr	r3, [r3, #8]
 80137c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80137c4:	4618      	mov	r0, r3
 80137c6:	46bd      	mov	sp, r7
 80137c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137cc:	4770      	bx	lr
 80137ce:	bf00      	nop
 80137d0:	40021000 	.word	0x40021000

080137d4 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80137d4:	b480      	push	{r7}
 80137d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80137d8:	4b04      	ldr	r3, [pc, #16]	; (80137ec <LL_RCC_GetAPB2Prescaler+0x18>)
 80137da:	689b      	ldr	r3, [r3, #8]
 80137dc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80137e0:	4618      	mov	r0, r3
 80137e2:	46bd      	mov	sp, r7
 80137e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137e8:	4770      	bx	lr
 80137ea:	bf00      	nop
 80137ec:	40021000 	.word	0x40021000

080137f0 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 80137f0:	b480      	push	{r7}
 80137f2:	b083      	sub	sp, #12
 80137f4:	af00      	add	r7, sp, #0
 80137f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 80137f8:	4b06      	ldr	r3, [pc, #24]	; (8013814 <LL_RCC_GetUSARTClockSource+0x24>)
 80137fa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80137fe:	687b      	ldr	r3, [r7, #4]
 8013800:	401a      	ands	r2, r3
 8013802:	687b      	ldr	r3, [r7, #4]
 8013804:	041b      	lsls	r3, r3, #16
 8013806:	4313      	orrs	r3, r2
}
 8013808:	4618      	mov	r0, r3
 801380a:	370c      	adds	r7, #12
 801380c:	46bd      	mov	sp, r7
 801380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013812:	4770      	bx	lr
 8013814:	40021000 	.word	0x40021000

08013818 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8013818:	b480      	push	{r7}
 801381a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 801381c:	4b04      	ldr	r3, [pc, #16]	; (8013830 <LL_RCC_PLL_GetMainSource+0x18>)
 801381e:	68db      	ldr	r3, [r3, #12]
 8013820:	f003 0303 	and.w	r3, r3, #3
}
 8013824:	4618      	mov	r0, r3
 8013826:	46bd      	mov	sp, r7
 8013828:	f85d 7b04 	ldr.w	r7, [sp], #4
 801382c:	4770      	bx	lr
 801382e:	bf00      	nop
 8013830:	40021000 	.word	0x40021000

08013834 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86 or 127 depending on devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8013834:	b480      	push	{r7}
 8013836:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8013838:	4b04      	ldr	r3, [pc, #16]	; (801384c <LL_RCC_PLL_GetN+0x18>)
 801383a:	68db      	ldr	r3, [r3, #12]
 801383c:	0a1b      	lsrs	r3, r3, #8
 801383e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8013842:	4618      	mov	r0, r3
 8013844:	46bd      	mov	sp, r7
 8013846:	f85d 7b04 	ldr.w	r7, [sp], #4
 801384a:	4770      	bx	lr
 801384c:	40021000 	.word	0x40021000

08013850 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_4
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8013850:	b480      	push	{r7}
 8013852:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8013854:	4b04      	ldr	r3, [pc, #16]	; (8013868 <LL_RCC_PLL_GetR+0x18>)
 8013856:	68db      	ldr	r3, [r3, #12]
 8013858:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
}
 801385c:	4618      	mov	r0, r3
 801385e:	46bd      	mov	sp, r7
 8013860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013864:	4770      	bx	lr
 8013866:	bf00      	nop
 8013868:	40021000 	.word	0x40021000

0801386c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_16 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 801386c:	b480      	push	{r7}
 801386e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8013870:	4b04      	ldr	r3, [pc, #16]	; (8013884 <LL_RCC_PLL_GetDivider+0x18>)
 8013872:	68db      	ldr	r3, [r3, #12]
 8013874:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8013878:	4618      	mov	r0, r3
 801387a:	46bd      	mov	sp, r7
 801387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013880:	4770      	bx	lr
 8013882:	bf00      	nop
 8013884:	40021000 	.word	0x40021000

08013888 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8013888:	b580      	push	{r7, lr}
 801388a:	b084      	sub	sp, #16
 801388c:	af00      	add	r7, sp, #0
 801388e:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8013890:	2300      	movs	r3, #0
 8013892:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
 8013894:	687b      	ldr	r3, [r7, #4]
 8013896:	2b03      	cmp	r3, #3
 8013898:	d00a      	beq.n	80138b0 <LL_RCC_GetUSARTClockFreq+0x28>
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	2b0c      	cmp	r3, #12
 801389e:	d007      	beq.n	80138b0 <LL_RCC_GetUSARTClockFreq+0x28>
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	2b30      	cmp	r3, #48	; 0x30
 80138a4:	d004      	beq.n	80138b0 <LL_RCC_GetUSARTClockFreq+0x28>
 80138a6:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 80138aa:	486d      	ldr	r0, [pc, #436]	; (8013a60 <LL_RCC_GetUSARTClockFreq+0x1d8>)
 80138ac:	f7f0 fe72 	bl	8004594 <assert_failed>

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 80138b0:	687b      	ldr	r3, [r7, #4]
 80138b2:	2b03      	cmp	r3, #3
 80138b4:	d137      	bne.n	8013926 <LL_RCC_GetUSARTClockFreq+0x9e>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80138b6:	6878      	ldr	r0, [r7, #4]
 80138b8:	f7ff ff9a 	bl	80137f0 <LL_RCC_GetUSARTClockSource>
 80138bc:	4603      	mov	r3, r0
 80138be:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 80138c2:	2b03      	cmp	r3, #3
 80138c4:	f200 80b3 	bhi.w	8013a2e <LL_RCC_GetUSARTClockFreq+0x1a6>
 80138c8:	a201      	add	r2, pc, #4	; (adr r2, 80138d0 <LL_RCC_GetUSARTClockFreq+0x48>)
 80138ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80138ce:	bf00      	nop
 80138d0:	0801390f 	.word	0x0801390f
 80138d4:	080138e1 	.word	0x080138e1
 80138d8:	080138e9 	.word	0x080138e9
 80138dc:	080138fb 	.word	0x080138fb
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80138e0:	f000 f8c6 	bl	8013a70 <RCC_GetSystemClockFreq>
 80138e4:	60f8      	str	r0, [r7, #12]
        break;
 80138e6:	e0b5      	b.n	8013a54 <LL_RCC_GetUSARTClockFreq+0x1cc>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 80138e8:	f7ff fef4 	bl	80136d4 <LL_RCC_HSI_IsReady>
 80138ec:	4603      	mov	r3, r0
 80138ee:	2b00      	cmp	r3, #0
 80138f0:	f000 809f 	beq.w	8013a32 <LL_RCC_GetUSARTClockFreq+0x1aa>
        {
          usart_frequency = HSI_VALUE;
 80138f4:	4b5b      	ldr	r3, [pc, #364]	; (8013a64 <LL_RCC_GetUSARTClockFreq+0x1dc>)
 80138f6:	60fb      	str	r3, [r7, #12]
        }
        break;
 80138f8:	e09b      	b.n	8013a32 <LL_RCC_GetUSARTClockFreq+0x1aa>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 80138fa:	f7ff feff 	bl	80136fc <LL_RCC_LSE_IsReady>
 80138fe:	4603      	mov	r3, r0
 8013900:	2b00      	cmp	r3, #0
 8013902:	f000 8098 	beq.w	8013a36 <LL_RCC_GetUSARTClockFreq+0x1ae>
        {
          usart_frequency = LSE_VALUE;
 8013906:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801390a:	60fb      	str	r3, [r7, #12]
        }
        break;
 801390c:	e093      	b.n	8013a36 <LL_RCC_GetUSARTClockFreq+0x1ae>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 801390e:	f000 f8af 	bl	8013a70 <RCC_GetSystemClockFreq>
 8013912:	4603      	mov	r3, r0
 8013914:	4618      	mov	r0, r3
 8013916:	f000 f93b 	bl	8013b90 <RCC_GetHCLKClockFreq>
 801391a:	4603      	mov	r3, r0
 801391c:	4618      	mov	r0, r3
 801391e:	f000 f961 	bl	8013be4 <RCC_GetPCLK2ClockFreq>
 8013922:	60f8      	str	r0, [r7, #12]
        break;
 8013924:	e096      	b.n	8013a54 <LL_RCC_GetUSARTClockFreq+0x1cc>

      default:
        break;
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	2b0c      	cmp	r3, #12
 801392a:	d146      	bne.n	80139ba <LL_RCC_GetUSARTClockFreq+0x132>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 801392c:	6878      	ldr	r0, [r7, #4]
 801392e:	f7ff ff5f 	bl	80137f0 <LL_RCC_GetUSARTClockSource>
 8013932:	4603      	mov	r3, r0
 8013934:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8013938:	2b0c      	cmp	r3, #12
 801393a:	d87e      	bhi.n	8013a3a <LL_RCC_GetUSARTClockFreq+0x1b2>
 801393c:	a201      	add	r2, pc, #4	; (adr r2, 8013944 <LL_RCC_GetUSARTClockFreq+0xbc>)
 801393e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013942:	bf00      	nop
 8013944:	080139a3 	.word	0x080139a3
 8013948:	08013a3b 	.word	0x08013a3b
 801394c:	08013a3b 	.word	0x08013a3b
 8013950:	08013a3b 	.word	0x08013a3b
 8013954:	08013979 	.word	0x08013979
 8013958:	08013a3b 	.word	0x08013a3b
 801395c:	08013a3b 	.word	0x08013a3b
 8013960:	08013a3b 	.word	0x08013a3b
 8013964:	08013981 	.word	0x08013981
 8013968:	08013a3b 	.word	0x08013a3b
 801396c:	08013a3b 	.word	0x08013a3b
 8013970:	08013a3b 	.word	0x08013a3b
 8013974:	08013991 	.word	0x08013991
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8013978:	f000 f87a 	bl	8013a70 <RCC_GetSystemClockFreq>
 801397c:	60f8      	str	r0, [r7, #12]
        break;
 801397e:	e069      	b.n	8013a54 <LL_RCC_GetUSARTClockFreq+0x1cc>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8013980:	f7ff fea8 	bl	80136d4 <LL_RCC_HSI_IsReady>
 8013984:	4603      	mov	r3, r0
 8013986:	2b00      	cmp	r3, #0
 8013988:	d059      	beq.n	8013a3e <LL_RCC_GetUSARTClockFreq+0x1b6>
        {
          usart_frequency = HSI_VALUE;
 801398a:	4b36      	ldr	r3, [pc, #216]	; (8013a64 <LL_RCC_GetUSARTClockFreq+0x1dc>)
 801398c:	60fb      	str	r3, [r7, #12]
        }
        break;
 801398e:	e056      	b.n	8013a3e <LL_RCC_GetUSARTClockFreq+0x1b6>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8013990:	f7ff feb4 	bl	80136fc <LL_RCC_LSE_IsReady>
 8013994:	4603      	mov	r3, r0
 8013996:	2b00      	cmp	r3, #0
 8013998:	d053      	beq.n	8013a42 <LL_RCC_GetUSARTClockFreq+0x1ba>
        {
          usart_frequency = LSE_VALUE;
 801399a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801399e:	60fb      	str	r3, [r7, #12]
        }
        break;
 80139a0:	e04f      	b.n	8013a42 <LL_RCC_GetUSARTClockFreq+0x1ba>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80139a2:	f000 f865 	bl	8013a70 <RCC_GetSystemClockFreq>
 80139a6:	4603      	mov	r3, r0
 80139a8:	4618      	mov	r0, r3
 80139aa:	f000 f8f1 	bl	8013b90 <RCC_GetHCLKClockFreq>
 80139ae:	4603      	mov	r3, r0
 80139b0:	4618      	mov	r0, r3
 80139b2:	f000 f903 	bl	8013bbc <RCC_GetPCLK1ClockFreq>
 80139b6:	60f8      	str	r0, [r7, #12]
        break;
 80139b8:	e04c      	b.n	8013a54 <LL_RCC_GetUSARTClockFreq+0x1cc>
    }
  }
  else
  {
#if defined(RCC_CCIPR_USART3SEL)
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 80139ba:	687b      	ldr	r3, [r7, #4]
 80139bc:	2b30      	cmp	r3, #48	; 0x30
 80139be:	d142      	bne.n	8013a46 <LL_RCC_GetUSARTClockFreq+0x1be>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80139c0:	6878      	ldr	r0, [r7, #4]
 80139c2:	f7ff ff15 	bl	80137f0 <LL_RCC_GetUSARTClockSource>
 80139c6:	4603      	mov	r3, r0
 80139c8:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 80139cc:	d01a      	beq.n	8013a04 <LL_RCC_GetUSARTClockFreq+0x17c>
 80139ce:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 80139d2:	d83a      	bhi.n	8013a4a <LL_RCC_GetUSARTClockFreq+0x1c2>
 80139d4:	4a24      	ldr	r2, [pc, #144]	; (8013a68 <LL_RCC_GetUSARTClockFreq+0x1e0>)
 80139d6:	4293      	cmp	r3, r2
 80139d8:	d00c      	beq.n	80139f4 <LL_RCC_GetUSARTClockFreq+0x16c>
 80139da:	4a23      	ldr	r2, [pc, #140]	; (8013a68 <LL_RCC_GetUSARTClockFreq+0x1e0>)
 80139dc:	4293      	cmp	r3, r2
 80139de:	d834      	bhi.n	8013a4a <LL_RCC_GetUSARTClockFreq+0x1c2>
 80139e0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80139e4:	d017      	beq.n	8013a16 <LL_RCC_GetUSARTClockFreq+0x18e>
 80139e6:	4a21      	ldr	r2, [pc, #132]	; (8013a6c <LL_RCC_GetUSARTClockFreq+0x1e4>)
 80139e8:	4293      	cmp	r3, r2
 80139ea:	d12e      	bne.n	8013a4a <LL_RCC_GetUSARTClockFreq+0x1c2>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 80139ec:	f000 f840 	bl	8013a70 <RCC_GetSystemClockFreq>
 80139f0:	60f8      	str	r0, [r7, #12]
          break;
 80139f2:	e02f      	b.n	8013a54 <LL_RCC_GetUSARTClockFreq+0x1cc>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady() != 0U)
 80139f4:	f7ff fe6e 	bl	80136d4 <LL_RCC_HSI_IsReady>
 80139f8:	4603      	mov	r3, r0
 80139fa:	2b00      	cmp	r3, #0
 80139fc:	d027      	beq.n	8013a4e <LL_RCC_GetUSARTClockFreq+0x1c6>
          {
            usart_frequency = HSI_VALUE;
 80139fe:	4b19      	ldr	r3, [pc, #100]	; (8013a64 <LL_RCC_GetUSARTClockFreq+0x1dc>)
 8013a00:	60fb      	str	r3, [r7, #12]
          }
          break;
 8013a02:	e024      	b.n	8013a4e <LL_RCC_GetUSARTClockFreq+0x1c6>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady() != 0U)
 8013a04:	f7ff fe7a 	bl	80136fc <LL_RCC_LSE_IsReady>
 8013a08:	4603      	mov	r3, r0
 8013a0a:	2b00      	cmp	r3, #0
 8013a0c:	d021      	beq.n	8013a52 <LL_RCC_GetUSARTClockFreq+0x1ca>
          {
            usart_frequency = LSE_VALUE;
 8013a0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013a12:	60fb      	str	r3, [r7, #12]
          }
          break;
 8013a14:	e01d      	b.n	8013a52 <LL_RCC_GetUSARTClockFreq+0x1ca>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8013a16:	f000 f82b 	bl	8013a70 <RCC_GetSystemClockFreq>
 8013a1a:	4603      	mov	r3, r0
 8013a1c:	4618      	mov	r0, r3
 8013a1e:	f000 f8b7 	bl	8013b90 <RCC_GetHCLKClockFreq>
 8013a22:	4603      	mov	r3, r0
 8013a24:	4618      	mov	r0, r3
 8013a26:	f000 f8c9 	bl	8013bbc <RCC_GetPCLK1ClockFreq>
 8013a2a:	60f8      	str	r0, [r7, #12]
          break;
 8013a2c:	e012      	b.n	8013a54 <LL_RCC_GetUSARTClockFreq+0x1cc>
        break;
 8013a2e:	bf00      	nop
 8013a30:	e010      	b.n	8013a54 <LL_RCC_GetUSARTClockFreq+0x1cc>
        break;
 8013a32:	bf00      	nop
 8013a34:	e00e      	b.n	8013a54 <LL_RCC_GetUSARTClockFreq+0x1cc>
        break;
 8013a36:	bf00      	nop
 8013a38:	e00c      	b.n	8013a54 <LL_RCC_GetUSARTClockFreq+0x1cc>
        break;
 8013a3a:	bf00      	nop
 8013a3c:	e00a      	b.n	8013a54 <LL_RCC_GetUSARTClockFreq+0x1cc>
        break;
 8013a3e:	bf00      	nop
 8013a40:	e008      	b.n	8013a54 <LL_RCC_GetUSARTClockFreq+0x1cc>
        break;
 8013a42:	bf00      	nop
 8013a44:	e006      	b.n	8013a54 <LL_RCC_GetUSARTClockFreq+0x1cc>

        default:
          break;
      }
    }
 8013a46:	bf00      	nop
 8013a48:	e004      	b.n	8013a54 <LL_RCC_GetUSARTClockFreq+0x1cc>
          break;
 8013a4a:	bf00      	nop
 8013a4c:	e002      	b.n	8013a54 <LL_RCC_GetUSARTClockFreq+0x1cc>
          break;
 8013a4e:	bf00      	nop
 8013a50:	e000      	b.n	8013a54 <LL_RCC_GetUSARTClockFreq+0x1cc>
          break;
 8013a52:	bf00      	nop
#endif /* RCC_CCIPR_USART3SEL */
  }
  return usart_frequency;
 8013a54:	68fb      	ldr	r3, [r7, #12]
}
 8013a56:	4618      	mov	r0, r3
 8013a58:	3710      	adds	r7, #16
 8013a5a:	46bd      	mov	sp, r7
 8013a5c:	bd80      	pop	{r7, pc}
 8013a5e:	bf00      	nop
 8013a60:	08018fc0 	.word	0x08018fc0
 8013a64:	00f42400 	.word	0x00f42400
 8013a68:	00300020 	.word	0x00300020
 8013a6c:	00300010 	.word	0x00300010

08013a70 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 8013a70:	b580      	push	{r7, lr}
 8013a72:	b082      	sub	sp, #8
 8013a74:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8013a76:	f7ff fe83 	bl	8013780 <LL_RCC_GetSysClkSource>
 8013a7a:	4603      	mov	r3, r0
 8013a7c:	2b0c      	cmp	r3, #12
 8013a7e:	d851      	bhi.n	8013b24 <RCC_GetSystemClockFreq+0xb4>
 8013a80:	a201      	add	r2, pc, #4	; (adr r2, 8013a88 <RCC_GetSystemClockFreq+0x18>)
 8013a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013a86:	bf00      	nop
 8013a88:	08013abd 	.word	0x08013abd
 8013a8c:	08013b25 	.word	0x08013b25
 8013a90:	08013b25 	.word	0x08013b25
 8013a94:	08013b25 	.word	0x08013b25
 8013a98:	08013b11 	.word	0x08013b11
 8013a9c:	08013b25 	.word	0x08013b25
 8013aa0:	08013b25 	.word	0x08013b25
 8013aa4:	08013b25 	.word	0x08013b25
 8013aa8:	08013b17 	.word	0x08013b17
 8013aac:	08013b25 	.word	0x08013b25
 8013ab0:	08013b25 	.word	0x08013b25
 8013ab4:	08013b25 	.word	0x08013b25
 8013ab8:	08013b1d 	.word	0x08013b1d
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8013abc:	f7ff fe32 	bl	8013724 <LL_RCC_MSI_IsEnabledRangeSelect>
 8013ac0:	4603      	mov	r3, r0
 8013ac2:	2b00      	cmp	r3, #0
 8013ac4:	d111      	bne.n	8013aea <RCC_GetSystemClockFreq+0x7a>
 8013ac6:	f7ff fe2d 	bl	8013724 <LL_RCC_MSI_IsEnabledRangeSelect>
 8013aca:	4603      	mov	r3, r0
 8013acc:	2b00      	cmp	r3, #0
 8013ace:	d004      	beq.n	8013ada <RCC_GetSystemClockFreq+0x6a>
 8013ad0:	f7ff fe3a 	bl	8013748 <LL_RCC_MSI_GetRange>
 8013ad4:	4603      	mov	r3, r0
 8013ad6:	0a1b      	lsrs	r3, r3, #8
 8013ad8:	e003      	b.n	8013ae2 <RCC_GetSystemClockFreq+0x72>
 8013ada:	f7ff fe43 	bl	8013764 <LL_RCC_MSI_GetRangeAfterStandby>
 8013ade:	4603      	mov	r3, r0
 8013ae0:	0a1b      	lsrs	r3, r3, #8
 8013ae2:	4a28      	ldr	r2, [pc, #160]	; (8013b84 <RCC_GetSystemClockFreq+0x114>)
 8013ae4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013ae8:	e010      	b.n	8013b0c <RCC_GetSystemClockFreq+0x9c>
 8013aea:	f7ff fe1b 	bl	8013724 <LL_RCC_MSI_IsEnabledRangeSelect>
 8013aee:	4603      	mov	r3, r0
 8013af0:	2b00      	cmp	r3, #0
 8013af2:	d004      	beq.n	8013afe <RCC_GetSystemClockFreq+0x8e>
 8013af4:	f7ff fe28 	bl	8013748 <LL_RCC_MSI_GetRange>
 8013af8:	4603      	mov	r3, r0
 8013afa:	091b      	lsrs	r3, r3, #4
 8013afc:	e003      	b.n	8013b06 <RCC_GetSystemClockFreq+0x96>
 8013afe:	f7ff fe31 	bl	8013764 <LL_RCC_MSI_GetRangeAfterStandby>
 8013b02:	4603      	mov	r3, r0
 8013b04:	091b      	lsrs	r3, r3, #4
 8013b06:	4a1f      	ldr	r2, [pc, #124]	; (8013b84 <RCC_GetSystemClockFreq+0x114>)
 8013b08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013b0c:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8013b0e:	e033      	b.n	8013b78 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8013b10:	4b1d      	ldr	r3, [pc, #116]	; (8013b88 <RCC_GetSystemClockFreq+0x118>)
 8013b12:	607b      	str	r3, [r7, #4]
      break;
 8013b14:	e030      	b.n	8013b78 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8013b16:	4b1d      	ldr	r3, [pc, #116]	; (8013b8c <RCC_GetSystemClockFreq+0x11c>)
 8013b18:	607b      	str	r3, [r7, #4]
      break;
 8013b1a:	e02d      	b.n	8013b78 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8013b1c:	f000 f876 	bl	8013c0c <RCC_PLL_GetFreqDomain_SYS>
 8013b20:	6078      	str	r0, [r7, #4]
      break;
 8013b22:	e029      	b.n	8013b78 <RCC_GetSystemClockFreq+0x108>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8013b24:	f7ff fdfe 	bl	8013724 <LL_RCC_MSI_IsEnabledRangeSelect>
 8013b28:	4603      	mov	r3, r0
 8013b2a:	2b00      	cmp	r3, #0
 8013b2c:	d111      	bne.n	8013b52 <RCC_GetSystemClockFreq+0xe2>
 8013b2e:	f7ff fdf9 	bl	8013724 <LL_RCC_MSI_IsEnabledRangeSelect>
 8013b32:	4603      	mov	r3, r0
 8013b34:	2b00      	cmp	r3, #0
 8013b36:	d004      	beq.n	8013b42 <RCC_GetSystemClockFreq+0xd2>
 8013b38:	f7ff fe06 	bl	8013748 <LL_RCC_MSI_GetRange>
 8013b3c:	4603      	mov	r3, r0
 8013b3e:	0a1b      	lsrs	r3, r3, #8
 8013b40:	e003      	b.n	8013b4a <RCC_GetSystemClockFreq+0xda>
 8013b42:	f7ff fe0f 	bl	8013764 <LL_RCC_MSI_GetRangeAfterStandby>
 8013b46:	4603      	mov	r3, r0
 8013b48:	0a1b      	lsrs	r3, r3, #8
 8013b4a:	4a0e      	ldr	r2, [pc, #56]	; (8013b84 <RCC_GetSystemClockFreq+0x114>)
 8013b4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013b50:	e010      	b.n	8013b74 <RCC_GetSystemClockFreq+0x104>
 8013b52:	f7ff fde7 	bl	8013724 <LL_RCC_MSI_IsEnabledRangeSelect>
 8013b56:	4603      	mov	r3, r0
 8013b58:	2b00      	cmp	r3, #0
 8013b5a:	d004      	beq.n	8013b66 <RCC_GetSystemClockFreq+0xf6>
 8013b5c:	f7ff fdf4 	bl	8013748 <LL_RCC_MSI_GetRange>
 8013b60:	4603      	mov	r3, r0
 8013b62:	091b      	lsrs	r3, r3, #4
 8013b64:	e003      	b.n	8013b6e <RCC_GetSystemClockFreq+0xfe>
 8013b66:	f7ff fdfd 	bl	8013764 <LL_RCC_MSI_GetRangeAfterStandby>
 8013b6a:	4603      	mov	r3, r0
 8013b6c:	091b      	lsrs	r3, r3, #4
 8013b6e:	4a05      	ldr	r2, [pc, #20]	; (8013b84 <RCC_GetSystemClockFreq+0x114>)
 8013b70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013b74:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8013b76:	bf00      	nop
  }

  return frequency;
 8013b78:	687b      	ldr	r3, [r7, #4]
}
 8013b7a:	4618      	mov	r0, r3
 8013b7c:	3708      	adds	r7, #8
 8013b7e:	46bd      	mov	sp, r7
 8013b80:	bd80      	pop	{r7, pc}
 8013b82:	bf00      	nop
 8013b84:	080193b0 	.word	0x080193b0
 8013b88:	00f42400 	.word	0x00f42400
 8013b8c:	017d7840 	.word	0x017d7840

08013b90 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8013b90:	b580      	push	{r7, lr}
 8013b92:	b082      	sub	sp, #8
 8013b94:	af00      	add	r7, sp, #0
 8013b96:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8013b98:	f7ff fe00 	bl	801379c <LL_RCC_GetAHBPrescaler>
 8013b9c:	4603      	mov	r3, r0
 8013b9e:	091b      	lsrs	r3, r3, #4
 8013ba0:	f003 030f 	and.w	r3, r3, #15
 8013ba4:	4a04      	ldr	r2, [pc, #16]	; (8013bb8 <RCC_GetHCLKClockFreq+0x28>)
 8013ba6:	5cd3      	ldrb	r3, [r2, r3]
 8013ba8:	461a      	mov	r2, r3
 8013baa:	687b      	ldr	r3, [r7, #4]
 8013bac:	40d3      	lsrs	r3, r2
}
 8013bae:	4618      	mov	r0, r3
 8013bb0:	3708      	adds	r7, #8
 8013bb2:	46bd      	mov	sp, r7
 8013bb4:	bd80      	pop	{r7, pc}
 8013bb6:	bf00      	nop
 8013bb8:	08019398 	.word	0x08019398

08013bbc <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8013bbc:	b580      	push	{r7, lr}
 8013bbe:	b082      	sub	sp, #8
 8013bc0:	af00      	add	r7, sp, #0
 8013bc2:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8013bc4:	f7ff fdf8 	bl	80137b8 <LL_RCC_GetAPB1Prescaler>
 8013bc8:	4603      	mov	r3, r0
 8013bca:	0a1b      	lsrs	r3, r3, #8
 8013bcc:	4a04      	ldr	r2, [pc, #16]	; (8013be0 <RCC_GetPCLK1ClockFreq+0x24>)
 8013bce:	5cd3      	ldrb	r3, [r2, r3]
 8013bd0:	461a      	mov	r2, r3
 8013bd2:	687b      	ldr	r3, [r7, #4]
 8013bd4:	40d3      	lsrs	r3, r2
}
 8013bd6:	4618      	mov	r0, r3
 8013bd8:	3708      	adds	r7, #8
 8013bda:	46bd      	mov	sp, r7
 8013bdc:	bd80      	pop	{r7, pc}
 8013bde:	bf00      	nop
 8013be0:	080193a8 	.word	0x080193a8

08013be4 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8013be4:	b580      	push	{r7, lr}
 8013be6:	b082      	sub	sp, #8
 8013be8:	af00      	add	r7, sp, #0
 8013bea:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8013bec:	f7ff fdf2 	bl	80137d4 <LL_RCC_GetAPB2Prescaler>
 8013bf0:	4603      	mov	r3, r0
 8013bf2:	0adb      	lsrs	r3, r3, #11
 8013bf4:	4a04      	ldr	r2, [pc, #16]	; (8013c08 <RCC_GetPCLK2ClockFreq+0x24>)
 8013bf6:	5cd3      	ldrb	r3, [r2, r3]
 8013bf8:	461a      	mov	r2, r3
 8013bfa:	687b      	ldr	r3, [r7, #4]
 8013bfc:	40d3      	lsrs	r3, r2
}
 8013bfe:	4618      	mov	r0, r3
 8013c00:	3708      	adds	r7, #8
 8013c02:	46bd      	mov	sp, r7
 8013c04:	bd80      	pop	{r7, pc}
 8013c06:	bf00      	nop
 8013c08:	080193a8 	.word	0x080193a8

08013c0c <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8013c0c:	b590      	push	{r4, r7, lr}
 8013c0e:	b083      	sub	sp, #12
 8013c10:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8013c12:	f7ff fe01 	bl	8013818 <LL_RCC_PLL_GetMainSource>
 8013c16:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8013c18:	683b      	ldr	r3, [r7, #0]
 8013c1a:	2b03      	cmp	r3, #3
 8013c1c:	d036      	beq.n	8013c8c <RCC_PLL_GetFreqDomain_SYS+0x80>
 8013c1e:	683b      	ldr	r3, [r7, #0]
 8013c20:	2b03      	cmp	r3, #3
 8013c22:	d836      	bhi.n	8013c92 <RCC_PLL_GetFreqDomain_SYS+0x86>
 8013c24:	683b      	ldr	r3, [r7, #0]
 8013c26:	2b01      	cmp	r3, #1
 8013c28:	d003      	beq.n	8013c32 <RCC_PLL_GetFreqDomain_SYS+0x26>
 8013c2a:	683b      	ldr	r3, [r7, #0]
 8013c2c:	2b02      	cmp	r3, #2
 8013c2e:	d02a      	beq.n	8013c86 <RCC_PLL_GetFreqDomain_SYS+0x7a>
 8013c30:	e02f      	b.n	8013c92 <RCC_PLL_GetFreqDomain_SYS+0x86>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8013c32:	f7ff fd77 	bl	8013724 <LL_RCC_MSI_IsEnabledRangeSelect>
 8013c36:	4603      	mov	r3, r0
 8013c38:	2b00      	cmp	r3, #0
 8013c3a:	d111      	bne.n	8013c60 <RCC_PLL_GetFreqDomain_SYS+0x54>
 8013c3c:	f7ff fd72 	bl	8013724 <LL_RCC_MSI_IsEnabledRangeSelect>
 8013c40:	4603      	mov	r3, r0
 8013c42:	2b00      	cmp	r3, #0
 8013c44:	d004      	beq.n	8013c50 <RCC_PLL_GetFreqDomain_SYS+0x44>
 8013c46:	f7ff fd7f 	bl	8013748 <LL_RCC_MSI_GetRange>
 8013c4a:	4603      	mov	r3, r0
 8013c4c:	0a1b      	lsrs	r3, r3, #8
 8013c4e:	e003      	b.n	8013c58 <RCC_PLL_GetFreqDomain_SYS+0x4c>
 8013c50:	f7ff fd88 	bl	8013764 <LL_RCC_MSI_GetRangeAfterStandby>
 8013c54:	4603      	mov	r3, r0
 8013c56:	0a1b      	lsrs	r3, r3, #8
 8013c58:	4a2f      	ldr	r2, [pc, #188]	; (8013d18 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8013c5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013c5e:	e010      	b.n	8013c82 <RCC_PLL_GetFreqDomain_SYS+0x76>
 8013c60:	f7ff fd60 	bl	8013724 <LL_RCC_MSI_IsEnabledRangeSelect>
 8013c64:	4603      	mov	r3, r0
 8013c66:	2b00      	cmp	r3, #0
 8013c68:	d004      	beq.n	8013c74 <RCC_PLL_GetFreqDomain_SYS+0x68>
 8013c6a:	f7ff fd6d 	bl	8013748 <LL_RCC_MSI_GetRange>
 8013c6e:	4603      	mov	r3, r0
 8013c70:	091b      	lsrs	r3, r3, #4
 8013c72:	e003      	b.n	8013c7c <RCC_PLL_GetFreqDomain_SYS+0x70>
 8013c74:	f7ff fd76 	bl	8013764 <LL_RCC_MSI_GetRangeAfterStandby>
 8013c78:	4603      	mov	r3, r0
 8013c7a:	091b      	lsrs	r3, r3, #4
 8013c7c:	4a26      	ldr	r2, [pc, #152]	; (8013d18 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8013c7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013c82:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8013c84:	e02f      	b.n	8013ce6 <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8013c86:	4b25      	ldr	r3, [pc, #148]	; (8013d1c <RCC_PLL_GetFreqDomain_SYS+0x110>)
 8013c88:	607b      	str	r3, [r7, #4]
      break;
 8013c8a:	e02c      	b.n	8013ce6 <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8013c8c:	4b24      	ldr	r3, [pc, #144]	; (8013d20 <RCC_PLL_GetFreqDomain_SYS+0x114>)
 8013c8e:	607b      	str	r3, [r7, #4]
      break;
 8013c90:	e029      	b.n	8013ce6 <RCC_PLL_GetFreqDomain_SYS+0xda>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8013c92:	f7ff fd47 	bl	8013724 <LL_RCC_MSI_IsEnabledRangeSelect>
 8013c96:	4603      	mov	r3, r0
 8013c98:	2b00      	cmp	r3, #0
 8013c9a:	d111      	bne.n	8013cc0 <RCC_PLL_GetFreqDomain_SYS+0xb4>
 8013c9c:	f7ff fd42 	bl	8013724 <LL_RCC_MSI_IsEnabledRangeSelect>
 8013ca0:	4603      	mov	r3, r0
 8013ca2:	2b00      	cmp	r3, #0
 8013ca4:	d004      	beq.n	8013cb0 <RCC_PLL_GetFreqDomain_SYS+0xa4>
 8013ca6:	f7ff fd4f 	bl	8013748 <LL_RCC_MSI_GetRange>
 8013caa:	4603      	mov	r3, r0
 8013cac:	0a1b      	lsrs	r3, r3, #8
 8013cae:	e003      	b.n	8013cb8 <RCC_PLL_GetFreqDomain_SYS+0xac>
 8013cb0:	f7ff fd58 	bl	8013764 <LL_RCC_MSI_GetRangeAfterStandby>
 8013cb4:	4603      	mov	r3, r0
 8013cb6:	0a1b      	lsrs	r3, r3, #8
 8013cb8:	4a17      	ldr	r2, [pc, #92]	; (8013d18 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8013cba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013cbe:	e010      	b.n	8013ce2 <RCC_PLL_GetFreqDomain_SYS+0xd6>
 8013cc0:	f7ff fd30 	bl	8013724 <LL_RCC_MSI_IsEnabledRangeSelect>
 8013cc4:	4603      	mov	r3, r0
 8013cc6:	2b00      	cmp	r3, #0
 8013cc8:	d004      	beq.n	8013cd4 <RCC_PLL_GetFreqDomain_SYS+0xc8>
 8013cca:	f7ff fd3d 	bl	8013748 <LL_RCC_MSI_GetRange>
 8013cce:	4603      	mov	r3, r0
 8013cd0:	091b      	lsrs	r3, r3, #4
 8013cd2:	e003      	b.n	8013cdc <RCC_PLL_GetFreqDomain_SYS+0xd0>
 8013cd4:	f7ff fd46 	bl	8013764 <LL_RCC_MSI_GetRangeAfterStandby>
 8013cd8:	4603      	mov	r3, r0
 8013cda:	091b      	lsrs	r3, r3, #4
 8013cdc:	4a0e      	ldr	r2, [pc, #56]	; (8013d18 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8013cde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013ce2:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8013ce4:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8013ce6:	f7ff fdc1 	bl	801386c <LL_RCC_PLL_GetDivider>
 8013cea:	4603      	mov	r3, r0
 8013cec:	091b      	lsrs	r3, r3, #4
 8013cee:	3301      	adds	r3, #1
 8013cf0:	687a      	ldr	r2, [r7, #4]
 8013cf2:	fbb2 f4f3 	udiv	r4, r2, r3
 8013cf6:	f7ff fd9d 	bl	8013834 <LL_RCC_PLL_GetN>
 8013cfa:	4603      	mov	r3, r0
 8013cfc:	fb03 f404 	mul.w	r4, r3, r4
 8013d00:	f7ff fda6 	bl	8013850 <LL_RCC_PLL_GetR>
 8013d04:	4603      	mov	r3, r0
 8013d06:	0e5b      	lsrs	r3, r3, #25
 8013d08:	3301      	adds	r3, #1
 8013d0a:	005b      	lsls	r3, r3, #1
 8013d0c:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8013d10:	4618      	mov	r0, r3
 8013d12:	370c      	adds	r7, #12
 8013d14:	46bd      	mov	sp, r7
 8013d16:	bd90      	pop	{r4, r7, pc}
 8013d18:	080193b0 	.word	0x080193b0
 8013d1c:	00f42400 	.word	0x00f42400
 8013d20:	017d7840 	.word	0x017d7840

08013d24 <LL_USART_IsEnabled>:
{
 8013d24:	b480      	push	{r7}
 8013d26:	b083      	sub	sp, #12
 8013d28:	af00      	add	r7, sp, #0
 8013d2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	681b      	ldr	r3, [r3, #0]
 8013d30:	f003 0301 	and.w	r3, r3, #1
 8013d34:	2b01      	cmp	r3, #1
 8013d36:	d101      	bne.n	8013d3c <LL_USART_IsEnabled+0x18>
 8013d38:	2301      	movs	r3, #1
 8013d3a:	e000      	b.n	8013d3e <LL_USART_IsEnabled+0x1a>
 8013d3c:	2300      	movs	r3, #0
}
 8013d3e:	4618      	mov	r0, r3
 8013d40:	370c      	adds	r7, #12
 8013d42:	46bd      	mov	sp, r7
 8013d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d48:	4770      	bx	lr

08013d4a <LL_USART_SetStopBitsLength>:
{
 8013d4a:	b480      	push	{r7}
 8013d4c:	b083      	sub	sp, #12
 8013d4e:	af00      	add	r7, sp, #0
 8013d50:	6078      	str	r0, [r7, #4]
 8013d52:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	685b      	ldr	r3, [r3, #4]
 8013d58:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8013d5c:	683b      	ldr	r3, [r7, #0]
 8013d5e:	431a      	orrs	r2, r3
 8013d60:	687b      	ldr	r3, [r7, #4]
 8013d62:	605a      	str	r2, [r3, #4]
}
 8013d64:	bf00      	nop
 8013d66:	370c      	adds	r7, #12
 8013d68:	46bd      	mov	sp, r7
 8013d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d6e:	4770      	bx	lr

08013d70 <LL_USART_SetHWFlowCtrl>:
{
 8013d70:	b480      	push	{r7}
 8013d72:	b083      	sub	sp, #12
 8013d74:	af00      	add	r7, sp, #0
 8013d76:	6078      	str	r0, [r7, #4]
 8013d78:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8013d7a:	687b      	ldr	r3, [r7, #4]
 8013d7c:	689b      	ldr	r3, [r3, #8]
 8013d7e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8013d82:	683b      	ldr	r3, [r7, #0]
 8013d84:	431a      	orrs	r2, r3
 8013d86:	687b      	ldr	r3, [r7, #4]
 8013d88:	609a      	str	r2, [r3, #8]
}
 8013d8a:	bf00      	nop
 8013d8c:	370c      	adds	r7, #12
 8013d8e:	46bd      	mov	sp, r7
 8013d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d94:	4770      	bx	lr

08013d96 <LL_USART_SetBaudRate>:
{
 8013d96:	b480      	push	{r7}
 8013d98:	b087      	sub	sp, #28
 8013d9a:	af00      	add	r7, sp, #0
 8013d9c:	60f8      	str	r0, [r7, #12]
 8013d9e:	60b9      	str	r1, [r7, #8]
 8013da0:	607a      	str	r2, [r7, #4]
 8013da2:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8013da4:	687b      	ldr	r3, [r7, #4]
 8013da6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013daa:	d11a      	bne.n	8013de2 <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8013dac:	68bb      	ldr	r3, [r7, #8]
 8013dae:	005a      	lsls	r2, r3, #1
 8013db0:	683b      	ldr	r3, [r7, #0]
 8013db2:	085b      	lsrs	r3, r3, #1
 8013db4:	441a      	add	r2, r3
 8013db6:	683b      	ldr	r3, [r7, #0]
 8013db8:	fbb2 f3f3 	udiv	r3, r2, r3
 8013dbc:	b29b      	uxth	r3, r3
 8013dbe:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8013dc0:	697a      	ldr	r2, [r7, #20]
 8013dc2:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8013dc6:	4013      	ands	r3, r2
 8013dc8:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8013dca:	697b      	ldr	r3, [r7, #20]
 8013dcc:	085b      	lsrs	r3, r3, #1
 8013dce:	b29b      	uxth	r3, r3
 8013dd0:	f003 0307 	and.w	r3, r3, #7
 8013dd4:	693a      	ldr	r2, [r7, #16]
 8013dd6:	4313      	orrs	r3, r2
 8013dd8:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8013dda:	68fb      	ldr	r3, [r7, #12]
 8013ddc:	693a      	ldr	r2, [r7, #16]
 8013dde:	60da      	str	r2, [r3, #12]
}
 8013de0:	e00a      	b.n	8013df8 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8013de2:	683b      	ldr	r3, [r7, #0]
 8013de4:	085a      	lsrs	r2, r3, #1
 8013de6:	68bb      	ldr	r3, [r7, #8]
 8013de8:	441a      	add	r2, r3
 8013dea:	683b      	ldr	r3, [r7, #0]
 8013dec:	fbb2 f3f3 	udiv	r3, r2, r3
 8013df0:	b29b      	uxth	r3, r3
 8013df2:	461a      	mov	r2, r3
 8013df4:	68fb      	ldr	r3, [r7, #12]
 8013df6:	60da      	str	r2, [r3, #12]
}
 8013df8:	bf00      	nop
 8013dfa:	371c      	adds	r7, #28
 8013dfc:	46bd      	mov	sp, r7
 8013dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e02:	4770      	bx	lr

08013e04 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8013e04:	b580      	push	{r7, lr}
 8013e06:	b084      	sub	sp, #16
 8013e08:	af00      	add	r7, sp, #0
 8013e0a:	6078      	str	r0, [r7, #4]
 8013e0c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8013e0e:	2301      	movs	r3, #1
 8013e10:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8013e12:	2300      	movs	r3, #0
 8013e14:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(USARTx));
 8013e16:	687b      	ldr	r3, [r7, #4]
 8013e18:	4a73      	ldr	r2, [pc, #460]	; (8013fe8 <LL_USART_Init+0x1e4>)
 8013e1a:	4293      	cmp	r3, r2
 8013e1c:	d00b      	beq.n	8013e36 <LL_USART_Init+0x32>
 8013e1e:	687b      	ldr	r3, [r7, #4]
 8013e20:	4a72      	ldr	r2, [pc, #456]	; (8013fec <LL_USART_Init+0x1e8>)
 8013e22:	4293      	cmp	r3, r2
 8013e24:	d007      	beq.n	8013e36 <LL_USART_Init+0x32>
 8013e26:	687b      	ldr	r3, [r7, #4]
 8013e28:	4a71      	ldr	r2, [pc, #452]	; (8013ff0 <LL_USART_Init+0x1ec>)
 8013e2a:	4293      	cmp	r3, r2
 8013e2c:	d003      	beq.n	8013e36 <LL_USART_Init+0x32>
 8013e2e:	21d7      	movs	r1, #215	; 0xd7
 8013e30:	4870      	ldr	r0, [pc, #448]	; (8013ff4 <LL_USART_Init+0x1f0>)
 8013e32:	f7f0 fbaf 	bl	8004594 <assert_failed>
#if defined(USART_PRESC_PRESCALER)
  assert_param(IS_LL_USART_PRESCALER(USART_InitStruct->PrescalerValue));
#endif /* USART_PRESC_PRESCALER */
  assert_param(IS_LL_USART_BAUDRATE(USART_InitStruct->BaudRate));
 8013e36:	683b      	ldr	r3, [r7, #0]
 8013e38:	681b      	ldr	r3, [r3, #0]
 8013e3a:	4a6f      	ldr	r2, [pc, #444]	; (8013ff8 <LL_USART_Init+0x1f4>)
 8013e3c:	4293      	cmp	r3, r2
 8013e3e:	d903      	bls.n	8013e48 <LL_USART_Init+0x44>
 8013e40:	21db      	movs	r1, #219	; 0xdb
 8013e42:	486c      	ldr	r0, [pc, #432]	; (8013ff4 <LL_USART_Init+0x1f0>)
 8013e44:	f7f0 fba6 	bl	8004594 <assert_failed>
  assert_param(IS_LL_USART_DATAWIDTH(USART_InitStruct->DataWidth));
 8013e48:	683b      	ldr	r3, [r7, #0]
 8013e4a:	685b      	ldr	r3, [r3, #4]
 8013e4c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8013e50:	d00c      	beq.n	8013e6c <LL_USART_Init+0x68>
 8013e52:	683b      	ldr	r3, [r7, #0]
 8013e54:	685b      	ldr	r3, [r3, #4]
 8013e56:	2b00      	cmp	r3, #0
 8013e58:	d008      	beq.n	8013e6c <LL_USART_Init+0x68>
 8013e5a:	683b      	ldr	r3, [r7, #0]
 8013e5c:	685b      	ldr	r3, [r3, #4]
 8013e5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013e62:	d003      	beq.n	8013e6c <LL_USART_Init+0x68>
 8013e64:	21dc      	movs	r1, #220	; 0xdc
 8013e66:	4863      	ldr	r0, [pc, #396]	; (8013ff4 <LL_USART_Init+0x1f0>)
 8013e68:	f7f0 fb94 	bl	8004594 <assert_failed>
  assert_param(IS_LL_USART_STOPBITS(USART_InitStruct->StopBits));
 8013e6c:	683b      	ldr	r3, [r7, #0]
 8013e6e:	689b      	ldr	r3, [r3, #8]
 8013e70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013e74:	d011      	beq.n	8013e9a <LL_USART_Init+0x96>
 8013e76:	683b      	ldr	r3, [r7, #0]
 8013e78:	689b      	ldr	r3, [r3, #8]
 8013e7a:	2b00      	cmp	r3, #0
 8013e7c:	d00d      	beq.n	8013e9a <LL_USART_Init+0x96>
 8013e7e:	683b      	ldr	r3, [r7, #0]
 8013e80:	689b      	ldr	r3, [r3, #8]
 8013e82:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8013e86:	d008      	beq.n	8013e9a <LL_USART_Init+0x96>
 8013e88:	683b      	ldr	r3, [r7, #0]
 8013e8a:	689b      	ldr	r3, [r3, #8]
 8013e8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8013e90:	d003      	beq.n	8013e9a <LL_USART_Init+0x96>
 8013e92:	21dd      	movs	r1, #221	; 0xdd
 8013e94:	4857      	ldr	r0, [pc, #348]	; (8013ff4 <LL_USART_Init+0x1f0>)
 8013e96:	f7f0 fb7d 	bl	8004594 <assert_failed>
  assert_param(IS_LL_USART_PARITY(USART_InitStruct->Parity));
 8013e9a:	683b      	ldr	r3, [r7, #0]
 8013e9c:	68db      	ldr	r3, [r3, #12]
 8013e9e:	2b00      	cmp	r3, #0
 8013ea0:	d00d      	beq.n	8013ebe <LL_USART_Init+0xba>
 8013ea2:	683b      	ldr	r3, [r7, #0]
 8013ea4:	68db      	ldr	r3, [r3, #12]
 8013ea6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013eaa:	d008      	beq.n	8013ebe <LL_USART_Init+0xba>
 8013eac:	683b      	ldr	r3, [r7, #0]
 8013eae:	68db      	ldr	r3, [r3, #12]
 8013eb0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8013eb4:	d003      	beq.n	8013ebe <LL_USART_Init+0xba>
 8013eb6:	21de      	movs	r1, #222	; 0xde
 8013eb8:	484e      	ldr	r0, [pc, #312]	; (8013ff4 <LL_USART_Init+0x1f0>)
 8013eba:	f7f0 fb6b 	bl	8004594 <assert_failed>
  assert_param(IS_LL_USART_DIRECTION(USART_InitStruct->TransferDirection));
 8013ebe:	683b      	ldr	r3, [r7, #0]
 8013ec0:	691b      	ldr	r3, [r3, #16]
 8013ec2:	2b00      	cmp	r3, #0
 8013ec4:	d00f      	beq.n	8013ee6 <LL_USART_Init+0xe2>
 8013ec6:	683b      	ldr	r3, [r7, #0]
 8013ec8:	691b      	ldr	r3, [r3, #16]
 8013eca:	2b04      	cmp	r3, #4
 8013ecc:	d00b      	beq.n	8013ee6 <LL_USART_Init+0xe2>
 8013ece:	683b      	ldr	r3, [r7, #0]
 8013ed0:	691b      	ldr	r3, [r3, #16]
 8013ed2:	2b08      	cmp	r3, #8
 8013ed4:	d007      	beq.n	8013ee6 <LL_USART_Init+0xe2>
 8013ed6:	683b      	ldr	r3, [r7, #0]
 8013ed8:	691b      	ldr	r3, [r3, #16]
 8013eda:	2b0c      	cmp	r3, #12
 8013edc:	d003      	beq.n	8013ee6 <LL_USART_Init+0xe2>
 8013ede:	21df      	movs	r1, #223	; 0xdf
 8013ee0:	4844      	ldr	r0, [pc, #272]	; (8013ff4 <LL_USART_Init+0x1f0>)
 8013ee2:	f7f0 fb57 	bl	8004594 <assert_failed>
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
 8013ee6:	683b      	ldr	r3, [r7, #0]
 8013ee8:	695b      	ldr	r3, [r3, #20]
 8013eea:	2b00      	cmp	r3, #0
 8013eec:	d012      	beq.n	8013f14 <LL_USART_Init+0x110>
 8013eee:	683b      	ldr	r3, [r7, #0]
 8013ef0:	695b      	ldr	r3, [r3, #20]
 8013ef2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013ef6:	d00d      	beq.n	8013f14 <LL_USART_Init+0x110>
 8013ef8:	683b      	ldr	r3, [r7, #0]
 8013efa:	695b      	ldr	r3, [r3, #20]
 8013efc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013f00:	d008      	beq.n	8013f14 <LL_USART_Init+0x110>
 8013f02:	683b      	ldr	r3, [r7, #0]
 8013f04:	695b      	ldr	r3, [r3, #20]
 8013f06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8013f0a:	d003      	beq.n	8013f14 <LL_USART_Init+0x110>
 8013f0c:	21e0      	movs	r1, #224	; 0xe0
 8013f0e:	4839      	ldr	r0, [pc, #228]	; (8013ff4 <LL_USART_Init+0x1f0>)
 8013f10:	f7f0 fb40 	bl	8004594 <assert_failed>
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
 8013f14:	683b      	ldr	r3, [r7, #0]
 8013f16:	699b      	ldr	r3, [r3, #24]
 8013f18:	2b00      	cmp	r3, #0
 8013f1a:	d008      	beq.n	8013f2e <LL_USART_Init+0x12a>
 8013f1c:	683b      	ldr	r3, [r7, #0]
 8013f1e:	699b      	ldr	r3, [r3, #24]
 8013f20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013f24:	d003      	beq.n	8013f2e <LL_USART_Init+0x12a>
 8013f26:	21e1      	movs	r1, #225	; 0xe1
 8013f28:	4832      	ldr	r0, [pc, #200]	; (8013ff4 <LL_USART_Init+0x1f0>)
 8013f2a:	f7f0 fb33 	bl	8004594 <assert_failed>

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8013f2e:	6878      	ldr	r0, [r7, #4]
 8013f30:	f7ff fef8 	bl	8013d24 <LL_USART_IsEnabled>
 8013f34:	4603      	mov	r3, r0
 8013f36:	2b00      	cmp	r3, #0
 8013f38:	d151      	bne.n	8013fde <LL_USART_Init+0x1da>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8013f3a:	687b      	ldr	r3, [r7, #4]
 8013f3c:	681a      	ldr	r2, [r3, #0]
 8013f3e:	4b2f      	ldr	r3, [pc, #188]	; (8013ffc <LL_USART_Init+0x1f8>)
 8013f40:	4013      	ands	r3, r2
 8013f42:	683a      	ldr	r2, [r7, #0]
 8013f44:	6851      	ldr	r1, [r2, #4]
 8013f46:	683a      	ldr	r2, [r7, #0]
 8013f48:	68d2      	ldr	r2, [r2, #12]
 8013f4a:	4311      	orrs	r1, r2
 8013f4c:	683a      	ldr	r2, [r7, #0]
 8013f4e:	6912      	ldr	r2, [r2, #16]
 8013f50:	4311      	orrs	r1, r2
 8013f52:	683a      	ldr	r2, [r7, #0]
 8013f54:	6992      	ldr	r2, [r2, #24]
 8013f56:	430a      	orrs	r2, r1
 8013f58:	431a      	orrs	r2, r3
 8013f5a:	687b      	ldr	r3, [r7, #4]
 8013f5c:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8013f5e:	683b      	ldr	r3, [r7, #0]
 8013f60:	689b      	ldr	r3, [r3, #8]
 8013f62:	4619      	mov	r1, r3
 8013f64:	6878      	ldr	r0, [r7, #4]
 8013f66:	f7ff fef0 	bl	8013d4a <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8013f6a:	683b      	ldr	r3, [r7, #0]
 8013f6c:	695b      	ldr	r3, [r3, #20]
 8013f6e:	4619      	mov	r1, r3
 8013f70:	6878      	ldr	r0, [r7, #4]
 8013f72:	f7ff fefd 	bl	8013d70 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8013f76:	687b      	ldr	r3, [r7, #4]
 8013f78:	4a1b      	ldr	r2, [pc, #108]	; (8013fe8 <LL_USART_Init+0x1e4>)
 8013f7a:	4293      	cmp	r3, r2
 8013f7c:	d104      	bne.n	8013f88 <LL_USART_Init+0x184>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8013f7e:	2003      	movs	r0, #3
 8013f80:	f7ff fc82 	bl	8013888 <LL_RCC_GetUSARTClockFreq>
 8013f84:	60b8      	str	r0, [r7, #8]
 8013f86:	e010      	b.n	8013faa <LL_USART_Init+0x1a6>
    }
    else if (USARTx == USART2)
 8013f88:	687b      	ldr	r3, [r7, #4]
 8013f8a:	4a18      	ldr	r2, [pc, #96]	; (8013fec <LL_USART_Init+0x1e8>)
 8013f8c:	4293      	cmp	r3, r2
 8013f8e:	d104      	bne.n	8013f9a <LL_USART_Init+0x196>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8013f90:	200c      	movs	r0, #12
 8013f92:	f7ff fc79 	bl	8013888 <LL_RCC_GetUSARTClockFreq>
 8013f96:	60b8      	str	r0, [r7, #8]
 8013f98:	e007      	b.n	8013faa <LL_USART_Init+0x1a6>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8013f9a:	687b      	ldr	r3, [r7, #4]
 8013f9c:	4a14      	ldr	r2, [pc, #80]	; (8013ff0 <LL_USART_Init+0x1ec>)
 8013f9e:	4293      	cmp	r3, r2
 8013fa0:	d103      	bne.n	8013faa <LL_USART_Init+0x1a6>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 8013fa2:	2030      	movs	r0, #48	; 0x30
 8013fa4:	f7ff fc70 	bl	8013888 <LL_RCC_GetUSARTClockFreq>
 8013fa8:	60b8      	str	r0, [r7, #8]
       - prescaler value is required
#endif
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8013faa:	68bb      	ldr	r3, [r7, #8]
 8013fac:	2b00      	cmp	r3, #0
 8013fae:	d016      	beq.n	8013fde <LL_USART_Init+0x1da>
        && (USART_InitStruct->BaudRate != 0U))
 8013fb0:	683b      	ldr	r3, [r7, #0]
 8013fb2:	681b      	ldr	r3, [r3, #0]
 8013fb4:	2b00      	cmp	r3, #0
 8013fb6:	d012      	beq.n	8013fde <LL_USART_Init+0x1da>
    {
      status = SUCCESS;
 8013fb8:	2300      	movs	r3, #0
 8013fba:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
 8013fbc:	683b      	ldr	r3, [r7, #0]
 8013fbe:	699a      	ldr	r2, [r3, #24]
 8013fc0:	683b      	ldr	r3, [r7, #0]
 8013fc2:	681b      	ldr	r3, [r3, #0]
 8013fc4:	68b9      	ldr	r1, [r7, #8]
 8013fc6:	6878      	ldr	r0, [r7, #4]
 8013fc8:	f7ff fee5 	bl	8013d96 <LL_USART_SetBaudRate>
#endif /* USART_PRESC_PRESCALER */
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);

      /* Check BRR is greater than or equal to 16d */
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
 8013fcc:	687b      	ldr	r3, [r7, #4]
 8013fce:	68db      	ldr	r3, [r3, #12]
 8013fd0:	2b0f      	cmp	r3, #15
 8013fd2:	d804      	bhi.n	8013fde <LL_USART_Init+0x1da>
 8013fd4:	f44f 719c 	mov.w	r1, #312	; 0x138
 8013fd8:	4806      	ldr	r0, [pc, #24]	; (8013ff4 <LL_USART_Init+0x1f0>)
 8013fda:	f7f0 fadb 	bl	8004594 <assert_failed>
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
#endif /* USART_PRESC_PRESCALER */
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8013fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8013fe0:	4618      	mov	r0, r3
 8013fe2:	3710      	adds	r7, #16
 8013fe4:	46bd      	mov	sp, r7
 8013fe6:	bd80      	pop	{r7, pc}
 8013fe8:	40013800 	.word	0x40013800
 8013fec:	40004400 	.word	0x40004400
 8013ff0:	40004800 	.word	0x40004800
 8013ff4:	08018ff8 	.word	0x08018ff8
 8013ff8:	00989680 	.word	0x00989680
 8013ffc:	efff69f3 	.word	0xefff69f3

08014000 <atof>:
 8014000:	2100      	movs	r1, #0
 8014002:	f001 bc3f 	b.w	8015884 <strtod>

08014006 <atoi>:
 8014006:	220a      	movs	r2, #10
 8014008:	2100      	movs	r1, #0
 801400a:	f001 bd27 	b.w	8015a5c <strtol>

0801400e <atoll>:
 801400e:	220a      	movs	r2, #10
 8014010:	2100      	movs	r1, #0
 8014012:	f001 bdc3 	b.w	8015b9c <strtoll>
	...

08014018 <__errno>:
 8014018:	4b01      	ldr	r3, [pc, #4]	; (8014020 <__errno+0x8>)
 801401a:	6818      	ldr	r0, [r3, #0]
 801401c:	4770      	bx	lr
 801401e:	bf00      	nop
 8014020:	20001504 	.word	0x20001504

08014024 <__libc_init_array>:
 8014024:	b570      	push	{r4, r5, r6, lr}
 8014026:	4d0d      	ldr	r5, [pc, #52]	; (801405c <__libc_init_array+0x38>)
 8014028:	4c0d      	ldr	r4, [pc, #52]	; (8014060 <__libc_init_array+0x3c>)
 801402a:	1b64      	subs	r4, r4, r5
 801402c:	10a4      	asrs	r4, r4, #2
 801402e:	2600      	movs	r6, #0
 8014030:	42a6      	cmp	r6, r4
 8014032:	d109      	bne.n	8014048 <__libc_init_array+0x24>
 8014034:	4d0b      	ldr	r5, [pc, #44]	; (8014064 <__libc_init_array+0x40>)
 8014036:	4c0c      	ldr	r4, [pc, #48]	; (8014068 <__libc_init_array+0x44>)
 8014038:	f004 fbea 	bl	8018810 <_init>
 801403c:	1b64      	subs	r4, r4, r5
 801403e:	10a4      	asrs	r4, r4, #2
 8014040:	2600      	movs	r6, #0
 8014042:	42a6      	cmp	r6, r4
 8014044:	d105      	bne.n	8014052 <__libc_init_array+0x2e>
 8014046:	bd70      	pop	{r4, r5, r6, pc}
 8014048:	f855 3b04 	ldr.w	r3, [r5], #4
 801404c:	4798      	blx	r3
 801404e:	3601      	adds	r6, #1
 8014050:	e7ee      	b.n	8014030 <__libc_init_array+0xc>
 8014052:	f855 3b04 	ldr.w	r3, [r5], #4
 8014056:	4798      	blx	r3
 8014058:	3601      	adds	r6, #1
 801405a:	e7f2      	b.n	8014042 <__libc_init_array+0x1e>
 801405c:	08019918 	.word	0x08019918
 8014060:	08019918 	.word	0x08019918
 8014064:	08019918 	.word	0x08019918
 8014068:	0801991c 	.word	0x0801991c

0801406c <__itoa>:
 801406c:	1e93      	subs	r3, r2, #2
 801406e:	2b22      	cmp	r3, #34	; 0x22
 8014070:	b510      	push	{r4, lr}
 8014072:	460c      	mov	r4, r1
 8014074:	d904      	bls.n	8014080 <__itoa+0x14>
 8014076:	2300      	movs	r3, #0
 8014078:	700b      	strb	r3, [r1, #0]
 801407a:	461c      	mov	r4, r3
 801407c:	4620      	mov	r0, r4
 801407e:	bd10      	pop	{r4, pc}
 8014080:	2a0a      	cmp	r2, #10
 8014082:	d109      	bne.n	8014098 <__itoa+0x2c>
 8014084:	2800      	cmp	r0, #0
 8014086:	da07      	bge.n	8014098 <__itoa+0x2c>
 8014088:	232d      	movs	r3, #45	; 0x2d
 801408a:	700b      	strb	r3, [r1, #0]
 801408c:	4240      	negs	r0, r0
 801408e:	2101      	movs	r1, #1
 8014090:	4421      	add	r1, r4
 8014092:	f001 fd8d 	bl	8015bb0 <__utoa>
 8014096:	e7f1      	b.n	801407c <__itoa+0x10>
 8014098:	2100      	movs	r1, #0
 801409a:	e7f9      	b.n	8014090 <__itoa+0x24>

0801409c <itoa>:
 801409c:	f7ff bfe6 	b.w	801406c <__itoa>

080140a0 <malloc>:
 80140a0:	4b02      	ldr	r3, [pc, #8]	; (80140ac <malloc+0xc>)
 80140a2:	4601      	mov	r1, r0
 80140a4:	6818      	ldr	r0, [r3, #0]
 80140a6:	f000 b871 	b.w	801418c <_malloc_r>
 80140aa:	bf00      	nop
 80140ac:	20001504 	.word	0x20001504

080140b0 <free>:
 80140b0:	4b02      	ldr	r3, [pc, #8]	; (80140bc <free+0xc>)
 80140b2:	4601      	mov	r1, r0
 80140b4:	6818      	ldr	r0, [r3, #0]
 80140b6:	f000 b819 	b.w	80140ec <_free_r>
 80140ba:	bf00      	nop
 80140bc:	20001504 	.word	0x20001504

080140c0 <memcpy>:
 80140c0:	440a      	add	r2, r1
 80140c2:	4291      	cmp	r1, r2
 80140c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80140c8:	d100      	bne.n	80140cc <memcpy+0xc>
 80140ca:	4770      	bx	lr
 80140cc:	b510      	push	{r4, lr}
 80140ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80140d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80140d6:	4291      	cmp	r1, r2
 80140d8:	d1f9      	bne.n	80140ce <memcpy+0xe>
 80140da:	bd10      	pop	{r4, pc}

080140dc <memset>:
 80140dc:	4402      	add	r2, r0
 80140de:	4603      	mov	r3, r0
 80140e0:	4293      	cmp	r3, r2
 80140e2:	d100      	bne.n	80140e6 <memset+0xa>
 80140e4:	4770      	bx	lr
 80140e6:	f803 1b01 	strb.w	r1, [r3], #1
 80140ea:	e7f9      	b.n	80140e0 <memset+0x4>

080140ec <_free_r>:
 80140ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80140ee:	2900      	cmp	r1, #0
 80140f0:	d048      	beq.n	8014184 <_free_r+0x98>
 80140f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80140f6:	9001      	str	r0, [sp, #4]
 80140f8:	2b00      	cmp	r3, #0
 80140fa:	f1a1 0404 	sub.w	r4, r1, #4
 80140fe:	bfb8      	it	lt
 8014100:	18e4      	addlt	r4, r4, r3
 8014102:	f002 ffc5 	bl	8017090 <__malloc_lock>
 8014106:	4a20      	ldr	r2, [pc, #128]	; (8014188 <_free_r+0x9c>)
 8014108:	9801      	ldr	r0, [sp, #4]
 801410a:	6813      	ldr	r3, [r2, #0]
 801410c:	4615      	mov	r5, r2
 801410e:	b933      	cbnz	r3, 801411e <_free_r+0x32>
 8014110:	6063      	str	r3, [r4, #4]
 8014112:	6014      	str	r4, [r2, #0]
 8014114:	b003      	add	sp, #12
 8014116:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801411a:	f002 bfbf 	b.w	801709c <__malloc_unlock>
 801411e:	42a3      	cmp	r3, r4
 8014120:	d90b      	bls.n	801413a <_free_r+0x4e>
 8014122:	6821      	ldr	r1, [r4, #0]
 8014124:	1862      	adds	r2, r4, r1
 8014126:	4293      	cmp	r3, r2
 8014128:	bf04      	itt	eq
 801412a:	681a      	ldreq	r2, [r3, #0]
 801412c:	685b      	ldreq	r3, [r3, #4]
 801412e:	6063      	str	r3, [r4, #4]
 8014130:	bf04      	itt	eq
 8014132:	1852      	addeq	r2, r2, r1
 8014134:	6022      	streq	r2, [r4, #0]
 8014136:	602c      	str	r4, [r5, #0]
 8014138:	e7ec      	b.n	8014114 <_free_r+0x28>
 801413a:	461a      	mov	r2, r3
 801413c:	685b      	ldr	r3, [r3, #4]
 801413e:	b10b      	cbz	r3, 8014144 <_free_r+0x58>
 8014140:	42a3      	cmp	r3, r4
 8014142:	d9fa      	bls.n	801413a <_free_r+0x4e>
 8014144:	6811      	ldr	r1, [r2, #0]
 8014146:	1855      	adds	r5, r2, r1
 8014148:	42a5      	cmp	r5, r4
 801414a:	d10b      	bne.n	8014164 <_free_r+0x78>
 801414c:	6824      	ldr	r4, [r4, #0]
 801414e:	4421      	add	r1, r4
 8014150:	1854      	adds	r4, r2, r1
 8014152:	42a3      	cmp	r3, r4
 8014154:	6011      	str	r1, [r2, #0]
 8014156:	d1dd      	bne.n	8014114 <_free_r+0x28>
 8014158:	681c      	ldr	r4, [r3, #0]
 801415a:	685b      	ldr	r3, [r3, #4]
 801415c:	6053      	str	r3, [r2, #4]
 801415e:	4421      	add	r1, r4
 8014160:	6011      	str	r1, [r2, #0]
 8014162:	e7d7      	b.n	8014114 <_free_r+0x28>
 8014164:	d902      	bls.n	801416c <_free_r+0x80>
 8014166:	230c      	movs	r3, #12
 8014168:	6003      	str	r3, [r0, #0]
 801416a:	e7d3      	b.n	8014114 <_free_r+0x28>
 801416c:	6825      	ldr	r5, [r4, #0]
 801416e:	1961      	adds	r1, r4, r5
 8014170:	428b      	cmp	r3, r1
 8014172:	bf04      	itt	eq
 8014174:	6819      	ldreq	r1, [r3, #0]
 8014176:	685b      	ldreq	r3, [r3, #4]
 8014178:	6063      	str	r3, [r4, #4]
 801417a:	bf04      	itt	eq
 801417c:	1949      	addeq	r1, r1, r5
 801417e:	6021      	streq	r1, [r4, #0]
 8014180:	6054      	str	r4, [r2, #4]
 8014182:	e7c7      	b.n	8014114 <_free_r+0x28>
 8014184:	b003      	add	sp, #12
 8014186:	bd30      	pop	{r4, r5, pc}
 8014188:	200028b8 	.word	0x200028b8

0801418c <_malloc_r>:
 801418c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801418e:	1ccd      	adds	r5, r1, #3
 8014190:	f025 0503 	bic.w	r5, r5, #3
 8014194:	3508      	adds	r5, #8
 8014196:	2d0c      	cmp	r5, #12
 8014198:	bf38      	it	cc
 801419a:	250c      	movcc	r5, #12
 801419c:	2d00      	cmp	r5, #0
 801419e:	4606      	mov	r6, r0
 80141a0:	db01      	blt.n	80141a6 <_malloc_r+0x1a>
 80141a2:	42a9      	cmp	r1, r5
 80141a4:	d903      	bls.n	80141ae <_malloc_r+0x22>
 80141a6:	230c      	movs	r3, #12
 80141a8:	6033      	str	r3, [r6, #0]
 80141aa:	2000      	movs	r0, #0
 80141ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80141ae:	f002 ff6f 	bl	8017090 <__malloc_lock>
 80141b2:	4921      	ldr	r1, [pc, #132]	; (8014238 <_malloc_r+0xac>)
 80141b4:	680a      	ldr	r2, [r1, #0]
 80141b6:	4614      	mov	r4, r2
 80141b8:	b99c      	cbnz	r4, 80141e2 <_malloc_r+0x56>
 80141ba:	4f20      	ldr	r7, [pc, #128]	; (801423c <_malloc_r+0xb0>)
 80141bc:	683b      	ldr	r3, [r7, #0]
 80141be:	b923      	cbnz	r3, 80141ca <_malloc_r+0x3e>
 80141c0:	4621      	mov	r1, r4
 80141c2:	4630      	mov	r0, r6
 80141c4:	f000 fca6 	bl	8014b14 <_sbrk_r>
 80141c8:	6038      	str	r0, [r7, #0]
 80141ca:	4629      	mov	r1, r5
 80141cc:	4630      	mov	r0, r6
 80141ce:	f000 fca1 	bl	8014b14 <_sbrk_r>
 80141d2:	1c43      	adds	r3, r0, #1
 80141d4:	d123      	bne.n	801421e <_malloc_r+0x92>
 80141d6:	230c      	movs	r3, #12
 80141d8:	6033      	str	r3, [r6, #0]
 80141da:	4630      	mov	r0, r6
 80141dc:	f002 ff5e 	bl	801709c <__malloc_unlock>
 80141e0:	e7e3      	b.n	80141aa <_malloc_r+0x1e>
 80141e2:	6823      	ldr	r3, [r4, #0]
 80141e4:	1b5b      	subs	r3, r3, r5
 80141e6:	d417      	bmi.n	8014218 <_malloc_r+0x8c>
 80141e8:	2b0b      	cmp	r3, #11
 80141ea:	d903      	bls.n	80141f4 <_malloc_r+0x68>
 80141ec:	6023      	str	r3, [r4, #0]
 80141ee:	441c      	add	r4, r3
 80141f0:	6025      	str	r5, [r4, #0]
 80141f2:	e004      	b.n	80141fe <_malloc_r+0x72>
 80141f4:	6863      	ldr	r3, [r4, #4]
 80141f6:	42a2      	cmp	r2, r4
 80141f8:	bf0c      	ite	eq
 80141fa:	600b      	streq	r3, [r1, #0]
 80141fc:	6053      	strne	r3, [r2, #4]
 80141fe:	4630      	mov	r0, r6
 8014200:	f002 ff4c 	bl	801709c <__malloc_unlock>
 8014204:	f104 000b 	add.w	r0, r4, #11
 8014208:	1d23      	adds	r3, r4, #4
 801420a:	f020 0007 	bic.w	r0, r0, #7
 801420e:	1ac2      	subs	r2, r0, r3
 8014210:	d0cc      	beq.n	80141ac <_malloc_r+0x20>
 8014212:	1a1b      	subs	r3, r3, r0
 8014214:	50a3      	str	r3, [r4, r2]
 8014216:	e7c9      	b.n	80141ac <_malloc_r+0x20>
 8014218:	4622      	mov	r2, r4
 801421a:	6864      	ldr	r4, [r4, #4]
 801421c:	e7cc      	b.n	80141b8 <_malloc_r+0x2c>
 801421e:	1cc4      	adds	r4, r0, #3
 8014220:	f024 0403 	bic.w	r4, r4, #3
 8014224:	42a0      	cmp	r0, r4
 8014226:	d0e3      	beq.n	80141f0 <_malloc_r+0x64>
 8014228:	1a21      	subs	r1, r4, r0
 801422a:	4630      	mov	r0, r6
 801422c:	f000 fc72 	bl	8014b14 <_sbrk_r>
 8014230:	3001      	adds	r0, #1
 8014232:	d1dd      	bne.n	80141f0 <_malloc_r+0x64>
 8014234:	e7cf      	b.n	80141d6 <_malloc_r+0x4a>
 8014236:	bf00      	nop
 8014238:	200028b8 	.word	0x200028b8
 801423c:	200028bc 	.word	0x200028bc

08014240 <__cvt>:
 8014240:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014244:	ec55 4b10 	vmov	r4, r5, d0
 8014248:	2d00      	cmp	r5, #0
 801424a:	460e      	mov	r6, r1
 801424c:	4619      	mov	r1, r3
 801424e:	462b      	mov	r3, r5
 8014250:	bfbb      	ittet	lt
 8014252:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8014256:	461d      	movlt	r5, r3
 8014258:	2300      	movge	r3, #0
 801425a:	232d      	movlt	r3, #45	; 0x2d
 801425c:	700b      	strb	r3, [r1, #0]
 801425e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014260:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8014264:	4691      	mov	r9, r2
 8014266:	f023 0820 	bic.w	r8, r3, #32
 801426a:	bfbc      	itt	lt
 801426c:	4622      	movlt	r2, r4
 801426e:	4614      	movlt	r4, r2
 8014270:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8014274:	d005      	beq.n	8014282 <__cvt+0x42>
 8014276:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801427a:	d100      	bne.n	801427e <__cvt+0x3e>
 801427c:	3601      	adds	r6, #1
 801427e:	2102      	movs	r1, #2
 8014280:	e000      	b.n	8014284 <__cvt+0x44>
 8014282:	2103      	movs	r1, #3
 8014284:	ab03      	add	r3, sp, #12
 8014286:	9301      	str	r3, [sp, #4]
 8014288:	ab02      	add	r3, sp, #8
 801428a:	9300      	str	r3, [sp, #0]
 801428c:	ec45 4b10 	vmov	d0, r4, r5
 8014290:	4653      	mov	r3, sl
 8014292:	4632      	mov	r2, r6
 8014294:	f001 fd78 	bl	8015d88 <_dtoa_r>
 8014298:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801429c:	4607      	mov	r7, r0
 801429e:	d102      	bne.n	80142a6 <__cvt+0x66>
 80142a0:	f019 0f01 	tst.w	r9, #1
 80142a4:	d022      	beq.n	80142ec <__cvt+0xac>
 80142a6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80142aa:	eb07 0906 	add.w	r9, r7, r6
 80142ae:	d110      	bne.n	80142d2 <__cvt+0x92>
 80142b0:	783b      	ldrb	r3, [r7, #0]
 80142b2:	2b30      	cmp	r3, #48	; 0x30
 80142b4:	d10a      	bne.n	80142cc <__cvt+0x8c>
 80142b6:	2200      	movs	r2, #0
 80142b8:	2300      	movs	r3, #0
 80142ba:	4620      	mov	r0, r4
 80142bc:	4629      	mov	r1, r5
 80142be:	f7ed f813 	bl	80012e8 <__aeabi_dcmpeq>
 80142c2:	b918      	cbnz	r0, 80142cc <__cvt+0x8c>
 80142c4:	f1c6 0601 	rsb	r6, r6, #1
 80142c8:	f8ca 6000 	str.w	r6, [sl]
 80142cc:	f8da 3000 	ldr.w	r3, [sl]
 80142d0:	4499      	add	r9, r3
 80142d2:	2200      	movs	r2, #0
 80142d4:	2300      	movs	r3, #0
 80142d6:	4620      	mov	r0, r4
 80142d8:	4629      	mov	r1, r5
 80142da:	f7ed f805 	bl	80012e8 <__aeabi_dcmpeq>
 80142de:	b108      	cbz	r0, 80142e4 <__cvt+0xa4>
 80142e0:	f8cd 900c 	str.w	r9, [sp, #12]
 80142e4:	2230      	movs	r2, #48	; 0x30
 80142e6:	9b03      	ldr	r3, [sp, #12]
 80142e8:	454b      	cmp	r3, r9
 80142ea:	d307      	bcc.n	80142fc <__cvt+0xbc>
 80142ec:	9b03      	ldr	r3, [sp, #12]
 80142ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80142f0:	1bdb      	subs	r3, r3, r7
 80142f2:	4638      	mov	r0, r7
 80142f4:	6013      	str	r3, [r2, #0]
 80142f6:	b004      	add	sp, #16
 80142f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80142fc:	1c59      	adds	r1, r3, #1
 80142fe:	9103      	str	r1, [sp, #12]
 8014300:	701a      	strb	r2, [r3, #0]
 8014302:	e7f0      	b.n	80142e6 <__cvt+0xa6>

08014304 <__exponent>:
 8014304:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014306:	4603      	mov	r3, r0
 8014308:	2900      	cmp	r1, #0
 801430a:	bfb8      	it	lt
 801430c:	4249      	neglt	r1, r1
 801430e:	f803 2b02 	strb.w	r2, [r3], #2
 8014312:	bfb4      	ite	lt
 8014314:	222d      	movlt	r2, #45	; 0x2d
 8014316:	222b      	movge	r2, #43	; 0x2b
 8014318:	2909      	cmp	r1, #9
 801431a:	7042      	strb	r2, [r0, #1]
 801431c:	dd2a      	ble.n	8014374 <__exponent+0x70>
 801431e:	f10d 0407 	add.w	r4, sp, #7
 8014322:	46a4      	mov	ip, r4
 8014324:	270a      	movs	r7, #10
 8014326:	46a6      	mov	lr, r4
 8014328:	460a      	mov	r2, r1
 801432a:	fb91 f6f7 	sdiv	r6, r1, r7
 801432e:	fb07 1516 	mls	r5, r7, r6, r1
 8014332:	3530      	adds	r5, #48	; 0x30
 8014334:	2a63      	cmp	r2, #99	; 0x63
 8014336:	f104 34ff 	add.w	r4, r4, #4294967295
 801433a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801433e:	4631      	mov	r1, r6
 8014340:	dcf1      	bgt.n	8014326 <__exponent+0x22>
 8014342:	3130      	adds	r1, #48	; 0x30
 8014344:	f1ae 0502 	sub.w	r5, lr, #2
 8014348:	f804 1c01 	strb.w	r1, [r4, #-1]
 801434c:	1c44      	adds	r4, r0, #1
 801434e:	4629      	mov	r1, r5
 8014350:	4561      	cmp	r1, ip
 8014352:	d30a      	bcc.n	801436a <__exponent+0x66>
 8014354:	f10d 0209 	add.w	r2, sp, #9
 8014358:	eba2 020e 	sub.w	r2, r2, lr
 801435c:	4565      	cmp	r5, ip
 801435e:	bf88      	it	hi
 8014360:	2200      	movhi	r2, #0
 8014362:	4413      	add	r3, r2
 8014364:	1a18      	subs	r0, r3, r0
 8014366:	b003      	add	sp, #12
 8014368:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801436a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801436e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8014372:	e7ed      	b.n	8014350 <__exponent+0x4c>
 8014374:	2330      	movs	r3, #48	; 0x30
 8014376:	3130      	adds	r1, #48	; 0x30
 8014378:	7083      	strb	r3, [r0, #2]
 801437a:	70c1      	strb	r1, [r0, #3]
 801437c:	1d03      	adds	r3, r0, #4
 801437e:	e7f1      	b.n	8014364 <__exponent+0x60>

08014380 <_printf_float>:
 8014380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014384:	ed2d 8b02 	vpush	{d8}
 8014388:	b08d      	sub	sp, #52	; 0x34
 801438a:	460c      	mov	r4, r1
 801438c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8014390:	4616      	mov	r6, r2
 8014392:	461f      	mov	r7, r3
 8014394:	4605      	mov	r5, r0
 8014396:	f002 fe65 	bl	8017064 <_localeconv_r>
 801439a:	f8d0 a000 	ldr.w	sl, [r0]
 801439e:	4650      	mov	r0, sl
 80143a0:	f7ec fb20 	bl	80009e4 <strlen>
 80143a4:	2300      	movs	r3, #0
 80143a6:	930a      	str	r3, [sp, #40]	; 0x28
 80143a8:	6823      	ldr	r3, [r4, #0]
 80143aa:	9305      	str	r3, [sp, #20]
 80143ac:	f8d8 3000 	ldr.w	r3, [r8]
 80143b0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80143b4:	3307      	adds	r3, #7
 80143b6:	f023 0307 	bic.w	r3, r3, #7
 80143ba:	f103 0208 	add.w	r2, r3, #8
 80143be:	f8c8 2000 	str.w	r2, [r8]
 80143c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143c6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80143ca:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80143ce:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80143d2:	9307      	str	r3, [sp, #28]
 80143d4:	f8cd 8018 	str.w	r8, [sp, #24]
 80143d8:	ee08 0a10 	vmov	s16, r0
 80143dc:	4b9f      	ldr	r3, [pc, #636]	; (801465c <_printf_float+0x2dc>)
 80143de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80143e2:	f04f 32ff 	mov.w	r2, #4294967295
 80143e6:	f7ec ffb1 	bl	800134c <__aeabi_dcmpun>
 80143ea:	bb88      	cbnz	r0, 8014450 <_printf_float+0xd0>
 80143ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80143f0:	4b9a      	ldr	r3, [pc, #616]	; (801465c <_printf_float+0x2dc>)
 80143f2:	f04f 32ff 	mov.w	r2, #4294967295
 80143f6:	f7ec ff8b 	bl	8001310 <__aeabi_dcmple>
 80143fa:	bb48      	cbnz	r0, 8014450 <_printf_float+0xd0>
 80143fc:	2200      	movs	r2, #0
 80143fe:	2300      	movs	r3, #0
 8014400:	4640      	mov	r0, r8
 8014402:	4649      	mov	r1, r9
 8014404:	f7ec ff7a 	bl	80012fc <__aeabi_dcmplt>
 8014408:	b110      	cbz	r0, 8014410 <_printf_float+0x90>
 801440a:	232d      	movs	r3, #45	; 0x2d
 801440c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014410:	4b93      	ldr	r3, [pc, #588]	; (8014660 <_printf_float+0x2e0>)
 8014412:	4894      	ldr	r0, [pc, #592]	; (8014664 <_printf_float+0x2e4>)
 8014414:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8014418:	bf94      	ite	ls
 801441a:	4698      	movls	r8, r3
 801441c:	4680      	movhi	r8, r0
 801441e:	2303      	movs	r3, #3
 8014420:	6123      	str	r3, [r4, #16]
 8014422:	9b05      	ldr	r3, [sp, #20]
 8014424:	f023 0204 	bic.w	r2, r3, #4
 8014428:	6022      	str	r2, [r4, #0]
 801442a:	f04f 0900 	mov.w	r9, #0
 801442e:	9700      	str	r7, [sp, #0]
 8014430:	4633      	mov	r3, r6
 8014432:	aa0b      	add	r2, sp, #44	; 0x2c
 8014434:	4621      	mov	r1, r4
 8014436:	4628      	mov	r0, r5
 8014438:	f000 f9d8 	bl	80147ec <_printf_common>
 801443c:	3001      	adds	r0, #1
 801443e:	f040 8090 	bne.w	8014562 <_printf_float+0x1e2>
 8014442:	f04f 30ff 	mov.w	r0, #4294967295
 8014446:	b00d      	add	sp, #52	; 0x34
 8014448:	ecbd 8b02 	vpop	{d8}
 801444c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014450:	4642      	mov	r2, r8
 8014452:	464b      	mov	r3, r9
 8014454:	4640      	mov	r0, r8
 8014456:	4649      	mov	r1, r9
 8014458:	f7ec ff78 	bl	800134c <__aeabi_dcmpun>
 801445c:	b140      	cbz	r0, 8014470 <_printf_float+0xf0>
 801445e:	464b      	mov	r3, r9
 8014460:	2b00      	cmp	r3, #0
 8014462:	bfbc      	itt	lt
 8014464:	232d      	movlt	r3, #45	; 0x2d
 8014466:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801446a:	487f      	ldr	r0, [pc, #508]	; (8014668 <_printf_float+0x2e8>)
 801446c:	4b7f      	ldr	r3, [pc, #508]	; (801466c <_printf_float+0x2ec>)
 801446e:	e7d1      	b.n	8014414 <_printf_float+0x94>
 8014470:	6863      	ldr	r3, [r4, #4]
 8014472:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8014476:	9206      	str	r2, [sp, #24]
 8014478:	1c5a      	adds	r2, r3, #1
 801447a:	d13f      	bne.n	80144fc <_printf_float+0x17c>
 801447c:	2306      	movs	r3, #6
 801447e:	6063      	str	r3, [r4, #4]
 8014480:	9b05      	ldr	r3, [sp, #20]
 8014482:	6861      	ldr	r1, [r4, #4]
 8014484:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8014488:	2300      	movs	r3, #0
 801448a:	9303      	str	r3, [sp, #12]
 801448c:	ab0a      	add	r3, sp, #40	; 0x28
 801448e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8014492:	ab09      	add	r3, sp, #36	; 0x24
 8014494:	ec49 8b10 	vmov	d0, r8, r9
 8014498:	9300      	str	r3, [sp, #0]
 801449a:	6022      	str	r2, [r4, #0]
 801449c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80144a0:	4628      	mov	r0, r5
 80144a2:	f7ff fecd 	bl	8014240 <__cvt>
 80144a6:	9b06      	ldr	r3, [sp, #24]
 80144a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80144aa:	2b47      	cmp	r3, #71	; 0x47
 80144ac:	4680      	mov	r8, r0
 80144ae:	d108      	bne.n	80144c2 <_printf_float+0x142>
 80144b0:	1cc8      	adds	r0, r1, #3
 80144b2:	db02      	blt.n	80144ba <_printf_float+0x13a>
 80144b4:	6863      	ldr	r3, [r4, #4]
 80144b6:	4299      	cmp	r1, r3
 80144b8:	dd41      	ble.n	801453e <_printf_float+0x1be>
 80144ba:	f1ab 0b02 	sub.w	fp, fp, #2
 80144be:	fa5f fb8b 	uxtb.w	fp, fp
 80144c2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80144c6:	d820      	bhi.n	801450a <_printf_float+0x18a>
 80144c8:	3901      	subs	r1, #1
 80144ca:	465a      	mov	r2, fp
 80144cc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80144d0:	9109      	str	r1, [sp, #36]	; 0x24
 80144d2:	f7ff ff17 	bl	8014304 <__exponent>
 80144d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80144d8:	1813      	adds	r3, r2, r0
 80144da:	2a01      	cmp	r2, #1
 80144dc:	4681      	mov	r9, r0
 80144de:	6123      	str	r3, [r4, #16]
 80144e0:	dc02      	bgt.n	80144e8 <_printf_float+0x168>
 80144e2:	6822      	ldr	r2, [r4, #0]
 80144e4:	07d2      	lsls	r2, r2, #31
 80144e6:	d501      	bpl.n	80144ec <_printf_float+0x16c>
 80144e8:	3301      	adds	r3, #1
 80144ea:	6123      	str	r3, [r4, #16]
 80144ec:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80144f0:	2b00      	cmp	r3, #0
 80144f2:	d09c      	beq.n	801442e <_printf_float+0xae>
 80144f4:	232d      	movs	r3, #45	; 0x2d
 80144f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80144fa:	e798      	b.n	801442e <_printf_float+0xae>
 80144fc:	9a06      	ldr	r2, [sp, #24]
 80144fe:	2a47      	cmp	r2, #71	; 0x47
 8014500:	d1be      	bne.n	8014480 <_printf_float+0x100>
 8014502:	2b00      	cmp	r3, #0
 8014504:	d1bc      	bne.n	8014480 <_printf_float+0x100>
 8014506:	2301      	movs	r3, #1
 8014508:	e7b9      	b.n	801447e <_printf_float+0xfe>
 801450a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801450e:	d118      	bne.n	8014542 <_printf_float+0x1c2>
 8014510:	2900      	cmp	r1, #0
 8014512:	6863      	ldr	r3, [r4, #4]
 8014514:	dd0b      	ble.n	801452e <_printf_float+0x1ae>
 8014516:	6121      	str	r1, [r4, #16]
 8014518:	b913      	cbnz	r3, 8014520 <_printf_float+0x1a0>
 801451a:	6822      	ldr	r2, [r4, #0]
 801451c:	07d0      	lsls	r0, r2, #31
 801451e:	d502      	bpl.n	8014526 <_printf_float+0x1a6>
 8014520:	3301      	adds	r3, #1
 8014522:	440b      	add	r3, r1
 8014524:	6123      	str	r3, [r4, #16]
 8014526:	65a1      	str	r1, [r4, #88]	; 0x58
 8014528:	f04f 0900 	mov.w	r9, #0
 801452c:	e7de      	b.n	80144ec <_printf_float+0x16c>
 801452e:	b913      	cbnz	r3, 8014536 <_printf_float+0x1b6>
 8014530:	6822      	ldr	r2, [r4, #0]
 8014532:	07d2      	lsls	r2, r2, #31
 8014534:	d501      	bpl.n	801453a <_printf_float+0x1ba>
 8014536:	3302      	adds	r3, #2
 8014538:	e7f4      	b.n	8014524 <_printf_float+0x1a4>
 801453a:	2301      	movs	r3, #1
 801453c:	e7f2      	b.n	8014524 <_printf_float+0x1a4>
 801453e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8014542:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014544:	4299      	cmp	r1, r3
 8014546:	db05      	blt.n	8014554 <_printf_float+0x1d4>
 8014548:	6823      	ldr	r3, [r4, #0]
 801454a:	6121      	str	r1, [r4, #16]
 801454c:	07d8      	lsls	r0, r3, #31
 801454e:	d5ea      	bpl.n	8014526 <_printf_float+0x1a6>
 8014550:	1c4b      	adds	r3, r1, #1
 8014552:	e7e7      	b.n	8014524 <_printf_float+0x1a4>
 8014554:	2900      	cmp	r1, #0
 8014556:	bfd4      	ite	le
 8014558:	f1c1 0202 	rsble	r2, r1, #2
 801455c:	2201      	movgt	r2, #1
 801455e:	4413      	add	r3, r2
 8014560:	e7e0      	b.n	8014524 <_printf_float+0x1a4>
 8014562:	6823      	ldr	r3, [r4, #0]
 8014564:	055a      	lsls	r2, r3, #21
 8014566:	d407      	bmi.n	8014578 <_printf_float+0x1f8>
 8014568:	6923      	ldr	r3, [r4, #16]
 801456a:	4642      	mov	r2, r8
 801456c:	4631      	mov	r1, r6
 801456e:	4628      	mov	r0, r5
 8014570:	47b8      	blx	r7
 8014572:	3001      	adds	r0, #1
 8014574:	d12c      	bne.n	80145d0 <_printf_float+0x250>
 8014576:	e764      	b.n	8014442 <_printf_float+0xc2>
 8014578:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801457c:	f240 80e0 	bls.w	8014740 <_printf_float+0x3c0>
 8014580:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8014584:	2200      	movs	r2, #0
 8014586:	2300      	movs	r3, #0
 8014588:	f7ec feae 	bl	80012e8 <__aeabi_dcmpeq>
 801458c:	2800      	cmp	r0, #0
 801458e:	d034      	beq.n	80145fa <_printf_float+0x27a>
 8014590:	4a37      	ldr	r2, [pc, #220]	; (8014670 <_printf_float+0x2f0>)
 8014592:	2301      	movs	r3, #1
 8014594:	4631      	mov	r1, r6
 8014596:	4628      	mov	r0, r5
 8014598:	47b8      	blx	r7
 801459a:	3001      	adds	r0, #1
 801459c:	f43f af51 	beq.w	8014442 <_printf_float+0xc2>
 80145a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80145a4:	429a      	cmp	r2, r3
 80145a6:	db02      	blt.n	80145ae <_printf_float+0x22e>
 80145a8:	6823      	ldr	r3, [r4, #0]
 80145aa:	07d8      	lsls	r0, r3, #31
 80145ac:	d510      	bpl.n	80145d0 <_printf_float+0x250>
 80145ae:	ee18 3a10 	vmov	r3, s16
 80145b2:	4652      	mov	r2, sl
 80145b4:	4631      	mov	r1, r6
 80145b6:	4628      	mov	r0, r5
 80145b8:	47b8      	blx	r7
 80145ba:	3001      	adds	r0, #1
 80145bc:	f43f af41 	beq.w	8014442 <_printf_float+0xc2>
 80145c0:	f04f 0800 	mov.w	r8, #0
 80145c4:	f104 091a 	add.w	r9, r4, #26
 80145c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80145ca:	3b01      	subs	r3, #1
 80145cc:	4543      	cmp	r3, r8
 80145ce:	dc09      	bgt.n	80145e4 <_printf_float+0x264>
 80145d0:	6823      	ldr	r3, [r4, #0]
 80145d2:	079b      	lsls	r3, r3, #30
 80145d4:	f100 8105 	bmi.w	80147e2 <_printf_float+0x462>
 80145d8:	68e0      	ldr	r0, [r4, #12]
 80145da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80145dc:	4298      	cmp	r0, r3
 80145de:	bfb8      	it	lt
 80145e0:	4618      	movlt	r0, r3
 80145e2:	e730      	b.n	8014446 <_printf_float+0xc6>
 80145e4:	2301      	movs	r3, #1
 80145e6:	464a      	mov	r2, r9
 80145e8:	4631      	mov	r1, r6
 80145ea:	4628      	mov	r0, r5
 80145ec:	47b8      	blx	r7
 80145ee:	3001      	adds	r0, #1
 80145f0:	f43f af27 	beq.w	8014442 <_printf_float+0xc2>
 80145f4:	f108 0801 	add.w	r8, r8, #1
 80145f8:	e7e6      	b.n	80145c8 <_printf_float+0x248>
 80145fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80145fc:	2b00      	cmp	r3, #0
 80145fe:	dc39      	bgt.n	8014674 <_printf_float+0x2f4>
 8014600:	4a1b      	ldr	r2, [pc, #108]	; (8014670 <_printf_float+0x2f0>)
 8014602:	2301      	movs	r3, #1
 8014604:	4631      	mov	r1, r6
 8014606:	4628      	mov	r0, r5
 8014608:	47b8      	blx	r7
 801460a:	3001      	adds	r0, #1
 801460c:	f43f af19 	beq.w	8014442 <_printf_float+0xc2>
 8014610:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014614:	4313      	orrs	r3, r2
 8014616:	d102      	bne.n	801461e <_printf_float+0x29e>
 8014618:	6823      	ldr	r3, [r4, #0]
 801461a:	07d9      	lsls	r1, r3, #31
 801461c:	d5d8      	bpl.n	80145d0 <_printf_float+0x250>
 801461e:	ee18 3a10 	vmov	r3, s16
 8014622:	4652      	mov	r2, sl
 8014624:	4631      	mov	r1, r6
 8014626:	4628      	mov	r0, r5
 8014628:	47b8      	blx	r7
 801462a:	3001      	adds	r0, #1
 801462c:	f43f af09 	beq.w	8014442 <_printf_float+0xc2>
 8014630:	f04f 0900 	mov.w	r9, #0
 8014634:	f104 0a1a 	add.w	sl, r4, #26
 8014638:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801463a:	425b      	negs	r3, r3
 801463c:	454b      	cmp	r3, r9
 801463e:	dc01      	bgt.n	8014644 <_printf_float+0x2c4>
 8014640:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014642:	e792      	b.n	801456a <_printf_float+0x1ea>
 8014644:	2301      	movs	r3, #1
 8014646:	4652      	mov	r2, sl
 8014648:	4631      	mov	r1, r6
 801464a:	4628      	mov	r0, r5
 801464c:	47b8      	blx	r7
 801464e:	3001      	adds	r0, #1
 8014650:	f43f aef7 	beq.w	8014442 <_printf_float+0xc2>
 8014654:	f109 0901 	add.w	r9, r9, #1
 8014658:	e7ee      	b.n	8014638 <_printf_float+0x2b8>
 801465a:	bf00      	nop
 801465c:	7fefffff 	.word	0x7fefffff
 8014660:	080193e4 	.word	0x080193e4
 8014664:	080193e8 	.word	0x080193e8
 8014668:	080193f0 	.word	0x080193f0
 801466c:	080193ec 	.word	0x080193ec
 8014670:	080193f4 	.word	0x080193f4
 8014674:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014676:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8014678:	429a      	cmp	r2, r3
 801467a:	bfa8      	it	ge
 801467c:	461a      	movge	r2, r3
 801467e:	2a00      	cmp	r2, #0
 8014680:	4691      	mov	r9, r2
 8014682:	dc37      	bgt.n	80146f4 <_printf_float+0x374>
 8014684:	f04f 0b00 	mov.w	fp, #0
 8014688:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801468c:	f104 021a 	add.w	r2, r4, #26
 8014690:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8014692:	9305      	str	r3, [sp, #20]
 8014694:	eba3 0309 	sub.w	r3, r3, r9
 8014698:	455b      	cmp	r3, fp
 801469a:	dc33      	bgt.n	8014704 <_printf_float+0x384>
 801469c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80146a0:	429a      	cmp	r2, r3
 80146a2:	db3b      	blt.n	801471c <_printf_float+0x39c>
 80146a4:	6823      	ldr	r3, [r4, #0]
 80146a6:	07da      	lsls	r2, r3, #31
 80146a8:	d438      	bmi.n	801471c <_printf_float+0x39c>
 80146aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80146ac:	9b05      	ldr	r3, [sp, #20]
 80146ae:	9909      	ldr	r1, [sp, #36]	; 0x24
 80146b0:	1ad3      	subs	r3, r2, r3
 80146b2:	eba2 0901 	sub.w	r9, r2, r1
 80146b6:	4599      	cmp	r9, r3
 80146b8:	bfa8      	it	ge
 80146ba:	4699      	movge	r9, r3
 80146bc:	f1b9 0f00 	cmp.w	r9, #0
 80146c0:	dc35      	bgt.n	801472e <_printf_float+0x3ae>
 80146c2:	f04f 0800 	mov.w	r8, #0
 80146c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80146ca:	f104 0a1a 	add.w	sl, r4, #26
 80146ce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80146d2:	1a9b      	subs	r3, r3, r2
 80146d4:	eba3 0309 	sub.w	r3, r3, r9
 80146d8:	4543      	cmp	r3, r8
 80146da:	f77f af79 	ble.w	80145d0 <_printf_float+0x250>
 80146de:	2301      	movs	r3, #1
 80146e0:	4652      	mov	r2, sl
 80146e2:	4631      	mov	r1, r6
 80146e4:	4628      	mov	r0, r5
 80146e6:	47b8      	blx	r7
 80146e8:	3001      	adds	r0, #1
 80146ea:	f43f aeaa 	beq.w	8014442 <_printf_float+0xc2>
 80146ee:	f108 0801 	add.w	r8, r8, #1
 80146f2:	e7ec      	b.n	80146ce <_printf_float+0x34e>
 80146f4:	4613      	mov	r3, r2
 80146f6:	4631      	mov	r1, r6
 80146f8:	4642      	mov	r2, r8
 80146fa:	4628      	mov	r0, r5
 80146fc:	47b8      	blx	r7
 80146fe:	3001      	adds	r0, #1
 8014700:	d1c0      	bne.n	8014684 <_printf_float+0x304>
 8014702:	e69e      	b.n	8014442 <_printf_float+0xc2>
 8014704:	2301      	movs	r3, #1
 8014706:	4631      	mov	r1, r6
 8014708:	4628      	mov	r0, r5
 801470a:	9205      	str	r2, [sp, #20]
 801470c:	47b8      	blx	r7
 801470e:	3001      	adds	r0, #1
 8014710:	f43f ae97 	beq.w	8014442 <_printf_float+0xc2>
 8014714:	9a05      	ldr	r2, [sp, #20]
 8014716:	f10b 0b01 	add.w	fp, fp, #1
 801471a:	e7b9      	b.n	8014690 <_printf_float+0x310>
 801471c:	ee18 3a10 	vmov	r3, s16
 8014720:	4652      	mov	r2, sl
 8014722:	4631      	mov	r1, r6
 8014724:	4628      	mov	r0, r5
 8014726:	47b8      	blx	r7
 8014728:	3001      	adds	r0, #1
 801472a:	d1be      	bne.n	80146aa <_printf_float+0x32a>
 801472c:	e689      	b.n	8014442 <_printf_float+0xc2>
 801472e:	9a05      	ldr	r2, [sp, #20]
 8014730:	464b      	mov	r3, r9
 8014732:	4442      	add	r2, r8
 8014734:	4631      	mov	r1, r6
 8014736:	4628      	mov	r0, r5
 8014738:	47b8      	blx	r7
 801473a:	3001      	adds	r0, #1
 801473c:	d1c1      	bne.n	80146c2 <_printf_float+0x342>
 801473e:	e680      	b.n	8014442 <_printf_float+0xc2>
 8014740:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014742:	2a01      	cmp	r2, #1
 8014744:	dc01      	bgt.n	801474a <_printf_float+0x3ca>
 8014746:	07db      	lsls	r3, r3, #31
 8014748:	d538      	bpl.n	80147bc <_printf_float+0x43c>
 801474a:	2301      	movs	r3, #1
 801474c:	4642      	mov	r2, r8
 801474e:	4631      	mov	r1, r6
 8014750:	4628      	mov	r0, r5
 8014752:	47b8      	blx	r7
 8014754:	3001      	adds	r0, #1
 8014756:	f43f ae74 	beq.w	8014442 <_printf_float+0xc2>
 801475a:	ee18 3a10 	vmov	r3, s16
 801475e:	4652      	mov	r2, sl
 8014760:	4631      	mov	r1, r6
 8014762:	4628      	mov	r0, r5
 8014764:	47b8      	blx	r7
 8014766:	3001      	adds	r0, #1
 8014768:	f43f ae6b 	beq.w	8014442 <_printf_float+0xc2>
 801476c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8014770:	2200      	movs	r2, #0
 8014772:	2300      	movs	r3, #0
 8014774:	f7ec fdb8 	bl	80012e8 <__aeabi_dcmpeq>
 8014778:	b9d8      	cbnz	r0, 80147b2 <_printf_float+0x432>
 801477a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801477c:	f108 0201 	add.w	r2, r8, #1
 8014780:	3b01      	subs	r3, #1
 8014782:	4631      	mov	r1, r6
 8014784:	4628      	mov	r0, r5
 8014786:	47b8      	blx	r7
 8014788:	3001      	adds	r0, #1
 801478a:	d10e      	bne.n	80147aa <_printf_float+0x42a>
 801478c:	e659      	b.n	8014442 <_printf_float+0xc2>
 801478e:	2301      	movs	r3, #1
 8014790:	4652      	mov	r2, sl
 8014792:	4631      	mov	r1, r6
 8014794:	4628      	mov	r0, r5
 8014796:	47b8      	blx	r7
 8014798:	3001      	adds	r0, #1
 801479a:	f43f ae52 	beq.w	8014442 <_printf_float+0xc2>
 801479e:	f108 0801 	add.w	r8, r8, #1
 80147a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80147a4:	3b01      	subs	r3, #1
 80147a6:	4543      	cmp	r3, r8
 80147a8:	dcf1      	bgt.n	801478e <_printf_float+0x40e>
 80147aa:	464b      	mov	r3, r9
 80147ac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80147b0:	e6dc      	b.n	801456c <_printf_float+0x1ec>
 80147b2:	f04f 0800 	mov.w	r8, #0
 80147b6:	f104 0a1a 	add.w	sl, r4, #26
 80147ba:	e7f2      	b.n	80147a2 <_printf_float+0x422>
 80147bc:	2301      	movs	r3, #1
 80147be:	4642      	mov	r2, r8
 80147c0:	e7df      	b.n	8014782 <_printf_float+0x402>
 80147c2:	2301      	movs	r3, #1
 80147c4:	464a      	mov	r2, r9
 80147c6:	4631      	mov	r1, r6
 80147c8:	4628      	mov	r0, r5
 80147ca:	47b8      	blx	r7
 80147cc:	3001      	adds	r0, #1
 80147ce:	f43f ae38 	beq.w	8014442 <_printf_float+0xc2>
 80147d2:	f108 0801 	add.w	r8, r8, #1
 80147d6:	68e3      	ldr	r3, [r4, #12]
 80147d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80147da:	1a5b      	subs	r3, r3, r1
 80147dc:	4543      	cmp	r3, r8
 80147de:	dcf0      	bgt.n	80147c2 <_printf_float+0x442>
 80147e0:	e6fa      	b.n	80145d8 <_printf_float+0x258>
 80147e2:	f04f 0800 	mov.w	r8, #0
 80147e6:	f104 0919 	add.w	r9, r4, #25
 80147ea:	e7f4      	b.n	80147d6 <_printf_float+0x456>

080147ec <_printf_common>:
 80147ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80147f0:	4616      	mov	r6, r2
 80147f2:	4699      	mov	r9, r3
 80147f4:	688a      	ldr	r2, [r1, #8]
 80147f6:	690b      	ldr	r3, [r1, #16]
 80147f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80147fc:	4293      	cmp	r3, r2
 80147fe:	bfb8      	it	lt
 8014800:	4613      	movlt	r3, r2
 8014802:	6033      	str	r3, [r6, #0]
 8014804:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014808:	4607      	mov	r7, r0
 801480a:	460c      	mov	r4, r1
 801480c:	b10a      	cbz	r2, 8014812 <_printf_common+0x26>
 801480e:	3301      	adds	r3, #1
 8014810:	6033      	str	r3, [r6, #0]
 8014812:	6823      	ldr	r3, [r4, #0]
 8014814:	0699      	lsls	r1, r3, #26
 8014816:	bf42      	ittt	mi
 8014818:	6833      	ldrmi	r3, [r6, #0]
 801481a:	3302      	addmi	r3, #2
 801481c:	6033      	strmi	r3, [r6, #0]
 801481e:	6825      	ldr	r5, [r4, #0]
 8014820:	f015 0506 	ands.w	r5, r5, #6
 8014824:	d106      	bne.n	8014834 <_printf_common+0x48>
 8014826:	f104 0a19 	add.w	sl, r4, #25
 801482a:	68e3      	ldr	r3, [r4, #12]
 801482c:	6832      	ldr	r2, [r6, #0]
 801482e:	1a9b      	subs	r3, r3, r2
 8014830:	42ab      	cmp	r3, r5
 8014832:	dc26      	bgt.n	8014882 <_printf_common+0x96>
 8014834:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014838:	1e13      	subs	r3, r2, #0
 801483a:	6822      	ldr	r2, [r4, #0]
 801483c:	bf18      	it	ne
 801483e:	2301      	movne	r3, #1
 8014840:	0692      	lsls	r2, r2, #26
 8014842:	d42b      	bmi.n	801489c <_printf_common+0xb0>
 8014844:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014848:	4649      	mov	r1, r9
 801484a:	4638      	mov	r0, r7
 801484c:	47c0      	blx	r8
 801484e:	3001      	adds	r0, #1
 8014850:	d01e      	beq.n	8014890 <_printf_common+0xa4>
 8014852:	6823      	ldr	r3, [r4, #0]
 8014854:	68e5      	ldr	r5, [r4, #12]
 8014856:	6832      	ldr	r2, [r6, #0]
 8014858:	f003 0306 	and.w	r3, r3, #6
 801485c:	2b04      	cmp	r3, #4
 801485e:	bf08      	it	eq
 8014860:	1aad      	subeq	r5, r5, r2
 8014862:	68a3      	ldr	r3, [r4, #8]
 8014864:	6922      	ldr	r2, [r4, #16]
 8014866:	bf0c      	ite	eq
 8014868:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801486c:	2500      	movne	r5, #0
 801486e:	4293      	cmp	r3, r2
 8014870:	bfc4      	itt	gt
 8014872:	1a9b      	subgt	r3, r3, r2
 8014874:	18ed      	addgt	r5, r5, r3
 8014876:	2600      	movs	r6, #0
 8014878:	341a      	adds	r4, #26
 801487a:	42b5      	cmp	r5, r6
 801487c:	d11a      	bne.n	80148b4 <_printf_common+0xc8>
 801487e:	2000      	movs	r0, #0
 8014880:	e008      	b.n	8014894 <_printf_common+0xa8>
 8014882:	2301      	movs	r3, #1
 8014884:	4652      	mov	r2, sl
 8014886:	4649      	mov	r1, r9
 8014888:	4638      	mov	r0, r7
 801488a:	47c0      	blx	r8
 801488c:	3001      	adds	r0, #1
 801488e:	d103      	bne.n	8014898 <_printf_common+0xac>
 8014890:	f04f 30ff 	mov.w	r0, #4294967295
 8014894:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014898:	3501      	adds	r5, #1
 801489a:	e7c6      	b.n	801482a <_printf_common+0x3e>
 801489c:	18e1      	adds	r1, r4, r3
 801489e:	1c5a      	adds	r2, r3, #1
 80148a0:	2030      	movs	r0, #48	; 0x30
 80148a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80148a6:	4422      	add	r2, r4
 80148a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80148ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80148b0:	3302      	adds	r3, #2
 80148b2:	e7c7      	b.n	8014844 <_printf_common+0x58>
 80148b4:	2301      	movs	r3, #1
 80148b6:	4622      	mov	r2, r4
 80148b8:	4649      	mov	r1, r9
 80148ba:	4638      	mov	r0, r7
 80148bc:	47c0      	blx	r8
 80148be:	3001      	adds	r0, #1
 80148c0:	d0e6      	beq.n	8014890 <_printf_common+0xa4>
 80148c2:	3601      	adds	r6, #1
 80148c4:	e7d9      	b.n	801487a <_printf_common+0x8e>
	...

080148c8 <_printf_i>:
 80148c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80148cc:	460c      	mov	r4, r1
 80148ce:	4691      	mov	r9, r2
 80148d0:	7e27      	ldrb	r7, [r4, #24]
 80148d2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80148d4:	2f78      	cmp	r7, #120	; 0x78
 80148d6:	4680      	mov	r8, r0
 80148d8:	469a      	mov	sl, r3
 80148da:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80148de:	d807      	bhi.n	80148f0 <_printf_i+0x28>
 80148e0:	2f62      	cmp	r7, #98	; 0x62
 80148e2:	d80a      	bhi.n	80148fa <_printf_i+0x32>
 80148e4:	2f00      	cmp	r7, #0
 80148e6:	f000 80d8 	beq.w	8014a9a <_printf_i+0x1d2>
 80148ea:	2f58      	cmp	r7, #88	; 0x58
 80148ec:	f000 80a3 	beq.w	8014a36 <_printf_i+0x16e>
 80148f0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80148f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80148f8:	e03a      	b.n	8014970 <_printf_i+0xa8>
 80148fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80148fe:	2b15      	cmp	r3, #21
 8014900:	d8f6      	bhi.n	80148f0 <_printf_i+0x28>
 8014902:	a001      	add	r0, pc, #4	; (adr r0, 8014908 <_printf_i+0x40>)
 8014904:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8014908:	08014961 	.word	0x08014961
 801490c:	08014975 	.word	0x08014975
 8014910:	080148f1 	.word	0x080148f1
 8014914:	080148f1 	.word	0x080148f1
 8014918:	080148f1 	.word	0x080148f1
 801491c:	080148f1 	.word	0x080148f1
 8014920:	08014975 	.word	0x08014975
 8014924:	080148f1 	.word	0x080148f1
 8014928:	080148f1 	.word	0x080148f1
 801492c:	080148f1 	.word	0x080148f1
 8014930:	080148f1 	.word	0x080148f1
 8014934:	08014a81 	.word	0x08014a81
 8014938:	080149a5 	.word	0x080149a5
 801493c:	08014a63 	.word	0x08014a63
 8014940:	080148f1 	.word	0x080148f1
 8014944:	080148f1 	.word	0x080148f1
 8014948:	08014aa3 	.word	0x08014aa3
 801494c:	080148f1 	.word	0x080148f1
 8014950:	080149a5 	.word	0x080149a5
 8014954:	080148f1 	.word	0x080148f1
 8014958:	080148f1 	.word	0x080148f1
 801495c:	08014a6b 	.word	0x08014a6b
 8014960:	680b      	ldr	r3, [r1, #0]
 8014962:	1d1a      	adds	r2, r3, #4
 8014964:	681b      	ldr	r3, [r3, #0]
 8014966:	600a      	str	r2, [r1, #0]
 8014968:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801496c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014970:	2301      	movs	r3, #1
 8014972:	e0a3      	b.n	8014abc <_printf_i+0x1f4>
 8014974:	6825      	ldr	r5, [r4, #0]
 8014976:	6808      	ldr	r0, [r1, #0]
 8014978:	062e      	lsls	r6, r5, #24
 801497a:	f100 0304 	add.w	r3, r0, #4
 801497e:	d50a      	bpl.n	8014996 <_printf_i+0xce>
 8014980:	6805      	ldr	r5, [r0, #0]
 8014982:	600b      	str	r3, [r1, #0]
 8014984:	2d00      	cmp	r5, #0
 8014986:	da03      	bge.n	8014990 <_printf_i+0xc8>
 8014988:	232d      	movs	r3, #45	; 0x2d
 801498a:	426d      	negs	r5, r5
 801498c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014990:	485e      	ldr	r0, [pc, #376]	; (8014b0c <_printf_i+0x244>)
 8014992:	230a      	movs	r3, #10
 8014994:	e019      	b.n	80149ca <_printf_i+0x102>
 8014996:	f015 0f40 	tst.w	r5, #64	; 0x40
 801499a:	6805      	ldr	r5, [r0, #0]
 801499c:	600b      	str	r3, [r1, #0]
 801499e:	bf18      	it	ne
 80149a0:	b22d      	sxthne	r5, r5
 80149a2:	e7ef      	b.n	8014984 <_printf_i+0xbc>
 80149a4:	680b      	ldr	r3, [r1, #0]
 80149a6:	6825      	ldr	r5, [r4, #0]
 80149a8:	1d18      	adds	r0, r3, #4
 80149aa:	6008      	str	r0, [r1, #0]
 80149ac:	0628      	lsls	r0, r5, #24
 80149ae:	d501      	bpl.n	80149b4 <_printf_i+0xec>
 80149b0:	681d      	ldr	r5, [r3, #0]
 80149b2:	e002      	b.n	80149ba <_printf_i+0xf2>
 80149b4:	0669      	lsls	r1, r5, #25
 80149b6:	d5fb      	bpl.n	80149b0 <_printf_i+0xe8>
 80149b8:	881d      	ldrh	r5, [r3, #0]
 80149ba:	4854      	ldr	r0, [pc, #336]	; (8014b0c <_printf_i+0x244>)
 80149bc:	2f6f      	cmp	r7, #111	; 0x6f
 80149be:	bf0c      	ite	eq
 80149c0:	2308      	moveq	r3, #8
 80149c2:	230a      	movne	r3, #10
 80149c4:	2100      	movs	r1, #0
 80149c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80149ca:	6866      	ldr	r6, [r4, #4]
 80149cc:	60a6      	str	r6, [r4, #8]
 80149ce:	2e00      	cmp	r6, #0
 80149d0:	bfa2      	ittt	ge
 80149d2:	6821      	ldrge	r1, [r4, #0]
 80149d4:	f021 0104 	bicge.w	r1, r1, #4
 80149d8:	6021      	strge	r1, [r4, #0]
 80149da:	b90d      	cbnz	r5, 80149e0 <_printf_i+0x118>
 80149dc:	2e00      	cmp	r6, #0
 80149de:	d04d      	beq.n	8014a7c <_printf_i+0x1b4>
 80149e0:	4616      	mov	r6, r2
 80149e2:	fbb5 f1f3 	udiv	r1, r5, r3
 80149e6:	fb03 5711 	mls	r7, r3, r1, r5
 80149ea:	5dc7      	ldrb	r7, [r0, r7]
 80149ec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80149f0:	462f      	mov	r7, r5
 80149f2:	42bb      	cmp	r3, r7
 80149f4:	460d      	mov	r5, r1
 80149f6:	d9f4      	bls.n	80149e2 <_printf_i+0x11a>
 80149f8:	2b08      	cmp	r3, #8
 80149fa:	d10b      	bne.n	8014a14 <_printf_i+0x14c>
 80149fc:	6823      	ldr	r3, [r4, #0]
 80149fe:	07df      	lsls	r7, r3, #31
 8014a00:	d508      	bpl.n	8014a14 <_printf_i+0x14c>
 8014a02:	6923      	ldr	r3, [r4, #16]
 8014a04:	6861      	ldr	r1, [r4, #4]
 8014a06:	4299      	cmp	r1, r3
 8014a08:	bfde      	ittt	le
 8014a0a:	2330      	movle	r3, #48	; 0x30
 8014a0c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8014a10:	f106 36ff 	addle.w	r6, r6, #4294967295
 8014a14:	1b92      	subs	r2, r2, r6
 8014a16:	6122      	str	r2, [r4, #16]
 8014a18:	f8cd a000 	str.w	sl, [sp]
 8014a1c:	464b      	mov	r3, r9
 8014a1e:	aa03      	add	r2, sp, #12
 8014a20:	4621      	mov	r1, r4
 8014a22:	4640      	mov	r0, r8
 8014a24:	f7ff fee2 	bl	80147ec <_printf_common>
 8014a28:	3001      	adds	r0, #1
 8014a2a:	d14c      	bne.n	8014ac6 <_printf_i+0x1fe>
 8014a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8014a30:	b004      	add	sp, #16
 8014a32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014a36:	4835      	ldr	r0, [pc, #212]	; (8014b0c <_printf_i+0x244>)
 8014a38:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8014a3c:	6823      	ldr	r3, [r4, #0]
 8014a3e:	680e      	ldr	r6, [r1, #0]
 8014a40:	061f      	lsls	r7, r3, #24
 8014a42:	f856 5b04 	ldr.w	r5, [r6], #4
 8014a46:	600e      	str	r6, [r1, #0]
 8014a48:	d514      	bpl.n	8014a74 <_printf_i+0x1ac>
 8014a4a:	07d9      	lsls	r1, r3, #31
 8014a4c:	bf44      	itt	mi
 8014a4e:	f043 0320 	orrmi.w	r3, r3, #32
 8014a52:	6023      	strmi	r3, [r4, #0]
 8014a54:	b91d      	cbnz	r5, 8014a5e <_printf_i+0x196>
 8014a56:	6823      	ldr	r3, [r4, #0]
 8014a58:	f023 0320 	bic.w	r3, r3, #32
 8014a5c:	6023      	str	r3, [r4, #0]
 8014a5e:	2310      	movs	r3, #16
 8014a60:	e7b0      	b.n	80149c4 <_printf_i+0xfc>
 8014a62:	6823      	ldr	r3, [r4, #0]
 8014a64:	f043 0320 	orr.w	r3, r3, #32
 8014a68:	6023      	str	r3, [r4, #0]
 8014a6a:	2378      	movs	r3, #120	; 0x78
 8014a6c:	4828      	ldr	r0, [pc, #160]	; (8014b10 <_printf_i+0x248>)
 8014a6e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8014a72:	e7e3      	b.n	8014a3c <_printf_i+0x174>
 8014a74:	065e      	lsls	r6, r3, #25
 8014a76:	bf48      	it	mi
 8014a78:	b2ad      	uxthmi	r5, r5
 8014a7a:	e7e6      	b.n	8014a4a <_printf_i+0x182>
 8014a7c:	4616      	mov	r6, r2
 8014a7e:	e7bb      	b.n	80149f8 <_printf_i+0x130>
 8014a80:	680b      	ldr	r3, [r1, #0]
 8014a82:	6826      	ldr	r6, [r4, #0]
 8014a84:	6960      	ldr	r0, [r4, #20]
 8014a86:	1d1d      	adds	r5, r3, #4
 8014a88:	600d      	str	r5, [r1, #0]
 8014a8a:	0635      	lsls	r5, r6, #24
 8014a8c:	681b      	ldr	r3, [r3, #0]
 8014a8e:	d501      	bpl.n	8014a94 <_printf_i+0x1cc>
 8014a90:	6018      	str	r0, [r3, #0]
 8014a92:	e002      	b.n	8014a9a <_printf_i+0x1d2>
 8014a94:	0671      	lsls	r1, r6, #25
 8014a96:	d5fb      	bpl.n	8014a90 <_printf_i+0x1c8>
 8014a98:	8018      	strh	r0, [r3, #0]
 8014a9a:	2300      	movs	r3, #0
 8014a9c:	6123      	str	r3, [r4, #16]
 8014a9e:	4616      	mov	r6, r2
 8014aa0:	e7ba      	b.n	8014a18 <_printf_i+0x150>
 8014aa2:	680b      	ldr	r3, [r1, #0]
 8014aa4:	1d1a      	adds	r2, r3, #4
 8014aa6:	600a      	str	r2, [r1, #0]
 8014aa8:	681e      	ldr	r6, [r3, #0]
 8014aaa:	6862      	ldr	r2, [r4, #4]
 8014aac:	2100      	movs	r1, #0
 8014aae:	4630      	mov	r0, r6
 8014ab0:	f7eb ffa6 	bl	8000a00 <memchr>
 8014ab4:	b108      	cbz	r0, 8014aba <_printf_i+0x1f2>
 8014ab6:	1b80      	subs	r0, r0, r6
 8014ab8:	6060      	str	r0, [r4, #4]
 8014aba:	6863      	ldr	r3, [r4, #4]
 8014abc:	6123      	str	r3, [r4, #16]
 8014abe:	2300      	movs	r3, #0
 8014ac0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014ac4:	e7a8      	b.n	8014a18 <_printf_i+0x150>
 8014ac6:	6923      	ldr	r3, [r4, #16]
 8014ac8:	4632      	mov	r2, r6
 8014aca:	4649      	mov	r1, r9
 8014acc:	4640      	mov	r0, r8
 8014ace:	47d0      	blx	sl
 8014ad0:	3001      	adds	r0, #1
 8014ad2:	d0ab      	beq.n	8014a2c <_printf_i+0x164>
 8014ad4:	6823      	ldr	r3, [r4, #0]
 8014ad6:	079b      	lsls	r3, r3, #30
 8014ad8:	d413      	bmi.n	8014b02 <_printf_i+0x23a>
 8014ada:	68e0      	ldr	r0, [r4, #12]
 8014adc:	9b03      	ldr	r3, [sp, #12]
 8014ade:	4298      	cmp	r0, r3
 8014ae0:	bfb8      	it	lt
 8014ae2:	4618      	movlt	r0, r3
 8014ae4:	e7a4      	b.n	8014a30 <_printf_i+0x168>
 8014ae6:	2301      	movs	r3, #1
 8014ae8:	4632      	mov	r2, r6
 8014aea:	4649      	mov	r1, r9
 8014aec:	4640      	mov	r0, r8
 8014aee:	47d0      	blx	sl
 8014af0:	3001      	adds	r0, #1
 8014af2:	d09b      	beq.n	8014a2c <_printf_i+0x164>
 8014af4:	3501      	adds	r5, #1
 8014af6:	68e3      	ldr	r3, [r4, #12]
 8014af8:	9903      	ldr	r1, [sp, #12]
 8014afa:	1a5b      	subs	r3, r3, r1
 8014afc:	42ab      	cmp	r3, r5
 8014afe:	dcf2      	bgt.n	8014ae6 <_printf_i+0x21e>
 8014b00:	e7eb      	b.n	8014ada <_printf_i+0x212>
 8014b02:	2500      	movs	r5, #0
 8014b04:	f104 0619 	add.w	r6, r4, #25
 8014b08:	e7f5      	b.n	8014af6 <_printf_i+0x22e>
 8014b0a:	bf00      	nop
 8014b0c:	080193f6 	.word	0x080193f6
 8014b10:	08019407 	.word	0x08019407

08014b14 <_sbrk_r>:
 8014b14:	b538      	push	{r3, r4, r5, lr}
 8014b16:	4d06      	ldr	r5, [pc, #24]	; (8014b30 <_sbrk_r+0x1c>)
 8014b18:	2300      	movs	r3, #0
 8014b1a:	4604      	mov	r4, r0
 8014b1c:	4608      	mov	r0, r1
 8014b1e:	602b      	str	r3, [r5, #0]
 8014b20:	f7f2 fbfe 	bl	8007320 <_sbrk>
 8014b24:	1c43      	adds	r3, r0, #1
 8014b26:	d102      	bne.n	8014b2e <_sbrk_r+0x1a>
 8014b28:	682b      	ldr	r3, [r5, #0]
 8014b2a:	b103      	cbz	r3, 8014b2e <_sbrk_r+0x1a>
 8014b2c:	6023      	str	r3, [r4, #0]
 8014b2e:	bd38      	pop	{r3, r4, r5, pc}
 8014b30:	20006610 	.word	0x20006610

08014b34 <siprintf>:
 8014b34:	b40e      	push	{r1, r2, r3}
 8014b36:	b500      	push	{lr}
 8014b38:	b09c      	sub	sp, #112	; 0x70
 8014b3a:	ab1d      	add	r3, sp, #116	; 0x74
 8014b3c:	9002      	str	r0, [sp, #8]
 8014b3e:	9006      	str	r0, [sp, #24]
 8014b40:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014b44:	4809      	ldr	r0, [pc, #36]	; (8014b6c <siprintf+0x38>)
 8014b46:	9107      	str	r1, [sp, #28]
 8014b48:	9104      	str	r1, [sp, #16]
 8014b4a:	4909      	ldr	r1, [pc, #36]	; (8014b70 <siprintf+0x3c>)
 8014b4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8014b50:	9105      	str	r1, [sp, #20]
 8014b52:	6800      	ldr	r0, [r0, #0]
 8014b54:	9301      	str	r3, [sp, #4]
 8014b56:	a902      	add	r1, sp, #8
 8014b58:	f002 ffcc 	bl	8017af4 <_svfiprintf_r>
 8014b5c:	9b02      	ldr	r3, [sp, #8]
 8014b5e:	2200      	movs	r2, #0
 8014b60:	701a      	strb	r2, [r3, #0]
 8014b62:	b01c      	add	sp, #112	; 0x70
 8014b64:	f85d eb04 	ldr.w	lr, [sp], #4
 8014b68:	b003      	add	sp, #12
 8014b6a:	4770      	bx	lr
 8014b6c:	20001504 	.word	0x20001504
 8014b70:	ffff0208 	.word	0xffff0208

08014b74 <strcat>:
 8014b74:	b510      	push	{r4, lr}
 8014b76:	4602      	mov	r2, r0
 8014b78:	7814      	ldrb	r4, [r2, #0]
 8014b7a:	4613      	mov	r3, r2
 8014b7c:	3201      	adds	r2, #1
 8014b7e:	2c00      	cmp	r4, #0
 8014b80:	d1fa      	bne.n	8014b78 <strcat+0x4>
 8014b82:	3b01      	subs	r3, #1
 8014b84:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014b88:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014b8c:	2a00      	cmp	r2, #0
 8014b8e:	d1f9      	bne.n	8014b84 <strcat+0x10>
 8014b90:	bd10      	pop	{r4, pc}

08014b92 <strchr>:
 8014b92:	b2c9      	uxtb	r1, r1
 8014b94:	4603      	mov	r3, r0
 8014b96:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014b9a:	b11a      	cbz	r2, 8014ba4 <strchr+0x12>
 8014b9c:	428a      	cmp	r2, r1
 8014b9e:	d1f9      	bne.n	8014b94 <strchr+0x2>
 8014ba0:	4618      	mov	r0, r3
 8014ba2:	4770      	bx	lr
 8014ba4:	2900      	cmp	r1, #0
 8014ba6:	bf18      	it	ne
 8014ba8:	2300      	movne	r3, #0
 8014baa:	e7f9      	b.n	8014ba0 <strchr+0xe>

08014bac <strcpy>:
 8014bac:	4603      	mov	r3, r0
 8014bae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014bb2:	f803 2b01 	strb.w	r2, [r3], #1
 8014bb6:	2a00      	cmp	r2, #0
 8014bb8:	d1f9      	bne.n	8014bae <strcpy+0x2>
 8014bba:	4770      	bx	lr

08014bbc <strncmp>:
 8014bbc:	b510      	push	{r4, lr}
 8014bbe:	b16a      	cbz	r2, 8014bdc <strncmp+0x20>
 8014bc0:	3901      	subs	r1, #1
 8014bc2:	1884      	adds	r4, r0, r2
 8014bc4:	f810 3b01 	ldrb.w	r3, [r0], #1
 8014bc8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8014bcc:	4293      	cmp	r3, r2
 8014bce:	d103      	bne.n	8014bd8 <strncmp+0x1c>
 8014bd0:	42a0      	cmp	r0, r4
 8014bd2:	d001      	beq.n	8014bd8 <strncmp+0x1c>
 8014bd4:	2b00      	cmp	r3, #0
 8014bd6:	d1f5      	bne.n	8014bc4 <strncmp+0x8>
 8014bd8:	1a98      	subs	r0, r3, r2
 8014bda:	bd10      	pop	{r4, pc}
 8014bdc:	4610      	mov	r0, r2
 8014bde:	e7fc      	b.n	8014bda <strncmp+0x1e>

08014be0 <strncpy>:
 8014be0:	b510      	push	{r4, lr}
 8014be2:	3901      	subs	r1, #1
 8014be4:	4603      	mov	r3, r0
 8014be6:	b132      	cbz	r2, 8014bf6 <strncpy+0x16>
 8014be8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8014bec:	f803 4b01 	strb.w	r4, [r3], #1
 8014bf0:	3a01      	subs	r2, #1
 8014bf2:	2c00      	cmp	r4, #0
 8014bf4:	d1f7      	bne.n	8014be6 <strncpy+0x6>
 8014bf6:	441a      	add	r2, r3
 8014bf8:	2100      	movs	r1, #0
 8014bfa:	4293      	cmp	r3, r2
 8014bfc:	d100      	bne.n	8014c00 <strncpy+0x20>
 8014bfe:	bd10      	pop	{r4, pc}
 8014c00:	f803 1b01 	strb.w	r1, [r3], #1
 8014c04:	e7f9      	b.n	8014bfa <strncpy+0x1a>

08014c06 <strstr>:
 8014c06:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014c08:	780c      	ldrb	r4, [r1, #0]
 8014c0a:	b164      	cbz	r4, 8014c26 <strstr+0x20>
 8014c0c:	4603      	mov	r3, r0
 8014c0e:	781a      	ldrb	r2, [r3, #0]
 8014c10:	4618      	mov	r0, r3
 8014c12:	1c5e      	adds	r6, r3, #1
 8014c14:	b90a      	cbnz	r2, 8014c1a <strstr+0x14>
 8014c16:	4610      	mov	r0, r2
 8014c18:	e005      	b.n	8014c26 <strstr+0x20>
 8014c1a:	4294      	cmp	r4, r2
 8014c1c:	d108      	bne.n	8014c30 <strstr+0x2a>
 8014c1e:	460d      	mov	r5, r1
 8014c20:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8014c24:	b902      	cbnz	r2, 8014c28 <strstr+0x22>
 8014c26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014c28:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8014c2c:	4297      	cmp	r7, r2
 8014c2e:	d0f7      	beq.n	8014c20 <strstr+0x1a>
 8014c30:	4633      	mov	r3, r6
 8014c32:	e7ec      	b.n	8014c0e <strstr+0x8>

08014c34 <sulp>:
 8014c34:	b570      	push	{r4, r5, r6, lr}
 8014c36:	4604      	mov	r4, r0
 8014c38:	460d      	mov	r5, r1
 8014c3a:	ec45 4b10 	vmov	d0, r4, r5
 8014c3e:	4616      	mov	r6, r2
 8014c40:	f002 fd9e 	bl	8017780 <__ulp>
 8014c44:	ec51 0b10 	vmov	r0, r1, d0
 8014c48:	b17e      	cbz	r6, 8014c6a <sulp+0x36>
 8014c4a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8014c4e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8014c52:	2b00      	cmp	r3, #0
 8014c54:	dd09      	ble.n	8014c6a <sulp+0x36>
 8014c56:	051b      	lsls	r3, r3, #20
 8014c58:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8014c5c:	2400      	movs	r4, #0
 8014c5e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8014c62:	4622      	mov	r2, r4
 8014c64:	462b      	mov	r3, r5
 8014c66:	f7ec f8d7 	bl	8000e18 <__aeabi_dmul>
 8014c6a:	bd70      	pop	{r4, r5, r6, pc}
 8014c6c:	0000      	movs	r0, r0
	...

08014c70 <_strtod_l>:
 8014c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c74:	b0a3      	sub	sp, #140	; 0x8c
 8014c76:	461f      	mov	r7, r3
 8014c78:	2300      	movs	r3, #0
 8014c7a:	931e      	str	r3, [sp, #120]	; 0x78
 8014c7c:	4ba4      	ldr	r3, [pc, #656]	; (8014f10 <_strtod_l+0x2a0>)
 8014c7e:	9219      	str	r2, [sp, #100]	; 0x64
 8014c80:	681b      	ldr	r3, [r3, #0]
 8014c82:	9307      	str	r3, [sp, #28]
 8014c84:	4604      	mov	r4, r0
 8014c86:	4618      	mov	r0, r3
 8014c88:	4688      	mov	r8, r1
 8014c8a:	f7eb feab 	bl	80009e4 <strlen>
 8014c8e:	f04f 0a00 	mov.w	sl, #0
 8014c92:	4605      	mov	r5, r0
 8014c94:	f04f 0b00 	mov.w	fp, #0
 8014c98:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8014c9c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014c9e:	781a      	ldrb	r2, [r3, #0]
 8014ca0:	2a2b      	cmp	r2, #43	; 0x2b
 8014ca2:	d04c      	beq.n	8014d3e <_strtod_l+0xce>
 8014ca4:	d839      	bhi.n	8014d1a <_strtod_l+0xaa>
 8014ca6:	2a0d      	cmp	r2, #13
 8014ca8:	d832      	bhi.n	8014d10 <_strtod_l+0xa0>
 8014caa:	2a08      	cmp	r2, #8
 8014cac:	d832      	bhi.n	8014d14 <_strtod_l+0xa4>
 8014cae:	2a00      	cmp	r2, #0
 8014cb0:	d03c      	beq.n	8014d2c <_strtod_l+0xbc>
 8014cb2:	2300      	movs	r3, #0
 8014cb4:	930e      	str	r3, [sp, #56]	; 0x38
 8014cb6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8014cb8:	7833      	ldrb	r3, [r6, #0]
 8014cba:	2b30      	cmp	r3, #48	; 0x30
 8014cbc:	f040 80b4 	bne.w	8014e28 <_strtod_l+0x1b8>
 8014cc0:	7873      	ldrb	r3, [r6, #1]
 8014cc2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8014cc6:	2b58      	cmp	r3, #88	; 0x58
 8014cc8:	d16c      	bne.n	8014da4 <_strtod_l+0x134>
 8014cca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014ccc:	9301      	str	r3, [sp, #4]
 8014cce:	ab1e      	add	r3, sp, #120	; 0x78
 8014cd0:	9702      	str	r7, [sp, #8]
 8014cd2:	9300      	str	r3, [sp, #0]
 8014cd4:	4a8f      	ldr	r2, [pc, #572]	; (8014f14 <_strtod_l+0x2a4>)
 8014cd6:	ab1f      	add	r3, sp, #124	; 0x7c
 8014cd8:	a91d      	add	r1, sp, #116	; 0x74
 8014cda:	4620      	mov	r0, r4
 8014cdc:	f001 feba 	bl	8016a54 <__gethex>
 8014ce0:	f010 0707 	ands.w	r7, r0, #7
 8014ce4:	4605      	mov	r5, r0
 8014ce6:	d005      	beq.n	8014cf4 <_strtod_l+0x84>
 8014ce8:	2f06      	cmp	r7, #6
 8014cea:	d12a      	bne.n	8014d42 <_strtod_l+0xd2>
 8014cec:	3601      	adds	r6, #1
 8014cee:	2300      	movs	r3, #0
 8014cf0:	961d      	str	r6, [sp, #116]	; 0x74
 8014cf2:	930e      	str	r3, [sp, #56]	; 0x38
 8014cf4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014cf6:	2b00      	cmp	r3, #0
 8014cf8:	f040 8596 	bne.w	8015828 <_strtod_l+0xbb8>
 8014cfc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014cfe:	b1db      	cbz	r3, 8014d38 <_strtod_l+0xc8>
 8014d00:	4652      	mov	r2, sl
 8014d02:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8014d06:	ec43 2b10 	vmov	d0, r2, r3
 8014d0a:	b023      	add	sp, #140	; 0x8c
 8014d0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d10:	2a20      	cmp	r2, #32
 8014d12:	d1ce      	bne.n	8014cb2 <_strtod_l+0x42>
 8014d14:	3301      	adds	r3, #1
 8014d16:	931d      	str	r3, [sp, #116]	; 0x74
 8014d18:	e7c0      	b.n	8014c9c <_strtod_l+0x2c>
 8014d1a:	2a2d      	cmp	r2, #45	; 0x2d
 8014d1c:	d1c9      	bne.n	8014cb2 <_strtod_l+0x42>
 8014d1e:	2201      	movs	r2, #1
 8014d20:	920e      	str	r2, [sp, #56]	; 0x38
 8014d22:	1c5a      	adds	r2, r3, #1
 8014d24:	921d      	str	r2, [sp, #116]	; 0x74
 8014d26:	785b      	ldrb	r3, [r3, #1]
 8014d28:	2b00      	cmp	r3, #0
 8014d2a:	d1c4      	bne.n	8014cb6 <_strtod_l+0x46>
 8014d2c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014d2e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8014d32:	2b00      	cmp	r3, #0
 8014d34:	f040 8576 	bne.w	8015824 <_strtod_l+0xbb4>
 8014d38:	4652      	mov	r2, sl
 8014d3a:	465b      	mov	r3, fp
 8014d3c:	e7e3      	b.n	8014d06 <_strtod_l+0x96>
 8014d3e:	2200      	movs	r2, #0
 8014d40:	e7ee      	b.n	8014d20 <_strtod_l+0xb0>
 8014d42:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8014d44:	b13a      	cbz	r2, 8014d56 <_strtod_l+0xe6>
 8014d46:	2135      	movs	r1, #53	; 0x35
 8014d48:	a820      	add	r0, sp, #128	; 0x80
 8014d4a:	f002 fe24 	bl	8017996 <__copybits>
 8014d4e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8014d50:	4620      	mov	r0, r4
 8014d52:	f002 f9e9 	bl	8017128 <_Bfree>
 8014d56:	3f01      	subs	r7, #1
 8014d58:	2f05      	cmp	r7, #5
 8014d5a:	d807      	bhi.n	8014d6c <_strtod_l+0xfc>
 8014d5c:	e8df f007 	tbb	[pc, r7]
 8014d60:	1d180b0e 	.word	0x1d180b0e
 8014d64:	030e      	.short	0x030e
 8014d66:	f04f 0b00 	mov.w	fp, #0
 8014d6a:	46da      	mov	sl, fp
 8014d6c:	0728      	lsls	r0, r5, #28
 8014d6e:	d5c1      	bpl.n	8014cf4 <_strtod_l+0x84>
 8014d70:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8014d74:	e7be      	b.n	8014cf4 <_strtod_l+0x84>
 8014d76:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8014d7a:	e7f7      	b.n	8014d6c <_strtod_l+0xfc>
 8014d7c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8014d80:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8014d82:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8014d86:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8014d8a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8014d8e:	e7ed      	b.n	8014d6c <_strtod_l+0xfc>
 8014d90:	f8df b184 	ldr.w	fp, [pc, #388]	; 8014f18 <_strtod_l+0x2a8>
 8014d94:	f04f 0a00 	mov.w	sl, #0
 8014d98:	e7e8      	b.n	8014d6c <_strtod_l+0xfc>
 8014d9a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8014d9e:	f04f 3aff 	mov.w	sl, #4294967295
 8014da2:	e7e3      	b.n	8014d6c <_strtod_l+0xfc>
 8014da4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014da6:	1c5a      	adds	r2, r3, #1
 8014da8:	921d      	str	r2, [sp, #116]	; 0x74
 8014daa:	785b      	ldrb	r3, [r3, #1]
 8014dac:	2b30      	cmp	r3, #48	; 0x30
 8014dae:	d0f9      	beq.n	8014da4 <_strtod_l+0x134>
 8014db0:	2b00      	cmp	r3, #0
 8014db2:	d09f      	beq.n	8014cf4 <_strtod_l+0x84>
 8014db4:	2301      	movs	r3, #1
 8014db6:	f04f 0900 	mov.w	r9, #0
 8014dba:	9304      	str	r3, [sp, #16]
 8014dbc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014dbe:	930a      	str	r3, [sp, #40]	; 0x28
 8014dc0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8014dc4:	464f      	mov	r7, r9
 8014dc6:	220a      	movs	r2, #10
 8014dc8:	981d      	ldr	r0, [sp, #116]	; 0x74
 8014dca:	7806      	ldrb	r6, [r0, #0]
 8014dcc:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8014dd0:	b2d9      	uxtb	r1, r3
 8014dd2:	2909      	cmp	r1, #9
 8014dd4:	d92a      	bls.n	8014e2c <_strtod_l+0x1bc>
 8014dd6:	9907      	ldr	r1, [sp, #28]
 8014dd8:	462a      	mov	r2, r5
 8014dda:	f7ff feef 	bl	8014bbc <strncmp>
 8014dde:	b398      	cbz	r0, 8014e48 <_strtod_l+0x1d8>
 8014de0:	2000      	movs	r0, #0
 8014de2:	4633      	mov	r3, r6
 8014de4:	463d      	mov	r5, r7
 8014de6:	9007      	str	r0, [sp, #28]
 8014de8:	4602      	mov	r2, r0
 8014dea:	2b65      	cmp	r3, #101	; 0x65
 8014dec:	d001      	beq.n	8014df2 <_strtod_l+0x182>
 8014dee:	2b45      	cmp	r3, #69	; 0x45
 8014df0:	d118      	bne.n	8014e24 <_strtod_l+0x1b4>
 8014df2:	b91d      	cbnz	r5, 8014dfc <_strtod_l+0x18c>
 8014df4:	9b04      	ldr	r3, [sp, #16]
 8014df6:	4303      	orrs	r3, r0
 8014df8:	d098      	beq.n	8014d2c <_strtod_l+0xbc>
 8014dfa:	2500      	movs	r5, #0
 8014dfc:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8014e00:	f108 0301 	add.w	r3, r8, #1
 8014e04:	931d      	str	r3, [sp, #116]	; 0x74
 8014e06:	f898 3001 	ldrb.w	r3, [r8, #1]
 8014e0a:	2b2b      	cmp	r3, #43	; 0x2b
 8014e0c:	d075      	beq.n	8014efa <_strtod_l+0x28a>
 8014e0e:	2b2d      	cmp	r3, #45	; 0x2d
 8014e10:	d07b      	beq.n	8014f0a <_strtod_l+0x29a>
 8014e12:	f04f 0c00 	mov.w	ip, #0
 8014e16:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8014e1a:	2909      	cmp	r1, #9
 8014e1c:	f240 8082 	bls.w	8014f24 <_strtod_l+0x2b4>
 8014e20:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8014e24:	2600      	movs	r6, #0
 8014e26:	e09d      	b.n	8014f64 <_strtod_l+0x2f4>
 8014e28:	2300      	movs	r3, #0
 8014e2a:	e7c4      	b.n	8014db6 <_strtod_l+0x146>
 8014e2c:	2f08      	cmp	r7, #8
 8014e2e:	bfd8      	it	le
 8014e30:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8014e32:	f100 0001 	add.w	r0, r0, #1
 8014e36:	bfda      	itte	le
 8014e38:	fb02 3301 	mlale	r3, r2, r1, r3
 8014e3c:	9309      	strle	r3, [sp, #36]	; 0x24
 8014e3e:	fb02 3909 	mlagt	r9, r2, r9, r3
 8014e42:	3701      	adds	r7, #1
 8014e44:	901d      	str	r0, [sp, #116]	; 0x74
 8014e46:	e7bf      	b.n	8014dc8 <_strtod_l+0x158>
 8014e48:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014e4a:	195a      	adds	r2, r3, r5
 8014e4c:	921d      	str	r2, [sp, #116]	; 0x74
 8014e4e:	5d5b      	ldrb	r3, [r3, r5]
 8014e50:	2f00      	cmp	r7, #0
 8014e52:	d037      	beq.n	8014ec4 <_strtod_l+0x254>
 8014e54:	9007      	str	r0, [sp, #28]
 8014e56:	463d      	mov	r5, r7
 8014e58:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8014e5c:	2a09      	cmp	r2, #9
 8014e5e:	d912      	bls.n	8014e86 <_strtod_l+0x216>
 8014e60:	2201      	movs	r2, #1
 8014e62:	e7c2      	b.n	8014dea <_strtod_l+0x17a>
 8014e64:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014e66:	1c5a      	adds	r2, r3, #1
 8014e68:	921d      	str	r2, [sp, #116]	; 0x74
 8014e6a:	785b      	ldrb	r3, [r3, #1]
 8014e6c:	3001      	adds	r0, #1
 8014e6e:	2b30      	cmp	r3, #48	; 0x30
 8014e70:	d0f8      	beq.n	8014e64 <_strtod_l+0x1f4>
 8014e72:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8014e76:	2a08      	cmp	r2, #8
 8014e78:	f200 84db 	bhi.w	8015832 <_strtod_l+0xbc2>
 8014e7c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8014e7e:	9007      	str	r0, [sp, #28]
 8014e80:	2000      	movs	r0, #0
 8014e82:	920a      	str	r2, [sp, #40]	; 0x28
 8014e84:	4605      	mov	r5, r0
 8014e86:	3b30      	subs	r3, #48	; 0x30
 8014e88:	f100 0201 	add.w	r2, r0, #1
 8014e8c:	d014      	beq.n	8014eb8 <_strtod_l+0x248>
 8014e8e:	9907      	ldr	r1, [sp, #28]
 8014e90:	4411      	add	r1, r2
 8014e92:	9107      	str	r1, [sp, #28]
 8014e94:	462a      	mov	r2, r5
 8014e96:	eb00 0e05 	add.w	lr, r0, r5
 8014e9a:	210a      	movs	r1, #10
 8014e9c:	4572      	cmp	r2, lr
 8014e9e:	d113      	bne.n	8014ec8 <_strtod_l+0x258>
 8014ea0:	182a      	adds	r2, r5, r0
 8014ea2:	2a08      	cmp	r2, #8
 8014ea4:	f105 0501 	add.w	r5, r5, #1
 8014ea8:	4405      	add	r5, r0
 8014eaa:	dc1c      	bgt.n	8014ee6 <_strtod_l+0x276>
 8014eac:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014eae:	220a      	movs	r2, #10
 8014eb0:	fb02 3301 	mla	r3, r2, r1, r3
 8014eb4:	9309      	str	r3, [sp, #36]	; 0x24
 8014eb6:	2200      	movs	r2, #0
 8014eb8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014eba:	1c59      	adds	r1, r3, #1
 8014ebc:	911d      	str	r1, [sp, #116]	; 0x74
 8014ebe:	785b      	ldrb	r3, [r3, #1]
 8014ec0:	4610      	mov	r0, r2
 8014ec2:	e7c9      	b.n	8014e58 <_strtod_l+0x1e8>
 8014ec4:	4638      	mov	r0, r7
 8014ec6:	e7d2      	b.n	8014e6e <_strtod_l+0x1fe>
 8014ec8:	2a08      	cmp	r2, #8
 8014eca:	dc04      	bgt.n	8014ed6 <_strtod_l+0x266>
 8014ecc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8014ece:	434e      	muls	r6, r1
 8014ed0:	9609      	str	r6, [sp, #36]	; 0x24
 8014ed2:	3201      	adds	r2, #1
 8014ed4:	e7e2      	b.n	8014e9c <_strtod_l+0x22c>
 8014ed6:	f102 0c01 	add.w	ip, r2, #1
 8014eda:	f1bc 0f10 	cmp.w	ip, #16
 8014ede:	bfd8      	it	le
 8014ee0:	fb01 f909 	mulle.w	r9, r1, r9
 8014ee4:	e7f5      	b.n	8014ed2 <_strtod_l+0x262>
 8014ee6:	2d10      	cmp	r5, #16
 8014ee8:	bfdc      	itt	le
 8014eea:	220a      	movle	r2, #10
 8014eec:	fb02 3909 	mlale	r9, r2, r9, r3
 8014ef0:	e7e1      	b.n	8014eb6 <_strtod_l+0x246>
 8014ef2:	2300      	movs	r3, #0
 8014ef4:	9307      	str	r3, [sp, #28]
 8014ef6:	2201      	movs	r2, #1
 8014ef8:	e77c      	b.n	8014df4 <_strtod_l+0x184>
 8014efa:	f04f 0c00 	mov.w	ip, #0
 8014efe:	f108 0302 	add.w	r3, r8, #2
 8014f02:	931d      	str	r3, [sp, #116]	; 0x74
 8014f04:	f898 3002 	ldrb.w	r3, [r8, #2]
 8014f08:	e785      	b.n	8014e16 <_strtod_l+0x1a6>
 8014f0a:	f04f 0c01 	mov.w	ip, #1
 8014f0e:	e7f6      	b.n	8014efe <_strtod_l+0x28e>
 8014f10:	08019728 	.word	0x08019728
 8014f14:	08019418 	.word	0x08019418
 8014f18:	7ff00000 	.word	0x7ff00000
 8014f1c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014f1e:	1c59      	adds	r1, r3, #1
 8014f20:	911d      	str	r1, [sp, #116]	; 0x74
 8014f22:	785b      	ldrb	r3, [r3, #1]
 8014f24:	2b30      	cmp	r3, #48	; 0x30
 8014f26:	d0f9      	beq.n	8014f1c <_strtod_l+0x2ac>
 8014f28:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8014f2c:	2908      	cmp	r1, #8
 8014f2e:	f63f af79 	bhi.w	8014e24 <_strtod_l+0x1b4>
 8014f32:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8014f36:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014f38:	9308      	str	r3, [sp, #32]
 8014f3a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014f3c:	1c59      	adds	r1, r3, #1
 8014f3e:	911d      	str	r1, [sp, #116]	; 0x74
 8014f40:	785b      	ldrb	r3, [r3, #1]
 8014f42:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8014f46:	2e09      	cmp	r6, #9
 8014f48:	d937      	bls.n	8014fba <_strtod_l+0x34a>
 8014f4a:	9e08      	ldr	r6, [sp, #32]
 8014f4c:	1b89      	subs	r1, r1, r6
 8014f4e:	2908      	cmp	r1, #8
 8014f50:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8014f54:	dc02      	bgt.n	8014f5c <_strtod_l+0x2ec>
 8014f56:	4576      	cmp	r6, lr
 8014f58:	bfa8      	it	ge
 8014f5a:	4676      	movge	r6, lr
 8014f5c:	f1bc 0f00 	cmp.w	ip, #0
 8014f60:	d000      	beq.n	8014f64 <_strtod_l+0x2f4>
 8014f62:	4276      	negs	r6, r6
 8014f64:	2d00      	cmp	r5, #0
 8014f66:	d14f      	bne.n	8015008 <_strtod_l+0x398>
 8014f68:	9904      	ldr	r1, [sp, #16]
 8014f6a:	4301      	orrs	r1, r0
 8014f6c:	f47f aec2 	bne.w	8014cf4 <_strtod_l+0x84>
 8014f70:	2a00      	cmp	r2, #0
 8014f72:	f47f aedb 	bne.w	8014d2c <_strtod_l+0xbc>
 8014f76:	2b69      	cmp	r3, #105	; 0x69
 8014f78:	d027      	beq.n	8014fca <_strtod_l+0x35a>
 8014f7a:	dc24      	bgt.n	8014fc6 <_strtod_l+0x356>
 8014f7c:	2b49      	cmp	r3, #73	; 0x49
 8014f7e:	d024      	beq.n	8014fca <_strtod_l+0x35a>
 8014f80:	2b4e      	cmp	r3, #78	; 0x4e
 8014f82:	f47f aed3 	bne.w	8014d2c <_strtod_l+0xbc>
 8014f86:	499e      	ldr	r1, [pc, #632]	; (8015200 <_strtod_l+0x590>)
 8014f88:	a81d      	add	r0, sp, #116	; 0x74
 8014f8a:	f001 ffbb 	bl	8016f04 <__match>
 8014f8e:	2800      	cmp	r0, #0
 8014f90:	f43f aecc 	beq.w	8014d2c <_strtod_l+0xbc>
 8014f94:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014f96:	781b      	ldrb	r3, [r3, #0]
 8014f98:	2b28      	cmp	r3, #40	; 0x28
 8014f9a:	d12d      	bne.n	8014ff8 <_strtod_l+0x388>
 8014f9c:	4999      	ldr	r1, [pc, #612]	; (8015204 <_strtod_l+0x594>)
 8014f9e:	aa20      	add	r2, sp, #128	; 0x80
 8014fa0:	a81d      	add	r0, sp, #116	; 0x74
 8014fa2:	f001 ffc3 	bl	8016f2c <__hexnan>
 8014fa6:	2805      	cmp	r0, #5
 8014fa8:	d126      	bne.n	8014ff8 <_strtod_l+0x388>
 8014faa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014fac:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8014fb0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8014fb4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8014fb8:	e69c      	b.n	8014cf4 <_strtod_l+0x84>
 8014fba:	210a      	movs	r1, #10
 8014fbc:	fb01 3e0e 	mla	lr, r1, lr, r3
 8014fc0:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8014fc4:	e7b9      	b.n	8014f3a <_strtod_l+0x2ca>
 8014fc6:	2b6e      	cmp	r3, #110	; 0x6e
 8014fc8:	e7db      	b.n	8014f82 <_strtod_l+0x312>
 8014fca:	498f      	ldr	r1, [pc, #572]	; (8015208 <_strtod_l+0x598>)
 8014fcc:	a81d      	add	r0, sp, #116	; 0x74
 8014fce:	f001 ff99 	bl	8016f04 <__match>
 8014fd2:	2800      	cmp	r0, #0
 8014fd4:	f43f aeaa 	beq.w	8014d2c <_strtod_l+0xbc>
 8014fd8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014fda:	498c      	ldr	r1, [pc, #560]	; (801520c <_strtod_l+0x59c>)
 8014fdc:	3b01      	subs	r3, #1
 8014fde:	a81d      	add	r0, sp, #116	; 0x74
 8014fe0:	931d      	str	r3, [sp, #116]	; 0x74
 8014fe2:	f001 ff8f 	bl	8016f04 <__match>
 8014fe6:	b910      	cbnz	r0, 8014fee <_strtod_l+0x37e>
 8014fe8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014fea:	3301      	adds	r3, #1
 8014fec:	931d      	str	r3, [sp, #116]	; 0x74
 8014fee:	f8df b22c 	ldr.w	fp, [pc, #556]	; 801521c <_strtod_l+0x5ac>
 8014ff2:	f04f 0a00 	mov.w	sl, #0
 8014ff6:	e67d      	b.n	8014cf4 <_strtod_l+0x84>
 8014ff8:	4885      	ldr	r0, [pc, #532]	; (8015210 <_strtod_l+0x5a0>)
 8014ffa:	f002 ffd5 	bl	8017fa8 <nan>
 8014ffe:	ed8d 0b04 	vstr	d0, [sp, #16]
 8015002:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8015006:	e675      	b.n	8014cf4 <_strtod_l+0x84>
 8015008:	9b07      	ldr	r3, [sp, #28]
 801500a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801500c:	1af3      	subs	r3, r6, r3
 801500e:	2f00      	cmp	r7, #0
 8015010:	bf08      	it	eq
 8015012:	462f      	moveq	r7, r5
 8015014:	2d10      	cmp	r5, #16
 8015016:	9308      	str	r3, [sp, #32]
 8015018:	46a8      	mov	r8, r5
 801501a:	bfa8      	it	ge
 801501c:	f04f 0810 	movge.w	r8, #16
 8015020:	f7eb fe80 	bl	8000d24 <__aeabi_ui2d>
 8015024:	2d09      	cmp	r5, #9
 8015026:	4682      	mov	sl, r0
 8015028:	468b      	mov	fp, r1
 801502a:	dd13      	ble.n	8015054 <_strtod_l+0x3e4>
 801502c:	4b79      	ldr	r3, [pc, #484]	; (8015214 <_strtod_l+0x5a4>)
 801502e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8015032:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8015036:	f7eb feef 	bl	8000e18 <__aeabi_dmul>
 801503a:	4682      	mov	sl, r0
 801503c:	4648      	mov	r0, r9
 801503e:	468b      	mov	fp, r1
 8015040:	f7eb fe70 	bl	8000d24 <__aeabi_ui2d>
 8015044:	4602      	mov	r2, r0
 8015046:	460b      	mov	r3, r1
 8015048:	4650      	mov	r0, sl
 801504a:	4659      	mov	r1, fp
 801504c:	f7eb fd2e 	bl	8000aac <__adddf3>
 8015050:	4682      	mov	sl, r0
 8015052:	468b      	mov	fp, r1
 8015054:	2d0f      	cmp	r5, #15
 8015056:	dc38      	bgt.n	80150ca <_strtod_l+0x45a>
 8015058:	9b08      	ldr	r3, [sp, #32]
 801505a:	2b00      	cmp	r3, #0
 801505c:	f43f ae4a 	beq.w	8014cf4 <_strtod_l+0x84>
 8015060:	dd24      	ble.n	80150ac <_strtod_l+0x43c>
 8015062:	2b16      	cmp	r3, #22
 8015064:	dc0b      	bgt.n	801507e <_strtod_l+0x40e>
 8015066:	4d6b      	ldr	r5, [pc, #428]	; (8015214 <_strtod_l+0x5a4>)
 8015068:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 801506c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8015070:	4652      	mov	r2, sl
 8015072:	465b      	mov	r3, fp
 8015074:	f7eb fed0 	bl	8000e18 <__aeabi_dmul>
 8015078:	4682      	mov	sl, r0
 801507a:	468b      	mov	fp, r1
 801507c:	e63a      	b.n	8014cf4 <_strtod_l+0x84>
 801507e:	9a08      	ldr	r2, [sp, #32]
 8015080:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8015084:	4293      	cmp	r3, r2
 8015086:	db20      	blt.n	80150ca <_strtod_l+0x45a>
 8015088:	4c62      	ldr	r4, [pc, #392]	; (8015214 <_strtod_l+0x5a4>)
 801508a:	f1c5 050f 	rsb	r5, r5, #15
 801508e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8015092:	4652      	mov	r2, sl
 8015094:	465b      	mov	r3, fp
 8015096:	e9d1 0100 	ldrd	r0, r1, [r1]
 801509a:	f7eb febd 	bl	8000e18 <__aeabi_dmul>
 801509e:	9b08      	ldr	r3, [sp, #32]
 80150a0:	1b5d      	subs	r5, r3, r5
 80150a2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80150a6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80150aa:	e7e3      	b.n	8015074 <_strtod_l+0x404>
 80150ac:	9b08      	ldr	r3, [sp, #32]
 80150ae:	3316      	adds	r3, #22
 80150b0:	db0b      	blt.n	80150ca <_strtod_l+0x45a>
 80150b2:	9b07      	ldr	r3, [sp, #28]
 80150b4:	4a57      	ldr	r2, [pc, #348]	; (8015214 <_strtod_l+0x5a4>)
 80150b6:	1b9e      	subs	r6, r3, r6
 80150b8:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80150bc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80150c0:	4650      	mov	r0, sl
 80150c2:	4659      	mov	r1, fp
 80150c4:	f7eb ffd2 	bl	800106c <__aeabi_ddiv>
 80150c8:	e7d6      	b.n	8015078 <_strtod_l+0x408>
 80150ca:	9b08      	ldr	r3, [sp, #32]
 80150cc:	eba5 0808 	sub.w	r8, r5, r8
 80150d0:	4498      	add	r8, r3
 80150d2:	f1b8 0f00 	cmp.w	r8, #0
 80150d6:	dd71      	ble.n	80151bc <_strtod_l+0x54c>
 80150d8:	f018 030f 	ands.w	r3, r8, #15
 80150dc:	d00a      	beq.n	80150f4 <_strtod_l+0x484>
 80150de:	494d      	ldr	r1, [pc, #308]	; (8015214 <_strtod_l+0x5a4>)
 80150e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80150e4:	4652      	mov	r2, sl
 80150e6:	465b      	mov	r3, fp
 80150e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80150ec:	f7eb fe94 	bl	8000e18 <__aeabi_dmul>
 80150f0:	4682      	mov	sl, r0
 80150f2:	468b      	mov	fp, r1
 80150f4:	f038 080f 	bics.w	r8, r8, #15
 80150f8:	d04d      	beq.n	8015196 <_strtod_l+0x526>
 80150fa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80150fe:	dd22      	ble.n	8015146 <_strtod_l+0x4d6>
 8015100:	2500      	movs	r5, #0
 8015102:	462e      	mov	r6, r5
 8015104:	9509      	str	r5, [sp, #36]	; 0x24
 8015106:	9507      	str	r5, [sp, #28]
 8015108:	2322      	movs	r3, #34	; 0x22
 801510a:	f8df b110 	ldr.w	fp, [pc, #272]	; 801521c <_strtod_l+0x5ac>
 801510e:	6023      	str	r3, [r4, #0]
 8015110:	f04f 0a00 	mov.w	sl, #0
 8015114:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015116:	2b00      	cmp	r3, #0
 8015118:	f43f adec 	beq.w	8014cf4 <_strtod_l+0x84>
 801511c:	991e      	ldr	r1, [sp, #120]	; 0x78
 801511e:	4620      	mov	r0, r4
 8015120:	f002 f802 	bl	8017128 <_Bfree>
 8015124:	9907      	ldr	r1, [sp, #28]
 8015126:	4620      	mov	r0, r4
 8015128:	f001 fffe 	bl	8017128 <_Bfree>
 801512c:	4631      	mov	r1, r6
 801512e:	4620      	mov	r0, r4
 8015130:	f001 fffa 	bl	8017128 <_Bfree>
 8015134:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015136:	4620      	mov	r0, r4
 8015138:	f001 fff6 	bl	8017128 <_Bfree>
 801513c:	4629      	mov	r1, r5
 801513e:	4620      	mov	r0, r4
 8015140:	f001 fff2 	bl	8017128 <_Bfree>
 8015144:	e5d6      	b.n	8014cf4 <_strtod_l+0x84>
 8015146:	2300      	movs	r3, #0
 8015148:	ea4f 1828 	mov.w	r8, r8, asr #4
 801514c:	4650      	mov	r0, sl
 801514e:	4659      	mov	r1, fp
 8015150:	4699      	mov	r9, r3
 8015152:	f1b8 0f01 	cmp.w	r8, #1
 8015156:	dc21      	bgt.n	801519c <_strtod_l+0x52c>
 8015158:	b10b      	cbz	r3, 801515e <_strtod_l+0x4ee>
 801515a:	4682      	mov	sl, r0
 801515c:	468b      	mov	fp, r1
 801515e:	4b2e      	ldr	r3, [pc, #184]	; (8015218 <_strtod_l+0x5a8>)
 8015160:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8015164:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8015168:	4652      	mov	r2, sl
 801516a:	465b      	mov	r3, fp
 801516c:	e9d9 0100 	ldrd	r0, r1, [r9]
 8015170:	f7eb fe52 	bl	8000e18 <__aeabi_dmul>
 8015174:	4b29      	ldr	r3, [pc, #164]	; (801521c <_strtod_l+0x5ac>)
 8015176:	460a      	mov	r2, r1
 8015178:	400b      	ands	r3, r1
 801517a:	4929      	ldr	r1, [pc, #164]	; (8015220 <_strtod_l+0x5b0>)
 801517c:	428b      	cmp	r3, r1
 801517e:	4682      	mov	sl, r0
 8015180:	d8be      	bhi.n	8015100 <_strtod_l+0x490>
 8015182:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8015186:	428b      	cmp	r3, r1
 8015188:	bf86      	itte	hi
 801518a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8015224 <_strtod_l+0x5b4>
 801518e:	f04f 3aff 	movhi.w	sl, #4294967295
 8015192:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8015196:	2300      	movs	r3, #0
 8015198:	9304      	str	r3, [sp, #16]
 801519a:	e081      	b.n	80152a0 <_strtod_l+0x630>
 801519c:	f018 0f01 	tst.w	r8, #1
 80151a0:	d007      	beq.n	80151b2 <_strtod_l+0x542>
 80151a2:	4b1d      	ldr	r3, [pc, #116]	; (8015218 <_strtod_l+0x5a8>)
 80151a4:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80151a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151ac:	f7eb fe34 	bl	8000e18 <__aeabi_dmul>
 80151b0:	2301      	movs	r3, #1
 80151b2:	f109 0901 	add.w	r9, r9, #1
 80151b6:	ea4f 0868 	mov.w	r8, r8, asr #1
 80151ba:	e7ca      	b.n	8015152 <_strtod_l+0x4e2>
 80151bc:	d0eb      	beq.n	8015196 <_strtod_l+0x526>
 80151be:	f1c8 0800 	rsb	r8, r8, #0
 80151c2:	f018 020f 	ands.w	r2, r8, #15
 80151c6:	d00a      	beq.n	80151de <_strtod_l+0x56e>
 80151c8:	4b12      	ldr	r3, [pc, #72]	; (8015214 <_strtod_l+0x5a4>)
 80151ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80151ce:	4650      	mov	r0, sl
 80151d0:	4659      	mov	r1, fp
 80151d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151d6:	f7eb ff49 	bl	800106c <__aeabi_ddiv>
 80151da:	4682      	mov	sl, r0
 80151dc:	468b      	mov	fp, r1
 80151de:	ea5f 1828 	movs.w	r8, r8, asr #4
 80151e2:	d0d8      	beq.n	8015196 <_strtod_l+0x526>
 80151e4:	f1b8 0f1f 	cmp.w	r8, #31
 80151e8:	dd1e      	ble.n	8015228 <_strtod_l+0x5b8>
 80151ea:	2500      	movs	r5, #0
 80151ec:	462e      	mov	r6, r5
 80151ee:	9509      	str	r5, [sp, #36]	; 0x24
 80151f0:	9507      	str	r5, [sp, #28]
 80151f2:	2322      	movs	r3, #34	; 0x22
 80151f4:	f04f 0a00 	mov.w	sl, #0
 80151f8:	f04f 0b00 	mov.w	fp, #0
 80151fc:	6023      	str	r3, [r4, #0]
 80151fe:	e789      	b.n	8015114 <_strtod_l+0x4a4>
 8015200:	080193f1 	.word	0x080193f1
 8015204:	0801942c 	.word	0x0801942c
 8015208:	080193e9 	.word	0x080193e9
 801520c:	08019645 	.word	0x08019645
 8015210:	08019540 	.word	0x08019540
 8015214:	080197c8 	.word	0x080197c8
 8015218:	080197a0 	.word	0x080197a0
 801521c:	7ff00000 	.word	0x7ff00000
 8015220:	7ca00000 	.word	0x7ca00000
 8015224:	7fefffff 	.word	0x7fefffff
 8015228:	f018 0310 	ands.w	r3, r8, #16
 801522c:	bf18      	it	ne
 801522e:	236a      	movne	r3, #106	; 0x6a
 8015230:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 80155e8 <_strtod_l+0x978>
 8015234:	9304      	str	r3, [sp, #16]
 8015236:	4650      	mov	r0, sl
 8015238:	4659      	mov	r1, fp
 801523a:	2300      	movs	r3, #0
 801523c:	f018 0f01 	tst.w	r8, #1
 8015240:	d004      	beq.n	801524c <_strtod_l+0x5dc>
 8015242:	e9d9 2300 	ldrd	r2, r3, [r9]
 8015246:	f7eb fde7 	bl	8000e18 <__aeabi_dmul>
 801524a:	2301      	movs	r3, #1
 801524c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8015250:	f109 0908 	add.w	r9, r9, #8
 8015254:	d1f2      	bne.n	801523c <_strtod_l+0x5cc>
 8015256:	b10b      	cbz	r3, 801525c <_strtod_l+0x5ec>
 8015258:	4682      	mov	sl, r0
 801525a:	468b      	mov	fp, r1
 801525c:	9b04      	ldr	r3, [sp, #16]
 801525e:	b1bb      	cbz	r3, 8015290 <_strtod_l+0x620>
 8015260:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8015264:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8015268:	2b00      	cmp	r3, #0
 801526a:	4659      	mov	r1, fp
 801526c:	dd10      	ble.n	8015290 <_strtod_l+0x620>
 801526e:	2b1f      	cmp	r3, #31
 8015270:	f340 8128 	ble.w	80154c4 <_strtod_l+0x854>
 8015274:	2b34      	cmp	r3, #52	; 0x34
 8015276:	bfde      	ittt	le
 8015278:	3b20      	suble	r3, #32
 801527a:	f04f 32ff 	movle.w	r2, #4294967295
 801527e:	fa02 f303 	lslle.w	r3, r2, r3
 8015282:	f04f 0a00 	mov.w	sl, #0
 8015286:	bfcc      	ite	gt
 8015288:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801528c:	ea03 0b01 	andle.w	fp, r3, r1
 8015290:	2200      	movs	r2, #0
 8015292:	2300      	movs	r3, #0
 8015294:	4650      	mov	r0, sl
 8015296:	4659      	mov	r1, fp
 8015298:	f7ec f826 	bl	80012e8 <__aeabi_dcmpeq>
 801529c:	2800      	cmp	r0, #0
 801529e:	d1a4      	bne.n	80151ea <_strtod_l+0x57a>
 80152a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80152a2:	9300      	str	r3, [sp, #0]
 80152a4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80152a6:	462b      	mov	r3, r5
 80152a8:	463a      	mov	r2, r7
 80152aa:	4620      	mov	r0, r4
 80152ac:	f001 ffa8 	bl	8017200 <__s2b>
 80152b0:	9009      	str	r0, [sp, #36]	; 0x24
 80152b2:	2800      	cmp	r0, #0
 80152b4:	f43f af24 	beq.w	8015100 <_strtod_l+0x490>
 80152b8:	9b07      	ldr	r3, [sp, #28]
 80152ba:	1b9e      	subs	r6, r3, r6
 80152bc:	9b08      	ldr	r3, [sp, #32]
 80152be:	2b00      	cmp	r3, #0
 80152c0:	bfb4      	ite	lt
 80152c2:	4633      	movlt	r3, r6
 80152c4:	2300      	movge	r3, #0
 80152c6:	9310      	str	r3, [sp, #64]	; 0x40
 80152c8:	9b08      	ldr	r3, [sp, #32]
 80152ca:	2500      	movs	r5, #0
 80152cc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80152d0:	9318      	str	r3, [sp, #96]	; 0x60
 80152d2:	462e      	mov	r6, r5
 80152d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80152d6:	4620      	mov	r0, r4
 80152d8:	6859      	ldr	r1, [r3, #4]
 80152da:	f001 fee5 	bl	80170a8 <_Balloc>
 80152de:	9007      	str	r0, [sp, #28]
 80152e0:	2800      	cmp	r0, #0
 80152e2:	f43f af11 	beq.w	8015108 <_strtod_l+0x498>
 80152e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80152e8:	691a      	ldr	r2, [r3, #16]
 80152ea:	3202      	adds	r2, #2
 80152ec:	f103 010c 	add.w	r1, r3, #12
 80152f0:	0092      	lsls	r2, r2, #2
 80152f2:	300c      	adds	r0, #12
 80152f4:	f7fe fee4 	bl	80140c0 <memcpy>
 80152f8:	ec4b ab10 	vmov	d0, sl, fp
 80152fc:	aa20      	add	r2, sp, #128	; 0x80
 80152fe:	a91f      	add	r1, sp, #124	; 0x7c
 8015300:	4620      	mov	r0, r4
 8015302:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8015306:	f002 fab7 	bl	8017878 <__d2b>
 801530a:	901e      	str	r0, [sp, #120]	; 0x78
 801530c:	2800      	cmp	r0, #0
 801530e:	f43f aefb 	beq.w	8015108 <_strtod_l+0x498>
 8015312:	2101      	movs	r1, #1
 8015314:	4620      	mov	r0, r4
 8015316:	f002 f80d 	bl	8017334 <__i2b>
 801531a:	4606      	mov	r6, r0
 801531c:	2800      	cmp	r0, #0
 801531e:	f43f aef3 	beq.w	8015108 <_strtod_l+0x498>
 8015322:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8015324:	9904      	ldr	r1, [sp, #16]
 8015326:	2b00      	cmp	r3, #0
 8015328:	bfab      	itete	ge
 801532a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 801532c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 801532e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8015330:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8015334:	bfac      	ite	ge
 8015336:	eb03 0902 	addge.w	r9, r3, r2
 801533a:	1ad7      	sublt	r7, r2, r3
 801533c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801533e:	eba3 0801 	sub.w	r8, r3, r1
 8015342:	4490      	add	r8, r2
 8015344:	4ba3      	ldr	r3, [pc, #652]	; (80155d4 <_strtod_l+0x964>)
 8015346:	f108 38ff 	add.w	r8, r8, #4294967295
 801534a:	4598      	cmp	r8, r3
 801534c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8015350:	f280 80cc 	bge.w	80154ec <_strtod_l+0x87c>
 8015354:	eba3 0308 	sub.w	r3, r3, r8
 8015358:	2b1f      	cmp	r3, #31
 801535a:	eba2 0203 	sub.w	r2, r2, r3
 801535e:	f04f 0101 	mov.w	r1, #1
 8015362:	f300 80b6 	bgt.w	80154d2 <_strtod_l+0x862>
 8015366:	fa01 f303 	lsl.w	r3, r1, r3
 801536a:	9311      	str	r3, [sp, #68]	; 0x44
 801536c:	2300      	movs	r3, #0
 801536e:	930c      	str	r3, [sp, #48]	; 0x30
 8015370:	eb09 0802 	add.w	r8, r9, r2
 8015374:	9b04      	ldr	r3, [sp, #16]
 8015376:	45c1      	cmp	r9, r8
 8015378:	4417      	add	r7, r2
 801537a:	441f      	add	r7, r3
 801537c:	464b      	mov	r3, r9
 801537e:	bfa8      	it	ge
 8015380:	4643      	movge	r3, r8
 8015382:	42bb      	cmp	r3, r7
 8015384:	bfa8      	it	ge
 8015386:	463b      	movge	r3, r7
 8015388:	2b00      	cmp	r3, #0
 801538a:	bfc2      	ittt	gt
 801538c:	eba8 0803 	subgt.w	r8, r8, r3
 8015390:	1aff      	subgt	r7, r7, r3
 8015392:	eba9 0903 	subgt.w	r9, r9, r3
 8015396:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015398:	2b00      	cmp	r3, #0
 801539a:	dd17      	ble.n	80153cc <_strtod_l+0x75c>
 801539c:	4631      	mov	r1, r6
 801539e:	461a      	mov	r2, r3
 80153a0:	4620      	mov	r0, r4
 80153a2:	f002 f883 	bl	80174ac <__pow5mult>
 80153a6:	4606      	mov	r6, r0
 80153a8:	2800      	cmp	r0, #0
 80153aa:	f43f aead 	beq.w	8015108 <_strtod_l+0x498>
 80153ae:	4601      	mov	r1, r0
 80153b0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80153b2:	4620      	mov	r0, r4
 80153b4:	f001 ffd4 	bl	8017360 <__multiply>
 80153b8:	900f      	str	r0, [sp, #60]	; 0x3c
 80153ba:	2800      	cmp	r0, #0
 80153bc:	f43f aea4 	beq.w	8015108 <_strtod_l+0x498>
 80153c0:	991e      	ldr	r1, [sp, #120]	; 0x78
 80153c2:	4620      	mov	r0, r4
 80153c4:	f001 feb0 	bl	8017128 <_Bfree>
 80153c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80153ca:	931e      	str	r3, [sp, #120]	; 0x78
 80153cc:	f1b8 0f00 	cmp.w	r8, #0
 80153d0:	f300 8091 	bgt.w	80154f6 <_strtod_l+0x886>
 80153d4:	9b08      	ldr	r3, [sp, #32]
 80153d6:	2b00      	cmp	r3, #0
 80153d8:	dd08      	ble.n	80153ec <_strtod_l+0x77c>
 80153da:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80153dc:	9907      	ldr	r1, [sp, #28]
 80153de:	4620      	mov	r0, r4
 80153e0:	f002 f864 	bl	80174ac <__pow5mult>
 80153e4:	9007      	str	r0, [sp, #28]
 80153e6:	2800      	cmp	r0, #0
 80153e8:	f43f ae8e 	beq.w	8015108 <_strtod_l+0x498>
 80153ec:	2f00      	cmp	r7, #0
 80153ee:	dd08      	ble.n	8015402 <_strtod_l+0x792>
 80153f0:	9907      	ldr	r1, [sp, #28]
 80153f2:	463a      	mov	r2, r7
 80153f4:	4620      	mov	r0, r4
 80153f6:	f002 f8b3 	bl	8017560 <__lshift>
 80153fa:	9007      	str	r0, [sp, #28]
 80153fc:	2800      	cmp	r0, #0
 80153fe:	f43f ae83 	beq.w	8015108 <_strtod_l+0x498>
 8015402:	f1b9 0f00 	cmp.w	r9, #0
 8015406:	dd08      	ble.n	801541a <_strtod_l+0x7aa>
 8015408:	4631      	mov	r1, r6
 801540a:	464a      	mov	r2, r9
 801540c:	4620      	mov	r0, r4
 801540e:	f002 f8a7 	bl	8017560 <__lshift>
 8015412:	4606      	mov	r6, r0
 8015414:	2800      	cmp	r0, #0
 8015416:	f43f ae77 	beq.w	8015108 <_strtod_l+0x498>
 801541a:	9a07      	ldr	r2, [sp, #28]
 801541c:	991e      	ldr	r1, [sp, #120]	; 0x78
 801541e:	4620      	mov	r0, r4
 8015420:	f002 f926 	bl	8017670 <__mdiff>
 8015424:	4605      	mov	r5, r0
 8015426:	2800      	cmp	r0, #0
 8015428:	f43f ae6e 	beq.w	8015108 <_strtod_l+0x498>
 801542c:	68c3      	ldr	r3, [r0, #12]
 801542e:	930f      	str	r3, [sp, #60]	; 0x3c
 8015430:	2300      	movs	r3, #0
 8015432:	60c3      	str	r3, [r0, #12]
 8015434:	4631      	mov	r1, r6
 8015436:	f002 f8ff 	bl	8017638 <__mcmp>
 801543a:	2800      	cmp	r0, #0
 801543c:	da65      	bge.n	801550a <_strtod_l+0x89a>
 801543e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015440:	ea53 030a 	orrs.w	r3, r3, sl
 8015444:	f040 8087 	bne.w	8015556 <_strtod_l+0x8e6>
 8015448:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801544c:	2b00      	cmp	r3, #0
 801544e:	f040 8082 	bne.w	8015556 <_strtod_l+0x8e6>
 8015452:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8015456:	0d1b      	lsrs	r3, r3, #20
 8015458:	051b      	lsls	r3, r3, #20
 801545a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801545e:	d97a      	bls.n	8015556 <_strtod_l+0x8e6>
 8015460:	696b      	ldr	r3, [r5, #20]
 8015462:	b913      	cbnz	r3, 801546a <_strtod_l+0x7fa>
 8015464:	692b      	ldr	r3, [r5, #16]
 8015466:	2b01      	cmp	r3, #1
 8015468:	dd75      	ble.n	8015556 <_strtod_l+0x8e6>
 801546a:	4629      	mov	r1, r5
 801546c:	2201      	movs	r2, #1
 801546e:	4620      	mov	r0, r4
 8015470:	f002 f876 	bl	8017560 <__lshift>
 8015474:	4631      	mov	r1, r6
 8015476:	4605      	mov	r5, r0
 8015478:	f002 f8de 	bl	8017638 <__mcmp>
 801547c:	2800      	cmp	r0, #0
 801547e:	dd6a      	ble.n	8015556 <_strtod_l+0x8e6>
 8015480:	9904      	ldr	r1, [sp, #16]
 8015482:	4a55      	ldr	r2, [pc, #340]	; (80155d8 <_strtod_l+0x968>)
 8015484:	465b      	mov	r3, fp
 8015486:	2900      	cmp	r1, #0
 8015488:	f000 8085 	beq.w	8015596 <_strtod_l+0x926>
 801548c:	ea02 010b 	and.w	r1, r2, fp
 8015490:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8015494:	dc7f      	bgt.n	8015596 <_strtod_l+0x926>
 8015496:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801549a:	f77f aeaa 	ble.w	80151f2 <_strtod_l+0x582>
 801549e:	4a4f      	ldr	r2, [pc, #316]	; (80155dc <_strtod_l+0x96c>)
 80154a0:	2300      	movs	r3, #0
 80154a2:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 80154a6:	4650      	mov	r0, sl
 80154a8:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 80154ac:	4659      	mov	r1, fp
 80154ae:	f7eb fcb3 	bl	8000e18 <__aeabi_dmul>
 80154b2:	460b      	mov	r3, r1
 80154b4:	4303      	orrs	r3, r0
 80154b6:	bf08      	it	eq
 80154b8:	2322      	moveq	r3, #34	; 0x22
 80154ba:	4682      	mov	sl, r0
 80154bc:	468b      	mov	fp, r1
 80154be:	bf08      	it	eq
 80154c0:	6023      	streq	r3, [r4, #0]
 80154c2:	e62b      	b.n	801511c <_strtod_l+0x4ac>
 80154c4:	f04f 32ff 	mov.w	r2, #4294967295
 80154c8:	fa02 f303 	lsl.w	r3, r2, r3
 80154cc:	ea03 0a0a 	and.w	sl, r3, sl
 80154d0:	e6de      	b.n	8015290 <_strtod_l+0x620>
 80154d2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80154d6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80154da:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80154de:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80154e2:	fa01 f308 	lsl.w	r3, r1, r8
 80154e6:	930c      	str	r3, [sp, #48]	; 0x30
 80154e8:	9111      	str	r1, [sp, #68]	; 0x44
 80154ea:	e741      	b.n	8015370 <_strtod_l+0x700>
 80154ec:	2300      	movs	r3, #0
 80154ee:	930c      	str	r3, [sp, #48]	; 0x30
 80154f0:	2301      	movs	r3, #1
 80154f2:	9311      	str	r3, [sp, #68]	; 0x44
 80154f4:	e73c      	b.n	8015370 <_strtod_l+0x700>
 80154f6:	991e      	ldr	r1, [sp, #120]	; 0x78
 80154f8:	4642      	mov	r2, r8
 80154fa:	4620      	mov	r0, r4
 80154fc:	f002 f830 	bl	8017560 <__lshift>
 8015500:	901e      	str	r0, [sp, #120]	; 0x78
 8015502:	2800      	cmp	r0, #0
 8015504:	f47f af66 	bne.w	80153d4 <_strtod_l+0x764>
 8015508:	e5fe      	b.n	8015108 <_strtod_l+0x498>
 801550a:	465f      	mov	r7, fp
 801550c:	d16e      	bne.n	80155ec <_strtod_l+0x97c>
 801550e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015510:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015514:	b342      	cbz	r2, 8015568 <_strtod_l+0x8f8>
 8015516:	4a32      	ldr	r2, [pc, #200]	; (80155e0 <_strtod_l+0x970>)
 8015518:	4293      	cmp	r3, r2
 801551a:	d128      	bne.n	801556e <_strtod_l+0x8fe>
 801551c:	9b04      	ldr	r3, [sp, #16]
 801551e:	4650      	mov	r0, sl
 8015520:	b1eb      	cbz	r3, 801555e <_strtod_l+0x8ee>
 8015522:	4a2d      	ldr	r2, [pc, #180]	; (80155d8 <_strtod_l+0x968>)
 8015524:	403a      	ands	r2, r7
 8015526:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801552a:	f04f 31ff 	mov.w	r1, #4294967295
 801552e:	d819      	bhi.n	8015564 <_strtod_l+0x8f4>
 8015530:	0d12      	lsrs	r2, r2, #20
 8015532:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8015536:	fa01 f303 	lsl.w	r3, r1, r3
 801553a:	4298      	cmp	r0, r3
 801553c:	d117      	bne.n	801556e <_strtod_l+0x8fe>
 801553e:	4b29      	ldr	r3, [pc, #164]	; (80155e4 <_strtod_l+0x974>)
 8015540:	429f      	cmp	r7, r3
 8015542:	d102      	bne.n	801554a <_strtod_l+0x8da>
 8015544:	3001      	adds	r0, #1
 8015546:	f43f addf 	beq.w	8015108 <_strtod_l+0x498>
 801554a:	4b23      	ldr	r3, [pc, #140]	; (80155d8 <_strtod_l+0x968>)
 801554c:	403b      	ands	r3, r7
 801554e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8015552:	f04f 0a00 	mov.w	sl, #0
 8015556:	9b04      	ldr	r3, [sp, #16]
 8015558:	2b00      	cmp	r3, #0
 801555a:	d1a0      	bne.n	801549e <_strtod_l+0x82e>
 801555c:	e5de      	b.n	801511c <_strtod_l+0x4ac>
 801555e:	f04f 33ff 	mov.w	r3, #4294967295
 8015562:	e7ea      	b.n	801553a <_strtod_l+0x8ca>
 8015564:	460b      	mov	r3, r1
 8015566:	e7e8      	b.n	801553a <_strtod_l+0x8ca>
 8015568:	ea53 030a 	orrs.w	r3, r3, sl
 801556c:	d088      	beq.n	8015480 <_strtod_l+0x810>
 801556e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015570:	b1db      	cbz	r3, 80155aa <_strtod_l+0x93a>
 8015572:	423b      	tst	r3, r7
 8015574:	d0ef      	beq.n	8015556 <_strtod_l+0x8e6>
 8015576:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015578:	9a04      	ldr	r2, [sp, #16]
 801557a:	4650      	mov	r0, sl
 801557c:	4659      	mov	r1, fp
 801557e:	b1c3      	cbz	r3, 80155b2 <_strtod_l+0x942>
 8015580:	f7ff fb58 	bl	8014c34 <sulp>
 8015584:	4602      	mov	r2, r0
 8015586:	460b      	mov	r3, r1
 8015588:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801558c:	f7eb fa8e 	bl	8000aac <__adddf3>
 8015590:	4682      	mov	sl, r0
 8015592:	468b      	mov	fp, r1
 8015594:	e7df      	b.n	8015556 <_strtod_l+0x8e6>
 8015596:	4013      	ands	r3, r2
 8015598:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801559c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80155a0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80155a4:	f04f 3aff 	mov.w	sl, #4294967295
 80155a8:	e7d5      	b.n	8015556 <_strtod_l+0x8e6>
 80155aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80155ac:	ea13 0f0a 	tst.w	r3, sl
 80155b0:	e7e0      	b.n	8015574 <_strtod_l+0x904>
 80155b2:	f7ff fb3f 	bl	8014c34 <sulp>
 80155b6:	4602      	mov	r2, r0
 80155b8:	460b      	mov	r3, r1
 80155ba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80155be:	f7eb fa73 	bl	8000aa8 <__aeabi_dsub>
 80155c2:	2200      	movs	r2, #0
 80155c4:	2300      	movs	r3, #0
 80155c6:	4682      	mov	sl, r0
 80155c8:	468b      	mov	fp, r1
 80155ca:	f7eb fe8d 	bl	80012e8 <__aeabi_dcmpeq>
 80155ce:	2800      	cmp	r0, #0
 80155d0:	d0c1      	beq.n	8015556 <_strtod_l+0x8e6>
 80155d2:	e60e      	b.n	80151f2 <_strtod_l+0x582>
 80155d4:	fffffc02 	.word	0xfffffc02
 80155d8:	7ff00000 	.word	0x7ff00000
 80155dc:	39500000 	.word	0x39500000
 80155e0:	000fffff 	.word	0x000fffff
 80155e4:	7fefffff 	.word	0x7fefffff
 80155e8:	08019440 	.word	0x08019440
 80155ec:	4631      	mov	r1, r6
 80155ee:	4628      	mov	r0, r5
 80155f0:	f002 f99e 	bl	8017930 <__ratio>
 80155f4:	ec59 8b10 	vmov	r8, r9, d0
 80155f8:	ee10 0a10 	vmov	r0, s0
 80155fc:	2200      	movs	r2, #0
 80155fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8015602:	4649      	mov	r1, r9
 8015604:	f7eb fe84 	bl	8001310 <__aeabi_dcmple>
 8015608:	2800      	cmp	r0, #0
 801560a:	d07c      	beq.n	8015706 <_strtod_l+0xa96>
 801560c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801560e:	2b00      	cmp	r3, #0
 8015610:	d04c      	beq.n	80156ac <_strtod_l+0xa3c>
 8015612:	4b95      	ldr	r3, [pc, #596]	; (8015868 <_strtod_l+0xbf8>)
 8015614:	2200      	movs	r2, #0
 8015616:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801561a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8015868 <_strtod_l+0xbf8>
 801561e:	f04f 0800 	mov.w	r8, #0
 8015622:	4b92      	ldr	r3, [pc, #584]	; (801586c <_strtod_l+0xbfc>)
 8015624:	403b      	ands	r3, r7
 8015626:	9311      	str	r3, [sp, #68]	; 0x44
 8015628:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801562a:	4b91      	ldr	r3, [pc, #580]	; (8015870 <_strtod_l+0xc00>)
 801562c:	429a      	cmp	r2, r3
 801562e:	f040 80b2 	bne.w	8015796 <_strtod_l+0xb26>
 8015632:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8015636:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801563a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801563e:	ec4b ab10 	vmov	d0, sl, fp
 8015642:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8015646:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801564a:	f002 f899 	bl	8017780 <__ulp>
 801564e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8015652:	ec53 2b10 	vmov	r2, r3, d0
 8015656:	f7eb fbdf 	bl	8000e18 <__aeabi_dmul>
 801565a:	4652      	mov	r2, sl
 801565c:	465b      	mov	r3, fp
 801565e:	f7eb fa25 	bl	8000aac <__adddf3>
 8015662:	460b      	mov	r3, r1
 8015664:	4981      	ldr	r1, [pc, #516]	; (801586c <_strtod_l+0xbfc>)
 8015666:	4a83      	ldr	r2, [pc, #524]	; (8015874 <_strtod_l+0xc04>)
 8015668:	4019      	ands	r1, r3
 801566a:	4291      	cmp	r1, r2
 801566c:	4682      	mov	sl, r0
 801566e:	d95e      	bls.n	801572e <_strtod_l+0xabe>
 8015670:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015672:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8015676:	4293      	cmp	r3, r2
 8015678:	d103      	bne.n	8015682 <_strtod_l+0xa12>
 801567a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801567c:	3301      	adds	r3, #1
 801567e:	f43f ad43 	beq.w	8015108 <_strtod_l+0x498>
 8015682:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8015880 <_strtod_l+0xc10>
 8015686:	f04f 3aff 	mov.w	sl, #4294967295
 801568a:	991e      	ldr	r1, [sp, #120]	; 0x78
 801568c:	4620      	mov	r0, r4
 801568e:	f001 fd4b 	bl	8017128 <_Bfree>
 8015692:	9907      	ldr	r1, [sp, #28]
 8015694:	4620      	mov	r0, r4
 8015696:	f001 fd47 	bl	8017128 <_Bfree>
 801569a:	4631      	mov	r1, r6
 801569c:	4620      	mov	r0, r4
 801569e:	f001 fd43 	bl	8017128 <_Bfree>
 80156a2:	4629      	mov	r1, r5
 80156a4:	4620      	mov	r0, r4
 80156a6:	f001 fd3f 	bl	8017128 <_Bfree>
 80156aa:	e613      	b.n	80152d4 <_strtod_l+0x664>
 80156ac:	f1ba 0f00 	cmp.w	sl, #0
 80156b0:	d11b      	bne.n	80156ea <_strtod_l+0xa7a>
 80156b2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80156b6:	b9f3      	cbnz	r3, 80156f6 <_strtod_l+0xa86>
 80156b8:	4b6b      	ldr	r3, [pc, #428]	; (8015868 <_strtod_l+0xbf8>)
 80156ba:	2200      	movs	r2, #0
 80156bc:	4640      	mov	r0, r8
 80156be:	4649      	mov	r1, r9
 80156c0:	f7eb fe1c 	bl	80012fc <__aeabi_dcmplt>
 80156c4:	b9d0      	cbnz	r0, 80156fc <_strtod_l+0xa8c>
 80156c6:	4640      	mov	r0, r8
 80156c8:	4649      	mov	r1, r9
 80156ca:	4b6b      	ldr	r3, [pc, #428]	; (8015878 <_strtod_l+0xc08>)
 80156cc:	2200      	movs	r2, #0
 80156ce:	f7eb fba3 	bl	8000e18 <__aeabi_dmul>
 80156d2:	4680      	mov	r8, r0
 80156d4:	4689      	mov	r9, r1
 80156d6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80156da:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 80156de:	931b      	str	r3, [sp, #108]	; 0x6c
 80156e0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 80156e4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80156e8:	e79b      	b.n	8015622 <_strtod_l+0x9b2>
 80156ea:	f1ba 0f01 	cmp.w	sl, #1
 80156ee:	d102      	bne.n	80156f6 <_strtod_l+0xa86>
 80156f0:	2f00      	cmp	r7, #0
 80156f2:	f43f ad7e 	beq.w	80151f2 <_strtod_l+0x582>
 80156f6:	4b61      	ldr	r3, [pc, #388]	; (801587c <_strtod_l+0xc0c>)
 80156f8:	2200      	movs	r2, #0
 80156fa:	e78c      	b.n	8015616 <_strtod_l+0x9a6>
 80156fc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8015878 <_strtod_l+0xc08>
 8015700:	f04f 0800 	mov.w	r8, #0
 8015704:	e7e7      	b.n	80156d6 <_strtod_l+0xa66>
 8015706:	4b5c      	ldr	r3, [pc, #368]	; (8015878 <_strtod_l+0xc08>)
 8015708:	4640      	mov	r0, r8
 801570a:	4649      	mov	r1, r9
 801570c:	2200      	movs	r2, #0
 801570e:	f7eb fb83 	bl	8000e18 <__aeabi_dmul>
 8015712:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015714:	4680      	mov	r8, r0
 8015716:	4689      	mov	r9, r1
 8015718:	b933      	cbnz	r3, 8015728 <_strtod_l+0xab8>
 801571a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801571e:	9012      	str	r0, [sp, #72]	; 0x48
 8015720:	9313      	str	r3, [sp, #76]	; 0x4c
 8015722:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8015726:	e7dd      	b.n	80156e4 <_strtod_l+0xa74>
 8015728:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 801572c:	e7f9      	b.n	8015722 <_strtod_l+0xab2>
 801572e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8015732:	9b04      	ldr	r3, [sp, #16]
 8015734:	2b00      	cmp	r3, #0
 8015736:	d1a8      	bne.n	801568a <_strtod_l+0xa1a>
 8015738:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801573c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801573e:	0d1b      	lsrs	r3, r3, #20
 8015740:	051b      	lsls	r3, r3, #20
 8015742:	429a      	cmp	r2, r3
 8015744:	d1a1      	bne.n	801568a <_strtod_l+0xa1a>
 8015746:	4640      	mov	r0, r8
 8015748:	4649      	mov	r1, r9
 801574a:	f7eb fec5 	bl	80014d8 <__aeabi_d2lz>
 801574e:	f7eb fb35 	bl	8000dbc <__aeabi_l2d>
 8015752:	4602      	mov	r2, r0
 8015754:	460b      	mov	r3, r1
 8015756:	4640      	mov	r0, r8
 8015758:	4649      	mov	r1, r9
 801575a:	f7eb f9a5 	bl	8000aa8 <__aeabi_dsub>
 801575e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015760:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015764:	ea43 030a 	orr.w	r3, r3, sl
 8015768:	4313      	orrs	r3, r2
 801576a:	4680      	mov	r8, r0
 801576c:	4689      	mov	r9, r1
 801576e:	d053      	beq.n	8015818 <_strtod_l+0xba8>
 8015770:	a335      	add	r3, pc, #212	; (adr r3, 8015848 <_strtod_l+0xbd8>)
 8015772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015776:	f7eb fdc1 	bl	80012fc <__aeabi_dcmplt>
 801577a:	2800      	cmp	r0, #0
 801577c:	f47f acce 	bne.w	801511c <_strtod_l+0x4ac>
 8015780:	a333      	add	r3, pc, #204	; (adr r3, 8015850 <_strtod_l+0xbe0>)
 8015782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015786:	4640      	mov	r0, r8
 8015788:	4649      	mov	r1, r9
 801578a:	f7eb fdd5 	bl	8001338 <__aeabi_dcmpgt>
 801578e:	2800      	cmp	r0, #0
 8015790:	f43f af7b 	beq.w	801568a <_strtod_l+0xa1a>
 8015794:	e4c2      	b.n	801511c <_strtod_l+0x4ac>
 8015796:	9b04      	ldr	r3, [sp, #16]
 8015798:	b333      	cbz	r3, 80157e8 <_strtod_l+0xb78>
 801579a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801579c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80157a0:	d822      	bhi.n	80157e8 <_strtod_l+0xb78>
 80157a2:	a32d      	add	r3, pc, #180	; (adr r3, 8015858 <_strtod_l+0xbe8>)
 80157a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157a8:	4640      	mov	r0, r8
 80157aa:	4649      	mov	r1, r9
 80157ac:	f7eb fdb0 	bl	8001310 <__aeabi_dcmple>
 80157b0:	b1a0      	cbz	r0, 80157dc <_strtod_l+0xb6c>
 80157b2:	4649      	mov	r1, r9
 80157b4:	4640      	mov	r0, r8
 80157b6:	f7eb fe07 	bl	80013c8 <__aeabi_d2uiz>
 80157ba:	2801      	cmp	r0, #1
 80157bc:	bf38      	it	cc
 80157be:	2001      	movcc	r0, #1
 80157c0:	f7eb fab0 	bl	8000d24 <__aeabi_ui2d>
 80157c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80157c6:	4680      	mov	r8, r0
 80157c8:	4689      	mov	r9, r1
 80157ca:	bb13      	cbnz	r3, 8015812 <_strtod_l+0xba2>
 80157cc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80157d0:	9014      	str	r0, [sp, #80]	; 0x50
 80157d2:	9315      	str	r3, [sp, #84]	; 0x54
 80157d4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80157d8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80157dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80157de:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80157e0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80157e4:	1a9b      	subs	r3, r3, r2
 80157e6:	930d      	str	r3, [sp, #52]	; 0x34
 80157e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80157ec:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80157f0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80157f4:	f001 ffc4 	bl	8017780 <__ulp>
 80157f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80157fc:	ec53 2b10 	vmov	r2, r3, d0
 8015800:	f7eb fb0a 	bl	8000e18 <__aeabi_dmul>
 8015804:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8015808:	f7eb f950 	bl	8000aac <__adddf3>
 801580c:	4682      	mov	sl, r0
 801580e:	468b      	mov	fp, r1
 8015810:	e78f      	b.n	8015732 <_strtod_l+0xac2>
 8015812:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8015816:	e7dd      	b.n	80157d4 <_strtod_l+0xb64>
 8015818:	a311      	add	r3, pc, #68	; (adr r3, 8015860 <_strtod_l+0xbf0>)
 801581a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801581e:	f7eb fd6d 	bl	80012fc <__aeabi_dcmplt>
 8015822:	e7b4      	b.n	801578e <_strtod_l+0xb1e>
 8015824:	2300      	movs	r3, #0
 8015826:	930e      	str	r3, [sp, #56]	; 0x38
 8015828:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801582a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801582c:	6013      	str	r3, [r2, #0]
 801582e:	f7ff ba65 	b.w	8014cfc <_strtod_l+0x8c>
 8015832:	2b65      	cmp	r3, #101	; 0x65
 8015834:	f43f ab5d 	beq.w	8014ef2 <_strtod_l+0x282>
 8015838:	2b45      	cmp	r3, #69	; 0x45
 801583a:	f43f ab5a 	beq.w	8014ef2 <_strtod_l+0x282>
 801583e:	2201      	movs	r2, #1
 8015840:	f7ff bb92 	b.w	8014f68 <_strtod_l+0x2f8>
 8015844:	f3af 8000 	nop.w
 8015848:	94a03595 	.word	0x94a03595
 801584c:	3fdfffff 	.word	0x3fdfffff
 8015850:	35afe535 	.word	0x35afe535
 8015854:	3fe00000 	.word	0x3fe00000
 8015858:	ffc00000 	.word	0xffc00000
 801585c:	41dfffff 	.word	0x41dfffff
 8015860:	94a03595 	.word	0x94a03595
 8015864:	3fcfffff 	.word	0x3fcfffff
 8015868:	3ff00000 	.word	0x3ff00000
 801586c:	7ff00000 	.word	0x7ff00000
 8015870:	7fe00000 	.word	0x7fe00000
 8015874:	7c9fffff 	.word	0x7c9fffff
 8015878:	3fe00000 	.word	0x3fe00000
 801587c:	bff00000 	.word	0xbff00000
 8015880:	7fefffff 	.word	0x7fefffff

08015884 <strtod>:
 8015884:	460a      	mov	r2, r1
 8015886:	4601      	mov	r1, r0
 8015888:	4802      	ldr	r0, [pc, #8]	; (8015894 <strtod+0x10>)
 801588a:	4b03      	ldr	r3, [pc, #12]	; (8015898 <strtod+0x14>)
 801588c:	6800      	ldr	r0, [r0, #0]
 801588e:	f7ff b9ef 	b.w	8014c70 <_strtod_l>
 8015892:	bf00      	nop
 8015894:	20001504 	.word	0x20001504
 8015898:	2000156c 	.word	0x2000156c

0801589c <strtok>:
 801589c:	4b16      	ldr	r3, [pc, #88]	; (80158f8 <strtok+0x5c>)
 801589e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80158a0:	681e      	ldr	r6, [r3, #0]
 80158a2:	6db4      	ldr	r4, [r6, #88]	; 0x58
 80158a4:	4605      	mov	r5, r0
 80158a6:	b9fc      	cbnz	r4, 80158e8 <strtok+0x4c>
 80158a8:	2050      	movs	r0, #80	; 0x50
 80158aa:	9101      	str	r1, [sp, #4]
 80158ac:	f7fe fbf8 	bl	80140a0 <malloc>
 80158b0:	9901      	ldr	r1, [sp, #4]
 80158b2:	65b0      	str	r0, [r6, #88]	; 0x58
 80158b4:	4602      	mov	r2, r0
 80158b6:	b920      	cbnz	r0, 80158c2 <strtok+0x26>
 80158b8:	4b10      	ldr	r3, [pc, #64]	; (80158fc <strtok+0x60>)
 80158ba:	4811      	ldr	r0, [pc, #68]	; (8015900 <strtok+0x64>)
 80158bc:	2157      	movs	r1, #87	; 0x57
 80158be:	f000 f9b9 	bl	8015c34 <__assert_func>
 80158c2:	e9c0 4400 	strd	r4, r4, [r0]
 80158c6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80158ca:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80158ce:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80158d2:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80158d6:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80158da:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80158de:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80158e2:	6184      	str	r4, [r0, #24]
 80158e4:	7704      	strb	r4, [r0, #28]
 80158e6:	6244      	str	r4, [r0, #36]	; 0x24
 80158e8:	6db2      	ldr	r2, [r6, #88]	; 0x58
 80158ea:	2301      	movs	r3, #1
 80158ec:	4628      	mov	r0, r5
 80158ee:	b002      	add	sp, #8
 80158f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80158f4:	f000 b806 	b.w	8015904 <__strtok_r>
 80158f8:	20001504 	.word	0x20001504
 80158fc:	08019468 	.word	0x08019468
 8015900:	0801947f 	.word	0x0801947f

08015904 <__strtok_r>:
 8015904:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015906:	b908      	cbnz	r0, 801590c <__strtok_r+0x8>
 8015908:	6810      	ldr	r0, [r2, #0]
 801590a:	b188      	cbz	r0, 8015930 <__strtok_r+0x2c>
 801590c:	4604      	mov	r4, r0
 801590e:	4620      	mov	r0, r4
 8015910:	f814 5b01 	ldrb.w	r5, [r4], #1
 8015914:	460f      	mov	r7, r1
 8015916:	f817 6b01 	ldrb.w	r6, [r7], #1
 801591a:	b91e      	cbnz	r6, 8015924 <__strtok_r+0x20>
 801591c:	b965      	cbnz	r5, 8015938 <__strtok_r+0x34>
 801591e:	6015      	str	r5, [r2, #0]
 8015920:	4628      	mov	r0, r5
 8015922:	e005      	b.n	8015930 <__strtok_r+0x2c>
 8015924:	42b5      	cmp	r5, r6
 8015926:	d1f6      	bne.n	8015916 <__strtok_r+0x12>
 8015928:	2b00      	cmp	r3, #0
 801592a:	d1f0      	bne.n	801590e <__strtok_r+0xa>
 801592c:	6014      	str	r4, [r2, #0]
 801592e:	7003      	strb	r3, [r0, #0]
 8015930:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015932:	461c      	mov	r4, r3
 8015934:	e00c      	b.n	8015950 <__strtok_r+0x4c>
 8015936:	b915      	cbnz	r5, 801593e <__strtok_r+0x3a>
 8015938:	f814 3b01 	ldrb.w	r3, [r4], #1
 801593c:	460e      	mov	r6, r1
 801593e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8015942:	42ab      	cmp	r3, r5
 8015944:	d1f7      	bne.n	8015936 <__strtok_r+0x32>
 8015946:	2b00      	cmp	r3, #0
 8015948:	d0f3      	beq.n	8015932 <__strtok_r+0x2e>
 801594a:	2300      	movs	r3, #0
 801594c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8015950:	6014      	str	r4, [r2, #0]
 8015952:	e7ed      	b.n	8015930 <__strtok_r+0x2c>

08015954 <_strtol_l.isra.0>:
 8015954:	2b01      	cmp	r3, #1
 8015956:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801595a:	d001      	beq.n	8015960 <_strtol_l.isra.0+0xc>
 801595c:	2b24      	cmp	r3, #36	; 0x24
 801595e:	d906      	bls.n	801596e <_strtol_l.isra.0+0x1a>
 8015960:	f7fe fb5a 	bl	8014018 <__errno>
 8015964:	2316      	movs	r3, #22
 8015966:	6003      	str	r3, [r0, #0]
 8015968:	2000      	movs	r0, #0
 801596a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801596e:	4f3a      	ldr	r7, [pc, #232]	; (8015a58 <_strtol_l.isra.0+0x104>)
 8015970:	468e      	mov	lr, r1
 8015972:	4676      	mov	r6, lr
 8015974:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8015978:	5de5      	ldrb	r5, [r4, r7]
 801597a:	f015 0508 	ands.w	r5, r5, #8
 801597e:	d1f8      	bne.n	8015972 <_strtol_l.isra.0+0x1e>
 8015980:	2c2d      	cmp	r4, #45	; 0x2d
 8015982:	d134      	bne.n	80159ee <_strtol_l.isra.0+0x9a>
 8015984:	f89e 4000 	ldrb.w	r4, [lr]
 8015988:	f04f 0801 	mov.w	r8, #1
 801598c:	f106 0e02 	add.w	lr, r6, #2
 8015990:	2b00      	cmp	r3, #0
 8015992:	d05c      	beq.n	8015a4e <_strtol_l.isra.0+0xfa>
 8015994:	2b10      	cmp	r3, #16
 8015996:	d10c      	bne.n	80159b2 <_strtol_l.isra.0+0x5e>
 8015998:	2c30      	cmp	r4, #48	; 0x30
 801599a:	d10a      	bne.n	80159b2 <_strtol_l.isra.0+0x5e>
 801599c:	f89e 4000 	ldrb.w	r4, [lr]
 80159a0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80159a4:	2c58      	cmp	r4, #88	; 0x58
 80159a6:	d14d      	bne.n	8015a44 <_strtol_l.isra.0+0xf0>
 80159a8:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80159ac:	2310      	movs	r3, #16
 80159ae:	f10e 0e02 	add.w	lr, lr, #2
 80159b2:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80159b6:	f10c 3cff 	add.w	ip, ip, #4294967295
 80159ba:	2600      	movs	r6, #0
 80159bc:	fbbc f9f3 	udiv	r9, ip, r3
 80159c0:	4635      	mov	r5, r6
 80159c2:	fb03 ca19 	mls	sl, r3, r9, ip
 80159c6:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80159ca:	2f09      	cmp	r7, #9
 80159cc:	d818      	bhi.n	8015a00 <_strtol_l.isra.0+0xac>
 80159ce:	463c      	mov	r4, r7
 80159d0:	42a3      	cmp	r3, r4
 80159d2:	dd24      	ble.n	8015a1e <_strtol_l.isra.0+0xca>
 80159d4:	2e00      	cmp	r6, #0
 80159d6:	db1f      	blt.n	8015a18 <_strtol_l.isra.0+0xc4>
 80159d8:	45a9      	cmp	r9, r5
 80159da:	d31d      	bcc.n	8015a18 <_strtol_l.isra.0+0xc4>
 80159dc:	d101      	bne.n	80159e2 <_strtol_l.isra.0+0x8e>
 80159de:	45a2      	cmp	sl, r4
 80159e0:	db1a      	blt.n	8015a18 <_strtol_l.isra.0+0xc4>
 80159e2:	fb05 4503 	mla	r5, r5, r3, r4
 80159e6:	2601      	movs	r6, #1
 80159e8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80159ec:	e7eb      	b.n	80159c6 <_strtol_l.isra.0+0x72>
 80159ee:	2c2b      	cmp	r4, #43	; 0x2b
 80159f0:	bf08      	it	eq
 80159f2:	f89e 4000 	ldrbeq.w	r4, [lr]
 80159f6:	46a8      	mov	r8, r5
 80159f8:	bf08      	it	eq
 80159fa:	f106 0e02 	addeq.w	lr, r6, #2
 80159fe:	e7c7      	b.n	8015990 <_strtol_l.isra.0+0x3c>
 8015a00:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8015a04:	2f19      	cmp	r7, #25
 8015a06:	d801      	bhi.n	8015a0c <_strtol_l.isra.0+0xb8>
 8015a08:	3c37      	subs	r4, #55	; 0x37
 8015a0a:	e7e1      	b.n	80159d0 <_strtol_l.isra.0+0x7c>
 8015a0c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8015a10:	2f19      	cmp	r7, #25
 8015a12:	d804      	bhi.n	8015a1e <_strtol_l.isra.0+0xca>
 8015a14:	3c57      	subs	r4, #87	; 0x57
 8015a16:	e7db      	b.n	80159d0 <_strtol_l.isra.0+0x7c>
 8015a18:	f04f 36ff 	mov.w	r6, #4294967295
 8015a1c:	e7e4      	b.n	80159e8 <_strtol_l.isra.0+0x94>
 8015a1e:	2e00      	cmp	r6, #0
 8015a20:	da05      	bge.n	8015a2e <_strtol_l.isra.0+0xda>
 8015a22:	2322      	movs	r3, #34	; 0x22
 8015a24:	6003      	str	r3, [r0, #0]
 8015a26:	4665      	mov	r5, ip
 8015a28:	b942      	cbnz	r2, 8015a3c <_strtol_l.isra.0+0xe8>
 8015a2a:	4628      	mov	r0, r5
 8015a2c:	e79d      	b.n	801596a <_strtol_l.isra.0+0x16>
 8015a2e:	f1b8 0f00 	cmp.w	r8, #0
 8015a32:	d000      	beq.n	8015a36 <_strtol_l.isra.0+0xe2>
 8015a34:	426d      	negs	r5, r5
 8015a36:	2a00      	cmp	r2, #0
 8015a38:	d0f7      	beq.n	8015a2a <_strtol_l.isra.0+0xd6>
 8015a3a:	b10e      	cbz	r6, 8015a40 <_strtol_l.isra.0+0xec>
 8015a3c:	f10e 31ff 	add.w	r1, lr, #4294967295
 8015a40:	6011      	str	r1, [r2, #0]
 8015a42:	e7f2      	b.n	8015a2a <_strtol_l.isra.0+0xd6>
 8015a44:	2430      	movs	r4, #48	; 0x30
 8015a46:	2b00      	cmp	r3, #0
 8015a48:	d1b3      	bne.n	80159b2 <_strtol_l.isra.0+0x5e>
 8015a4a:	2308      	movs	r3, #8
 8015a4c:	e7b1      	b.n	80159b2 <_strtol_l.isra.0+0x5e>
 8015a4e:	2c30      	cmp	r4, #48	; 0x30
 8015a50:	d0a4      	beq.n	801599c <_strtol_l.isra.0+0x48>
 8015a52:	230a      	movs	r3, #10
 8015a54:	e7ad      	b.n	80159b2 <_strtol_l.isra.0+0x5e>
 8015a56:	bf00      	nop
 8015a58:	08019542 	.word	0x08019542

08015a5c <strtol>:
 8015a5c:	4613      	mov	r3, r2
 8015a5e:	460a      	mov	r2, r1
 8015a60:	4601      	mov	r1, r0
 8015a62:	4802      	ldr	r0, [pc, #8]	; (8015a6c <strtol+0x10>)
 8015a64:	6800      	ldr	r0, [r0, #0]
 8015a66:	f7ff bf75 	b.w	8015954 <_strtol_l.isra.0>
 8015a6a:	bf00      	nop
 8015a6c:	20001504 	.word	0x20001504

08015a70 <_strtoll_l.isra.0>:
 8015a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a74:	b087      	sub	sp, #28
 8015a76:	4691      	mov	r9, r2
 8015a78:	4a47      	ldr	r2, [pc, #284]	; (8015b98 <_strtoll_l.isra.0+0x128>)
 8015a7a:	9005      	str	r0, [sp, #20]
 8015a7c:	4688      	mov	r8, r1
 8015a7e:	461f      	mov	r7, r3
 8015a80:	460d      	mov	r5, r1
 8015a82:	462b      	mov	r3, r5
 8015a84:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015a88:	5ca6      	ldrb	r6, [r4, r2]
 8015a8a:	f016 0608 	ands.w	r6, r6, #8
 8015a8e:	d1f8      	bne.n	8015a82 <_strtoll_l.isra.0+0x12>
 8015a90:	2c2d      	cmp	r4, #45	; 0x2d
 8015a92:	d147      	bne.n	8015b24 <_strtoll_l.isra.0+0xb4>
 8015a94:	782c      	ldrb	r4, [r5, #0]
 8015a96:	2601      	movs	r6, #1
 8015a98:	1c9d      	adds	r5, r3, #2
 8015a9a:	2f00      	cmp	r7, #0
 8015a9c:	d077      	beq.n	8015b8e <_strtoll_l.isra.0+0x11e>
 8015a9e:	2f10      	cmp	r7, #16
 8015aa0:	d109      	bne.n	8015ab6 <_strtoll_l.isra.0+0x46>
 8015aa2:	2c30      	cmp	r4, #48	; 0x30
 8015aa4:	d107      	bne.n	8015ab6 <_strtoll_l.isra.0+0x46>
 8015aa6:	782b      	ldrb	r3, [r5, #0]
 8015aa8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8015aac:	2b58      	cmp	r3, #88	; 0x58
 8015aae:	d169      	bne.n	8015b84 <_strtoll_l.isra.0+0x114>
 8015ab0:	786c      	ldrb	r4, [r5, #1]
 8015ab2:	2710      	movs	r7, #16
 8015ab4:	3502      	adds	r5, #2
 8015ab6:	f04f 32ff 	mov.w	r2, #4294967295
 8015aba:	1990      	adds	r0, r2, r6
 8015abc:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8015ac0:	ea4f 7be7 	mov.w	fp, r7, asr #31
 8015ac4:	eb43 71e6 	adc.w	r1, r3, r6, asr #31
 8015ac8:	463a      	mov	r2, r7
 8015aca:	465b      	mov	r3, fp
 8015acc:	e9cd 0100 	strd	r0, r1, [sp]
 8015ad0:	f7eb fcea 	bl	80014a8 <__aeabi_uldivmod>
 8015ad4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015ad8:	46ba      	mov	sl, r7
 8015ada:	4696      	mov	lr, r2
 8015adc:	2300      	movs	r3, #0
 8015ade:	2000      	movs	r0, #0
 8015ae0:	2100      	movs	r1, #0
 8015ae2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8015ae6:	f1bc 0f09 	cmp.w	ip, #9
 8015aea:	d820      	bhi.n	8015b2e <_strtoll_l.isra.0+0xbe>
 8015aec:	4664      	mov	r4, ip
 8015aee:	42a7      	cmp	r7, r4
 8015af0:	dd2e      	ble.n	8015b50 <_strtoll_l.isra.0+0xe0>
 8015af2:	1c5a      	adds	r2, r3, #1
 8015af4:	d013      	beq.n	8015b1e <_strtoll_l.isra.0+0xae>
 8015af6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015afa:	428b      	cmp	r3, r1
 8015afc:	bf08      	it	eq
 8015afe:	4282      	cmpeq	r2, r0
 8015b00:	d323      	bcc.n	8015b4a <_strtoll_l.isra.0+0xda>
 8015b02:	d101      	bne.n	8015b08 <_strtoll_l.isra.0+0x98>
 8015b04:	45a6      	cmp	lr, r4
 8015b06:	db20      	blt.n	8015b4a <_strtoll_l.isra.0+0xda>
 8015b08:	fb0a f301 	mul.w	r3, sl, r1
 8015b0c:	fb00 330b 	mla	r3, r0, fp, r3
 8015b10:	fbaa 0100 	umull	r0, r1, sl, r0
 8015b14:	4419      	add	r1, r3
 8015b16:	1900      	adds	r0, r0, r4
 8015b18:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8015b1c:	2301      	movs	r3, #1
 8015b1e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015b22:	e7de      	b.n	8015ae2 <_strtoll_l.isra.0+0x72>
 8015b24:	2c2b      	cmp	r4, #43	; 0x2b
 8015b26:	bf04      	itt	eq
 8015b28:	782c      	ldrbeq	r4, [r5, #0]
 8015b2a:	1c9d      	addeq	r5, r3, #2
 8015b2c:	e7b5      	b.n	8015a9a <_strtoll_l.isra.0+0x2a>
 8015b2e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8015b32:	f1bc 0f19 	cmp.w	ip, #25
 8015b36:	d801      	bhi.n	8015b3c <_strtoll_l.isra.0+0xcc>
 8015b38:	3c37      	subs	r4, #55	; 0x37
 8015b3a:	e7d8      	b.n	8015aee <_strtoll_l.isra.0+0x7e>
 8015b3c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8015b40:	f1bc 0f19 	cmp.w	ip, #25
 8015b44:	d804      	bhi.n	8015b50 <_strtoll_l.isra.0+0xe0>
 8015b46:	3c57      	subs	r4, #87	; 0x57
 8015b48:	e7d1      	b.n	8015aee <_strtoll_l.isra.0+0x7e>
 8015b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8015b4e:	e7e6      	b.n	8015b1e <_strtoll_l.isra.0+0xae>
 8015b50:	1c5a      	adds	r2, r3, #1
 8015b52:	d10a      	bne.n	8015b6a <_strtoll_l.isra.0+0xfa>
 8015b54:	9a05      	ldr	r2, [sp, #20]
 8015b56:	2322      	movs	r3, #34	; 0x22
 8015b58:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015b5c:	6013      	str	r3, [r2, #0]
 8015b5e:	f1b9 0f00 	cmp.w	r9, #0
 8015b62:	d10a      	bne.n	8015b7a <_strtoll_l.isra.0+0x10a>
 8015b64:	b007      	add	sp, #28
 8015b66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b6a:	b116      	cbz	r6, 8015b72 <_strtoll_l.isra.0+0x102>
 8015b6c:	4240      	negs	r0, r0
 8015b6e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8015b72:	f1b9 0f00 	cmp.w	r9, #0
 8015b76:	d0f5      	beq.n	8015b64 <_strtoll_l.isra.0+0xf4>
 8015b78:	b10b      	cbz	r3, 8015b7e <_strtoll_l.isra.0+0x10e>
 8015b7a:	f105 38ff 	add.w	r8, r5, #4294967295
 8015b7e:	f8c9 8000 	str.w	r8, [r9]
 8015b82:	e7ef      	b.n	8015b64 <_strtoll_l.isra.0+0xf4>
 8015b84:	2430      	movs	r4, #48	; 0x30
 8015b86:	2f00      	cmp	r7, #0
 8015b88:	d195      	bne.n	8015ab6 <_strtoll_l.isra.0+0x46>
 8015b8a:	2708      	movs	r7, #8
 8015b8c:	e793      	b.n	8015ab6 <_strtoll_l.isra.0+0x46>
 8015b8e:	2c30      	cmp	r4, #48	; 0x30
 8015b90:	d089      	beq.n	8015aa6 <_strtoll_l.isra.0+0x36>
 8015b92:	270a      	movs	r7, #10
 8015b94:	e78f      	b.n	8015ab6 <_strtoll_l.isra.0+0x46>
 8015b96:	bf00      	nop
 8015b98:	08019542 	.word	0x08019542

08015b9c <strtoll>:
 8015b9c:	4613      	mov	r3, r2
 8015b9e:	460a      	mov	r2, r1
 8015ba0:	4601      	mov	r1, r0
 8015ba2:	4802      	ldr	r0, [pc, #8]	; (8015bac <strtoll+0x10>)
 8015ba4:	6800      	ldr	r0, [r0, #0]
 8015ba6:	f7ff bf63 	b.w	8015a70 <_strtoll_l.isra.0>
 8015baa:	bf00      	nop
 8015bac:	20001504 	.word	0x20001504

08015bb0 <__utoa>:
 8015bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015bb2:	4c1f      	ldr	r4, [pc, #124]	; (8015c30 <__utoa+0x80>)
 8015bb4:	b08b      	sub	sp, #44	; 0x2c
 8015bb6:	4605      	mov	r5, r0
 8015bb8:	460b      	mov	r3, r1
 8015bba:	466e      	mov	r6, sp
 8015bbc:	f104 0c20 	add.w	ip, r4, #32
 8015bc0:	6820      	ldr	r0, [r4, #0]
 8015bc2:	6861      	ldr	r1, [r4, #4]
 8015bc4:	4637      	mov	r7, r6
 8015bc6:	c703      	stmia	r7!, {r0, r1}
 8015bc8:	3408      	adds	r4, #8
 8015bca:	4564      	cmp	r4, ip
 8015bcc:	463e      	mov	r6, r7
 8015bce:	d1f7      	bne.n	8015bc0 <__utoa+0x10>
 8015bd0:	7921      	ldrb	r1, [r4, #4]
 8015bd2:	7139      	strb	r1, [r7, #4]
 8015bd4:	1e91      	subs	r1, r2, #2
 8015bd6:	6820      	ldr	r0, [r4, #0]
 8015bd8:	6038      	str	r0, [r7, #0]
 8015bda:	2922      	cmp	r1, #34	; 0x22
 8015bdc:	f04f 0100 	mov.w	r1, #0
 8015be0:	d904      	bls.n	8015bec <__utoa+0x3c>
 8015be2:	7019      	strb	r1, [r3, #0]
 8015be4:	460b      	mov	r3, r1
 8015be6:	4618      	mov	r0, r3
 8015be8:	b00b      	add	sp, #44	; 0x2c
 8015bea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015bec:	1e58      	subs	r0, r3, #1
 8015bee:	4684      	mov	ip, r0
 8015bf0:	fbb5 f7f2 	udiv	r7, r5, r2
 8015bf4:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8015bf8:	fb02 5617 	mls	r6, r2, r7, r5
 8015bfc:	4476      	add	r6, lr
 8015bfe:	460c      	mov	r4, r1
 8015c00:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8015c04:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8015c08:	462e      	mov	r6, r5
 8015c0a:	42b2      	cmp	r2, r6
 8015c0c:	f101 0101 	add.w	r1, r1, #1
 8015c10:	463d      	mov	r5, r7
 8015c12:	d9ed      	bls.n	8015bf0 <__utoa+0x40>
 8015c14:	2200      	movs	r2, #0
 8015c16:	545a      	strb	r2, [r3, r1]
 8015c18:	1919      	adds	r1, r3, r4
 8015c1a:	1aa5      	subs	r5, r4, r2
 8015c1c:	42aa      	cmp	r2, r5
 8015c1e:	dae2      	bge.n	8015be6 <__utoa+0x36>
 8015c20:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8015c24:	780e      	ldrb	r6, [r1, #0]
 8015c26:	7006      	strb	r6, [r0, #0]
 8015c28:	3201      	adds	r2, #1
 8015c2a:	f801 5901 	strb.w	r5, [r1], #-1
 8015c2e:	e7f4      	b.n	8015c1a <__utoa+0x6a>
 8015c30:	080194e0 	.word	0x080194e0

08015c34 <__assert_func>:
 8015c34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015c36:	4614      	mov	r4, r2
 8015c38:	461a      	mov	r2, r3
 8015c3a:	4b09      	ldr	r3, [pc, #36]	; (8015c60 <__assert_func+0x2c>)
 8015c3c:	681b      	ldr	r3, [r3, #0]
 8015c3e:	4605      	mov	r5, r0
 8015c40:	68d8      	ldr	r0, [r3, #12]
 8015c42:	b14c      	cbz	r4, 8015c58 <__assert_func+0x24>
 8015c44:	4b07      	ldr	r3, [pc, #28]	; (8015c64 <__assert_func+0x30>)
 8015c46:	9100      	str	r1, [sp, #0]
 8015c48:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015c4c:	4906      	ldr	r1, [pc, #24]	; (8015c68 <__assert_func+0x34>)
 8015c4e:	462b      	mov	r3, r5
 8015c50:	f000 fe86 	bl	8016960 <fiprintf>
 8015c54:	f002 fa7e 	bl	8018154 <abort>
 8015c58:	4b04      	ldr	r3, [pc, #16]	; (8015c6c <__assert_func+0x38>)
 8015c5a:	461c      	mov	r4, r3
 8015c5c:	e7f3      	b.n	8015c46 <__assert_func+0x12>
 8015c5e:	bf00      	nop
 8015c60:	20001504 	.word	0x20001504
 8015c64:	08019505 	.word	0x08019505
 8015c68:	08019512 	.word	0x08019512
 8015c6c:	08019540 	.word	0x08019540

08015c70 <quorem>:
 8015c70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c74:	6903      	ldr	r3, [r0, #16]
 8015c76:	690c      	ldr	r4, [r1, #16]
 8015c78:	42a3      	cmp	r3, r4
 8015c7a:	4607      	mov	r7, r0
 8015c7c:	f2c0 8081 	blt.w	8015d82 <quorem+0x112>
 8015c80:	3c01      	subs	r4, #1
 8015c82:	f101 0814 	add.w	r8, r1, #20
 8015c86:	f100 0514 	add.w	r5, r0, #20
 8015c8a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8015c8e:	9301      	str	r3, [sp, #4]
 8015c90:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8015c94:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8015c98:	3301      	adds	r3, #1
 8015c9a:	429a      	cmp	r2, r3
 8015c9c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8015ca0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8015ca4:	fbb2 f6f3 	udiv	r6, r2, r3
 8015ca8:	d331      	bcc.n	8015d0e <quorem+0x9e>
 8015caa:	f04f 0e00 	mov.w	lr, #0
 8015cae:	4640      	mov	r0, r8
 8015cb0:	46ac      	mov	ip, r5
 8015cb2:	46f2      	mov	sl, lr
 8015cb4:	f850 2b04 	ldr.w	r2, [r0], #4
 8015cb8:	b293      	uxth	r3, r2
 8015cba:	fb06 e303 	mla	r3, r6, r3, lr
 8015cbe:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8015cc2:	b29b      	uxth	r3, r3
 8015cc4:	ebaa 0303 	sub.w	r3, sl, r3
 8015cc8:	0c12      	lsrs	r2, r2, #16
 8015cca:	f8dc a000 	ldr.w	sl, [ip]
 8015cce:	fb06 e202 	mla	r2, r6, r2, lr
 8015cd2:	fa13 f38a 	uxtah	r3, r3, sl
 8015cd6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8015cda:	fa1f fa82 	uxth.w	sl, r2
 8015cde:	f8dc 2000 	ldr.w	r2, [ip]
 8015ce2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8015ce6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8015cea:	b29b      	uxth	r3, r3
 8015cec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015cf0:	4581      	cmp	r9, r0
 8015cf2:	f84c 3b04 	str.w	r3, [ip], #4
 8015cf6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8015cfa:	d2db      	bcs.n	8015cb4 <quorem+0x44>
 8015cfc:	f855 300b 	ldr.w	r3, [r5, fp]
 8015d00:	b92b      	cbnz	r3, 8015d0e <quorem+0x9e>
 8015d02:	9b01      	ldr	r3, [sp, #4]
 8015d04:	3b04      	subs	r3, #4
 8015d06:	429d      	cmp	r5, r3
 8015d08:	461a      	mov	r2, r3
 8015d0a:	d32e      	bcc.n	8015d6a <quorem+0xfa>
 8015d0c:	613c      	str	r4, [r7, #16]
 8015d0e:	4638      	mov	r0, r7
 8015d10:	f001 fc92 	bl	8017638 <__mcmp>
 8015d14:	2800      	cmp	r0, #0
 8015d16:	db24      	blt.n	8015d62 <quorem+0xf2>
 8015d18:	3601      	adds	r6, #1
 8015d1a:	4628      	mov	r0, r5
 8015d1c:	f04f 0c00 	mov.w	ip, #0
 8015d20:	f858 2b04 	ldr.w	r2, [r8], #4
 8015d24:	f8d0 e000 	ldr.w	lr, [r0]
 8015d28:	b293      	uxth	r3, r2
 8015d2a:	ebac 0303 	sub.w	r3, ip, r3
 8015d2e:	0c12      	lsrs	r2, r2, #16
 8015d30:	fa13 f38e 	uxtah	r3, r3, lr
 8015d34:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8015d38:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8015d3c:	b29b      	uxth	r3, r3
 8015d3e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015d42:	45c1      	cmp	r9, r8
 8015d44:	f840 3b04 	str.w	r3, [r0], #4
 8015d48:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8015d4c:	d2e8      	bcs.n	8015d20 <quorem+0xb0>
 8015d4e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8015d52:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8015d56:	b922      	cbnz	r2, 8015d62 <quorem+0xf2>
 8015d58:	3b04      	subs	r3, #4
 8015d5a:	429d      	cmp	r5, r3
 8015d5c:	461a      	mov	r2, r3
 8015d5e:	d30a      	bcc.n	8015d76 <quorem+0x106>
 8015d60:	613c      	str	r4, [r7, #16]
 8015d62:	4630      	mov	r0, r6
 8015d64:	b003      	add	sp, #12
 8015d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d6a:	6812      	ldr	r2, [r2, #0]
 8015d6c:	3b04      	subs	r3, #4
 8015d6e:	2a00      	cmp	r2, #0
 8015d70:	d1cc      	bne.n	8015d0c <quorem+0x9c>
 8015d72:	3c01      	subs	r4, #1
 8015d74:	e7c7      	b.n	8015d06 <quorem+0x96>
 8015d76:	6812      	ldr	r2, [r2, #0]
 8015d78:	3b04      	subs	r3, #4
 8015d7a:	2a00      	cmp	r2, #0
 8015d7c:	d1f0      	bne.n	8015d60 <quorem+0xf0>
 8015d7e:	3c01      	subs	r4, #1
 8015d80:	e7eb      	b.n	8015d5a <quorem+0xea>
 8015d82:	2000      	movs	r0, #0
 8015d84:	e7ee      	b.n	8015d64 <quorem+0xf4>
	...

08015d88 <_dtoa_r>:
 8015d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d8c:	ed2d 8b02 	vpush	{d8}
 8015d90:	ec57 6b10 	vmov	r6, r7, d0
 8015d94:	b095      	sub	sp, #84	; 0x54
 8015d96:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8015d98:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8015d9c:	9105      	str	r1, [sp, #20]
 8015d9e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8015da2:	4604      	mov	r4, r0
 8015da4:	9209      	str	r2, [sp, #36]	; 0x24
 8015da6:	930f      	str	r3, [sp, #60]	; 0x3c
 8015da8:	b975      	cbnz	r5, 8015dc8 <_dtoa_r+0x40>
 8015daa:	2010      	movs	r0, #16
 8015dac:	f7fe f978 	bl	80140a0 <malloc>
 8015db0:	4602      	mov	r2, r0
 8015db2:	6260      	str	r0, [r4, #36]	; 0x24
 8015db4:	b920      	cbnz	r0, 8015dc0 <_dtoa_r+0x38>
 8015db6:	4bb2      	ldr	r3, [pc, #712]	; (8016080 <_dtoa_r+0x2f8>)
 8015db8:	21ea      	movs	r1, #234	; 0xea
 8015dba:	48b2      	ldr	r0, [pc, #712]	; (8016084 <_dtoa_r+0x2fc>)
 8015dbc:	f7ff ff3a 	bl	8015c34 <__assert_func>
 8015dc0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8015dc4:	6005      	str	r5, [r0, #0]
 8015dc6:	60c5      	str	r5, [r0, #12]
 8015dc8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015dca:	6819      	ldr	r1, [r3, #0]
 8015dcc:	b151      	cbz	r1, 8015de4 <_dtoa_r+0x5c>
 8015dce:	685a      	ldr	r2, [r3, #4]
 8015dd0:	604a      	str	r2, [r1, #4]
 8015dd2:	2301      	movs	r3, #1
 8015dd4:	4093      	lsls	r3, r2
 8015dd6:	608b      	str	r3, [r1, #8]
 8015dd8:	4620      	mov	r0, r4
 8015dda:	f001 f9a5 	bl	8017128 <_Bfree>
 8015dde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015de0:	2200      	movs	r2, #0
 8015de2:	601a      	str	r2, [r3, #0]
 8015de4:	1e3b      	subs	r3, r7, #0
 8015de6:	bfb9      	ittee	lt
 8015de8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8015dec:	9303      	strlt	r3, [sp, #12]
 8015dee:	2300      	movge	r3, #0
 8015df0:	f8c8 3000 	strge.w	r3, [r8]
 8015df4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8015df8:	4ba3      	ldr	r3, [pc, #652]	; (8016088 <_dtoa_r+0x300>)
 8015dfa:	bfbc      	itt	lt
 8015dfc:	2201      	movlt	r2, #1
 8015dfe:	f8c8 2000 	strlt.w	r2, [r8]
 8015e02:	ea33 0309 	bics.w	r3, r3, r9
 8015e06:	d11b      	bne.n	8015e40 <_dtoa_r+0xb8>
 8015e08:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015e0a:	f242 730f 	movw	r3, #9999	; 0x270f
 8015e0e:	6013      	str	r3, [r2, #0]
 8015e10:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015e14:	4333      	orrs	r3, r6
 8015e16:	f000 857a 	beq.w	801690e <_dtoa_r+0xb86>
 8015e1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015e1c:	b963      	cbnz	r3, 8015e38 <_dtoa_r+0xb0>
 8015e1e:	4b9b      	ldr	r3, [pc, #620]	; (801608c <_dtoa_r+0x304>)
 8015e20:	e024      	b.n	8015e6c <_dtoa_r+0xe4>
 8015e22:	4b9b      	ldr	r3, [pc, #620]	; (8016090 <_dtoa_r+0x308>)
 8015e24:	9300      	str	r3, [sp, #0]
 8015e26:	3308      	adds	r3, #8
 8015e28:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8015e2a:	6013      	str	r3, [r2, #0]
 8015e2c:	9800      	ldr	r0, [sp, #0]
 8015e2e:	b015      	add	sp, #84	; 0x54
 8015e30:	ecbd 8b02 	vpop	{d8}
 8015e34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e38:	4b94      	ldr	r3, [pc, #592]	; (801608c <_dtoa_r+0x304>)
 8015e3a:	9300      	str	r3, [sp, #0]
 8015e3c:	3303      	adds	r3, #3
 8015e3e:	e7f3      	b.n	8015e28 <_dtoa_r+0xa0>
 8015e40:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015e44:	2200      	movs	r2, #0
 8015e46:	ec51 0b17 	vmov	r0, r1, d7
 8015e4a:	2300      	movs	r3, #0
 8015e4c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8015e50:	f7eb fa4a 	bl	80012e8 <__aeabi_dcmpeq>
 8015e54:	4680      	mov	r8, r0
 8015e56:	b158      	cbz	r0, 8015e70 <_dtoa_r+0xe8>
 8015e58:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015e5a:	2301      	movs	r3, #1
 8015e5c:	6013      	str	r3, [r2, #0]
 8015e5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015e60:	2b00      	cmp	r3, #0
 8015e62:	f000 8551 	beq.w	8016908 <_dtoa_r+0xb80>
 8015e66:	488b      	ldr	r0, [pc, #556]	; (8016094 <_dtoa_r+0x30c>)
 8015e68:	6018      	str	r0, [r3, #0]
 8015e6a:	1e43      	subs	r3, r0, #1
 8015e6c:	9300      	str	r3, [sp, #0]
 8015e6e:	e7dd      	b.n	8015e2c <_dtoa_r+0xa4>
 8015e70:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8015e74:	aa12      	add	r2, sp, #72	; 0x48
 8015e76:	a913      	add	r1, sp, #76	; 0x4c
 8015e78:	4620      	mov	r0, r4
 8015e7a:	f001 fcfd 	bl	8017878 <__d2b>
 8015e7e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8015e82:	4683      	mov	fp, r0
 8015e84:	2d00      	cmp	r5, #0
 8015e86:	d07c      	beq.n	8015f82 <_dtoa_r+0x1fa>
 8015e88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015e8a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8015e8e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015e92:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8015e96:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8015e9a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8015e9e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8015ea2:	4b7d      	ldr	r3, [pc, #500]	; (8016098 <_dtoa_r+0x310>)
 8015ea4:	2200      	movs	r2, #0
 8015ea6:	4630      	mov	r0, r6
 8015ea8:	4639      	mov	r1, r7
 8015eaa:	f7ea fdfd 	bl	8000aa8 <__aeabi_dsub>
 8015eae:	a36e      	add	r3, pc, #440	; (adr r3, 8016068 <_dtoa_r+0x2e0>)
 8015eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015eb4:	f7ea ffb0 	bl	8000e18 <__aeabi_dmul>
 8015eb8:	a36d      	add	r3, pc, #436	; (adr r3, 8016070 <_dtoa_r+0x2e8>)
 8015eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ebe:	f7ea fdf5 	bl	8000aac <__adddf3>
 8015ec2:	4606      	mov	r6, r0
 8015ec4:	4628      	mov	r0, r5
 8015ec6:	460f      	mov	r7, r1
 8015ec8:	f7ea ff3c 	bl	8000d44 <__aeabi_i2d>
 8015ecc:	a36a      	add	r3, pc, #424	; (adr r3, 8016078 <_dtoa_r+0x2f0>)
 8015ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ed2:	f7ea ffa1 	bl	8000e18 <__aeabi_dmul>
 8015ed6:	4602      	mov	r2, r0
 8015ed8:	460b      	mov	r3, r1
 8015eda:	4630      	mov	r0, r6
 8015edc:	4639      	mov	r1, r7
 8015ede:	f7ea fde5 	bl	8000aac <__adddf3>
 8015ee2:	4606      	mov	r6, r0
 8015ee4:	460f      	mov	r7, r1
 8015ee6:	f7eb fa47 	bl	8001378 <__aeabi_d2iz>
 8015eea:	2200      	movs	r2, #0
 8015eec:	4682      	mov	sl, r0
 8015eee:	2300      	movs	r3, #0
 8015ef0:	4630      	mov	r0, r6
 8015ef2:	4639      	mov	r1, r7
 8015ef4:	f7eb fa02 	bl	80012fc <__aeabi_dcmplt>
 8015ef8:	b148      	cbz	r0, 8015f0e <_dtoa_r+0x186>
 8015efa:	4650      	mov	r0, sl
 8015efc:	f7ea ff22 	bl	8000d44 <__aeabi_i2d>
 8015f00:	4632      	mov	r2, r6
 8015f02:	463b      	mov	r3, r7
 8015f04:	f7eb f9f0 	bl	80012e8 <__aeabi_dcmpeq>
 8015f08:	b908      	cbnz	r0, 8015f0e <_dtoa_r+0x186>
 8015f0a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015f0e:	f1ba 0f16 	cmp.w	sl, #22
 8015f12:	d854      	bhi.n	8015fbe <_dtoa_r+0x236>
 8015f14:	4b61      	ldr	r3, [pc, #388]	; (801609c <_dtoa_r+0x314>)
 8015f16:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8015f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f1e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8015f22:	f7eb f9eb 	bl	80012fc <__aeabi_dcmplt>
 8015f26:	2800      	cmp	r0, #0
 8015f28:	d04b      	beq.n	8015fc2 <_dtoa_r+0x23a>
 8015f2a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015f2e:	2300      	movs	r3, #0
 8015f30:	930e      	str	r3, [sp, #56]	; 0x38
 8015f32:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015f34:	1b5d      	subs	r5, r3, r5
 8015f36:	1e6b      	subs	r3, r5, #1
 8015f38:	9304      	str	r3, [sp, #16]
 8015f3a:	bf43      	ittte	mi
 8015f3c:	2300      	movmi	r3, #0
 8015f3e:	f1c5 0801 	rsbmi	r8, r5, #1
 8015f42:	9304      	strmi	r3, [sp, #16]
 8015f44:	f04f 0800 	movpl.w	r8, #0
 8015f48:	f1ba 0f00 	cmp.w	sl, #0
 8015f4c:	db3b      	blt.n	8015fc6 <_dtoa_r+0x23e>
 8015f4e:	9b04      	ldr	r3, [sp, #16]
 8015f50:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8015f54:	4453      	add	r3, sl
 8015f56:	9304      	str	r3, [sp, #16]
 8015f58:	2300      	movs	r3, #0
 8015f5a:	9306      	str	r3, [sp, #24]
 8015f5c:	9b05      	ldr	r3, [sp, #20]
 8015f5e:	2b09      	cmp	r3, #9
 8015f60:	d869      	bhi.n	8016036 <_dtoa_r+0x2ae>
 8015f62:	2b05      	cmp	r3, #5
 8015f64:	bfc4      	itt	gt
 8015f66:	3b04      	subgt	r3, #4
 8015f68:	9305      	strgt	r3, [sp, #20]
 8015f6a:	9b05      	ldr	r3, [sp, #20]
 8015f6c:	f1a3 0302 	sub.w	r3, r3, #2
 8015f70:	bfcc      	ite	gt
 8015f72:	2500      	movgt	r5, #0
 8015f74:	2501      	movle	r5, #1
 8015f76:	2b03      	cmp	r3, #3
 8015f78:	d869      	bhi.n	801604e <_dtoa_r+0x2c6>
 8015f7a:	e8df f003 	tbb	[pc, r3]
 8015f7e:	4e2c      	.short	0x4e2c
 8015f80:	5a4c      	.short	0x5a4c
 8015f82:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8015f86:	441d      	add	r5, r3
 8015f88:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8015f8c:	2b20      	cmp	r3, #32
 8015f8e:	bfc1      	itttt	gt
 8015f90:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8015f94:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8015f98:	fa09 f303 	lslgt.w	r3, r9, r3
 8015f9c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8015fa0:	bfda      	itte	le
 8015fa2:	f1c3 0320 	rsble	r3, r3, #32
 8015fa6:	fa06 f003 	lslle.w	r0, r6, r3
 8015faa:	4318      	orrgt	r0, r3
 8015fac:	f7ea feba 	bl	8000d24 <__aeabi_ui2d>
 8015fb0:	2301      	movs	r3, #1
 8015fb2:	4606      	mov	r6, r0
 8015fb4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8015fb8:	3d01      	subs	r5, #1
 8015fba:	9310      	str	r3, [sp, #64]	; 0x40
 8015fbc:	e771      	b.n	8015ea2 <_dtoa_r+0x11a>
 8015fbe:	2301      	movs	r3, #1
 8015fc0:	e7b6      	b.n	8015f30 <_dtoa_r+0x1a8>
 8015fc2:	900e      	str	r0, [sp, #56]	; 0x38
 8015fc4:	e7b5      	b.n	8015f32 <_dtoa_r+0x1aa>
 8015fc6:	f1ca 0300 	rsb	r3, sl, #0
 8015fca:	9306      	str	r3, [sp, #24]
 8015fcc:	2300      	movs	r3, #0
 8015fce:	eba8 080a 	sub.w	r8, r8, sl
 8015fd2:	930d      	str	r3, [sp, #52]	; 0x34
 8015fd4:	e7c2      	b.n	8015f5c <_dtoa_r+0x1d4>
 8015fd6:	2300      	movs	r3, #0
 8015fd8:	9308      	str	r3, [sp, #32]
 8015fda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015fdc:	2b00      	cmp	r3, #0
 8015fde:	dc39      	bgt.n	8016054 <_dtoa_r+0x2cc>
 8015fe0:	f04f 0901 	mov.w	r9, #1
 8015fe4:	f8cd 9004 	str.w	r9, [sp, #4]
 8015fe8:	464b      	mov	r3, r9
 8015fea:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8015fee:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8015ff0:	2200      	movs	r2, #0
 8015ff2:	6042      	str	r2, [r0, #4]
 8015ff4:	2204      	movs	r2, #4
 8015ff6:	f102 0614 	add.w	r6, r2, #20
 8015ffa:	429e      	cmp	r6, r3
 8015ffc:	6841      	ldr	r1, [r0, #4]
 8015ffe:	d92f      	bls.n	8016060 <_dtoa_r+0x2d8>
 8016000:	4620      	mov	r0, r4
 8016002:	f001 f851 	bl	80170a8 <_Balloc>
 8016006:	9000      	str	r0, [sp, #0]
 8016008:	2800      	cmp	r0, #0
 801600a:	d14b      	bne.n	80160a4 <_dtoa_r+0x31c>
 801600c:	4b24      	ldr	r3, [pc, #144]	; (80160a0 <_dtoa_r+0x318>)
 801600e:	4602      	mov	r2, r0
 8016010:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8016014:	e6d1      	b.n	8015dba <_dtoa_r+0x32>
 8016016:	2301      	movs	r3, #1
 8016018:	e7de      	b.n	8015fd8 <_dtoa_r+0x250>
 801601a:	2300      	movs	r3, #0
 801601c:	9308      	str	r3, [sp, #32]
 801601e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016020:	eb0a 0903 	add.w	r9, sl, r3
 8016024:	f109 0301 	add.w	r3, r9, #1
 8016028:	2b01      	cmp	r3, #1
 801602a:	9301      	str	r3, [sp, #4]
 801602c:	bfb8      	it	lt
 801602e:	2301      	movlt	r3, #1
 8016030:	e7dd      	b.n	8015fee <_dtoa_r+0x266>
 8016032:	2301      	movs	r3, #1
 8016034:	e7f2      	b.n	801601c <_dtoa_r+0x294>
 8016036:	2501      	movs	r5, #1
 8016038:	2300      	movs	r3, #0
 801603a:	9305      	str	r3, [sp, #20]
 801603c:	9508      	str	r5, [sp, #32]
 801603e:	f04f 39ff 	mov.w	r9, #4294967295
 8016042:	2200      	movs	r2, #0
 8016044:	f8cd 9004 	str.w	r9, [sp, #4]
 8016048:	2312      	movs	r3, #18
 801604a:	9209      	str	r2, [sp, #36]	; 0x24
 801604c:	e7cf      	b.n	8015fee <_dtoa_r+0x266>
 801604e:	2301      	movs	r3, #1
 8016050:	9308      	str	r3, [sp, #32]
 8016052:	e7f4      	b.n	801603e <_dtoa_r+0x2b6>
 8016054:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8016058:	f8cd 9004 	str.w	r9, [sp, #4]
 801605c:	464b      	mov	r3, r9
 801605e:	e7c6      	b.n	8015fee <_dtoa_r+0x266>
 8016060:	3101      	adds	r1, #1
 8016062:	6041      	str	r1, [r0, #4]
 8016064:	0052      	lsls	r2, r2, #1
 8016066:	e7c6      	b.n	8015ff6 <_dtoa_r+0x26e>
 8016068:	636f4361 	.word	0x636f4361
 801606c:	3fd287a7 	.word	0x3fd287a7
 8016070:	8b60c8b3 	.word	0x8b60c8b3
 8016074:	3fc68a28 	.word	0x3fc68a28
 8016078:	509f79fb 	.word	0x509f79fb
 801607c:	3fd34413 	.word	0x3fd34413
 8016080:	08019468 	.word	0x08019468
 8016084:	0801964f 	.word	0x0801964f
 8016088:	7ff00000 	.word	0x7ff00000
 801608c:	0801964b 	.word	0x0801964b
 8016090:	08019642 	.word	0x08019642
 8016094:	080193f5 	.word	0x080193f5
 8016098:	3ff80000 	.word	0x3ff80000
 801609c:	080197c8 	.word	0x080197c8
 80160a0:	080196ae 	.word	0x080196ae
 80160a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80160a6:	9a00      	ldr	r2, [sp, #0]
 80160a8:	601a      	str	r2, [r3, #0]
 80160aa:	9b01      	ldr	r3, [sp, #4]
 80160ac:	2b0e      	cmp	r3, #14
 80160ae:	f200 80ad 	bhi.w	801620c <_dtoa_r+0x484>
 80160b2:	2d00      	cmp	r5, #0
 80160b4:	f000 80aa 	beq.w	801620c <_dtoa_r+0x484>
 80160b8:	f1ba 0f00 	cmp.w	sl, #0
 80160bc:	dd36      	ble.n	801612c <_dtoa_r+0x3a4>
 80160be:	4ac3      	ldr	r2, [pc, #780]	; (80163cc <_dtoa_r+0x644>)
 80160c0:	f00a 030f 	and.w	r3, sl, #15
 80160c4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80160c8:	ed93 7b00 	vldr	d7, [r3]
 80160cc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80160d0:	ea4f 172a 	mov.w	r7, sl, asr #4
 80160d4:	eeb0 8a47 	vmov.f32	s16, s14
 80160d8:	eef0 8a67 	vmov.f32	s17, s15
 80160dc:	d016      	beq.n	801610c <_dtoa_r+0x384>
 80160de:	4bbc      	ldr	r3, [pc, #752]	; (80163d0 <_dtoa_r+0x648>)
 80160e0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80160e4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80160e8:	f7ea ffc0 	bl	800106c <__aeabi_ddiv>
 80160ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80160f0:	f007 070f 	and.w	r7, r7, #15
 80160f4:	2503      	movs	r5, #3
 80160f6:	4eb6      	ldr	r6, [pc, #728]	; (80163d0 <_dtoa_r+0x648>)
 80160f8:	b957      	cbnz	r7, 8016110 <_dtoa_r+0x388>
 80160fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80160fe:	ec53 2b18 	vmov	r2, r3, d8
 8016102:	f7ea ffb3 	bl	800106c <__aeabi_ddiv>
 8016106:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801610a:	e029      	b.n	8016160 <_dtoa_r+0x3d8>
 801610c:	2502      	movs	r5, #2
 801610e:	e7f2      	b.n	80160f6 <_dtoa_r+0x36e>
 8016110:	07f9      	lsls	r1, r7, #31
 8016112:	d508      	bpl.n	8016126 <_dtoa_r+0x39e>
 8016114:	ec51 0b18 	vmov	r0, r1, d8
 8016118:	e9d6 2300 	ldrd	r2, r3, [r6]
 801611c:	f7ea fe7c 	bl	8000e18 <__aeabi_dmul>
 8016120:	ec41 0b18 	vmov	d8, r0, r1
 8016124:	3501      	adds	r5, #1
 8016126:	107f      	asrs	r7, r7, #1
 8016128:	3608      	adds	r6, #8
 801612a:	e7e5      	b.n	80160f8 <_dtoa_r+0x370>
 801612c:	f000 80a6 	beq.w	801627c <_dtoa_r+0x4f4>
 8016130:	f1ca 0600 	rsb	r6, sl, #0
 8016134:	4ba5      	ldr	r3, [pc, #660]	; (80163cc <_dtoa_r+0x644>)
 8016136:	4fa6      	ldr	r7, [pc, #664]	; (80163d0 <_dtoa_r+0x648>)
 8016138:	f006 020f 	and.w	r2, r6, #15
 801613c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016144:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8016148:	f7ea fe66 	bl	8000e18 <__aeabi_dmul>
 801614c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016150:	1136      	asrs	r6, r6, #4
 8016152:	2300      	movs	r3, #0
 8016154:	2502      	movs	r5, #2
 8016156:	2e00      	cmp	r6, #0
 8016158:	f040 8085 	bne.w	8016266 <_dtoa_r+0x4de>
 801615c:	2b00      	cmp	r3, #0
 801615e:	d1d2      	bne.n	8016106 <_dtoa_r+0x37e>
 8016160:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016162:	2b00      	cmp	r3, #0
 8016164:	f000 808c 	beq.w	8016280 <_dtoa_r+0x4f8>
 8016168:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801616c:	4b99      	ldr	r3, [pc, #612]	; (80163d4 <_dtoa_r+0x64c>)
 801616e:	2200      	movs	r2, #0
 8016170:	4630      	mov	r0, r6
 8016172:	4639      	mov	r1, r7
 8016174:	f7eb f8c2 	bl	80012fc <__aeabi_dcmplt>
 8016178:	2800      	cmp	r0, #0
 801617a:	f000 8081 	beq.w	8016280 <_dtoa_r+0x4f8>
 801617e:	9b01      	ldr	r3, [sp, #4]
 8016180:	2b00      	cmp	r3, #0
 8016182:	d07d      	beq.n	8016280 <_dtoa_r+0x4f8>
 8016184:	f1b9 0f00 	cmp.w	r9, #0
 8016188:	dd3c      	ble.n	8016204 <_dtoa_r+0x47c>
 801618a:	f10a 33ff 	add.w	r3, sl, #4294967295
 801618e:	9307      	str	r3, [sp, #28]
 8016190:	2200      	movs	r2, #0
 8016192:	4b91      	ldr	r3, [pc, #580]	; (80163d8 <_dtoa_r+0x650>)
 8016194:	4630      	mov	r0, r6
 8016196:	4639      	mov	r1, r7
 8016198:	f7ea fe3e 	bl	8000e18 <__aeabi_dmul>
 801619c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80161a0:	3501      	adds	r5, #1
 80161a2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80161a6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80161aa:	4628      	mov	r0, r5
 80161ac:	f7ea fdca 	bl	8000d44 <__aeabi_i2d>
 80161b0:	4632      	mov	r2, r6
 80161b2:	463b      	mov	r3, r7
 80161b4:	f7ea fe30 	bl	8000e18 <__aeabi_dmul>
 80161b8:	4b88      	ldr	r3, [pc, #544]	; (80163dc <_dtoa_r+0x654>)
 80161ba:	2200      	movs	r2, #0
 80161bc:	f7ea fc76 	bl	8000aac <__adddf3>
 80161c0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80161c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80161c8:	9303      	str	r3, [sp, #12]
 80161ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80161cc:	2b00      	cmp	r3, #0
 80161ce:	d15c      	bne.n	801628a <_dtoa_r+0x502>
 80161d0:	4b83      	ldr	r3, [pc, #524]	; (80163e0 <_dtoa_r+0x658>)
 80161d2:	2200      	movs	r2, #0
 80161d4:	4630      	mov	r0, r6
 80161d6:	4639      	mov	r1, r7
 80161d8:	f7ea fc66 	bl	8000aa8 <__aeabi_dsub>
 80161dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80161e0:	4606      	mov	r6, r0
 80161e2:	460f      	mov	r7, r1
 80161e4:	f7eb f8a8 	bl	8001338 <__aeabi_dcmpgt>
 80161e8:	2800      	cmp	r0, #0
 80161ea:	f040 8296 	bne.w	801671a <_dtoa_r+0x992>
 80161ee:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80161f2:	4630      	mov	r0, r6
 80161f4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80161f8:	4639      	mov	r1, r7
 80161fa:	f7eb f87f 	bl	80012fc <__aeabi_dcmplt>
 80161fe:	2800      	cmp	r0, #0
 8016200:	f040 8288 	bne.w	8016714 <_dtoa_r+0x98c>
 8016204:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8016208:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801620c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801620e:	2b00      	cmp	r3, #0
 8016210:	f2c0 8158 	blt.w	80164c4 <_dtoa_r+0x73c>
 8016214:	f1ba 0f0e 	cmp.w	sl, #14
 8016218:	f300 8154 	bgt.w	80164c4 <_dtoa_r+0x73c>
 801621c:	4b6b      	ldr	r3, [pc, #428]	; (80163cc <_dtoa_r+0x644>)
 801621e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8016222:	e9d3 8900 	ldrd	r8, r9, [r3]
 8016226:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016228:	2b00      	cmp	r3, #0
 801622a:	f280 80e3 	bge.w	80163f4 <_dtoa_r+0x66c>
 801622e:	9b01      	ldr	r3, [sp, #4]
 8016230:	2b00      	cmp	r3, #0
 8016232:	f300 80df 	bgt.w	80163f4 <_dtoa_r+0x66c>
 8016236:	f040 826d 	bne.w	8016714 <_dtoa_r+0x98c>
 801623a:	4b69      	ldr	r3, [pc, #420]	; (80163e0 <_dtoa_r+0x658>)
 801623c:	2200      	movs	r2, #0
 801623e:	4640      	mov	r0, r8
 8016240:	4649      	mov	r1, r9
 8016242:	f7ea fde9 	bl	8000e18 <__aeabi_dmul>
 8016246:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801624a:	f7eb f86b 	bl	8001324 <__aeabi_dcmpge>
 801624e:	9e01      	ldr	r6, [sp, #4]
 8016250:	4637      	mov	r7, r6
 8016252:	2800      	cmp	r0, #0
 8016254:	f040 8243 	bne.w	80166de <_dtoa_r+0x956>
 8016258:	9d00      	ldr	r5, [sp, #0]
 801625a:	2331      	movs	r3, #49	; 0x31
 801625c:	f805 3b01 	strb.w	r3, [r5], #1
 8016260:	f10a 0a01 	add.w	sl, sl, #1
 8016264:	e23f      	b.n	80166e6 <_dtoa_r+0x95e>
 8016266:	07f2      	lsls	r2, r6, #31
 8016268:	d505      	bpl.n	8016276 <_dtoa_r+0x4ee>
 801626a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801626e:	f7ea fdd3 	bl	8000e18 <__aeabi_dmul>
 8016272:	3501      	adds	r5, #1
 8016274:	2301      	movs	r3, #1
 8016276:	1076      	asrs	r6, r6, #1
 8016278:	3708      	adds	r7, #8
 801627a:	e76c      	b.n	8016156 <_dtoa_r+0x3ce>
 801627c:	2502      	movs	r5, #2
 801627e:	e76f      	b.n	8016160 <_dtoa_r+0x3d8>
 8016280:	9b01      	ldr	r3, [sp, #4]
 8016282:	f8cd a01c 	str.w	sl, [sp, #28]
 8016286:	930c      	str	r3, [sp, #48]	; 0x30
 8016288:	e78d      	b.n	80161a6 <_dtoa_r+0x41e>
 801628a:	9900      	ldr	r1, [sp, #0]
 801628c:	980c      	ldr	r0, [sp, #48]	; 0x30
 801628e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016290:	4b4e      	ldr	r3, [pc, #312]	; (80163cc <_dtoa_r+0x644>)
 8016292:	ed9d 7b02 	vldr	d7, [sp, #8]
 8016296:	4401      	add	r1, r0
 8016298:	9102      	str	r1, [sp, #8]
 801629a:	9908      	ldr	r1, [sp, #32]
 801629c:	eeb0 8a47 	vmov.f32	s16, s14
 80162a0:	eef0 8a67 	vmov.f32	s17, s15
 80162a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80162a8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80162ac:	2900      	cmp	r1, #0
 80162ae:	d045      	beq.n	801633c <_dtoa_r+0x5b4>
 80162b0:	494c      	ldr	r1, [pc, #304]	; (80163e4 <_dtoa_r+0x65c>)
 80162b2:	2000      	movs	r0, #0
 80162b4:	f7ea feda 	bl	800106c <__aeabi_ddiv>
 80162b8:	ec53 2b18 	vmov	r2, r3, d8
 80162bc:	f7ea fbf4 	bl	8000aa8 <__aeabi_dsub>
 80162c0:	9d00      	ldr	r5, [sp, #0]
 80162c2:	ec41 0b18 	vmov	d8, r0, r1
 80162c6:	4639      	mov	r1, r7
 80162c8:	4630      	mov	r0, r6
 80162ca:	f7eb f855 	bl	8001378 <__aeabi_d2iz>
 80162ce:	900c      	str	r0, [sp, #48]	; 0x30
 80162d0:	f7ea fd38 	bl	8000d44 <__aeabi_i2d>
 80162d4:	4602      	mov	r2, r0
 80162d6:	460b      	mov	r3, r1
 80162d8:	4630      	mov	r0, r6
 80162da:	4639      	mov	r1, r7
 80162dc:	f7ea fbe4 	bl	8000aa8 <__aeabi_dsub>
 80162e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80162e2:	3330      	adds	r3, #48	; 0x30
 80162e4:	f805 3b01 	strb.w	r3, [r5], #1
 80162e8:	ec53 2b18 	vmov	r2, r3, d8
 80162ec:	4606      	mov	r6, r0
 80162ee:	460f      	mov	r7, r1
 80162f0:	f7eb f804 	bl	80012fc <__aeabi_dcmplt>
 80162f4:	2800      	cmp	r0, #0
 80162f6:	d165      	bne.n	80163c4 <_dtoa_r+0x63c>
 80162f8:	4632      	mov	r2, r6
 80162fa:	463b      	mov	r3, r7
 80162fc:	4935      	ldr	r1, [pc, #212]	; (80163d4 <_dtoa_r+0x64c>)
 80162fe:	2000      	movs	r0, #0
 8016300:	f7ea fbd2 	bl	8000aa8 <__aeabi_dsub>
 8016304:	ec53 2b18 	vmov	r2, r3, d8
 8016308:	f7ea fff8 	bl	80012fc <__aeabi_dcmplt>
 801630c:	2800      	cmp	r0, #0
 801630e:	f040 80b9 	bne.w	8016484 <_dtoa_r+0x6fc>
 8016312:	9b02      	ldr	r3, [sp, #8]
 8016314:	429d      	cmp	r5, r3
 8016316:	f43f af75 	beq.w	8016204 <_dtoa_r+0x47c>
 801631a:	4b2f      	ldr	r3, [pc, #188]	; (80163d8 <_dtoa_r+0x650>)
 801631c:	ec51 0b18 	vmov	r0, r1, d8
 8016320:	2200      	movs	r2, #0
 8016322:	f7ea fd79 	bl	8000e18 <__aeabi_dmul>
 8016326:	4b2c      	ldr	r3, [pc, #176]	; (80163d8 <_dtoa_r+0x650>)
 8016328:	ec41 0b18 	vmov	d8, r0, r1
 801632c:	2200      	movs	r2, #0
 801632e:	4630      	mov	r0, r6
 8016330:	4639      	mov	r1, r7
 8016332:	f7ea fd71 	bl	8000e18 <__aeabi_dmul>
 8016336:	4606      	mov	r6, r0
 8016338:	460f      	mov	r7, r1
 801633a:	e7c4      	b.n	80162c6 <_dtoa_r+0x53e>
 801633c:	ec51 0b17 	vmov	r0, r1, d7
 8016340:	f7ea fd6a 	bl	8000e18 <__aeabi_dmul>
 8016344:	9b02      	ldr	r3, [sp, #8]
 8016346:	9d00      	ldr	r5, [sp, #0]
 8016348:	930c      	str	r3, [sp, #48]	; 0x30
 801634a:	ec41 0b18 	vmov	d8, r0, r1
 801634e:	4639      	mov	r1, r7
 8016350:	4630      	mov	r0, r6
 8016352:	f7eb f811 	bl	8001378 <__aeabi_d2iz>
 8016356:	9011      	str	r0, [sp, #68]	; 0x44
 8016358:	f7ea fcf4 	bl	8000d44 <__aeabi_i2d>
 801635c:	4602      	mov	r2, r0
 801635e:	460b      	mov	r3, r1
 8016360:	4630      	mov	r0, r6
 8016362:	4639      	mov	r1, r7
 8016364:	f7ea fba0 	bl	8000aa8 <__aeabi_dsub>
 8016368:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801636a:	3330      	adds	r3, #48	; 0x30
 801636c:	f805 3b01 	strb.w	r3, [r5], #1
 8016370:	9b02      	ldr	r3, [sp, #8]
 8016372:	429d      	cmp	r5, r3
 8016374:	4606      	mov	r6, r0
 8016376:	460f      	mov	r7, r1
 8016378:	f04f 0200 	mov.w	r2, #0
 801637c:	d134      	bne.n	80163e8 <_dtoa_r+0x660>
 801637e:	4b19      	ldr	r3, [pc, #100]	; (80163e4 <_dtoa_r+0x65c>)
 8016380:	ec51 0b18 	vmov	r0, r1, d8
 8016384:	f7ea fb92 	bl	8000aac <__adddf3>
 8016388:	4602      	mov	r2, r0
 801638a:	460b      	mov	r3, r1
 801638c:	4630      	mov	r0, r6
 801638e:	4639      	mov	r1, r7
 8016390:	f7ea ffd2 	bl	8001338 <__aeabi_dcmpgt>
 8016394:	2800      	cmp	r0, #0
 8016396:	d175      	bne.n	8016484 <_dtoa_r+0x6fc>
 8016398:	ec53 2b18 	vmov	r2, r3, d8
 801639c:	4911      	ldr	r1, [pc, #68]	; (80163e4 <_dtoa_r+0x65c>)
 801639e:	2000      	movs	r0, #0
 80163a0:	f7ea fb82 	bl	8000aa8 <__aeabi_dsub>
 80163a4:	4602      	mov	r2, r0
 80163a6:	460b      	mov	r3, r1
 80163a8:	4630      	mov	r0, r6
 80163aa:	4639      	mov	r1, r7
 80163ac:	f7ea ffa6 	bl	80012fc <__aeabi_dcmplt>
 80163b0:	2800      	cmp	r0, #0
 80163b2:	f43f af27 	beq.w	8016204 <_dtoa_r+0x47c>
 80163b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80163b8:	1e6b      	subs	r3, r5, #1
 80163ba:	930c      	str	r3, [sp, #48]	; 0x30
 80163bc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80163c0:	2b30      	cmp	r3, #48	; 0x30
 80163c2:	d0f8      	beq.n	80163b6 <_dtoa_r+0x62e>
 80163c4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80163c8:	e04a      	b.n	8016460 <_dtoa_r+0x6d8>
 80163ca:	bf00      	nop
 80163cc:	080197c8 	.word	0x080197c8
 80163d0:	080197a0 	.word	0x080197a0
 80163d4:	3ff00000 	.word	0x3ff00000
 80163d8:	40240000 	.word	0x40240000
 80163dc:	401c0000 	.word	0x401c0000
 80163e0:	40140000 	.word	0x40140000
 80163e4:	3fe00000 	.word	0x3fe00000
 80163e8:	4baf      	ldr	r3, [pc, #700]	; (80166a8 <_dtoa_r+0x920>)
 80163ea:	f7ea fd15 	bl	8000e18 <__aeabi_dmul>
 80163ee:	4606      	mov	r6, r0
 80163f0:	460f      	mov	r7, r1
 80163f2:	e7ac      	b.n	801634e <_dtoa_r+0x5c6>
 80163f4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80163f8:	9d00      	ldr	r5, [sp, #0]
 80163fa:	4642      	mov	r2, r8
 80163fc:	464b      	mov	r3, r9
 80163fe:	4630      	mov	r0, r6
 8016400:	4639      	mov	r1, r7
 8016402:	f7ea fe33 	bl	800106c <__aeabi_ddiv>
 8016406:	f7ea ffb7 	bl	8001378 <__aeabi_d2iz>
 801640a:	9002      	str	r0, [sp, #8]
 801640c:	f7ea fc9a 	bl	8000d44 <__aeabi_i2d>
 8016410:	4642      	mov	r2, r8
 8016412:	464b      	mov	r3, r9
 8016414:	f7ea fd00 	bl	8000e18 <__aeabi_dmul>
 8016418:	4602      	mov	r2, r0
 801641a:	460b      	mov	r3, r1
 801641c:	4630      	mov	r0, r6
 801641e:	4639      	mov	r1, r7
 8016420:	f7ea fb42 	bl	8000aa8 <__aeabi_dsub>
 8016424:	9e02      	ldr	r6, [sp, #8]
 8016426:	9f01      	ldr	r7, [sp, #4]
 8016428:	3630      	adds	r6, #48	; 0x30
 801642a:	f805 6b01 	strb.w	r6, [r5], #1
 801642e:	9e00      	ldr	r6, [sp, #0]
 8016430:	1bae      	subs	r6, r5, r6
 8016432:	42b7      	cmp	r7, r6
 8016434:	4602      	mov	r2, r0
 8016436:	460b      	mov	r3, r1
 8016438:	d137      	bne.n	80164aa <_dtoa_r+0x722>
 801643a:	f7ea fb37 	bl	8000aac <__adddf3>
 801643e:	4642      	mov	r2, r8
 8016440:	464b      	mov	r3, r9
 8016442:	4606      	mov	r6, r0
 8016444:	460f      	mov	r7, r1
 8016446:	f7ea ff77 	bl	8001338 <__aeabi_dcmpgt>
 801644a:	b9c8      	cbnz	r0, 8016480 <_dtoa_r+0x6f8>
 801644c:	4642      	mov	r2, r8
 801644e:	464b      	mov	r3, r9
 8016450:	4630      	mov	r0, r6
 8016452:	4639      	mov	r1, r7
 8016454:	f7ea ff48 	bl	80012e8 <__aeabi_dcmpeq>
 8016458:	b110      	cbz	r0, 8016460 <_dtoa_r+0x6d8>
 801645a:	9b02      	ldr	r3, [sp, #8]
 801645c:	07d9      	lsls	r1, r3, #31
 801645e:	d40f      	bmi.n	8016480 <_dtoa_r+0x6f8>
 8016460:	4620      	mov	r0, r4
 8016462:	4659      	mov	r1, fp
 8016464:	f000 fe60 	bl	8017128 <_Bfree>
 8016468:	2300      	movs	r3, #0
 801646a:	702b      	strb	r3, [r5, #0]
 801646c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801646e:	f10a 0001 	add.w	r0, sl, #1
 8016472:	6018      	str	r0, [r3, #0]
 8016474:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016476:	2b00      	cmp	r3, #0
 8016478:	f43f acd8 	beq.w	8015e2c <_dtoa_r+0xa4>
 801647c:	601d      	str	r5, [r3, #0]
 801647e:	e4d5      	b.n	8015e2c <_dtoa_r+0xa4>
 8016480:	f8cd a01c 	str.w	sl, [sp, #28]
 8016484:	462b      	mov	r3, r5
 8016486:	461d      	mov	r5, r3
 8016488:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801648c:	2a39      	cmp	r2, #57	; 0x39
 801648e:	d108      	bne.n	80164a2 <_dtoa_r+0x71a>
 8016490:	9a00      	ldr	r2, [sp, #0]
 8016492:	429a      	cmp	r2, r3
 8016494:	d1f7      	bne.n	8016486 <_dtoa_r+0x6fe>
 8016496:	9a07      	ldr	r2, [sp, #28]
 8016498:	9900      	ldr	r1, [sp, #0]
 801649a:	3201      	adds	r2, #1
 801649c:	9207      	str	r2, [sp, #28]
 801649e:	2230      	movs	r2, #48	; 0x30
 80164a0:	700a      	strb	r2, [r1, #0]
 80164a2:	781a      	ldrb	r2, [r3, #0]
 80164a4:	3201      	adds	r2, #1
 80164a6:	701a      	strb	r2, [r3, #0]
 80164a8:	e78c      	b.n	80163c4 <_dtoa_r+0x63c>
 80164aa:	4b7f      	ldr	r3, [pc, #508]	; (80166a8 <_dtoa_r+0x920>)
 80164ac:	2200      	movs	r2, #0
 80164ae:	f7ea fcb3 	bl	8000e18 <__aeabi_dmul>
 80164b2:	2200      	movs	r2, #0
 80164b4:	2300      	movs	r3, #0
 80164b6:	4606      	mov	r6, r0
 80164b8:	460f      	mov	r7, r1
 80164ba:	f7ea ff15 	bl	80012e8 <__aeabi_dcmpeq>
 80164be:	2800      	cmp	r0, #0
 80164c0:	d09b      	beq.n	80163fa <_dtoa_r+0x672>
 80164c2:	e7cd      	b.n	8016460 <_dtoa_r+0x6d8>
 80164c4:	9a08      	ldr	r2, [sp, #32]
 80164c6:	2a00      	cmp	r2, #0
 80164c8:	f000 80c4 	beq.w	8016654 <_dtoa_r+0x8cc>
 80164cc:	9a05      	ldr	r2, [sp, #20]
 80164ce:	2a01      	cmp	r2, #1
 80164d0:	f300 80a8 	bgt.w	8016624 <_dtoa_r+0x89c>
 80164d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80164d6:	2a00      	cmp	r2, #0
 80164d8:	f000 80a0 	beq.w	801661c <_dtoa_r+0x894>
 80164dc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80164e0:	9e06      	ldr	r6, [sp, #24]
 80164e2:	4645      	mov	r5, r8
 80164e4:	9a04      	ldr	r2, [sp, #16]
 80164e6:	2101      	movs	r1, #1
 80164e8:	441a      	add	r2, r3
 80164ea:	4620      	mov	r0, r4
 80164ec:	4498      	add	r8, r3
 80164ee:	9204      	str	r2, [sp, #16]
 80164f0:	f000 ff20 	bl	8017334 <__i2b>
 80164f4:	4607      	mov	r7, r0
 80164f6:	2d00      	cmp	r5, #0
 80164f8:	dd0b      	ble.n	8016512 <_dtoa_r+0x78a>
 80164fa:	9b04      	ldr	r3, [sp, #16]
 80164fc:	2b00      	cmp	r3, #0
 80164fe:	dd08      	ble.n	8016512 <_dtoa_r+0x78a>
 8016500:	42ab      	cmp	r3, r5
 8016502:	9a04      	ldr	r2, [sp, #16]
 8016504:	bfa8      	it	ge
 8016506:	462b      	movge	r3, r5
 8016508:	eba8 0803 	sub.w	r8, r8, r3
 801650c:	1aed      	subs	r5, r5, r3
 801650e:	1ad3      	subs	r3, r2, r3
 8016510:	9304      	str	r3, [sp, #16]
 8016512:	9b06      	ldr	r3, [sp, #24]
 8016514:	b1fb      	cbz	r3, 8016556 <_dtoa_r+0x7ce>
 8016516:	9b08      	ldr	r3, [sp, #32]
 8016518:	2b00      	cmp	r3, #0
 801651a:	f000 809f 	beq.w	801665c <_dtoa_r+0x8d4>
 801651e:	2e00      	cmp	r6, #0
 8016520:	dd11      	ble.n	8016546 <_dtoa_r+0x7be>
 8016522:	4639      	mov	r1, r7
 8016524:	4632      	mov	r2, r6
 8016526:	4620      	mov	r0, r4
 8016528:	f000 ffc0 	bl	80174ac <__pow5mult>
 801652c:	465a      	mov	r2, fp
 801652e:	4601      	mov	r1, r0
 8016530:	4607      	mov	r7, r0
 8016532:	4620      	mov	r0, r4
 8016534:	f000 ff14 	bl	8017360 <__multiply>
 8016538:	4659      	mov	r1, fp
 801653a:	9007      	str	r0, [sp, #28]
 801653c:	4620      	mov	r0, r4
 801653e:	f000 fdf3 	bl	8017128 <_Bfree>
 8016542:	9b07      	ldr	r3, [sp, #28]
 8016544:	469b      	mov	fp, r3
 8016546:	9b06      	ldr	r3, [sp, #24]
 8016548:	1b9a      	subs	r2, r3, r6
 801654a:	d004      	beq.n	8016556 <_dtoa_r+0x7ce>
 801654c:	4659      	mov	r1, fp
 801654e:	4620      	mov	r0, r4
 8016550:	f000 ffac 	bl	80174ac <__pow5mult>
 8016554:	4683      	mov	fp, r0
 8016556:	2101      	movs	r1, #1
 8016558:	4620      	mov	r0, r4
 801655a:	f000 feeb 	bl	8017334 <__i2b>
 801655e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016560:	2b00      	cmp	r3, #0
 8016562:	4606      	mov	r6, r0
 8016564:	dd7c      	ble.n	8016660 <_dtoa_r+0x8d8>
 8016566:	461a      	mov	r2, r3
 8016568:	4601      	mov	r1, r0
 801656a:	4620      	mov	r0, r4
 801656c:	f000 ff9e 	bl	80174ac <__pow5mult>
 8016570:	9b05      	ldr	r3, [sp, #20]
 8016572:	2b01      	cmp	r3, #1
 8016574:	4606      	mov	r6, r0
 8016576:	dd76      	ble.n	8016666 <_dtoa_r+0x8de>
 8016578:	2300      	movs	r3, #0
 801657a:	9306      	str	r3, [sp, #24]
 801657c:	6933      	ldr	r3, [r6, #16]
 801657e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8016582:	6918      	ldr	r0, [r3, #16]
 8016584:	f000 fe86 	bl	8017294 <__hi0bits>
 8016588:	f1c0 0020 	rsb	r0, r0, #32
 801658c:	9b04      	ldr	r3, [sp, #16]
 801658e:	4418      	add	r0, r3
 8016590:	f010 001f 	ands.w	r0, r0, #31
 8016594:	f000 8086 	beq.w	80166a4 <_dtoa_r+0x91c>
 8016598:	f1c0 0320 	rsb	r3, r0, #32
 801659c:	2b04      	cmp	r3, #4
 801659e:	dd7f      	ble.n	80166a0 <_dtoa_r+0x918>
 80165a0:	f1c0 001c 	rsb	r0, r0, #28
 80165a4:	9b04      	ldr	r3, [sp, #16]
 80165a6:	4403      	add	r3, r0
 80165a8:	4480      	add	r8, r0
 80165aa:	4405      	add	r5, r0
 80165ac:	9304      	str	r3, [sp, #16]
 80165ae:	f1b8 0f00 	cmp.w	r8, #0
 80165b2:	dd05      	ble.n	80165c0 <_dtoa_r+0x838>
 80165b4:	4659      	mov	r1, fp
 80165b6:	4642      	mov	r2, r8
 80165b8:	4620      	mov	r0, r4
 80165ba:	f000 ffd1 	bl	8017560 <__lshift>
 80165be:	4683      	mov	fp, r0
 80165c0:	9b04      	ldr	r3, [sp, #16]
 80165c2:	2b00      	cmp	r3, #0
 80165c4:	dd05      	ble.n	80165d2 <_dtoa_r+0x84a>
 80165c6:	4631      	mov	r1, r6
 80165c8:	461a      	mov	r2, r3
 80165ca:	4620      	mov	r0, r4
 80165cc:	f000 ffc8 	bl	8017560 <__lshift>
 80165d0:	4606      	mov	r6, r0
 80165d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80165d4:	2b00      	cmp	r3, #0
 80165d6:	d069      	beq.n	80166ac <_dtoa_r+0x924>
 80165d8:	4631      	mov	r1, r6
 80165da:	4658      	mov	r0, fp
 80165dc:	f001 f82c 	bl	8017638 <__mcmp>
 80165e0:	2800      	cmp	r0, #0
 80165e2:	da63      	bge.n	80166ac <_dtoa_r+0x924>
 80165e4:	2300      	movs	r3, #0
 80165e6:	4659      	mov	r1, fp
 80165e8:	220a      	movs	r2, #10
 80165ea:	4620      	mov	r0, r4
 80165ec:	f000 fdbe 	bl	801716c <__multadd>
 80165f0:	9b08      	ldr	r3, [sp, #32]
 80165f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80165f6:	4683      	mov	fp, r0
 80165f8:	2b00      	cmp	r3, #0
 80165fa:	f000 818f 	beq.w	801691c <_dtoa_r+0xb94>
 80165fe:	4639      	mov	r1, r7
 8016600:	2300      	movs	r3, #0
 8016602:	220a      	movs	r2, #10
 8016604:	4620      	mov	r0, r4
 8016606:	f000 fdb1 	bl	801716c <__multadd>
 801660a:	f1b9 0f00 	cmp.w	r9, #0
 801660e:	4607      	mov	r7, r0
 8016610:	f300 808e 	bgt.w	8016730 <_dtoa_r+0x9a8>
 8016614:	9b05      	ldr	r3, [sp, #20]
 8016616:	2b02      	cmp	r3, #2
 8016618:	dc50      	bgt.n	80166bc <_dtoa_r+0x934>
 801661a:	e089      	b.n	8016730 <_dtoa_r+0x9a8>
 801661c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801661e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8016622:	e75d      	b.n	80164e0 <_dtoa_r+0x758>
 8016624:	9b01      	ldr	r3, [sp, #4]
 8016626:	1e5e      	subs	r6, r3, #1
 8016628:	9b06      	ldr	r3, [sp, #24]
 801662a:	42b3      	cmp	r3, r6
 801662c:	bfbf      	itttt	lt
 801662e:	9b06      	ldrlt	r3, [sp, #24]
 8016630:	9606      	strlt	r6, [sp, #24]
 8016632:	1af2      	sublt	r2, r6, r3
 8016634:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8016636:	bfb6      	itet	lt
 8016638:	189b      	addlt	r3, r3, r2
 801663a:	1b9e      	subge	r6, r3, r6
 801663c:	930d      	strlt	r3, [sp, #52]	; 0x34
 801663e:	9b01      	ldr	r3, [sp, #4]
 8016640:	bfb8      	it	lt
 8016642:	2600      	movlt	r6, #0
 8016644:	2b00      	cmp	r3, #0
 8016646:	bfb5      	itete	lt
 8016648:	eba8 0503 	sublt.w	r5, r8, r3
 801664c:	9b01      	ldrge	r3, [sp, #4]
 801664e:	2300      	movlt	r3, #0
 8016650:	4645      	movge	r5, r8
 8016652:	e747      	b.n	80164e4 <_dtoa_r+0x75c>
 8016654:	9e06      	ldr	r6, [sp, #24]
 8016656:	9f08      	ldr	r7, [sp, #32]
 8016658:	4645      	mov	r5, r8
 801665a:	e74c      	b.n	80164f6 <_dtoa_r+0x76e>
 801665c:	9a06      	ldr	r2, [sp, #24]
 801665e:	e775      	b.n	801654c <_dtoa_r+0x7c4>
 8016660:	9b05      	ldr	r3, [sp, #20]
 8016662:	2b01      	cmp	r3, #1
 8016664:	dc18      	bgt.n	8016698 <_dtoa_r+0x910>
 8016666:	9b02      	ldr	r3, [sp, #8]
 8016668:	b9b3      	cbnz	r3, 8016698 <_dtoa_r+0x910>
 801666a:	9b03      	ldr	r3, [sp, #12]
 801666c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016670:	b9a3      	cbnz	r3, 801669c <_dtoa_r+0x914>
 8016672:	9b03      	ldr	r3, [sp, #12]
 8016674:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8016678:	0d1b      	lsrs	r3, r3, #20
 801667a:	051b      	lsls	r3, r3, #20
 801667c:	b12b      	cbz	r3, 801668a <_dtoa_r+0x902>
 801667e:	9b04      	ldr	r3, [sp, #16]
 8016680:	3301      	adds	r3, #1
 8016682:	9304      	str	r3, [sp, #16]
 8016684:	f108 0801 	add.w	r8, r8, #1
 8016688:	2301      	movs	r3, #1
 801668a:	9306      	str	r3, [sp, #24]
 801668c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801668e:	2b00      	cmp	r3, #0
 8016690:	f47f af74 	bne.w	801657c <_dtoa_r+0x7f4>
 8016694:	2001      	movs	r0, #1
 8016696:	e779      	b.n	801658c <_dtoa_r+0x804>
 8016698:	2300      	movs	r3, #0
 801669a:	e7f6      	b.n	801668a <_dtoa_r+0x902>
 801669c:	9b02      	ldr	r3, [sp, #8]
 801669e:	e7f4      	b.n	801668a <_dtoa_r+0x902>
 80166a0:	d085      	beq.n	80165ae <_dtoa_r+0x826>
 80166a2:	4618      	mov	r0, r3
 80166a4:	301c      	adds	r0, #28
 80166a6:	e77d      	b.n	80165a4 <_dtoa_r+0x81c>
 80166a8:	40240000 	.word	0x40240000
 80166ac:	9b01      	ldr	r3, [sp, #4]
 80166ae:	2b00      	cmp	r3, #0
 80166b0:	dc38      	bgt.n	8016724 <_dtoa_r+0x99c>
 80166b2:	9b05      	ldr	r3, [sp, #20]
 80166b4:	2b02      	cmp	r3, #2
 80166b6:	dd35      	ble.n	8016724 <_dtoa_r+0x99c>
 80166b8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80166bc:	f1b9 0f00 	cmp.w	r9, #0
 80166c0:	d10d      	bne.n	80166de <_dtoa_r+0x956>
 80166c2:	4631      	mov	r1, r6
 80166c4:	464b      	mov	r3, r9
 80166c6:	2205      	movs	r2, #5
 80166c8:	4620      	mov	r0, r4
 80166ca:	f000 fd4f 	bl	801716c <__multadd>
 80166ce:	4601      	mov	r1, r0
 80166d0:	4606      	mov	r6, r0
 80166d2:	4658      	mov	r0, fp
 80166d4:	f000 ffb0 	bl	8017638 <__mcmp>
 80166d8:	2800      	cmp	r0, #0
 80166da:	f73f adbd 	bgt.w	8016258 <_dtoa_r+0x4d0>
 80166de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80166e0:	9d00      	ldr	r5, [sp, #0]
 80166e2:	ea6f 0a03 	mvn.w	sl, r3
 80166e6:	f04f 0800 	mov.w	r8, #0
 80166ea:	4631      	mov	r1, r6
 80166ec:	4620      	mov	r0, r4
 80166ee:	f000 fd1b 	bl	8017128 <_Bfree>
 80166f2:	2f00      	cmp	r7, #0
 80166f4:	f43f aeb4 	beq.w	8016460 <_dtoa_r+0x6d8>
 80166f8:	f1b8 0f00 	cmp.w	r8, #0
 80166fc:	d005      	beq.n	801670a <_dtoa_r+0x982>
 80166fe:	45b8      	cmp	r8, r7
 8016700:	d003      	beq.n	801670a <_dtoa_r+0x982>
 8016702:	4641      	mov	r1, r8
 8016704:	4620      	mov	r0, r4
 8016706:	f000 fd0f 	bl	8017128 <_Bfree>
 801670a:	4639      	mov	r1, r7
 801670c:	4620      	mov	r0, r4
 801670e:	f000 fd0b 	bl	8017128 <_Bfree>
 8016712:	e6a5      	b.n	8016460 <_dtoa_r+0x6d8>
 8016714:	2600      	movs	r6, #0
 8016716:	4637      	mov	r7, r6
 8016718:	e7e1      	b.n	80166de <_dtoa_r+0x956>
 801671a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801671c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8016720:	4637      	mov	r7, r6
 8016722:	e599      	b.n	8016258 <_dtoa_r+0x4d0>
 8016724:	9b08      	ldr	r3, [sp, #32]
 8016726:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801672a:	2b00      	cmp	r3, #0
 801672c:	f000 80fd 	beq.w	801692a <_dtoa_r+0xba2>
 8016730:	2d00      	cmp	r5, #0
 8016732:	dd05      	ble.n	8016740 <_dtoa_r+0x9b8>
 8016734:	4639      	mov	r1, r7
 8016736:	462a      	mov	r2, r5
 8016738:	4620      	mov	r0, r4
 801673a:	f000 ff11 	bl	8017560 <__lshift>
 801673e:	4607      	mov	r7, r0
 8016740:	9b06      	ldr	r3, [sp, #24]
 8016742:	2b00      	cmp	r3, #0
 8016744:	d05c      	beq.n	8016800 <_dtoa_r+0xa78>
 8016746:	6879      	ldr	r1, [r7, #4]
 8016748:	4620      	mov	r0, r4
 801674a:	f000 fcad 	bl	80170a8 <_Balloc>
 801674e:	4605      	mov	r5, r0
 8016750:	b928      	cbnz	r0, 801675e <_dtoa_r+0x9d6>
 8016752:	4b80      	ldr	r3, [pc, #512]	; (8016954 <_dtoa_r+0xbcc>)
 8016754:	4602      	mov	r2, r0
 8016756:	f240 21ea 	movw	r1, #746	; 0x2ea
 801675a:	f7ff bb2e 	b.w	8015dba <_dtoa_r+0x32>
 801675e:	693a      	ldr	r2, [r7, #16]
 8016760:	3202      	adds	r2, #2
 8016762:	0092      	lsls	r2, r2, #2
 8016764:	f107 010c 	add.w	r1, r7, #12
 8016768:	300c      	adds	r0, #12
 801676a:	f7fd fca9 	bl	80140c0 <memcpy>
 801676e:	2201      	movs	r2, #1
 8016770:	4629      	mov	r1, r5
 8016772:	4620      	mov	r0, r4
 8016774:	f000 fef4 	bl	8017560 <__lshift>
 8016778:	9b00      	ldr	r3, [sp, #0]
 801677a:	3301      	adds	r3, #1
 801677c:	9301      	str	r3, [sp, #4]
 801677e:	9b00      	ldr	r3, [sp, #0]
 8016780:	444b      	add	r3, r9
 8016782:	9307      	str	r3, [sp, #28]
 8016784:	9b02      	ldr	r3, [sp, #8]
 8016786:	f003 0301 	and.w	r3, r3, #1
 801678a:	46b8      	mov	r8, r7
 801678c:	9306      	str	r3, [sp, #24]
 801678e:	4607      	mov	r7, r0
 8016790:	9b01      	ldr	r3, [sp, #4]
 8016792:	4631      	mov	r1, r6
 8016794:	3b01      	subs	r3, #1
 8016796:	4658      	mov	r0, fp
 8016798:	9302      	str	r3, [sp, #8]
 801679a:	f7ff fa69 	bl	8015c70 <quorem>
 801679e:	4603      	mov	r3, r0
 80167a0:	3330      	adds	r3, #48	; 0x30
 80167a2:	9004      	str	r0, [sp, #16]
 80167a4:	4641      	mov	r1, r8
 80167a6:	4658      	mov	r0, fp
 80167a8:	9308      	str	r3, [sp, #32]
 80167aa:	f000 ff45 	bl	8017638 <__mcmp>
 80167ae:	463a      	mov	r2, r7
 80167b0:	4681      	mov	r9, r0
 80167b2:	4631      	mov	r1, r6
 80167b4:	4620      	mov	r0, r4
 80167b6:	f000 ff5b 	bl	8017670 <__mdiff>
 80167ba:	68c2      	ldr	r2, [r0, #12]
 80167bc:	9b08      	ldr	r3, [sp, #32]
 80167be:	4605      	mov	r5, r0
 80167c0:	bb02      	cbnz	r2, 8016804 <_dtoa_r+0xa7c>
 80167c2:	4601      	mov	r1, r0
 80167c4:	4658      	mov	r0, fp
 80167c6:	f000 ff37 	bl	8017638 <__mcmp>
 80167ca:	9b08      	ldr	r3, [sp, #32]
 80167cc:	4602      	mov	r2, r0
 80167ce:	4629      	mov	r1, r5
 80167d0:	4620      	mov	r0, r4
 80167d2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80167d6:	f000 fca7 	bl	8017128 <_Bfree>
 80167da:	9b05      	ldr	r3, [sp, #20]
 80167dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80167de:	9d01      	ldr	r5, [sp, #4]
 80167e0:	ea43 0102 	orr.w	r1, r3, r2
 80167e4:	9b06      	ldr	r3, [sp, #24]
 80167e6:	430b      	orrs	r3, r1
 80167e8:	9b08      	ldr	r3, [sp, #32]
 80167ea:	d10d      	bne.n	8016808 <_dtoa_r+0xa80>
 80167ec:	2b39      	cmp	r3, #57	; 0x39
 80167ee:	d029      	beq.n	8016844 <_dtoa_r+0xabc>
 80167f0:	f1b9 0f00 	cmp.w	r9, #0
 80167f4:	dd01      	ble.n	80167fa <_dtoa_r+0xa72>
 80167f6:	9b04      	ldr	r3, [sp, #16]
 80167f8:	3331      	adds	r3, #49	; 0x31
 80167fa:	9a02      	ldr	r2, [sp, #8]
 80167fc:	7013      	strb	r3, [r2, #0]
 80167fe:	e774      	b.n	80166ea <_dtoa_r+0x962>
 8016800:	4638      	mov	r0, r7
 8016802:	e7b9      	b.n	8016778 <_dtoa_r+0x9f0>
 8016804:	2201      	movs	r2, #1
 8016806:	e7e2      	b.n	80167ce <_dtoa_r+0xa46>
 8016808:	f1b9 0f00 	cmp.w	r9, #0
 801680c:	db06      	blt.n	801681c <_dtoa_r+0xa94>
 801680e:	9905      	ldr	r1, [sp, #20]
 8016810:	ea41 0909 	orr.w	r9, r1, r9
 8016814:	9906      	ldr	r1, [sp, #24]
 8016816:	ea59 0101 	orrs.w	r1, r9, r1
 801681a:	d120      	bne.n	801685e <_dtoa_r+0xad6>
 801681c:	2a00      	cmp	r2, #0
 801681e:	ddec      	ble.n	80167fa <_dtoa_r+0xa72>
 8016820:	4659      	mov	r1, fp
 8016822:	2201      	movs	r2, #1
 8016824:	4620      	mov	r0, r4
 8016826:	9301      	str	r3, [sp, #4]
 8016828:	f000 fe9a 	bl	8017560 <__lshift>
 801682c:	4631      	mov	r1, r6
 801682e:	4683      	mov	fp, r0
 8016830:	f000 ff02 	bl	8017638 <__mcmp>
 8016834:	2800      	cmp	r0, #0
 8016836:	9b01      	ldr	r3, [sp, #4]
 8016838:	dc02      	bgt.n	8016840 <_dtoa_r+0xab8>
 801683a:	d1de      	bne.n	80167fa <_dtoa_r+0xa72>
 801683c:	07da      	lsls	r2, r3, #31
 801683e:	d5dc      	bpl.n	80167fa <_dtoa_r+0xa72>
 8016840:	2b39      	cmp	r3, #57	; 0x39
 8016842:	d1d8      	bne.n	80167f6 <_dtoa_r+0xa6e>
 8016844:	9a02      	ldr	r2, [sp, #8]
 8016846:	2339      	movs	r3, #57	; 0x39
 8016848:	7013      	strb	r3, [r2, #0]
 801684a:	462b      	mov	r3, r5
 801684c:	461d      	mov	r5, r3
 801684e:	3b01      	subs	r3, #1
 8016850:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8016854:	2a39      	cmp	r2, #57	; 0x39
 8016856:	d050      	beq.n	80168fa <_dtoa_r+0xb72>
 8016858:	3201      	adds	r2, #1
 801685a:	701a      	strb	r2, [r3, #0]
 801685c:	e745      	b.n	80166ea <_dtoa_r+0x962>
 801685e:	2a00      	cmp	r2, #0
 8016860:	dd03      	ble.n	801686a <_dtoa_r+0xae2>
 8016862:	2b39      	cmp	r3, #57	; 0x39
 8016864:	d0ee      	beq.n	8016844 <_dtoa_r+0xabc>
 8016866:	3301      	adds	r3, #1
 8016868:	e7c7      	b.n	80167fa <_dtoa_r+0xa72>
 801686a:	9a01      	ldr	r2, [sp, #4]
 801686c:	9907      	ldr	r1, [sp, #28]
 801686e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8016872:	428a      	cmp	r2, r1
 8016874:	d02a      	beq.n	80168cc <_dtoa_r+0xb44>
 8016876:	4659      	mov	r1, fp
 8016878:	2300      	movs	r3, #0
 801687a:	220a      	movs	r2, #10
 801687c:	4620      	mov	r0, r4
 801687e:	f000 fc75 	bl	801716c <__multadd>
 8016882:	45b8      	cmp	r8, r7
 8016884:	4683      	mov	fp, r0
 8016886:	f04f 0300 	mov.w	r3, #0
 801688a:	f04f 020a 	mov.w	r2, #10
 801688e:	4641      	mov	r1, r8
 8016890:	4620      	mov	r0, r4
 8016892:	d107      	bne.n	80168a4 <_dtoa_r+0xb1c>
 8016894:	f000 fc6a 	bl	801716c <__multadd>
 8016898:	4680      	mov	r8, r0
 801689a:	4607      	mov	r7, r0
 801689c:	9b01      	ldr	r3, [sp, #4]
 801689e:	3301      	adds	r3, #1
 80168a0:	9301      	str	r3, [sp, #4]
 80168a2:	e775      	b.n	8016790 <_dtoa_r+0xa08>
 80168a4:	f000 fc62 	bl	801716c <__multadd>
 80168a8:	4639      	mov	r1, r7
 80168aa:	4680      	mov	r8, r0
 80168ac:	2300      	movs	r3, #0
 80168ae:	220a      	movs	r2, #10
 80168b0:	4620      	mov	r0, r4
 80168b2:	f000 fc5b 	bl	801716c <__multadd>
 80168b6:	4607      	mov	r7, r0
 80168b8:	e7f0      	b.n	801689c <_dtoa_r+0xb14>
 80168ba:	f1b9 0f00 	cmp.w	r9, #0
 80168be:	9a00      	ldr	r2, [sp, #0]
 80168c0:	bfcc      	ite	gt
 80168c2:	464d      	movgt	r5, r9
 80168c4:	2501      	movle	r5, #1
 80168c6:	4415      	add	r5, r2
 80168c8:	f04f 0800 	mov.w	r8, #0
 80168cc:	4659      	mov	r1, fp
 80168ce:	2201      	movs	r2, #1
 80168d0:	4620      	mov	r0, r4
 80168d2:	9301      	str	r3, [sp, #4]
 80168d4:	f000 fe44 	bl	8017560 <__lshift>
 80168d8:	4631      	mov	r1, r6
 80168da:	4683      	mov	fp, r0
 80168dc:	f000 feac 	bl	8017638 <__mcmp>
 80168e0:	2800      	cmp	r0, #0
 80168e2:	dcb2      	bgt.n	801684a <_dtoa_r+0xac2>
 80168e4:	d102      	bne.n	80168ec <_dtoa_r+0xb64>
 80168e6:	9b01      	ldr	r3, [sp, #4]
 80168e8:	07db      	lsls	r3, r3, #31
 80168ea:	d4ae      	bmi.n	801684a <_dtoa_r+0xac2>
 80168ec:	462b      	mov	r3, r5
 80168ee:	461d      	mov	r5, r3
 80168f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80168f4:	2a30      	cmp	r2, #48	; 0x30
 80168f6:	d0fa      	beq.n	80168ee <_dtoa_r+0xb66>
 80168f8:	e6f7      	b.n	80166ea <_dtoa_r+0x962>
 80168fa:	9a00      	ldr	r2, [sp, #0]
 80168fc:	429a      	cmp	r2, r3
 80168fe:	d1a5      	bne.n	801684c <_dtoa_r+0xac4>
 8016900:	f10a 0a01 	add.w	sl, sl, #1
 8016904:	2331      	movs	r3, #49	; 0x31
 8016906:	e779      	b.n	80167fc <_dtoa_r+0xa74>
 8016908:	4b13      	ldr	r3, [pc, #76]	; (8016958 <_dtoa_r+0xbd0>)
 801690a:	f7ff baaf 	b.w	8015e6c <_dtoa_r+0xe4>
 801690e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016910:	2b00      	cmp	r3, #0
 8016912:	f47f aa86 	bne.w	8015e22 <_dtoa_r+0x9a>
 8016916:	4b11      	ldr	r3, [pc, #68]	; (801695c <_dtoa_r+0xbd4>)
 8016918:	f7ff baa8 	b.w	8015e6c <_dtoa_r+0xe4>
 801691c:	f1b9 0f00 	cmp.w	r9, #0
 8016920:	dc03      	bgt.n	801692a <_dtoa_r+0xba2>
 8016922:	9b05      	ldr	r3, [sp, #20]
 8016924:	2b02      	cmp	r3, #2
 8016926:	f73f aec9 	bgt.w	80166bc <_dtoa_r+0x934>
 801692a:	9d00      	ldr	r5, [sp, #0]
 801692c:	4631      	mov	r1, r6
 801692e:	4658      	mov	r0, fp
 8016930:	f7ff f99e 	bl	8015c70 <quorem>
 8016934:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8016938:	f805 3b01 	strb.w	r3, [r5], #1
 801693c:	9a00      	ldr	r2, [sp, #0]
 801693e:	1aaa      	subs	r2, r5, r2
 8016940:	4591      	cmp	r9, r2
 8016942:	ddba      	ble.n	80168ba <_dtoa_r+0xb32>
 8016944:	4659      	mov	r1, fp
 8016946:	2300      	movs	r3, #0
 8016948:	220a      	movs	r2, #10
 801694a:	4620      	mov	r0, r4
 801694c:	f000 fc0e 	bl	801716c <__multadd>
 8016950:	4683      	mov	fp, r0
 8016952:	e7eb      	b.n	801692c <_dtoa_r+0xba4>
 8016954:	080196ae 	.word	0x080196ae
 8016958:	080193f4 	.word	0x080193f4
 801695c:	08019642 	.word	0x08019642

08016960 <fiprintf>:
 8016960:	b40e      	push	{r1, r2, r3}
 8016962:	b503      	push	{r0, r1, lr}
 8016964:	4601      	mov	r1, r0
 8016966:	ab03      	add	r3, sp, #12
 8016968:	4805      	ldr	r0, [pc, #20]	; (8016980 <fiprintf+0x20>)
 801696a:	f853 2b04 	ldr.w	r2, [r3], #4
 801696e:	6800      	ldr	r0, [r0, #0]
 8016970:	9301      	str	r3, [sp, #4]
 8016972:	f001 f9e9 	bl	8017d48 <_vfiprintf_r>
 8016976:	b002      	add	sp, #8
 8016978:	f85d eb04 	ldr.w	lr, [sp], #4
 801697c:	b003      	add	sp, #12
 801697e:	4770      	bx	lr
 8016980:	20001504 	.word	0x20001504

08016984 <rshift>:
 8016984:	6903      	ldr	r3, [r0, #16]
 8016986:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801698a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801698e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8016992:	f100 0414 	add.w	r4, r0, #20
 8016996:	dd45      	ble.n	8016a24 <rshift+0xa0>
 8016998:	f011 011f 	ands.w	r1, r1, #31
 801699c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80169a0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80169a4:	d10c      	bne.n	80169c0 <rshift+0x3c>
 80169a6:	f100 0710 	add.w	r7, r0, #16
 80169aa:	4629      	mov	r1, r5
 80169ac:	42b1      	cmp	r1, r6
 80169ae:	d334      	bcc.n	8016a1a <rshift+0x96>
 80169b0:	1a9b      	subs	r3, r3, r2
 80169b2:	009b      	lsls	r3, r3, #2
 80169b4:	1eea      	subs	r2, r5, #3
 80169b6:	4296      	cmp	r6, r2
 80169b8:	bf38      	it	cc
 80169ba:	2300      	movcc	r3, #0
 80169bc:	4423      	add	r3, r4
 80169be:	e015      	b.n	80169ec <rshift+0x68>
 80169c0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80169c4:	f1c1 0820 	rsb	r8, r1, #32
 80169c8:	40cf      	lsrs	r7, r1
 80169ca:	f105 0e04 	add.w	lr, r5, #4
 80169ce:	46a1      	mov	r9, r4
 80169d0:	4576      	cmp	r6, lr
 80169d2:	46f4      	mov	ip, lr
 80169d4:	d815      	bhi.n	8016a02 <rshift+0x7e>
 80169d6:	1a9b      	subs	r3, r3, r2
 80169d8:	009a      	lsls	r2, r3, #2
 80169da:	3a04      	subs	r2, #4
 80169dc:	3501      	adds	r5, #1
 80169de:	42ae      	cmp	r6, r5
 80169e0:	bf38      	it	cc
 80169e2:	2200      	movcc	r2, #0
 80169e4:	18a3      	adds	r3, r4, r2
 80169e6:	50a7      	str	r7, [r4, r2]
 80169e8:	b107      	cbz	r7, 80169ec <rshift+0x68>
 80169ea:	3304      	adds	r3, #4
 80169ec:	1b1a      	subs	r2, r3, r4
 80169ee:	42a3      	cmp	r3, r4
 80169f0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80169f4:	bf08      	it	eq
 80169f6:	2300      	moveq	r3, #0
 80169f8:	6102      	str	r2, [r0, #16]
 80169fa:	bf08      	it	eq
 80169fc:	6143      	streq	r3, [r0, #20]
 80169fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016a02:	f8dc c000 	ldr.w	ip, [ip]
 8016a06:	fa0c fc08 	lsl.w	ip, ip, r8
 8016a0a:	ea4c 0707 	orr.w	r7, ip, r7
 8016a0e:	f849 7b04 	str.w	r7, [r9], #4
 8016a12:	f85e 7b04 	ldr.w	r7, [lr], #4
 8016a16:	40cf      	lsrs	r7, r1
 8016a18:	e7da      	b.n	80169d0 <rshift+0x4c>
 8016a1a:	f851 cb04 	ldr.w	ip, [r1], #4
 8016a1e:	f847 cf04 	str.w	ip, [r7, #4]!
 8016a22:	e7c3      	b.n	80169ac <rshift+0x28>
 8016a24:	4623      	mov	r3, r4
 8016a26:	e7e1      	b.n	80169ec <rshift+0x68>

08016a28 <__hexdig_fun>:
 8016a28:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8016a2c:	2b09      	cmp	r3, #9
 8016a2e:	d802      	bhi.n	8016a36 <__hexdig_fun+0xe>
 8016a30:	3820      	subs	r0, #32
 8016a32:	b2c0      	uxtb	r0, r0
 8016a34:	4770      	bx	lr
 8016a36:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8016a3a:	2b05      	cmp	r3, #5
 8016a3c:	d801      	bhi.n	8016a42 <__hexdig_fun+0x1a>
 8016a3e:	3847      	subs	r0, #71	; 0x47
 8016a40:	e7f7      	b.n	8016a32 <__hexdig_fun+0xa>
 8016a42:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8016a46:	2b05      	cmp	r3, #5
 8016a48:	d801      	bhi.n	8016a4e <__hexdig_fun+0x26>
 8016a4a:	3827      	subs	r0, #39	; 0x27
 8016a4c:	e7f1      	b.n	8016a32 <__hexdig_fun+0xa>
 8016a4e:	2000      	movs	r0, #0
 8016a50:	4770      	bx	lr
	...

08016a54 <__gethex>:
 8016a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a58:	ed2d 8b02 	vpush	{d8}
 8016a5c:	b089      	sub	sp, #36	; 0x24
 8016a5e:	ee08 0a10 	vmov	s16, r0
 8016a62:	9304      	str	r3, [sp, #16]
 8016a64:	4bbc      	ldr	r3, [pc, #752]	; (8016d58 <__gethex+0x304>)
 8016a66:	681b      	ldr	r3, [r3, #0]
 8016a68:	9301      	str	r3, [sp, #4]
 8016a6a:	4618      	mov	r0, r3
 8016a6c:	468b      	mov	fp, r1
 8016a6e:	4690      	mov	r8, r2
 8016a70:	f7e9 ffb8 	bl	80009e4 <strlen>
 8016a74:	9b01      	ldr	r3, [sp, #4]
 8016a76:	f8db 2000 	ldr.w	r2, [fp]
 8016a7a:	4403      	add	r3, r0
 8016a7c:	4682      	mov	sl, r0
 8016a7e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8016a82:	9305      	str	r3, [sp, #20]
 8016a84:	1c93      	adds	r3, r2, #2
 8016a86:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8016a8a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8016a8e:	32fe      	adds	r2, #254	; 0xfe
 8016a90:	18d1      	adds	r1, r2, r3
 8016a92:	461f      	mov	r7, r3
 8016a94:	f813 0b01 	ldrb.w	r0, [r3], #1
 8016a98:	9100      	str	r1, [sp, #0]
 8016a9a:	2830      	cmp	r0, #48	; 0x30
 8016a9c:	d0f8      	beq.n	8016a90 <__gethex+0x3c>
 8016a9e:	f7ff ffc3 	bl	8016a28 <__hexdig_fun>
 8016aa2:	4604      	mov	r4, r0
 8016aa4:	2800      	cmp	r0, #0
 8016aa6:	d13a      	bne.n	8016b1e <__gethex+0xca>
 8016aa8:	9901      	ldr	r1, [sp, #4]
 8016aaa:	4652      	mov	r2, sl
 8016aac:	4638      	mov	r0, r7
 8016aae:	f7fe f885 	bl	8014bbc <strncmp>
 8016ab2:	4605      	mov	r5, r0
 8016ab4:	2800      	cmp	r0, #0
 8016ab6:	d168      	bne.n	8016b8a <__gethex+0x136>
 8016ab8:	f817 000a 	ldrb.w	r0, [r7, sl]
 8016abc:	eb07 060a 	add.w	r6, r7, sl
 8016ac0:	f7ff ffb2 	bl	8016a28 <__hexdig_fun>
 8016ac4:	2800      	cmp	r0, #0
 8016ac6:	d062      	beq.n	8016b8e <__gethex+0x13a>
 8016ac8:	4633      	mov	r3, r6
 8016aca:	7818      	ldrb	r0, [r3, #0]
 8016acc:	2830      	cmp	r0, #48	; 0x30
 8016ace:	461f      	mov	r7, r3
 8016ad0:	f103 0301 	add.w	r3, r3, #1
 8016ad4:	d0f9      	beq.n	8016aca <__gethex+0x76>
 8016ad6:	f7ff ffa7 	bl	8016a28 <__hexdig_fun>
 8016ada:	2301      	movs	r3, #1
 8016adc:	fab0 f480 	clz	r4, r0
 8016ae0:	0964      	lsrs	r4, r4, #5
 8016ae2:	4635      	mov	r5, r6
 8016ae4:	9300      	str	r3, [sp, #0]
 8016ae6:	463a      	mov	r2, r7
 8016ae8:	4616      	mov	r6, r2
 8016aea:	3201      	adds	r2, #1
 8016aec:	7830      	ldrb	r0, [r6, #0]
 8016aee:	f7ff ff9b 	bl	8016a28 <__hexdig_fun>
 8016af2:	2800      	cmp	r0, #0
 8016af4:	d1f8      	bne.n	8016ae8 <__gethex+0x94>
 8016af6:	9901      	ldr	r1, [sp, #4]
 8016af8:	4652      	mov	r2, sl
 8016afa:	4630      	mov	r0, r6
 8016afc:	f7fe f85e 	bl	8014bbc <strncmp>
 8016b00:	b980      	cbnz	r0, 8016b24 <__gethex+0xd0>
 8016b02:	b94d      	cbnz	r5, 8016b18 <__gethex+0xc4>
 8016b04:	eb06 050a 	add.w	r5, r6, sl
 8016b08:	462a      	mov	r2, r5
 8016b0a:	4616      	mov	r6, r2
 8016b0c:	3201      	adds	r2, #1
 8016b0e:	7830      	ldrb	r0, [r6, #0]
 8016b10:	f7ff ff8a 	bl	8016a28 <__hexdig_fun>
 8016b14:	2800      	cmp	r0, #0
 8016b16:	d1f8      	bne.n	8016b0a <__gethex+0xb6>
 8016b18:	1bad      	subs	r5, r5, r6
 8016b1a:	00ad      	lsls	r5, r5, #2
 8016b1c:	e004      	b.n	8016b28 <__gethex+0xd4>
 8016b1e:	2400      	movs	r4, #0
 8016b20:	4625      	mov	r5, r4
 8016b22:	e7e0      	b.n	8016ae6 <__gethex+0x92>
 8016b24:	2d00      	cmp	r5, #0
 8016b26:	d1f7      	bne.n	8016b18 <__gethex+0xc4>
 8016b28:	7833      	ldrb	r3, [r6, #0]
 8016b2a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8016b2e:	2b50      	cmp	r3, #80	; 0x50
 8016b30:	d13b      	bne.n	8016baa <__gethex+0x156>
 8016b32:	7873      	ldrb	r3, [r6, #1]
 8016b34:	2b2b      	cmp	r3, #43	; 0x2b
 8016b36:	d02c      	beq.n	8016b92 <__gethex+0x13e>
 8016b38:	2b2d      	cmp	r3, #45	; 0x2d
 8016b3a:	d02e      	beq.n	8016b9a <__gethex+0x146>
 8016b3c:	1c71      	adds	r1, r6, #1
 8016b3e:	f04f 0900 	mov.w	r9, #0
 8016b42:	7808      	ldrb	r0, [r1, #0]
 8016b44:	f7ff ff70 	bl	8016a28 <__hexdig_fun>
 8016b48:	1e43      	subs	r3, r0, #1
 8016b4a:	b2db      	uxtb	r3, r3
 8016b4c:	2b18      	cmp	r3, #24
 8016b4e:	d82c      	bhi.n	8016baa <__gethex+0x156>
 8016b50:	f1a0 0210 	sub.w	r2, r0, #16
 8016b54:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8016b58:	f7ff ff66 	bl	8016a28 <__hexdig_fun>
 8016b5c:	1e43      	subs	r3, r0, #1
 8016b5e:	b2db      	uxtb	r3, r3
 8016b60:	2b18      	cmp	r3, #24
 8016b62:	d91d      	bls.n	8016ba0 <__gethex+0x14c>
 8016b64:	f1b9 0f00 	cmp.w	r9, #0
 8016b68:	d000      	beq.n	8016b6c <__gethex+0x118>
 8016b6a:	4252      	negs	r2, r2
 8016b6c:	4415      	add	r5, r2
 8016b6e:	f8cb 1000 	str.w	r1, [fp]
 8016b72:	b1e4      	cbz	r4, 8016bae <__gethex+0x15a>
 8016b74:	9b00      	ldr	r3, [sp, #0]
 8016b76:	2b00      	cmp	r3, #0
 8016b78:	bf14      	ite	ne
 8016b7a:	2700      	movne	r7, #0
 8016b7c:	2706      	moveq	r7, #6
 8016b7e:	4638      	mov	r0, r7
 8016b80:	b009      	add	sp, #36	; 0x24
 8016b82:	ecbd 8b02 	vpop	{d8}
 8016b86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b8a:	463e      	mov	r6, r7
 8016b8c:	4625      	mov	r5, r4
 8016b8e:	2401      	movs	r4, #1
 8016b90:	e7ca      	b.n	8016b28 <__gethex+0xd4>
 8016b92:	f04f 0900 	mov.w	r9, #0
 8016b96:	1cb1      	adds	r1, r6, #2
 8016b98:	e7d3      	b.n	8016b42 <__gethex+0xee>
 8016b9a:	f04f 0901 	mov.w	r9, #1
 8016b9e:	e7fa      	b.n	8016b96 <__gethex+0x142>
 8016ba0:	230a      	movs	r3, #10
 8016ba2:	fb03 0202 	mla	r2, r3, r2, r0
 8016ba6:	3a10      	subs	r2, #16
 8016ba8:	e7d4      	b.n	8016b54 <__gethex+0x100>
 8016baa:	4631      	mov	r1, r6
 8016bac:	e7df      	b.n	8016b6e <__gethex+0x11a>
 8016bae:	1bf3      	subs	r3, r6, r7
 8016bb0:	3b01      	subs	r3, #1
 8016bb2:	4621      	mov	r1, r4
 8016bb4:	2b07      	cmp	r3, #7
 8016bb6:	dc0b      	bgt.n	8016bd0 <__gethex+0x17c>
 8016bb8:	ee18 0a10 	vmov	r0, s16
 8016bbc:	f000 fa74 	bl	80170a8 <_Balloc>
 8016bc0:	4604      	mov	r4, r0
 8016bc2:	b940      	cbnz	r0, 8016bd6 <__gethex+0x182>
 8016bc4:	4b65      	ldr	r3, [pc, #404]	; (8016d5c <__gethex+0x308>)
 8016bc6:	4602      	mov	r2, r0
 8016bc8:	21de      	movs	r1, #222	; 0xde
 8016bca:	4865      	ldr	r0, [pc, #404]	; (8016d60 <__gethex+0x30c>)
 8016bcc:	f7ff f832 	bl	8015c34 <__assert_func>
 8016bd0:	3101      	adds	r1, #1
 8016bd2:	105b      	asrs	r3, r3, #1
 8016bd4:	e7ee      	b.n	8016bb4 <__gethex+0x160>
 8016bd6:	f100 0914 	add.w	r9, r0, #20
 8016bda:	f04f 0b00 	mov.w	fp, #0
 8016bde:	f1ca 0301 	rsb	r3, sl, #1
 8016be2:	f8cd 9008 	str.w	r9, [sp, #8]
 8016be6:	f8cd b000 	str.w	fp, [sp]
 8016bea:	9306      	str	r3, [sp, #24]
 8016bec:	42b7      	cmp	r7, r6
 8016bee:	d340      	bcc.n	8016c72 <__gethex+0x21e>
 8016bf0:	9802      	ldr	r0, [sp, #8]
 8016bf2:	9b00      	ldr	r3, [sp, #0]
 8016bf4:	f840 3b04 	str.w	r3, [r0], #4
 8016bf8:	eba0 0009 	sub.w	r0, r0, r9
 8016bfc:	1080      	asrs	r0, r0, #2
 8016bfe:	0146      	lsls	r6, r0, #5
 8016c00:	6120      	str	r0, [r4, #16]
 8016c02:	4618      	mov	r0, r3
 8016c04:	f000 fb46 	bl	8017294 <__hi0bits>
 8016c08:	1a30      	subs	r0, r6, r0
 8016c0a:	f8d8 6000 	ldr.w	r6, [r8]
 8016c0e:	42b0      	cmp	r0, r6
 8016c10:	dd63      	ble.n	8016cda <__gethex+0x286>
 8016c12:	1b87      	subs	r7, r0, r6
 8016c14:	4639      	mov	r1, r7
 8016c16:	4620      	mov	r0, r4
 8016c18:	f000 fee0 	bl	80179dc <__any_on>
 8016c1c:	4682      	mov	sl, r0
 8016c1e:	b1a8      	cbz	r0, 8016c4c <__gethex+0x1f8>
 8016c20:	1e7b      	subs	r3, r7, #1
 8016c22:	1159      	asrs	r1, r3, #5
 8016c24:	f003 021f 	and.w	r2, r3, #31
 8016c28:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8016c2c:	f04f 0a01 	mov.w	sl, #1
 8016c30:	fa0a f202 	lsl.w	r2, sl, r2
 8016c34:	420a      	tst	r2, r1
 8016c36:	d009      	beq.n	8016c4c <__gethex+0x1f8>
 8016c38:	4553      	cmp	r3, sl
 8016c3a:	dd05      	ble.n	8016c48 <__gethex+0x1f4>
 8016c3c:	1eb9      	subs	r1, r7, #2
 8016c3e:	4620      	mov	r0, r4
 8016c40:	f000 fecc 	bl	80179dc <__any_on>
 8016c44:	2800      	cmp	r0, #0
 8016c46:	d145      	bne.n	8016cd4 <__gethex+0x280>
 8016c48:	f04f 0a02 	mov.w	sl, #2
 8016c4c:	4639      	mov	r1, r7
 8016c4e:	4620      	mov	r0, r4
 8016c50:	f7ff fe98 	bl	8016984 <rshift>
 8016c54:	443d      	add	r5, r7
 8016c56:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016c5a:	42ab      	cmp	r3, r5
 8016c5c:	da4c      	bge.n	8016cf8 <__gethex+0x2a4>
 8016c5e:	ee18 0a10 	vmov	r0, s16
 8016c62:	4621      	mov	r1, r4
 8016c64:	f000 fa60 	bl	8017128 <_Bfree>
 8016c68:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016c6a:	2300      	movs	r3, #0
 8016c6c:	6013      	str	r3, [r2, #0]
 8016c6e:	27a3      	movs	r7, #163	; 0xa3
 8016c70:	e785      	b.n	8016b7e <__gethex+0x12a>
 8016c72:	1e73      	subs	r3, r6, #1
 8016c74:	9a05      	ldr	r2, [sp, #20]
 8016c76:	9303      	str	r3, [sp, #12]
 8016c78:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8016c7c:	4293      	cmp	r3, r2
 8016c7e:	d019      	beq.n	8016cb4 <__gethex+0x260>
 8016c80:	f1bb 0f20 	cmp.w	fp, #32
 8016c84:	d107      	bne.n	8016c96 <__gethex+0x242>
 8016c86:	9b02      	ldr	r3, [sp, #8]
 8016c88:	9a00      	ldr	r2, [sp, #0]
 8016c8a:	f843 2b04 	str.w	r2, [r3], #4
 8016c8e:	9302      	str	r3, [sp, #8]
 8016c90:	2300      	movs	r3, #0
 8016c92:	9300      	str	r3, [sp, #0]
 8016c94:	469b      	mov	fp, r3
 8016c96:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8016c9a:	f7ff fec5 	bl	8016a28 <__hexdig_fun>
 8016c9e:	9b00      	ldr	r3, [sp, #0]
 8016ca0:	f000 000f 	and.w	r0, r0, #15
 8016ca4:	fa00 f00b 	lsl.w	r0, r0, fp
 8016ca8:	4303      	orrs	r3, r0
 8016caa:	9300      	str	r3, [sp, #0]
 8016cac:	f10b 0b04 	add.w	fp, fp, #4
 8016cb0:	9b03      	ldr	r3, [sp, #12]
 8016cb2:	e00d      	b.n	8016cd0 <__gethex+0x27c>
 8016cb4:	9b03      	ldr	r3, [sp, #12]
 8016cb6:	9a06      	ldr	r2, [sp, #24]
 8016cb8:	4413      	add	r3, r2
 8016cba:	42bb      	cmp	r3, r7
 8016cbc:	d3e0      	bcc.n	8016c80 <__gethex+0x22c>
 8016cbe:	4618      	mov	r0, r3
 8016cc0:	9901      	ldr	r1, [sp, #4]
 8016cc2:	9307      	str	r3, [sp, #28]
 8016cc4:	4652      	mov	r2, sl
 8016cc6:	f7fd ff79 	bl	8014bbc <strncmp>
 8016cca:	9b07      	ldr	r3, [sp, #28]
 8016ccc:	2800      	cmp	r0, #0
 8016cce:	d1d7      	bne.n	8016c80 <__gethex+0x22c>
 8016cd0:	461e      	mov	r6, r3
 8016cd2:	e78b      	b.n	8016bec <__gethex+0x198>
 8016cd4:	f04f 0a03 	mov.w	sl, #3
 8016cd8:	e7b8      	b.n	8016c4c <__gethex+0x1f8>
 8016cda:	da0a      	bge.n	8016cf2 <__gethex+0x29e>
 8016cdc:	1a37      	subs	r7, r6, r0
 8016cde:	4621      	mov	r1, r4
 8016ce0:	ee18 0a10 	vmov	r0, s16
 8016ce4:	463a      	mov	r2, r7
 8016ce6:	f000 fc3b 	bl	8017560 <__lshift>
 8016cea:	1bed      	subs	r5, r5, r7
 8016cec:	4604      	mov	r4, r0
 8016cee:	f100 0914 	add.w	r9, r0, #20
 8016cf2:	f04f 0a00 	mov.w	sl, #0
 8016cf6:	e7ae      	b.n	8016c56 <__gethex+0x202>
 8016cf8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8016cfc:	42a8      	cmp	r0, r5
 8016cfe:	dd72      	ble.n	8016de6 <__gethex+0x392>
 8016d00:	1b45      	subs	r5, r0, r5
 8016d02:	42ae      	cmp	r6, r5
 8016d04:	dc36      	bgt.n	8016d74 <__gethex+0x320>
 8016d06:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8016d0a:	2b02      	cmp	r3, #2
 8016d0c:	d02a      	beq.n	8016d64 <__gethex+0x310>
 8016d0e:	2b03      	cmp	r3, #3
 8016d10:	d02c      	beq.n	8016d6c <__gethex+0x318>
 8016d12:	2b01      	cmp	r3, #1
 8016d14:	d115      	bne.n	8016d42 <__gethex+0x2ee>
 8016d16:	42ae      	cmp	r6, r5
 8016d18:	d113      	bne.n	8016d42 <__gethex+0x2ee>
 8016d1a:	2e01      	cmp	r6, #1
 8016d1c:	d10b      	bne.n	8016d36 <__gethex+0x2e2>
 8016d1e:	9a04      	ldr	r2, [sp, #16]
 8016d20:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8016d24:	6013      	str	r3, [r2, #0]
 8016d26:	2301      	movs	r3, #1
 8016d28:	6123      	str	r3, [r4, #16]
 8016d2a:	f8c9 3000 	str.w	r3, [r9]
 8016d2e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016d30:	2762      	movs	r7, #98	; 0x62
 8016d32:	601c      	str	r4, [r3, #0]
 8016d34:	e723      	b.n	8016b7e <__gethex+0x12a>
 8016d36:	1e71      	subs	r1, r6, #1
 8016d38:	4620      	mov	r0, r4
 8016d3a:	f000 fe4f 	bl	80179dc <__any_on>
 8016d3e:	2800      	cmp	r0, #0
 8016d40:	d1ed      	bne.n	8016d1e <__gethex+0x2ca>
 8016d42:	ee18 0a10 	vmov	r0, s16
 8016d46:	4621      	mov	r1, r4
 8016d48:	f000 f9ee 	bl	8017128 <_Bfree>
 8016d4c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016d4e:	2300      	movs	r3, #0
 8016d50:	6013      	str	r3, [r2, #0]
 8016d52:	2750      	movs	r7, #80	; 0x50
 8016d54:	e713      	b.n	8016b7e <__gethex+0x12a>
 8016d56:	bf00      	nop
 8016d58:	08019728 	.word	0x08019728
 8016d5c:	080196ae 	.word	0x080196ae
 8016d60:	080196bf 	.word	0x080196bf
 8016d64:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016d66:	2b00      	cmp	r3, #0
 8016d68:	d1eb      	bne.n	8016d42 <__gethex+0x2ee>
 8016d6a:	e7d8      	b.n	8016d1e <__gethex+0x2ca>
 8016d6c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016d6e:	2b00      	cmp	r3, #0
 8016d70:	d1d5      	bne.n	8016d1e <__gethex+0x2ca>
 8016d72:	e7e6      	b.n	8016d42 <__gethex+0x2ee>
 8016d74:	1e6f      	subs	r7, r5, #1
 8016d76:	f1ba 0f00 	cmp.w	sl, #0
 8016d7a:	d131      	bne.n	8016de0 <__gethex+0x38c>
 8016d7c:	b127      	cbz	r7, 8016d88 <__gethex+0x334>
 8016d7e:	4639      	mov	r1, r7
 8016d80:	4620      	mov	r0, r4
 8016d82:	f000 fe2b 	bl	80179dc <__any_on>
 8016d86:	4682      	mov	sl, r0
 8016d88:	117b      	asrs	r3, r7, #5
 8016d8a:	2101      	movs	r1, #1
 8016d8c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8016d90:	f007 071f 	and.w	r7, r7, #31
 8016d94:	fa01 f707 	lsl.w	r7, r1, r7
 8016d98:	421f      	tst	r7, r3
 8016d9a:	4629      	mov	r1, r5
 8016d9c:	4620      	mov	r0, r4
 8016d9e:	bf18      	it	ne
 8016da0:	f04a 0a02 	orrne.w	sl, sl, #2
 8016da4:	1b76      	subs	r6, r6, r5
 8016da6:	f7ff fded 	bl	8016984 <rshift>
 8016daa:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8016dae:	2702      	movs	r7, #2
 8016db0:	f1ba 0f00 	cmp.w	sl, #0
 8016db4:	d048      	beq.n	8016e48 <__gethex+0x3f4>
 8016db6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8016dba:	2b02      	cmp	r3, #2
 8016dbc:	d015      	beq.n	8016dea <__gethex+0x396>
 8016dbe:	2b03      	cmp	r3, #3
 8016dc0:	d017      	beq.n	8016df2 <__gethex+0x39e>
 8016dc2:	2b01      	cmp	r3, #1
 8016dc4:	d109      	bne.n	8016dda <__gethex+0x386>
 8016dc6:	f01a 0f02 	tst.w	sl, #2
 8016dca:	d006      	beq.n	8016dda <__gethex+0x386>
 8016dcc:	f8d9 0000 	ldr.w	r0, [r9]
 8016dd0:	ea4a 0a00 	orr.w	sl, sl, r0
 8016dd4:	f01a 0f01 	tst.w	sl, #1
 8016dd8:	d10e      	bne.n	8016df8 <__gethex+0x3a4>
 8016dda:	f047 0710 	orr.w	r7, r7, #16
 8016dde:	e033      	b.n	8016e48 <__gethex+0x3f4>
 8016de0:	f04f 0a01 	mov.w	sl, #1
 8016de4:	e7d0      	b.n	8016d88 <__gethex+0x334>
 8016de6:	2701      	movs	r7, #1
 8016de8:	e7e2      	b.n	8016db0 <__gethex+0x35c>
 8016dea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016dec:	f1c3 0301 	rsb	r3, r3, #1
 8016df0:	9315      	str	r3, [sp, #84]	; 0x54
 8016df2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016df4:	2b00      	cmp	r3, #0
 8016df6:	d0f0      	beq.n	8016dda <__gethex+0x386>
 8016df8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8016dfc:	f104 0314 	add.w	r3, r4, #20
 8016e00:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8016e04:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8016e08:	f04f 0c00 	mov.w	ip, #0
 8016e0c:	4618      	mov	r0, r3
 8016e0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8016e12:	f1b2 3fff 	cmp.w	r2, #4294967295
 8016e16:	d01c      	beq.n	8016e52 <__gethex+0x3fe>
 8016e18:	3201      	adds	r2, #1
 8016e1a:	6002      	str	r2, [r0, #0]
 8016e1c:	2f02      	cmp	r7, #2
 8016e1e:	f104 0314 	add.w	r3, r4, #20
 8016e22:	d13f      	bne.n	8016ea4 <__gethex+0x450>
 8016e24:	f8d8 2000 	ldr.w	r2, [r8]
 8016e28:	3a01      	subs	r2, #1
 8016e2a:	42b2      	cmp	r2, r6
 8016e2c:	d10a      	bne.n	8016e44 <__gethex+0x3f0>
 8016e2e:	1171      	asrs	r1, r6, #5
 8016e30:	2201      	movs	r2, #1
 8016e32:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8016e36:	f006 061f 	and.w	r6, r6, #31
 8016e3a:	fa02 f606 	lsl.w	r6, r2, r6
 8016e3e:	421e      	tst	r6, r3
 8016e40:	bf18      	it	ne
 8016e42:	4617      	movne	r7, r2
 8016e44:	f047 0720 	orr.w	r7, r7, #32
 8016e48:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016e4a:	601c      	str	r4, [r3, #0]
 8016e4c:	9b04      	ldr	r3, [sp, #16]
 8016e4e:	601d      	str	r5, [r3, #0]
 8016e50:	e695      	b.n	8016b7e <__gethex+0x12a>
 8016e52:	4299      	cmp	r1, r3
 8016e54:	f843 cc04 	str.w	ip, [r3, #-4]
 8016e58:	d8d8      	bhi.n	8016e0c <__gethex+0x3b8>
 8016e5a:	68a3      	ldr	r3, [r4, #8]
 8016e5c:	459b      	cmp	fp, r3
 8016e5e:	db19      	blt.n	8016e94 <__gethex+0x440>
 8016e60:	6861      	ldr	r1, [r4, #4]
 8016e62:	ee18 0a10 	vmov	r0, s16
 8016e66:	3101      	adds	r1, #1
 8016e68:	f000 f91e 	bl	80170a8 <_Balloc>
 8016e6c:	4681      	mov	r9, r0
 8016e6e:	b918      	cbnz	r0, 8016e78 <__gethex+0x424>
 8016e70:	4b1a      	ldr	r3, [pc, #104]	; (8016edc <__gethex+0x488>)
 8016e72:	4602      	mov	r2, r0
 8016e74:	2184      	movs	r1, #132	; 0x84
 8016e76:	e6a8      	b.n	8016bca <__gethex+0x176>
 8016e78:	6922      	ldr	r2, [r4, #16]
 8016e7a:	3202      	adds	r2, #2
 8016e7c:	f104 010c 	add.w	r1, r4, #12
 8016e80:	0092      	lsls	r2, r2, #2
 8016e82:	300c      	adds	r0, #12
 8016e84:	f7fd f91c 	bl	80140c0 <memcpy>
 8016e88:	4621      	mov	r1, r4
 8016e8a:	ee18 0a10 	vmov	r0, s16
 8016e8e:	f000 f94b 	bl	8017128 <_Bfree>
 8016e92:	464c      	mov	r4, r9
 8016e94:	6923      	ldr	r3, [r4, #16]
 8016e96:	1c5a      	adds	r2, r3, #1
 8016e98:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8016e9c:	6122      	str	r2, [r4, #16]
 8016e9e:	2201      	movs	r2, #1
 8016ea0:	615a      	str	r2, [r3, #20]
 8016ea2:	e7bb      	b.n	8016e1c <__gethex+0x3c8>
 8016ea4:	6922      	ldr	r2, [r4, #16]
 8016ea6:	455a      	cmp	r2, fp
 8016ea8:	dd0b      	ble.n	8016ec2 <__gethex+0x46e>
 8016eaa:	2101      	movs	r1, #1
 8016eac:	4620      	mov	r0, r4
 8016eae:	f7ff fd69 	bl	8016984 <rshift>
 8016eb2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016eb6:	3501      	adds	r5, #1
 8016eb8:	42ab      	cmp	r3, r5
 8016eba:	f6ff aed0 	blt.w	8016c5e <__gethex+0x20a>
 8016ebe:	2701      	movs	r7, #1
 8016ec0:	e7c0      	b.n	8016e44 <__gethex+0x3f0>
 8016ec2:	f016 061f 	ands.w	r6, r6, #31
 8016ec6:	d0fa      	beq.n	8016ebe <__gethex+0x46a>
 8016ec8:	449a      	add	sl, r3
 8016eca:	f1c6 0620 	rsb	r6, r6, #32
 8016ece:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8016ed2:	f000 f9df 	bl	8017294 <__hi0bits>
 8016ed6:	42b0      	cmp	r0, r6
 8016ed8:	dbe7      	blt.n	8016eaa <__gethex+0x456>
 8016eda:	e7f0      	b.n	8016ebe <__gethex+0x46a>
 8016edc:	080196ae 	.word	0x080196ae

08016ee0 <L_shift>:
 8016ee0:	f1c2 0208 	rsb	r2, r2, #8
 8016ee4:	0092      	lsls	r2, r2, #2
 8016ee6:	b570      	push	{r4, r5, r6, lr}
 8016ee8:	f1c2 0620 	rsb	r6, r2, #32
 8016eec:	6843      	ldr	r3, [r0, #4]
 8016eee:	6804      	ldr	r4, [r0, #0]
 8016ef0:	fa03 f506 	lsl.w	r5, r3, r6
 8016ef4:	432c      	orrs	r4, r5
 8016ef6:	40d3      	lsrs	r3, r2
 8016ef8:	6004      	str	r4, [r0, #0]
 8016efa:	f840 3f04 	str.w	r3, [r0, #4]!
 8016efe:	4288      	cmp	r0, r1
 8016f00:	d3f4      	bcc.n	8016eec <L_shift+0xc>
 8016f02:	bd70      	pop	{r4, r5, r6, pc}

08016f04 <__match>:
 8016f04:	b530      	push	{r4, r5, lr}
 8016f06:	6803      	ldr	r3, [r0, #0]
 8016f08:	3301      	adds	r3, #1
 8016f0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016f0e:	b914      	cbnz	r4, 8016f16 <__match+0x12>
 8016f10:	6003      	str	r3, [r0, #0]
 8016f12:	2001      	movs	r0, #1
 8016f14:	bd30      	pop	{r4, r5, pc}
 8016f16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016f1a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8016f1e:	2d19      	cmp	r5, #25
 8016f20:	bf98      	it	ls
 8016f22:	3220      	addls	r2, #32
 8016f24:	42a2      	cmp	r2, r4
 8016f26:	d0f0      	beq.n	8016f0a <__match+0x6>
 8016f28:	2000      	movs	r0, #0
 8016f2a:	e7f3      	b.n	8016f14 <__match+0x10>

08016f2c <__hexnan>:
 8016f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f30:	680b      	ldr	r3, [r1, #0]
 8016f32:	6801      	ldr	r1, [r0, #0]
 8016f34:	115e      	asrs	r6, r3, #5
 8016f36:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8016f3a:	f013 031f 	ands.w	r3, r3, #31
 8016f3e:	b087      	sub	sp, #28
 8016f40:	bf18      	it	ne
 8016f42:	3604      	addne	r6, #4
 8016f44:	2500      	movs	r5, #0
 8016f46:	1f37      	subs	r7, r6, #4
 8016f48:	4682      	mov	sl, r0
 8016f4a:	4690      	mov	r8, r2
 8016f4c:	9301      	str	r3, [sp, #4]
 8016f4e:	f846 5c04 	str.w	r5, [r6, #-4]
 8016f52:	46b9      	mov	r9, r7
 8016f54:	463c      	mov	r4, r7
 8016f56:	9502      	str	r5, [sp, #8]
 8016f58:	46ab      	mov	fp, r5
 8016f5a:	784a      	ldrb	r2, [r1, #1]
 8016f5c:	1c4b      	adds	r3, r1, #1
 8016f5e:	9303      	str	r3, [sp, #12]
 8016f60:	b342      	cbz	r2, 8016fb4 <__hexnan+0x88>
 8016f62:	4610      	mov	r0, r2
 8016f64:	9105      	str	r1, [sp, #20]
 8016f66:	9204      	str	r2, [sp, #16]
 8016f68:	f7ff fd5e 	bl	8016a28 <__hexdig_fun>
 8016f6c:	2800      	cmp	r0, #0
 8016f6e:	d14f      	bne.n	8017010 <__hexnan+0xe4>
 8016f70:	9a04      	ldr	r2, [sp, #16]
 8016f72:	9905      	ldr	r1, [sp, #20]
 8016f74:	2a20      	cmp	r2, #32
 8016f76:	d818      	bhi.n	8016faa <__hexnan+0x7e>
 8016f78:	9b02      	ldr	r3, [sp, #8]
 8016f7a:	459b      	cmp	fp, r3
 8016f7c:	dd13      	ble.n	8016fa6 <__hexnan+0x7a>
 8016f7e:	454c      	cmp	r4, r9
 8016f80:	d206      	bcs.n	8016f90 <__hexnan+0x64>
 8016f82:	2d07      	cmp	r5, #7
 8016f84:	dc04      	bgt.n	8016f90 <__hexnan+0x64>
 8016f86:	462a      	mov	r2, r5
 8016f88:	4649      	mov	r1, r9
 8016f8a:	4620      	mov	r0, r4
 8016f8c:	f7ff ffa8 	bl	8016ee0 <L_shift>
 8016f90:	4544      	cmp	r4, r8
 8016f92:	d950      	bls.n	8017036 <__hexnan+0x10a>
 8016f94:	2300      	movs	r3, #0
 8016f96:	f1a4 0904 	sub.w	r9, r4, #4
 8016f9a:	f844 3c04 	str.w	r3, [r4, #-4]
 8016f9e:	f8cd b008 	str.w	fp, [sp, #8]
 8016fa2:	464c      	mov	r4, r9
 8016fa4:	461d      	mov	r5, r3
 8016fa6:	9903      	ldr	r1, [sp, #12]
 8016fa8:	e7d7      	b.n	8016f5a <__hexnan+0x2e>
 8016faa:	2a29      	cmp	r2, #41	; 0x29
 8016fac:	d156      	bne.n	801705c <__hexnan+0x130>
 8016fae:	3102      	adds	r1, #2
 8016fb0:	f8ca 1000 	str.w	r1, [sl]
 8016fb4:	f1bb 0f00 	cmp.w	fp, #0
 8016fb8:	d050      	beq.n	801705c <__hexnan+0x130>
 8016fba:	454c      	cmp	r4, r9
 8016fbc:	d206      	bcs.n	8016fcc <__hexnan+0xa0>
 8016fbe:	2d07      	cmp	r5, #7
 8016fc0:	dc04      	bgt.n	8016fcc <__hexnan+0xa0>
 8016fc2:	462a      	mov	r2, r5
 8016fc4:	4649      	mov	r1, r9
 8016fc6:	4620      	mov	r0, r4
 8016fc8:	f7ff ff8a 	bl	8016ee0 <L_shift>
 8016fcc:	4544      	cmp	r4, r8
 8016fce:	d934      	bls.n	801703a <__hexnan+0x10e>
 8016fd0:	f1a8 0204 	sub.w	r2, r8, #4
 8016fd4:	4623      	mov	r3, r4
 8016fd6:	f853 1b04 	ldr.w	r1, [r3], #4
 8016fda:	f842 1f04 	str.w	r1, [r2, #4]!
 8016fde:	429f      	cmp	r7, r3
 8016fe0:	d2f9      	bcs.n	8016fd6 <__hexnan+0xaa>
 8016fe2:	1b3b      	subs	r3, r7, r4
 8016fe4:	f023 0303 	bic.w	r3, r3, #3
 8016fe8:	3304      	adds	r3, #4
 8016fea:	3401      	adds	r4, #1
 8016fec:	3e03      	subs	r6, #3
 8016fee:	42b4      	cmp	r4, r6
 8016ff0:	bf88      	it	hi
 8016ff2:	2304      	movhi	r3, #4
 8016ff4:	4443      	add	r3, r8
 8016ff6:	2200      	movs	r2, #0
 8016ff8:	f843 2b04 	str.w	r2, [r3], #4
 8016ffc:	429f      	cmp	r7, r3
 8016ffe:	d2fb      	bcs.n	8016ff8 <__hexnan+0xcc>
 8017000:	683b      	ldr	r3, [r7, #0]
 8017002:	b91b      	cbnz	r3, 801700c <__hexnan+0xe0>
 8017004:	4547      	cmp	r7, r8
 8017006:	d127      	bne.n	8017058 <__hexnan+0x12c>
 8017008:	2301      	movs	r3, #1
 801700a:	603b      	str	r3, [r7, #0]
 801700c:	2005      	movs	r0, #5
 801700e:	e026      	b.n	801705e <__hexnan+0x132>
 8017010:	3501      	adds	r5, #1
 8017012:	2d08      	cmp	r5, #8
 8017014:	f10b 0b01 	add.w	fp, fp, #1
 8017018:	dd06      	ble.n	8017028 <__hexnan+0xfc>
 801701a:	4544      	cmp	r4, r8
 801701c:	d9c3      	bls.n	8016fa6 <__hexnan+0x7a>
 801701e:	2300      	movs	r3, #0
 8017020:	f844 3c04 	str.w	r3, [r4, #-4]
 8017024:	2501      	movs	r5, #1
 8017026:	3c04      	subs	r4, #4
 8017028:	6822      	ldr	r2, [r4, #0]
 801702a:	f000 000f 	and.w	r0, r0, #15
 801702e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8017032:	6022      	str	r2, [r4, #0]
 8017034:	e7b7      	b.n	8016fa6 <__hexnan+0x7a>
 8017036:	2508      	movs	r5, #8
 8017038:	e7b5      	b.n	8016fa6 <__hexnan+0x7a>
 801703a:	9b01      	ldr	r3, [sp, #4]
 801703c:	2b00      	cmp	r3, #0
 801703e:	d0df      	beq.n	8017000 <__hexnan+0xd4>
 8017040:	f04f 32ff 	mov.w	r2, #4294967295
 8017044:	f1c3 0320 	rsb	r3, r3, #32
 8017048:	fa22 f303 	lsr.w	r3, r2, r3
 801704c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8017050:	401a      	ands	r2, r3
 8017052:	f846 2c04 	str.w	r2, [r6, #-4]
 8017056:	e7d3      	b.n	8017000 <__hexnan+0xd4>
 8017058:	3f04      	subs	r7, #4
 801705a:	e7d1      	b.n	8017000 <__hexnan+0xd4>
 801705c:	2004      	movs	r0, #4
 801705e:	b007      	add	sp, #28
 8017060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017064 <_localeconv_r>:
 8017064:	4800      	ldr	r0, [pc, #0]	; (8017068 <_localeconv_r+0x4>)
 8017066:	4770      	bx	lr
 8017068:	2000165c 	.word	0x2000165c

0801706c <__ascii_mbtowc>:
 801706c:	b082      	sub	sp, #8
 801706e:	b901      	cbnz	r1, 8017072 <__ascii_mbtowc+0x6>
 8017070:	a901      	add	r1, sp, #4
 8017072:	b142      	cbz	r2, 8017086 <__ascii_mbtowc+0x1a>
 8017074:	b14b      	cbz	r3, 801708a <__ascii_mbtowc+0x1e>
 8017076:	7813      	ldrb	r3, [r2, #0]
 8017078:	600b      	str	r3, [r1, #0]
 801707a:	7812      	ldrb	r2, [r2, #0]
 801707c:	1e10      	subs	r0, r2, #0
 801707e:	bf18      	it	ne
 8017080:	2001      	movne	r0, #1
 8017082:	b002      	add	sp, #8
 8017084:	4770      	bx	lr
 8017086:	4610      	mov	r0, r2
 8017088:	e7fb      	b.n	8017082 <__ascii_mbtowc+0x16>
 801708a:	f06f 0001 	mvn.w	r0, #1
 801708e:	e7f8      	b.n	8017082 <__ascii_mbtowc+0x16>

08017090 <__malloc_lock>:
 8017090:	4801      	ldr	r0, [pc, #4]	; (8017098 <__malloc_lock+0x8>)
 8017092:	f001 ba1f 	b.w	80184d4 <__retarget_lock_acquire_recursive>
 8017096:	bf00      	nop
 8017098:	20006618 	.word	0x20006618

0801709c <__malloc_unlock>:
 801709c:	4801      	ldr	r0, [pc, #4]	; (80170a4 <__malloc_unlock+0x8>)
 801709e:	f001 ba1a 	b.w	80184d6 <__retarget_lock_release_recursive>
 80170a2:	bf00      	nop
 80170a4:	20006618 	.word	0x20006618

080170a8 <_Balloc>:
 80170a8:	b570      	push	{r4, r5, r6, lr}
 80170aa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80170ac:	4604      	mov	r4, r0
 80170ae:	460d      	mov	r5, r1
 80170b0:	b976      	cbnz	r6, 80170d0 <_Balloc+0x28>
 80170b2:	2010      	movs	r0, #16
 80170b4:	f7fc fff4 	bl	80140a0 <malloc>
 80170b8:	4602      	mov	r2, r0
 80170ba:	6260      	str	r0, [r4, #36]	; 0x24
 80170bc:	b920      	cbnz	r0, 80170c8 <_Balloc+0x20>
 80170be:	4b18      	ldr	r3, [pc, #96]	; (8017120 <_Balloc+0x78>)
 80170c0:	4818      	ldr	r0, [pc, #96]	; (8017124 <_Balloc+0x7c>)
 80170c2:	2166      	movs	r1, #102	; 0x66
 80170c4:	f7fe fdb6 	bl	8015c34 <__assert_func>
 80170c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80170cc:	6006      	str	r6, [r0, #0]
 80170ce:	60c6      	str	r6, [r0, #12]
 80170d0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80170d2:	68f3      	ldr	r3, [r6, #12]
 80170d4:	b183      	cbz	r3, 80170f8 <_Balloc+0x50>
 80170d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80170d8:	68db      	ldr	r3, [r3, #12]
 80170da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80170de:	b9b8      	cbnz	r0, 8017110 <_Balloc+0x68>
 80170e0:	2101      	movs	r1, #1
 80170e2:	fa01 f605 	lsl.w	r6, r1, r5
 80170e6:	1d72      	adds	r2, r6, #5
 80170e8:	0092      	lsls	r2, r2, #2
 80170ea:	4620      	mov	r0, r4
 80170ec:	f000 fc97 	bl	8017a1e <_calloc_r>
 80170f0:	b160      	cbz	r0, 801710c <_Balloc+0x64>
 80170f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80170f6:	e00e      	b.n	8017116 <_Balloc+0x6e>
 80170f8:	2221      	movs	r2, #33	; 0x21
 80170fa:	2104      	movs	r1, #4
 80170fc:	4620      	mov	r0, r4
 80170fe:	f000 fc8e 	bl	8017a1e <_calloc_r>
 8017102:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017104:	60f0      	str	r0, [r6, #12]
 8017106:	68db      	ldr	r3, [r3, #12]
 8017108:	2b00      	cmp	r3, #0
 801710a:	d1e4      	bne.n	80170d6 <_Balloc+0x2e>
 801710c:	2000      	movs	r0, #0
 801710e:	bd70      	pop	{r4, r5, r6, pc}
 8017110:	6802      	ldr	r2, [r0, #0]
 8017112:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8017116:	2300      	movs	r3, #0
 8017118:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801711c:	e7f7      	b.n	801710e <_Balloc+0x66>
 801711e:	bf00      	nop
 8017120:	08019468 	.word	0x08019468
 8017124:	0801973c 	.word	0x0801973c

08017128 <_Bfree>:
 8017128:	b570      	push	{r4, r5, r6, lr}
 801712a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801712c:	4605      	mov	r5, r0
 801712e:	460c      	mov	r4, r1
 8017130:	b976      	cbnz	r6, 8017150 <_Bfree+0x28>
 8017132:	2010      	movs	r0, #16
 8017134:	f7fc ffb4 	bl	80140a0 <malloc>
 8017138:	4602      	mov	r2, r0
 801713a:	6268      	str	r0, [r5, #36]	; 0x24
 801713c:	b920      	cbnz	r0, 8017148 <_Bfree+0x20>
 801713e:	4b09      	ldr	r3, [pc, #36]	; (8017164 <_Bfree+0x3c>)
 8017140:	4809      	ldr	r0, [pc, #36]	; (8017168 <_Bfree+0x40>)
 8017142:	218a      	movs	r1, #138	; 0x8a
 8017144:	f7fe fd76 	bl	8015c34 <__assert_func>
 8017148:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801714c:	6006      	str	r6, [r0, #0]
 801714e:	60c6      	str	r6, [r0, #12]
 8017150:	b13c      	cbz	r4, 8017162 <_Bfree+0x3a>
 8017152:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8017154:	6862      	ldr	r2, [r4, #4]
 8017156:	68db      	ldr	r3, [r3, #12]
 8017158:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801715c:	6021      	str	r1, [r4, #0]
 801715e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8017162:	bd70      	pop	{r4, r5, r6, pc}
 8017164:	08019468 	.word	0x08019468
 8017168:	0801973c 	.word	0x0801973c

0801716c <__multadd>:
 801716c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017170:	690e      	ldr	r6, [r1, #16]
 8017172:	4607      	mov	r7, r0
 8017174:	4698      	mov	r8, r3
 8017176:	460c      	mov	r4, r1
 8017178:	f101 0014 	add.w	r0, r1, #20
 801717c:	2300      	movs	r3, #0
 801717e:	6805      	ldr	r5, [r0, #0]
 8017180:	b2a9      	uxth	r1, r5
 8017182:	fb02 8101 	mla	r1, r2, r1, r8
 8017186:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801718a:	0c2d      	lsrs	r5, r5, #16
 801718c:	fb02 c505 	mla	r5, r2, r5, ip
 8017190:	b289      	uxth	r1, r1
 8017192:	3301      	adds	r3, #1
 8017194:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8017198:	429e      	cmp	r6, r3
 801719a:	f840 1b04 	str.w	r1, [r0], #4
 801719e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80171a2:	dcec      	bgt.n	801717e <__multadd+0x12>
 80171a4:	f1b8 0f00 	cmp.w	r8, #0
 80171a8:	d022      	beq.n	80171f0 <__multadd+0x84>
 80171aa:	68a3      	ldr	r3, [r4, #8]
 80171ac:	42b3      	cmp	r3, r6
 80171ae:	dc19      	bgt.n	80171e4 <__multadd+0x78>
 80171b0:	6861      	ldr	r1, [r4, #4]
 80171b2:	4638      	mov	r0, r7
 80171b4:	3101      	adds	r1, #1
 80171b6:	f7ff ff77 	bl	80170a8 <_Balloc>
 80171ba:	4605      	mov	r5, r0
 80171bc:	b928      	cbnz	r0, 80171ca <__multadd+0x5e>
 80171be:	4602      	mov	r2, r0
 80171c0:	4b0d      	ldr	r3, [pc, #52]	; (80171f8 <__multadd+0x8c>)
 80171c2:	480e      	ldr	r0, [pc, #56]	; (80171fc <__multadd+0x90>)
 80171c4:	21b5      	movs	r1, #181	; 0xb5
 80171c6:	f7fe fd35 	bl	8015c34 <__assert_func>
 80171ca:	6922      	ldr	r2, [r4, #16]
 80171cc:	3202      	adds	r2, #2
 80171ce:	f104 010c 	add.w	r1, r4, #12
 80171d2:	0092      	lsls	r2, r2, #2
 80171d4:	300c      	adds	r0, #12
 80171d6:	f7fc ff73 	bl	80140c0 <memcpy>
 80171da:	4621      	mov	r1, r4
 80171dc:	4638      	mov	r0, r7
 80171de:	f7ff ffa3 	bl	8017128 <_Bfree>
 80171e2:	462c      	mov	r4, r5
 80171e4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80171e8:	3601      	adds	r6, #1
 80171ea:	f8c3 8014 	str.w	r8, [r3, #20]
 80171ee:	6126      	str	r6, [r4, #16]
 80171f0:	4620      	mov	r0, r4
 80171f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80171f6:	bf00      	nop
 80171f8:	080196ae 	.word	0x080196ae
 80171fc:	0801973c 	.word	0x0801973c

08017200 <__s2b>:
 8017200:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017204:	460c      	mov	r4, r1
 8017206:	4615      	mov	r5, r2
 8017208:	461f      	mov	r7, r3
 801720a:	2209      	movs	r2, #9
 801720c:	3308      	adds	r3, #8
 801720e:	4606      	mov	r6, r0
 8017210:	fb93 f3f2 	sdiv	r3, r3, r2
 8017214:	2100      	movs	r1, #0
 8017216:	2201      	movs	r2, #1
 8017218:	429a      	cmp	r2, r3
 801721a:	db09      	blt.n	8017230 <__s2b+0x30>
 801721c:	4630      	mov	r0, r6
 801721e:	f7ff ff43 	bl	80170a8 <_Balloc>
 8017222:	b940      	cbnz	r0, 8017236 <__s2b+0x36>
 8017224:	4602      	mov	r2, r0
 8017226:	4b19      	ldr	r3, [pc, #100]	; (801728c <__s2b+0x8c>)
 8017228:	4819      	ldr	r0, [pc, #100]	; (8017290 <__s2b+0x90>)
 801722a:	21ce      	movs	r1, #206	; 0xce
 801722c:	f7fe fd02 	bl	8015c34 <__assert_func>
 8017230:	0052      	lsls	r2, r2, #1
 8017232:	3101      	adds	r1, #1
 8017234:	e7f0      	b.n	8017218 <__s2b+0x18>
 8017236:	9b08      	ldr	r3, [sp, #32]
 8017238:	6143      	str	r3, [r0, #20]
 801723a:	2d09      	cmp	r5, #9
 801723c:	f04f 0301 	mov.w	r3, #1
 8017240:	6103      	str	r3, [r0, #16]
 8017242:	dd16      	ble.n	8017272 <__s2b+0x72>
 8017244:	f104 0909 	add.w	r9, r4, #9
 8017248:	46c8      	mov	r8, r9
 801724a:	442c      	add	r4, r5
 801724c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8017250:	4601      	mov	r1, r0
 8017252:	3b30      	subs	r3, #48	; 0x30
 8017254:	220a      	movs	r2, #10
 8017256:	4630      	mov	r0, r6
 8017258:	f7ff ff88 	bl	801716c <__multadd>
 801725c:	45a0      	cmp	r8, r4
 801725e:	d1f5      	bne.n	801724c <__s2b+0x4c>
 8017260:	f1a5 0408 	sub.w	r4, r5, #8
 8017264:	444c      	add	r4, r9
 8017266:	1b2d      	subs	r5, r5, r4
 8017268:	1963      	adds	r3, r4, r5
 801726a:	42bb      	cmp	r3, r7
 801726c:	db04      	blt.n	8017278 <__s2b+0x78>
 801726e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017272:	340a      	adds	r4, #10
 8017274:	2509      	movs	r5, #9
 8017276:	e7f6      	b.n	8017266 <__s2b+0x66>
 8017278:	f814 3b01 	ldrb.w	r3, [r4], #1
 801727c:	4601      	mov	r1, r0
 801727e:	3b30      	subs	r3, #48	; 0x30
 8017280:	220a      	movs	r2, #10
 8017282:	4630      	mov	r0, r6
 8017284:	f7ff ff72 	bl	801716c <__multadd>
 8017288:	e7ee      	b.n	8017268 <__s2b+0x68>
 801728a:	bf00      	nop
 801728c:	080196ae 	.word	0x080196ae
 8017290:	0801973c 	.word	0x0801973c

08017294 <__hi0bits>:
 8017294:	0c03      	lsrs	r3, r0, #16
 8017296:	041b      	lsls	r3, r3, #16
 8017298:	b9d3      	cbnz	r3, 80172d0 <__hi0bits+0x3c>
 801729a:	0400      	lsls	r0, r0, #16
 801729c:	2310      	movs	r3, #16
 801729e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80172a2:	bf04      	itt	eq
 80172a4:	0200      	lsleq	r0, r0, #8
 80172a6:	3308      	addeq	r3, #8
 80172a8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80172ac:	bf04      	itt	eq
 80172ae:	0100      	lsleq	r0, r0, #4
 80172b0:	3304      	addeq	r3, #4
 80172b2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80172b6:	bf04      	itt	eq
 80172b8:	0080      	lsleq	r0, r0, #2
 80172ba:	3302      	addeq	r3, #2
 80172bc:	2800      	cmp	r0, #0
 80172be:	db05      	blt.n	80172cc <__hi0bits+0x38>
 80172c0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80172c4:	f103 0301 	add.w	r3, r3, #1
 80172c8:	bf08      	it	eq
 80172ca:	2320      	moveq	r3, #32
 80172cc:	4618      	mov	r0, r3
 80172ce:	4770      	bx	lr
 80172d0:	2300      	movs	r3, #0
 80172d2:	e7e4      	b.n	801729e <__hi0bits+0xa>

080172d4 <__lo0bits>:
 80172d4:	6803      	ldr	r3, [r0, #0]
 80172d6:	f013 0207 	ands.w	r2, r3, #7
 80172da:	4601      	mov	r1, r0
 80172dc:	d00b      	beq.n	80172f6 <__lo0bits+0x22>
 80172de:	07da      	lsls	r2, r3, #31
 80172e0:	d424      	bmi.n	801732c <__lo0bits+0x58>
 80172e2:	0798      	lsls	r0, r3, #30
 80172e4:	bf49      	itett	mi
 80172e6:	085b      	lsrmi	r3, r3, #1
 80172e8:	089b      	lsrpl	r3, r3, #2
 80172ea:	2001      	movmi	r0, #1
 80172ec:	600b      	strmi	r3, [r1, #0]
 80172ee:	bf5c      	itt	pl
 80172f0:	600b      	strpl	r3, [r1, #0]
 80172f2:	2002      	movpl	r0, #2
 80172f4:	4770      	bx	lr
 80172f6:	b298      	uxth	r0, r3
 80172f8:	b9b0      	cbnz	r0, 8017328 <__lo0bits+0x54>
 80172fa:	0c1b      	lsrs	r3, r3, #16
 80172fc:	2010      	movs	r0, #16
 80172fe:	f013 0fff 	tst.w	r3, #255	; 0xff
 8017302:	bf04      	itt	eq
 8017304:	0a1b      	lsreq	r3, r3, #8
 8017306:	3008      	addeq	r0, #8
 8017308:	071a      	lsls	r2, r3, #28
 801730a:	bf04      	itt	eq
 801730c:	091b      	lsreq	r3, r3, #4
 801730e:	3004      	addeq	r0, #4
 8017310:	079a      	lsls	r2, r3, #30
 8017312:	bf04      	itt	eq
 8017314:	089b      	lsreq	r3, r3, #2
 8017316:	3002      	addeq	r0, #2
 8017318:	07da      	lsls	r2, r3, #31
 801731a:	d403      	bmi.n	8017324 <__lo0bits+0x50>
 801731c:	085b      	lsrs	r3, r3, #1
 801731e:	f100 0001 	add.w	r0, r0, #1
 8017322:	d005      	beq.n	8017330 <__lo0bits+0x5c>
 8017324:	600b      	str	r3, [r1, #0]
 8017326:	4770      	bx	lr
 8017328:	4610      	mov	r0, r2
 801732a:	e7e8      	b.n	80172fe <__lo0bits+0x2a>
 801732c:	2000      	movs	r0, #0
 801732e:	4770      	bx	lr
 8017330:	2020      	movs	r0, #32
 8017332:	4770      	bx	lr

08017334 <__i2b>:
 8017334:	b510      	push	{r4, lr}
 8017336:	460c      	mov	r4, r1
 8017338:	2101      	movs	r1, #1
 801733a:	f7ff feb5 	bl	80170a8 <_Balloc>
 801733e:	4602      	mov	r2, r0
 8017340:	b928      	cbnz	r0, 801734e <__i2b+0x1a>
 8017342:	4b05      	ldr	r3, [pc, #20]	; (8017358 <__i2b+0x24>)
 8017344:	4805      	ldr	r0, [pc, #20]	; (801735c <__i2b+0x28>)
 8017346:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801734a:	f7fe fc73 	bl	8015c34 <__assert_func>
 801734e:	2301      	movs	r3, #1
 8017350:	6144      	str	r4, [r0, #20]
 8017352:	6103      	str	r3, [r0, #16]
 8017354:	bd10      	pop	{r4, pc}
 8017356:	bf00      	nop
 8017358:	080196ae 	.word	0x080196ae
 801735c:	0801973c 	.word	0x0801973c

08017360 <__multiply>:
 8017360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017364:	4614      	mov	r4, r2
 8017366:	690a      	ldr	r2, [r1, #16]
 8017368:	6923      	ldr	r3, [r4, #16]
 801736a:	429a      	cmp	r2, r3
 801736c:	bfb8      	it	lt
 801736e:	460b      	movlt	r3, r1
 8017370:	460d      	mov	r5, r1
 8017372:	bfbc      	itt	lt
 8017374:	4625      	movlt	r5, r4
 8017376:	461c      	movlt	r4, r3
 8017378:	f8d5 a010 	ldr.w	sl, [r5, #16]
 801737c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8017380:	68ab      	ldr	r3, [r5, #8]
 8017382:	6869      	ldr	r1, [r5, #4]
 8017384:	eb0a 0709 	add.w	r7, sl, r9
 8017388:	42bb      	cmp	r3, r7
 801738a:	b085      	sub	sp, #20
 801738c:	bfb8      	it	lt
 801738e:	3101      	addlt	r1, #1
 8017390:	f7ff fe8a 	bl	80170a8 <_Balloc>
 8017394:	b930      	cbnz	r0, 80173a4 <__multiply+0x44>
 8017396:	4602      	mov	r2, r0
 8017398:	4b42      	ldr	r3, [pc, #264]	; (80174a4 <__multiply+0x144>)
 801739a:	4843      	ldr	r0, [pc, #268]	; (80174a8 <__multiply+0x148>)
 801739c:	f240 115d 	movw	r1, #349	; 0x15d
 80173a0:	f7fe fc48 	bl	8015c34 <__assert_func>
 80173a4:	f100 0614 	add.w	r6, r0, #20
 80173a8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80173ac:	4633      	mov	r3, r6
 80173ae:	2200      	movs	r2, #0
 80173b0:	4543      	cmp	r3, r8
 80173b2:	d31e      	bcc.n	80173f2 <__multiply+0x92>
 80173b4:	f105 0c14 	add.w	ip, r5, #20
 80173b8:	f104 0314 	add.w	r3, r4, #20
 80173bc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80173c0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80173c4:	9202      	str	r2, [sp, #8]
 80173c6:	ebac 0205 	sub.w	r2, ip, r5
 80173ca:	3a15      	subs	r2, #21
 80173cc:	f022 0203 	bic.w	r2, r2, #3
 80173d0:	3204      	adds	r2, #4
 80173d2:	f105 0115 	add.w	r1, r5, #21
 80173d6:	458c      	cmp	ip, r1
 80173d8:	bf38      	it	cc
 80173da:	2204      	movcc	r2, #4
 80173dc:	9201      	str	r2, [sp, #4]
 80173de:	9a02      	ldr	r2, [sp, #8]
 80173e0:	9303      	str	r3, [sp, #12]
 80173e2:	429a      	cmp	r2, r3
 80173e4:	d808      	bhi.n	80173f8 <__multiply+0x98>
 80173e6:	2f00      	cmp	r7, #0
 80173e8:	dc55      	bgt.n	8017496 <__multiply+0x136>
 80173ea:	6107      	str	r7, [r0, #16]
 80173ec:	b005      	add	sp, #20
 80173ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80173f2:	f843 2b04 	str.w	r2, [r3], #4
 80173f6:	e7db      	b.n	80173b0 <__multiply+0x50>
 80173f8:	f8b3 a000 	ldrh.w	sl, [r3]
 80173fc:	f1ba 0f00 	cmp.w	sl, #0
 8017400:	d020      	beq.n	8017444 <__multiply+0xe4>
 8017402:	f105 0e14 	add.w	lr, r5, #20
 8017406:	46b1      	mov	r9, r6
 8017408:	2200      	movs	r2, #0
 801740a:	f85e 4b04 	ldr.w	r4, [lr], #4
 801740e:	f8d9 b000 	ldr.w	fp, [r9]
 8017412:	b2a1      	uxth	r1, r4
 8017414:	fa1f fb8b 	uxth.w	fp, fp
 8017418:	fb0a b101 	mla	r1, sl, r1, fp
 801741c:	4411      	add	r1, r2
 801741e:	f8d9 2000 	ldr.w	r2, [r9]
 8017422:	0c24      	lsrs	r4, r4, #16
 8017424:	0c12      	lsrs	r2, r2, #16
 8017426:	fb0a 2404 	mla	r4, sl, r4, r2
 801742a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801742e:	b289      	uxth	r1, r1
 8017430:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8017434:	45f4      	cmp	ip, lr
 8017436:	f849 1b04 	str.w	r1, [r9], #4
 801743a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801743e:	d8e4      	bhi.n	801740a <__multiply+0xaa>
 8017440:	9901      	ldr	r1, [sp, #4]
 8017442:	5072      	str	r2, [r6, r1]
 8017444:	9a03      	ldr	r2, [sp, #12]
 8017446:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801744a:	3304      	adds	r3, #4
 801744c:	f1b9 0f00 	cmp.w	r9, #0
 8017450:	d01f      	beq.n	8017492 <__multiply+0x132>
 8017452:	6834      	ldr	r4, [r6, #0]
 8017454:	f105 0114 	add.w	r1, r5, #20
 8017458:	46b6      	mov	lr, r6
 801745a:	f04f 0a00 	mov.w	sl, #0
 801745e:	880a      	ldrh	r2, [r1, #0]
 8017460:	f8be b002 	ldrh.w	fp, [lr, #2]
 8017464:	fb09 b202 	mla	r2, r9, r2, fp
 8017468:	4492      	add	sl, r2
 801746a:	b2a4      	uxth	r4, r4
 801746c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8017470:	f84e 4b04 	str.w	r4, [lr], #4
 8017474:	f851 4b04 	ldr.w	r4, [r1], #4
 8017478:	f8be 2000 	ldrh.w	r2, [lr]
 801747c:	0c24      	lsrs	r4, r4, #16
 801747e:	fb09 2404 	mla	r4, r9, r4, r2
 8017482:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8017486:	458c      	cmp	ip, r1
 8017488:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801748c:	d8e7      	bhi.n	801745e <__multiply+0xfe>
 801748e:	9a01      	ldr	r2, [sp, #4]
 8017490:	50b4      	str	r4, [r6, r2]
 8017492:	3604      	adds	r6, #4
 8017494:	e7a3      	b.n	80173de <__multiply+0x7e>
 8017496:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801749a:	2b00      	cmp	r3, #0
 801749c:	d1a5      	bne.n	80173ea <__multiply+0x8a>
 801749e:	3f01      	subs	r7, #1
 80174a0:	e7a1      	b.n	80173e6 <__multiply+0x86>
 80174a2:	bf00      	nop
 80174a4:	080196ae 	.word	0x080196ae
 80174a8:	0801973c 	.word	0x0801973c

080174ac <__pow5mult>:
 80174ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80174b0:	4615      	mov	r5, r2
 80174b2:	f012 0203 	ands.w	r2, r2, #3
 80174b6:	4606      	mov	r6, r0
 80174b8:	460f      	mov	r7, r1
 80174ba:	d007      	beq.n	80174cc <__pow5mult+0x20>
 80174bc:	4c25      	ldr	r4, [pc, #148]	; (8017554 <__pow5mult+0xa8>)
 80174be:	3a01      	subs	r2, #1
 80174c0:	2300      	movs	r3, #0
 80174c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80174c6:	f7ff fe51 	bl	801716c <__multadd>
 80174ca:	4607      	mov	r7, r0
 80174cc:	10ad      	asrs	r5, r5, #2
 80174ce:	d03d      	beq.n	801754c <__pow5mult+0xa0>
 80174d0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80174d2:	b97c      	cbnz	r4, 80174f4 <__pow5mult+0x48>
 80174d4:	2010      	movs	r0, #16
 80174d6:	f7fc fde3 	bl	80140a0 <malloc>
 80174da:	4602      	mov	r2, r0
 80174dc:	6270      	str	r0, [r6, #36]	; 0x24
 80174de:	b928      	cbnz	r0, 80174ec <__pow5mult+0x40>
 80174e0:	4b1d      	ldr	r3, [pc, #116]	; (8017558 <__pow5mult+0xac>)
 80174e2:	481e      	ldr	r0, [pc, #120]	; (801755c <__pow5mult+0xb0>)
 80174e4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80174e8:	f7fe fba4 	bl	8015c34 <__assert_func>
 80174ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80174f0:	6004      	str	r4, [r0, #0]
 80174f2:	60c4      	str	r4, [r0, #12]
 80174f4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80174f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80174fc:	b94c      	cbnz	r4, 8017512 <__pow5mult+0x66>
 80174fe:	f240 2171 	movw	r1, #625	; 0x271
 8017502:	4630      	mov	r0, r6
 8017504:	f7ff ff16 	bl	8017334 <__i2b>
 8017508:	2300      	movs	r3, #0
 801750a:	f8c8 0008 	str.w	r0, [r8, #8]
 801750e:	4604      	mov	r4, r0
 8017510:	6003      	str	r3, [r0, #0]
 8017512:	f04f 0900 	mov.w	r9, #0
 8017516:	07eb      	lsls	r3, r5, #31
 8017518:	d50a      	bpl.n	8017530 <__pow5mult+0x84>
 801751a:	4639      	mov	r1, r7
 801751c:	4622      	mov	r2, r4
 801751e:	4630      	mov	r0, r6
 8017520:	f7ff ff1e 	bl	8017360 <__multiply>
 8017524:	4639      	mov	r1, r7
 8017526:	4680      	mov	r8, r0
 8017528:	4630      	mov	r0, r6
 801752a:	f7ff fdfd 	bl	8017128 <_Bfree>
 801752e:	4647      	mov	r7, r8
 8017530:	106d      	asrs	r5, r5, #1
 8017532:	d00b      	beq.n	801754c <__pow5mult+0xa0>
 8017534:	6820      	ldr	r0, [r4, #0]
 8017536:	b938      	cbnz	r0, 8017548 <__pow5mult+0x9c>
 8017538:	4622      	mov	r2, r4
 801753a:	4621      	mov	r1, r4
 801753c:	4630      	mov	r0, r6
 801753e:	f7ff ff0f 	bl	8017360 <__multiply>
 8017542:	6020      	str	r0, [r4, #0]
 8017544:	f8c0 9000 	str.w	r9, [r0]
 8017548:	4604      	mov	r4, r0
 801754a:	e7e4      	b.n	8017516 <__pow5mult+0x6a>
 801754c:	4638      	mov	r0, r7
 801754e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017552:	bf00      	nop
 8017554:	08019890 	.word	0x08019890
 8017558:	08019468 	.word	0x08019468
 801755c:	0801973c 	.word	0x0801973c

08017560 <__lshift>:
 8017560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017564:	460c      	mov	r4, r1
 8017566:	6849      	ldr	r1, [r1, #4]
 8017568:	6923      	ldr	r3, [r4, #16]
 801756a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801756e:	68a3      	ldr	r3, [r4, #8]
 8017570:	4607      	mov	r7, r0
 8017572:	4691      	mov	r9, r2
 8017574:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8017578:	f108 0601 	add.w	r6, r8, #1
 801757c:	42b3      	cmp	r3, r6
 801757e:	db0b      	blt.n	8017598 <__lshift+0x38>
 8017580:	4638      	mov	r0, r7
 8017582:	f7ff fd91 	bl	80170a8 <_Balloc>
 8017586:	4605      	mov	r5, r0
 8017588:	b948      	cbnz	r0, 801759e <__lshift+0x3e>
 801758a:	4602      	mov	r2, r0
 801758c:	4b28      	ldr	r3, [pc, #160]	; (8017630 <__lshift+0xd0>)
 801758e:	4829      	ldr	r0, [pc, #164]	; (8017634 <__lshift+0xd4>)
 8017590:	f240 11d9 	movw	r1, #473	; 0x1d9
 8017594:	f7fe fb4e 	bl	8015c34 <__assert_func>
 8017598:	3101      	adds	r1, #1
 801759a:	005b      	lsls	r3, r3, #1
 801759c:	e7ee      	b.n	801757c <__lshift+0x1c>
 801759e:	2300      	movs	r3, #0
 80175a0:	f100 0114 	add.w	r1, r0, #20
 80175a4:	f100 0210 	add.w	r2, r0, #16
 80175a8:	4618      	mov	r0, r3
 80175aa:	4553      	cmp	r3, sl
 80175ac:	db33      	blt.n	8017616 <__lshift+0xb6>
 80175ae:	6920      	ldr	r0, [r4, #16]
 80175b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80175b4:	f104 0314 	add.w	r3, r4, #20
 80175b8:	f019 091f 	ands.w	r9, r9, #31
 80175bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80175c0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80175c4:	d02b      	beq.n	801761e <__lshift+0xbe>
 80175c6:	f1c9 0e20 	rsb	lr, r9, #32
 80175ca:	468a      	mov	sl, r1
 80175cc:	2200      	movs	r2, #0
 80175ce:	6818      	ldr	r0, [r3, #0]
 80175d0:	fa00 f009 	lsl.w	r0, r0, r9
 80175d4:	4302      	orrs	r2, r0
 80175d6:	f84a 2b04 	str.w	r2, [sl], #4
 80175da:	f853 2b04 	ldr.w	r2, [r3], #4
 80175de:	459c      	cmp	ip, r3
 80175e0:	fa22 f20e 	lsr.w	r2, r2, lr
 80175e4:	d8f3      	bhi.n	80175ce <__lshift+0x6e>
 80175e6:	ebac 0304 	sub.w	r3, ip, r4
 80175ea:	3b15      	subs	r3, #21
 80175ec:	f023 0303 	bic.w	r3, r3, #3
 80175f0:	3304      	adds	r3, #4
 80175f2:	f104 0015 	add.w	r0, r4, #21
 80175f6:	4584      	cmp	ip, r0
 80175f8:	bf38      	it	cc
 80175fa:	2304      	movcc	r3, #4
 80175fc:	50ca      	str	r2, [r1, r3]
 80175fe:	b10a      	cbz	r2, 8017604 <__lshift+0xa4>
 8017600:	f108 0602 	add.w	r6, r8, #2
 8017604:	3e01      	subs	r6, #1
 8017606:	4638      	mov	r0, r7
 8017608:	612e      	str	r6, [r5, #16]
 801760a:	4621      	mov	r1, r4
 801760c:	f7ff fd8c 	bl	8017128 <_Bfree>
 8017610:	4628      	mov	r0, r5
 8017612:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017616:	f842 0f04 	str.w	r0, [r2, #4]!
 801761a:	3301      	adds	r3, #1
 801761c:	e7c5      	b.n	80175aa <__lshift+0x4a>
 801761e:	3904      	subs	r1, #4
 8017620:	f853 2b04 	ldr.w	r2, [r3], #4
 8017624:	f841 2f04 	str.w	r2, [r1, #4]!
 8017628:	459c      	cmp	ip, r3
 801762a:	d8f9      	bhi.n	8017620 <__lshift+0xc0>
 801762c:	e7ea      	b.n	8017604 <__lshift+0xa4>
 801762e:	bf00      	nop
 8017630:	080196ae 	.word	0x080196ae
 8017634:	0801973c 	.word	0x0801973c

08017638 <__mcmp>:
 8017638:	b530      	push	{r4, r5, lr}
 801763a:	6902      	ldr	r2, [r0, #16]
 801763c:	690c      	ldr	r4, [r1, #16]
 801763e:	1b12      	subs	r2, r2, r4
 8017640:	d10e      	bne.n	8017660 <__mcmp+0x28>
 8017642:	f100 0314 	add.w	r3, r0, #20
 8017646:	3114      	adds	r1, #20
 8017648:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801764c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8017650:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8017654:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8017658:	42a5      	cmp	r5, r4
 801765a:	d003      	beq.n	8017664 <__mcmp+0x2c>
 801765c:	d305      	bcc.n	801766a <__mcmp+0x32>
 801765e:	2201      	movs	r2, #1
 8017660:	4610      	mov	r0, r2
 8017662:	bd30      	pop	{r4, r5, pc}
 8017664:	4283      	cmp	r3, r0
 8017666:	d3f3      	bcc.n	8017650 <__mcmp+0x18>
 8017668:	e7fa      	b.n	8017660 <__mcmp+0x28>
 801766a:	f04f 32ff 	mov.w	r2, #4294967295
 801766e:	e7f7      	b.n	8017660 <__mcmp+0x28>

08017670 <__mdiff>:
 8017670:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017674:	460c      	mov	r4, r1
 8017676:	4606      	mov	r6, r0
 8017678:	4611      	mov	r1, r2
 801767a:	4620      	mov	r0, r4
 801767c:	4617      	mov	r7, r2
 801767e:	f7ff ffdb 	bl	8017638 <__mcmp>
 8017682:	1e05      	subs	r5, r0, #0
 8017684:	d110      	bne.n	80176a8 <__mdiff+0x38>
 8017686:	4629      	mov	r1, r5
 8017688:	4630      	mov	r0, r6
 801768a:	f7ff fd0d 	bl	80170a8 <_Balloc>
 801768e:	b930      	cbnz	r0, 801769e <__mdiff+0x2e>
 8017690:	4b39      	ldr	r3, [pc, #228]	; (8017778 <__mdiff+0x108>)
 8017692:	4602      	mov	r2, r0
 8017694:	f240 2132 	movw	r1, #562	; 0x232
 8017698:	4838      	ldr	r0, [pc, #224]	; (801777c <__mdiff+0x10c>)
 801769a:	f7fe facb 	bl	8015c34 <__assert_func>
 801769e:	2301      	movs	r3, #1
 80176a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80176a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80176a8:	bfa4      	itt	ge
 80176aa:	463b      	movge	r3, r7
 80176ac:	4627      	movge	r7, r4
 80176ae:	4630      	mov	r0, r6
 80176b0:	6879      	ldr	r1, [r7, #4]
 80176b2:	bfa6      	itte	ge
 80176b4:	461c      	movge	r4, r3
 80176b6:	2500      	movge	r5, #0
 80176b8:	2501      	movlt	r5, #1
 80176ba:	f7ff fcf5 	bl	80170a8 <_Balloc>
 80176be:	b920      	cbnz	r0, 80176ca <__mdiff+0x5a>
 80176c0:	4b2d      	ldr	r3, [pc, #180]	; (8017778 <__mdiff+0x108>)
 80176c2:	4602      	mov	r2, r0
 80176c4:	f44f 7110 	mov.w	r1, #576	; 0x240
 80176c8:	e7e6      	b.n	8017698 <__mdiff+0x28>
 80176ca:	693e      	ldr	r6, [r7, #16]
 80176cc:	60c5      	str	r5, [r0, #12]
 80176ce:	6925      	ldr	r5, [r4, #16]
 80176d0:	f107 0114 	add.w	r1, r7, #20
 80176d4:	f104 0914 	add.w	r9, r4, #20
 80176d8:	f100 0e14 	add.w	lr, r0, #20
 80176dc:	f107 0210 	add.w	r2, r7, #16
 80176e0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80176e4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80176e8:	46f2      	mov	sl, lr
 80176ea:	2700      	movs	r7, #0
 80176ec:	f859 3b04 	ldr.w	r3, [r9], #4
 80176f0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80176f4:	fa1f f883 	uxth.w	r8, r3
 80176f8:	fa17 f78b 	uxtah	r7, r7, fp
 80176fc:	0c1b      	lsrs	r3, r3, #16
 80176fe:	eba7 0808 	sub.w	r8, r7, r8
 8017702:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8017706:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801770a:	fa1f f888 	uxth.w	r8, r8
 801770e:	141f      	asrs	r7, r3, #16
 8017710:	454d      	cmp	r5, r9
 8017712:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8017716:	f84a 3b04 	str.w	r3, [sl], #4
 801771a:	d8e7      	bhi.n	80176ec <__mdiff+0x7c>
 801771c:	1b2b      	subs	r3, r5, r4
 801771e:	3b15      	subs	r3, #21
 8017720:	f023 0303 	bic.w	r3, r3, #3
 8017724:	3304      	adds	r3, #4
 8017726:	3415      	adds	r4, #21
 8017728:	42a5      	cmp	r5, r4
 801772a:	bf38      	it	cc
 801772c:	2304      	movcc	r3, #4
 801772e:	4419      	add	r1, r3
 8017730:	4473      	add	r3, lr
 8017732:	469e      	mov	lr, r3
 8017734:	460d      	mov	r5, r1
 8017736:	4565      	cmp	r5, ip
 8017738:	d30e      	bcc.n	8017758 <__mdiff+0xe8>
 801773a:	f10c 0203 	add.w	r2, ip, #3
 801773e:	1a52      	subs	r2, r2, r1
 8017740:	f022 0203 	bic.w	r2, r2, #3
 8017744:	3903      	subs	r1, #3
 8017746:	458c      	cmp	ip, r1
 8017748:	bf38      	it	cc
 801774a:	2200      	movcc	r2, #0
 801774c:	441a      	add	r2, r3
 801774e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8017752:	b17b      	cbz	r3, 8017774 <__mdiff+0x104>
 8017754:	6106      	str	r6, [r0, #16]
 8017756:	e7a5      	b.n	80176a4 <__mdiff+0x34>
 8017758:	f855 8b04 	ldr.w	r8, [r5], #4
 801775c:	fa17 f488 	uxtah	r4, r7, r8
 8017760:	1422      	asrs	r2, r4, #16
 8017762:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8017766:	b2a4      	uxth	r4, r4
 8017768:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801776c:	f84e 4b04 	str.w	r4, [lr], #4
 8017770:	1417      	asrs	r7, r2, #16
 8017772:	e7e0      	b.n	8017736 <__mdiff+0xc6>
 8017774:	3e01      	subs	r6, #1
 8017776:	e7ea      	b.n	801774e <__mdiff+0xde>
 8017778:	080196ae 	.word	0x080196ae
 801777c:	0801973c 	.word	0x0801973c

08017780 <__ulp>:
 8017780:	b082      	sub	sp, #8
 8017782:	ed8d 0b00 	vstr	d0, [sp]
 8017786:	9b01      	ldr	r3, [sp, #4]
 8017788:	4912      	ldr	r1, [pc, #72]	; (80177d4 <__ulp+0x54>)
 801778a:	4019      	ands	r1, r3
 801778c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8017790:	2900      	cmp	r1, #0
 8017792:	dd05      	ble.n	80177a0 <__ulp+0x20>
 8017794:	2200      	movs	r2, #0
 8017796:	460b      	mov	r3, r1
 8017798:	ec43 2b10 	vmov	d0, r2, r3
 801779c:	b002      	add	sp, #8
 801779e:	4770      	bx	lr
 80177a0:	4249      	negs	r1, r1
 80177a2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80177a6:	ea4f 5021 	mov.w	r0, r1, asr #20
 80177aa:	f04f 0200 	mov.w	r2, #0
 80177ae:	f04f 0300 	mov.w	r3, #0
 80177b2:	da04      	bge.n	80177be <__ulp+0x3e>
 80177b4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80177b8:	fa41 f300 	asr.w	r3, r1, r0
 80177bc:	e7ec      	b.n	8017798 <__ulp+0x18>
 80177be:	f1a0 0114 	sub.w	r1, r0, #20
 80177c2:	291e      	cmp	r1, #30
 80177c4:	bfda      	itte	le
 80177c6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80177ca:	fa20 f101 	lsrle.w	r1, r0, r1
 80177ce:	2101      	movgt	r1, #1
 80177d0:	460a      	mov	r2, r1
 80177d2:	e7e1      	b.n	8017798 <__ulp+0x18>
 80177d4:	7ff00000 	.word	0x7ff00000

080177d8 <__b2d>:
 80177d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80177da:	6905      	ldr	r5, [r0, #16]
 80177dc:	f100 0714 	add.w	r7, r0, #20
 80177e0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80177e4:	1f2e      	subs	r6, r5, #4
 80177e6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80177ea:	4620      	mov	r0, r4
 80177ec:	f7ff fd52 	bl	8017294 <__hi0bits>
 80177f0:	f1c0 0320 	rsb	r3, r0, #32
 80177f4:	280a      	cmp	r0, #10
 80177f6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8017874 <__b2d+0x9c>
 80177fa:	600b      	str	r3, [r1, #0]
 80177fc:	dc14      	bgt.n	8017828 <__b2d+0x50>
 80177fe:	f1c0 0e0b 	rsb	lr, r0, #11
 8017802:	fa24 f10e 	lsr.w	r1, r4, lr
 8017806:	42b7      	cmp	r7, r6
 8017808:	ea41 030c 	orr.w	r3, r1, ip
 801780c:	bf34      	ite	cc
 801780e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8017812:	2100      	movcs	r1, #0
 8017814:	3015      	adds	r0, #21
 8017816:	fa04 f000 	lsl.w	r0, r4, r0
 801781a:	fa21 f10e 	lsr.w	r1, r1, lr
 801781e:	ea40 0201 	orr.w	r2, r0, r1
 8017822:	ec43 2b10 	vmov	d0, r2, r3
 8017826:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017828:	42b7      	cmp	r7, r6
 801782a:	bf3a      	itte	cc
 801782c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8017830:	f1a5 0608 	subcc.w	r6, r5, #8
 8017834:	2100      	movcs	r1, #0
 8017836:	380b      	subs	r0, #11
 8017838:	d017      	beq.n	801786a <__b2d+0x92>
 801783a:	f1c0 0c20 	rsb	ip, r0, #32
 801783e:	fa04 f500 	lsl.w	r5, r4, r0
 8017842:	42be      	cmp	r6, r7
 8017844:	fa21 f40c 	lsr.w	r4, r1, ip
 8017848:	ea45 0504 	orr.w	r5, r5, r4
 801784c:	bf8c      	ite	hi
 801784e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8017852:	2400      	movls	r4, #0
 8017854:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8017858:	fa01 f000 	lsl.w	r0, r1, r0
 801785c:	fa24 f40c 	lsr.w	r4, r4, ip
 8017860:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8017864:	ea40 0204 	orr.w	r2, r0, r4
 8017868:	e7db      	b.n	8017822 <__b2d+0x4a>
 801786a:	ea44 030c 	orr.w	r3, r4, ip
 801786e:	460a      	mov	r2, r1
 8017870:	e7d7      	b.n	8017822 <__b2d+0x4a>
 8017872:	bf00      	nop
 8017874:	3ff00000 	.word	0x3ff00000

08017878 <__d2b>:
 8017878:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801787c:	4689      	mov	r9, r1
 801787e:	2101      	movs	r1, #1
 8017880:	ec57 6b10 	vmov	r6, r7, d0
 8017884:	4690      	mov	r8, r2
 8017886:	f7ff fc0f 	bl	80170a8 <_Balloc>
 801788a:	4604      	mov	r4, r0
 801788c:	b930      	cbnz	r0, 801789c <__d2b+0x24>
 801788e:	4602      	mov	r2, r0
 8017890:	4b25      	ldr	r3, [pc, #148]	; (8017928 <__d2b+0xb0>)
 8017892:	4826      	ldr	r0, [pc, #152]	; (801792c <__d2b+0xb4>)
 8017894:	f240 310a 	movw	r1, #778	; 0x30a
 8017898:	f7fe f9cc 	bl	8015c34 <__assert_func>
 801789c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80178a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80178a4:	bb35      	cbnz	r5, 80178f4 <__d2b+0x7c>
 80178a6:	2e00      	cmp	r6, #0
 80178a8:	9301      	str	r3, [sp, #4]
 80178aa:	d028      	beq.n	80178fe <__d2b+0x86>
 80178ac:	4668      	mov	r0, sp
 80178ae:	9600      	str	r6, [sp, #0]
 80178b0:	f7ff fd10 	bl	80172d4 <__lo0bits>
 80178b4:	9900      	ldr	r1, [sp, #0]
 80178b6:	b300      	cbz	r0, 80178fa <__d2b+0x82>
 80178b8:	9a01      	ldr	r2, [sp, #4]
 80178ba:	f1c0 0320 	rsb	r3, r0, #32
 80178be:	fa02 f303 	lsl.w	r3, r2, r3
 80178c2:	430b      	orrs	r3, r1
 80178c4:	40c2      	lsrs	r2, r0
 80178c6:	6163      	str	r3, [r4, #20]
 80178c8:	9201      	str	r2, [sp, #4]
 80178ca:	9b01      	ldr	r3, [sp, #4]
 80178cc:	61a3      	str	r3, [r4, #24]
 80178ce:	2b00      	cmp	r3, #0
 80178d0:	bf14      	ite	ne
 80178d2:	2202      	movne	r2, #2
 80178d4:	2201      	moveq	r2, #1
 80178d6:	6122      	str	r2, [r4, #16]
 80178d8:	b1d5      	cbz	r5, 8017910 <__d2b+0x98>
 80178da:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80178de:	4405      	add	r5, r0
 80178e0:	f8c9 5000 	str.w	r5, [r9]
 80178e4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80178e8:	f8c8 0000 	str.w	r0, [r8]
 80178ec:	4620      	mov	r0, r4
 80178ee:	b003      	add	sp, #12
 80178f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80178f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80178f8:	e7d5      	b.n	80178a6 <__d2b+0x2e>
 80178fa:	6161      	str	r1, [r4, #20]
 80178fc:	e7e5      	b.n	80178ca <__d2b+0x52>
 80178fe:	a801      	add	r0, sp, #4
 8017900:	f7ff fce8 	bl	80172d4 <__lo0bits>
 8017904:	9b01      	ldr	r3, [sp, #4]
 8017906:	6163      	str	r3, [r4, #20]
 8017908:	2201      	movs	r2, #1
 801790a:	6122      	str	r2, [r4, #16]
 801790c:	3020      	adds	r0, #32
 801790e:	e7e3      	b.n	80178d8 <__d2b+0x60>
 8017910:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8017914:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8017918:	f8c9 0000 	str.w	r0, [r9]
 801791c:	6918      	ldr	r0, [r3, #16]
 801791e:	f7ff fcb9 	bl	8017294 <__hi0bits>
 8017922:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8017926:	e7df      	b.n	80178e8 <__d2b+0x70>
 8017928:	080196ae 	.word	0x080196ae
 801792c:	0801973c 	.word	0x0801973c

08017930 <__ratio>:
 8017930:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017934:	4688      	mov	r8, r1
 8017936:	4669      	mov	r1, sp
 8017938:	4681      	mov	r9, r0
 801793a:	f7ff ff4d 	bl	80177d8 <__b2d>
 801793e:	a901      	add	r1, sp, #4
 8017940:	4640      	mov	r0, r8
 8017942:	ec55 4b10 	vmov	r4, r5, d0
 8017946:	f7ff ff47 	bl	80177d8 <__b2d>
 801794a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801794e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8017952:	eba3 0c02 	sub.w	ip, r3, r2
 8017956:	e9dd 3200 	ldrd	r3, r2, [sp]
 801795a:	1a9b      	subs	r3, r3, r2
 801795c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8017960:	ec51 0b10 	vmov	r0, r1, d0
 8017964:	2b00      	cmp	r3, #0
 8017966:	bfd6      	itet	le
 8017968:	460a      	movle	r2, r1
 801796a:	462a      	movgt	r2, r5
 801796c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8017970:	468b      	mov	fp, r1
 8017972:	462f      	mov	r7, r5
 8017974:	bfd4      	ite	le
 8017976:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801797a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801797e:	4620      	mov	r0, r4
 8017980:	ee10 2a10 	vmov	r2, s0
 8017984:	465b      	mov	r3, fp
 8017986:	4639      	mov	r1, r7
 8017988:	f7e9 fb70 	bl	800106c <__aeabi_ddiv>
 801798c:	ec41 0b10 	vmov	d0, r0, r1
 8017990:	b003      	add	sp, #12
 8017992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017996 <__copybits>:
 8017996:	3901      	subs	r1, #1
 8017998:	b570      	push	{r4, r5, r6, lr}
 801799a:	1149      	asrs	r1, r1, #5
 801799c:	6914      	ldr	r4, [r2, #16]
 801799e:	3101      	adds	r1, #1
 80179a0:	f102 0314 	add.w	r3, r2, #20
 80179a4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80179a8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80179ac:	1f05      	subs	r5, r0, #4
 80179ae:	42a3      	cmp	r3, r4
 80179b0:	d30c      	bcc.n	80179cc <__copybits+0x36>
 80179b2:	1aa3      	subs	r3, r4, r2
 80179b4:	3b11      	subs	r3, #17
 80179b6:	f023 0303 	bic.w	r3, r3, #3
 80179ba:	3211      	adds	r2, #17
 80179bc:	42a2      	cmp	r2, r4
 80179be:	bf88      	it	hi
 80179c0:	2300      	movhi	r3, #0
 80179c2:	4418      	add	r0, r3
 80179c4:	2300      	movs	r3, #0
 80179c6:	4288      	cmp	r0, r1
 80179c8:	d305      	bcc.n	80179d6 <__copybits+0x40>
 80179ca:	bd70      	pop	{r4, r5, r6, pc}
 80179cc:	f853 6b04 	ldr.w	r6, [r3], #4
 80179d0:	f845 6f04 	str.w	r6, [r5, #4]!
 80179d4:	e7eb      	b.n	80179ae <__copybits+0x18>
 80179d6:	f840 3b04 	str.w	r3, [r0], #4
 80179da:	e7f4      	b.n	80179c6 <__copybits+0x30>

080179dc <__any_on>:
 80179dc:	f100 0214 	add.w	r2, r0, #20
 80179e0:	6900      	ldr	r0, [r0, #16]
 80179e2:	114b      	asrs	r3, r1, #5
 80179e4:	4298      	cmp	r0, r3
 80179e6:	b510      	push	{r4, lr}
 80179e8:	db11      	blt.n	8017a0e <__any_on+0x32>
 80179ea:	dd0a      	ble.n	8017a02 <__any_on+0x26>
 80179ec:	f011 011f 	ands.w	r1, r1, #31
 80179f0:	d007      	beq.n	8017a02 <__any_on+0x26>
 80179f2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80179f6:	fa24 f001 	lsr.w	r0, r4, r1
 80179fa:	fa00 f101 	lsl.w	r1, r0, r1
 80179fe:	428c      	cmp	r4, r1
 8017a00:	d10b      	bne.n	8017a1a <__any_on+0x3e>
 8017a02:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8017a06:	4293      	cmp	r3, r2
 8017a08:	d803      	bhi.n	8017a12 <__any_on+0x36>
 8017a0a:	2000      	movs	r0, #0
 8017a0c:	bd10      	pop	{r4, pc}
 8017a0e:	4603      	mov	r3, r0
 8017a10:	e7f7      	b.n	8017a02 <__any_on+0x26>
 8017a12:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8017a16:	2900      	cmp	r1, #0
 8017a18:	d0f5      	beq.n	8017a06 <__any_on+0x2a>
 8017a1a:	2001      	movs	r0, #1
 8017a1c:	e7f6      	b.n	8017a0c <__any_on+0x30>

08017a1e <_calloc_r>:
 8017a1e:	b513      	push	{r0, r1, r4, lr}
 8017a20:	434a      	muls	r2, r1
 8017a22:	4611      	mov	r1, r2
 8017a24:	9201      	str	r2, [sp, #4]
 8017a26:	f7fc fbb1 	bl	801418c <_malloc_r>
 8017a2a:	4604      	mov	r4, r0
 8017a2c:	b118      	cbz	r0, 8017a36 <_calloc_r+0x18>
 8017a2e:	9a01      	ldr	r2, [sp, #4]
 8017a30:	2100      	movs	r1, #0
 8017a32:	f7fc fb53 	bl	80140dc <memset>
 8017a36:	4620      	mov	r0, r4
 8017a38:	b002      	add	sp, #8
 8017a3a:	bd10      	pop	{r4, pc}

08017a3c <__ssputs_r>:
 8017a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017a40:	688e      	ldr	r6, [r1, #8]
 8017a42:	429e      	cmp	r6, r3
 8017a44:	4682      	mov	sl, r0
 8017a46:	460c      	mov	r4, r1
 8017a48:	4690      	mov	r8, r2
 8017a4a:	461f      	mov	r7, r3
 8017a4c:	d838      	bhi.n	8017ac0 <__ssputs_r+0x84>
 8017a4e:	898a      	ldrh	r2, [r1, #12]
 8017a50:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8017a54:	d032      	beq.n	8017abc <__ssputs_r+0x80>
 8017a56:	6825      	ldr	r5, [r4, #0]
 8017a58:	6909      	ldr	r1, [r1, #16]
 8017a5a:	eba5 0901 	sub.w	r9, r5, r1
 8017a5e:	6965      	ldr	r5, [r4, #20]
 8017a60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017a64:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017a68:	3301      	adds	r3, #1
 8017a6a:	444b      	add	r3, r9
 8017a6c:	106d      	asrs	r5, r5, #1
 8017a6e:	429d      	cmp	r5, r3
 8017a70:	bf38      	it	cc
 8017a72:	461d      	movcc	r5, r3
 8017a74:	0553      	lsls	r3, r2, #21
 8017a76:	d531      	bpl.n	8017adc <__ssputs_r+0xa0>
 8017a78:	4629      	mov	r1, r5
 8017a7a:	f7fc fb87 	bl	801418c <_malloc_r>
 8017a7e:	4606      	mov	r6, r0
 8017a80:	b950      	cbnz	r0, 8017a98 <__ssputs_r+0x5c>
 8017a82:	230c      	movs	r3, #12
 8017a84:	f8ca 3000 	str.w	r3, [sl]
 8017a88:	89a3      	ldrh	r3, [r4, #12]
 8017a8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017a8e:	81a3      	strh	r3, [r4, #12]
 8017a90:	f04f 30ff 	mov.w	r0, #4294967295
 8017a94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017a98:	6921      	ldr	r1, [r4, #16]
 8017a9a:	464a      	mov	r2, r9
 8017a9c:	f7fc fb10 	bl	80140c0 <memcpy>
 8017aa0:	89a3      	ldrh	r3, [r4, #12]
 8017aa2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8017aa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017aaa:	81a3      	strh	r3, [r4, #12]
 8017aac:	6126      	str	r6, [r4, #16]
 8017aae:	6165      	str	r5, [r4, #20]
 8017ab0:	444e      	add	r6, r9
 8017ab2:	eba5 0509 	sub.w	r5, r5, r9
 8017ab6:	6026      	str	r6, [r4, #0]
 8017ab8:	60a5      	str	r5, [r4, #8]
 8017aba:	463e      	mov	r6, r7
 8017abc:	42be      	cmp	r6, r7
 8017abe:	d900      	bls.n	8017ac2 <__ssputs_r+0x86>
 8017ac0:	463e      	mov	r6, r7
 8017ac2:	4632      	mov	r2, r6
 8017ac4:	6820      	ldr	r0, [r4, #0]
 8017ac6:	4641      	mov	r1, r8
 8017ac8:	f000 fd6a 	bl	80185a0 <memmove>
 8017acc:	68a3      	ldr	r3, [r4, #8]
 8017ace:	6822      	ldr	r2, [r4, #0]
 8017ad0:	1b9b      	subs	r3, r3, r6
 8017ad2:	4432      	add	r2, r6
 8017ad4:	60a3      	str	r3, [r4, #8]
 8017ad6:	6022      	str	r2, [r4, #0]
 8017ad8:	2000      	movs	r0, #0
 8017ada:	e7db      	b.n	8017a94 <__ssputs_r+0x58>
 8017adc:	462a      	mov	r2, r5
 8017ade:	f000 fd79 	bl	80185d4 <_realloc_r>
 8017ae2:	4606      	mov	r6, r0
 8017ae4:	2800      	cmp	r0, #0
 8017ae6:	d1e1      	bne.n	8017aac <__ssputs_r+0x70>
 8017ae8:	6921      	ldr	r1, [r4, #16]
 8017aea:	4650      	mov	r0, sl
 8017aec:	f7fc fafe 	bl	80140ec <_free_r>
 8017af0:	e7c7      	b.n	8017a82 <__ssputs_r+0x46>
	...

08017af4 <_svfiprintf_r>:
 8017af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017af8:	4698      	mov	r8, r3
 8017afa:	898b      	ldrh	r3, [r1, #12]
 8017afc:	061b      	lsls	r3, r3, #24
 8017afe:	b09d      	sub	sp, #116	; 0x74
 8017b00:	4607      	mov	r7, r0
 8017b02:	460d      	mov	r5, r1
 8017b04:	4614      	mov	r4, r2
 8017b06:	d50e      	bpl.n	8017b26 <_svfiprintf_r+0x32>
 8017b08:	690b      	ldr	r3, [r1, #16]
 8017b0a:	b963      	cbnz	r3, 8017b26 <_svfiprintf_r+0x32>
 8017b0c:	2140      	movs	r1, #64	; 0x40
 8017b0e:	f7fc fb3d 	bl	801418c <_malloc_r>
 8017b12:	6028      	str	r0, [r5, #0]
 8017b14:	6128      	str	r0, [r5, #16]
 8017b16:	b920      	cbnz	r0, 8017b22 <_svfiprintf_r+0x2e>
 8017b18:	230c      	movs	r3, #12
 8017b1a:	603b      	str	r3, [r7, #0]
 8017b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8017b20:	e0d1      	b.n	8017cc6 <_svfiprintf_r+0x1d2>
 8017b22:	2340      	movs	r3, #64	; 0x40
 8017b24:	616b      	str	r3, [r5, #20]
 8017b26:	2300      	movs	r3, #0
 8017b28:	9309      	str	r3, [sp, #36]	; 0x24
 8017b2a:	2320      	movs	r3, #32
 8017b2c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017b30:	f8cd 800c 	str.w	r8, [sp, #12]
 8017b34:	2330      	movs	r3, #48	; 0x30
 8017b36:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8017ce0 <_svfiprintf_r+0x1ec>
 8017b3a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017b3e:	f04f 0901 	mov.w	r9, #1
 8017b42:	4623      	mov	r3, r4
 8017b44:	469a      	mov	sl, r3
 8017b46:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017b4a:	b10a      	cbz	r2, 8017b50 <_svfiprintf_r+0x5c>
 8017b4c:	2a25      	cmp	r2, #37	; 0x25
 8017b4e:	d1f9      	bne.n	8017b44 <_svfiprintf_r+0x50>
 8017b50:	ebba 0b04 	subs.w	fp, sl, r4
 8017b54:	d00b      	beq.n	8017b6e <_svfiprintf_r+0x7a>
 8017b56:	465b      	mov	r3, fp
 8017b58:	4622      	mov	r2, r4
 8017b5a:	4629      	mov	r1, r5
 8017b5c:	4638      	mov	r0, r7
 8017b5e:	f7ff ff6d 	bl	8017a3c <__ssputs_r>
 8017b62:	3001      	adds	r0, #1
 8017b64:	f000 80aa 	beq.w	8017cbc <_svfiprintf_r+0x1c8>
 8017b68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017b6a:	445a      	add	r2, fp
 8017b6c:	9209      	str	r2, [sp, #36]	; 0x24
 8017b6e:	f89a 3000 	ldrb.w	r3, [sl]
 8017b72:	2b00      	cmp	r3, #0
 8017b74:	f000 80a2 	beq.w	8017cbc <_svfiprintf_r+0x1c8>
 8017b78:	2300      	movs	r3, #0
 8017b7a:	f04f 32ff 	mov.w	r2, #4294967295
 8017b7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017b82:	f10a 0a01 	add.w	sl, sl, #1
 8017b86:	9304      	str	r3, [sp, #16]
 8017b88:	9307      	str	r3, [sp, #28]
 8017b8a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017b8e:	931a      	str	r3, [sp, #104]	; 0x68
 8017b90:	4654      	mov	r4, sl
 8017b92:	2205      	movs	r2, #5
 8017b94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017b98:	4851      	ldr	r0, [pc, #324]	; (8017ce0 <_svfiprintf_r+0x1ec>)
 8017b9a:	f7e8 ff31 	bl	8000a00 <memchr>
 8017b9e:	9a04      	ldr	r2, [sp, #16]
 8017ba0:	b9d8      	cbnz	r0, 8017bda <_svfiprintf_r+0xe6>
 8017ba2:	06d0      	lsls	r0, r2, #27
 8017ba4:	bf44      	itt	mi
 8017ba6:	2320      	movmi	r3, #32
 8017ba8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017bac:	0711      	lsls	r1, r2, #28
 8017bae:	bf44      	itt	mi
 8017bb0:	232b      	movmi	r3, #43	; 0x2b
 8017bb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017bb6:	f89a 3000 	ldrb.w	r3, [sl]
 8017bba:	2b2a      	cmp	r3, #42	; 0x2a
 8017bbc:	d015      	beq.n	8017bea <_svfiprintf_r+0xf6>
 8017bbe:	9a07      	ldr	r2, [sp, #28]
 8017bc0:	4654      	mov	r4, sl
 8017bc2:	2000      	movs	r0, #0
 8017bc4:	f04f 0c0a 	mov.w	ip, #10
 8017bc8:	4621      	mov	r1, r4
 8017bca:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017bce:	3b30      	subs	r3, #48	; 0x30
 8017bd0:	2b09      	cmp	r3, #9
 8017bd2:	d94e      	bls.n	8017c72 <_svfiprintf_r+0x17e>
 8017bd4:	b1b0      	cbz	r0, 8017c04 <_svfiprintf_r+0x110>
 8017bd6:	9207      	str	r2, [sp, #28]
 8017bd8:	e014      	b.n	8017c04 <_svfiprintf_r+0x110>
 8017bda:	eba0 0308 	sub.w	r3, r0, r8
 8017bde:	fa09 f303 	lsl.w	r3, r9, r3
 8017be2:	4313      	orrs	r3, r2
 8017be4:	9304      	str	r3, [sp, #16]
 8017be6:	46a2      	mov	sl, r4
 8017be8:	e7d2      	b.n	8017b90 <_svfiprintf_r+0x9c>
 8017bea:	9b03      	ldr	r3, [sp, #12]
 8017bec:	1d19      	adds	r1, r3, #4
 8017bee:	681b      	ldr	r3, [r3, #0]
 8017bf0:	9103      	str	r1, [sp, #12]
 8017bf2:	2b00      	cmp	r3, #0
 8017bf4:	bfbb      	ittet	lt
 8017bf6:	425b      	neglt	r3, r3
 8017bf8:	f042 0202 	orrlt.w	r2, r2, #2
 8017bfc:	9307      	strge	r3, [sp, #28]
 8017bfe:	9307      	strlt	r3, [sp, #28]
 8017c00:	bfb8      	it	lt
 8017c02:	9204      	strlt	r2, [sp, #16]
 8017c04:	7823      	ldrb	r3, [r4, #0]
 8017c06:	2b2e      	cmp	r3, #46	; 0x2e
 8017c08:	d10c      	bne.n	8017c24 <_svfiprintf_r+0x130>
 8017c0a:	7863      	ldrb	r3, [r4, #1]
 8017c0c:	2b2a      	cmp	r3, #42	; 0x2a
 8017c0e:	d135      	bne.n	8017c7c <_svfiprintf_r+0x188>
 8017c10:	9b03      	ldr	r3, [sp, #12]
 8017c12:	1d1a      	adds	r2, r3, #4
 8017c14:	681b      	ldr	r3, [r3, #0]
 8017c16:	9203      	str	r2, [sp, #12]
 8017c18:	2b00      	cmp	r3, #0
 8017c1a:	bfb8      	it	lt
 8017c1c:	f04f 33ff 	movlt.w	r3, #4294967295
 8017c20:	3402      	adds	r4, #2
 8017c22:	9305      	str	r3, [sp, #20]
 8017c24:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8017cf0 <_svfiprintf_r+0x1fc>
 8017c28:	7821      	ldrb	r1, [r4, #0]
 8017c2a:	2203      	movs	r2, #3
 8017c2c:	4650      	mov	r0, sl
 8017c2e:	f7e8 fee7 	bl	8000a00 <memchr>
 8017c32:	b140      	cbz	r0, 8017c46 <_svfiprintf_r+0x152>
 8017c34:	2340      	movs	r3, #64	; 0x40
 8017c36:	eba0 000a 	sub.w	r0, r0, sl
 8017c3a:	fa03 f000 	lsl.w	r0, r3, r0
 8017c3e:	9b04      	ldr	r3, [sp, #16]
 8017c40:	4303      	orrs	r3, r0
 8017c42:	3401      	adds	r4, #1
 8017c44:	9304      	str	r3, [sp, #16]
 8017c46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017c4a:	4826      	ldr	r0, [pc, #152]	; (8017ce4 <_svfiprintf_r+0x1f0>)
 8017c4c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017c50:	2206      	movs	r2, #6
 8017c52:	f7e8 fed5 	bl	8000a00 <memchr>
 8017c56:	2800      	cmp	r0, #0
 8017c58:	d038      	beq.n	8017ccc <_svfiprintf_r+0x1d8>
 8017c5a:	4b23      	ldr	r3, [pc, #140]	; (8017ce8 <_svfiprintf_r+0x1f4>)
 8017c5c:	bb1b      	cbnz	r3, 8017ca6 <_svfiprintf_r+0x1b2>
 8017c5e:	9b03      	ldr	r3, [sp, #12]
 8017c60:	3307      	adds	r3, #7
 8017c62:	f023 0307 	bic.w	r3, r3, #7
 8017c66:	3308      	adds	r3, #8
 8017c68:	9303      	str	r3, [sp, #12]
 8017c6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017c6c:	4433      	add	r3, r6
 8017c6e:	9309      	str	r3, [sp, #36]	; 0x24
 8017c70:	e767      	b.n	8017b42 <_svfiprintf_r+0x4e>
 8017c72:	fb0c 3202 	mla	r2, ip, r2, r3
 8017c76:	460c      	mov	r4, r1
 8017c78:	2001      	movs	r0, #1
 8017c7a:	e7a5      	b.n	8017bc8 <_svfiprintf_r+0xd4>
 8017c7c:	2300      	movs	r3, #0
 8017c7e:	3401      	adds	r4, #1
 8017c80:	9305      	str	r3, [sp, #20]
 8017c82:	4619      	mov	r1, r3
 8017c84:	f04f 0c0a 	mov.w	ip, #10
 8017c88:	4620      	mov	r0, r4
 8017c8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017c8e:	3a30      	subs	r2, #48	; 0x30
 8017c90:	2a09      	cmp	r2, #9
 8017c92:	d903      	bls.n	8017c9c <_svfiprintf_r+0x1a8>
 8017c94:	2b00      	cmp	r3, #0
 8017c96:	d0c5      	beq.n	8017c24 <_svfiprintf_r+0x130>
 8017c98:	9105      	str	r1, [sp, #20]
 8017c9a:	e7c3      	b.n	8017c24 <_svfiprintf_r+0x130>
 8017c9c:	fb0c 2101 	mla	r1, ip, r1, r2
 8017ca0:	4604      	mov	r4, r0
 8017ca2:	2301      	movs	r3, #1
 8017ca4:	e7f0      	b.n	8017c88 <_svfiprintf_r+0x194>
 8017ca6:	ab03      	add	r3, sp, #12
 8017ca8:	9300      	str	r3, [sp, #0]
 8017caa:	462a      	mov	r2, r5
 8017cac:	4b0f      	ldr	r3, [pc, #60]	; (8017cec <_svfiprintf_r+0x1f8>)
 8017cae:	a904      	add	r1, sp, #16
 8017cb0:	4638      	mov	r0, r7
 8017cb2:	f7fc fb65 	bl	8014380 <_printf_float>
 8017cb6:	1c42      	adds	r2, r0, #1
 8017cb8:	4606      	mov	r6, r0
 8017cba:	d1d6      	bne.n	8017c6a <_svfiprintf_r+0x176>
 8017cbc:	89ab      	ldrh	r3, [r5, #12]
 8017cbe:	065b      	lsls	r3, r3, #25
 8017cc0:	f53f af2c 	bmi.w	8017b1c <_svfiprintf_r+0x28>
 8017cc4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017cc6:	b01d      	add	sp, #116	; 0x74
 8017cc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ccc:	ab03      	add	r3, sp, #12
 8017cce:	9300      	str	r3, [sp, #0]
 8017cd0:	462a      	mov	r2, r5
 8017cd2:	4b06      	ldr	r3, [pc, #24]	; (8017cec <_svfiprintf_r+0x1f8>)
 8017cd4:	a904      	add	r1, sp, #16
 8017cd6:	4638      	mov	r0, r7
 8017cd8:	f7fc fdf6 	bl	80148c8 <_printf_i>
 8017cdc:	e7eb      	b.n	8017cb6 <_svfiprintf_r+0x1c2>
 8017cde:	bf00      	nop
 8017ce0:	0801989c 	.word	0x0801989c
 8017ce4:	080198a6 	.word	0x080198a6
 8017ce8:	08014381 	.word	0x08014381
 8017cec:	08017a3d 	.word	0x08017a3d
 8017cf0:	080198a2 	.word	0x080198a2

08017cf4 <__sfputc_r>:
 8017cf4:	6893      	ldr	r3, [r2, #8]
 8017cf6:	3b01      	subs	r3, #1
 8017cf8:	2b00      	cmp	r3, #0
 8017cfa:	b410      	push	{r4}
 8017cfc:	6093      	str	r3, [r2, #8]
 8017cfe:	da08      	bge.n	8017d12 <__sfputc_r+0x1e>
 8017d00:	6994      	ldr	r4, [r2, #24]
 8017d02:	42a3      	cmp	r3, r4
 8017d04:	db01      	blt.n	8017d0a <__sfputc_r+0x16>
 8017d06:	290a      	cmp	r1, #10
 8017d08:	d103      	bne.n	8017d12 <__sfputc_r+0x1e>
 8017d0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017d0e:	f000 b953 	b.w	8017fb8 <__swbuf_r>
 8017d12:	6813      	ldr	r3, [r2, #0]
 8017d14:	1c58      	adds	r0, r3, #1
 8017d16:	6010      	str	r0, [r2, #0]
 8017d18:	7019      	strb	r1, [r3, #0]
 8017d1a:	4608      	mov	r0, r1
 8017d1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017d20:	4770      	bx	lr

08017d22 <__sfputs_r>:
 8017d22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017d24:	4606      	mov	r6, r0
 8017d26:	460f      	mov	r7, r1
 8017d28:	4614      	mov	r4, r2
 8017d2a:	18d5      	adds	r5, r2, r3
 8017d2c:	42ac      	cmp	r4, r5
 8017d2e:	d101      	bne.n	8017d34 <__sfputs_r+0x12>
 8017d30:	2000      	movs	r0, #0
 8017d32:	e007      	b.n	8017d44 <__sfputs_r+0x22>
 8017d34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017d38:	463a      	mov	r2, r7
 8017d3a:	4630      	mov	r0, r6
 8017d3c:	f7ff ffda 	bl	8017cf4 <__sfputc_r>
 8017d40:	1c43      	adds	r3, r0, #1
 8017d42:	d1f3      	bne.n	8017d2c <__sfputs_r+0xa>
 8017d44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017d48 <_vfiprintf_r>:
 8017d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d4c:	460d      	mov	r5, r1
 8017d4e:	b09d      	sub	sp, #116	; 0x74
 8017d50:	4614      	mov	r4, r2
 8017d52:	4698      	mov	r8, r3
 8017d54:	4606      	mov	r6, r0
 8017d56:	b118      	cbz	r0, 8017d60 <_vfiprintf_r+0x18>
 8017d58:	6983      	ldr	r3, [r0, #24]
 8017d5a:	b90b      	cbnz	r3, 8017d60 <_vfiprintf_r+0x18>
 8017d5c:	f000 fb1c 	bl	8018398 <__sinit>
 8017d60:	4b89      	ldr	r3, [pc, #548]	; (8017f88 <_vfiprintf_r+0x240>)
 8017d62:	429d      	cmp	r5, r3
 8017d64:	d11b      	bne.n	8017d9e <_vfiprintf_r+0x56>
 8017d66:	6875      	ldr	r5, [r6, #4]
 8017d68:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017d6a:	07d9      	lsls	r1, r3, #31
 8017d6c:	d405      	bmi.n	8017d7a <_vfiprintf_r+0x32>
 8017d6e:	89ab      	ldrh	r3, [r5, #12]
 8017d70:	059a      	lsls	r2, r3, #22
 8017d72:	d402      	bmi.n	8017d7a <_vfiprintf_r+0x32>
 8017d74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017d76:	f000 fbad 	bl	80184d4 <__retarget_lock_acquire_recursive>
 8017d7a:	89ab      	ldrh	r3, [r5, #12]
 8017d7c:	071b      	lsls	r3, r3, #28
 8017d7e:	d501      	bpl.n	8017d84 <_vfiprintf_r+0x3c>
 8017d80:	692b      	ldr	r3, [r5, #16]
 8017d82:	b9eb      	cbnz	r3, 8017dc0 <_vfiprintf_r+0x78>
 8017d84:	4629      	mov	r1, r5
 8017d86:	4630      	mov	r0, r6
 8017d88:	f000 f976 	bl	8018078 <__swsetup_r>
 8017d8c:	b1c0      	cbz	r0, 8017dc0 <_vfiprintf_r+0x78>
 8017d8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017d90:	07dc      	lsls	r4, r3, #31
 8017d92:	d50e      	bpl.n	8017db2 <_vfiprintf_r+0x6a>
 8017d94:	f04f 30ff 	mov.w	r0, #4294967295
 8017d98:	b01d      	add	sp, #116	; 0x74
 8017d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d9e:	4b7b      	ldr	r3, [pc, #492]	; (8017f8c <_vfiprintf_r+0x244>)
 8017da0:	429d      	cmp	r5, r3
 8017da2:	d101      	bne.n	8017da8 <_vfiprintf_r+0x60>
 8017da4:	68b5      	ldr	r5, [r6, #8]
 8017da6:	e7df      	b.n	8017d68 <_vfiprintf_r+0x20>
 8017da8:	4b79      	ldr	r3, [pc, #484]	; (8017f90 <_vfiprintf_r+0x248>)
 8017daa:	429d      	cmp	r5, r3
 8017dac:	bf08      	it	eq
 8017dae:	68f5      	ldreq	r5, [r6, #12]
 8017db0:	e7da      	b.n	8017d68 <_vfiprintf_r+0x20>
 8017db2:	89ab      	ldrh	r3, [r5, #12]
 8017db4:	0598      	lsls	r0, r3, #22
 8017db6:	d4ed      	bmi.n	8017d94 <_vfiprintf_r+0x4c>
 8017db8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017dba:	f000 fb8c 	bl	80184d6 <__retarget_lock_release_recursive>
 8017dbe:	e7e9      	b.n	8017d94 <_vfiprintf_r+0x4c>
 8017dc0:	2300      	movs	r3, #0
 8017dc2:	9309      	str	r3, [sp, #36]	; 0x24
 8017dc4:	2320      	movs	r3, #32
 8017dc6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017dca:	f8cd 800c 	str.w	r8, [sp, #12]
 8017dce:	2330      	movs	r3, #48	; 0x30
 8017dd0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8017f94 <_vfiprintf_r+0x24c>
 8017dd4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017dd8:	f04f 0901 	mov.w	r9, #1
 8017ddc:	4623      	mov	r3, r4
 8017dde:	469a      	mov	sl, r3
 8017de0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017de4:	b10a      	cbz	r2, 8017dea <_vfiprintf_r+0xa2>
 8017de6:	2a25      	cmp	r2, #37	; 0x25
 8017de8:	d1f9      	bne.n	8017dde <_vfiprintf_r+0x96>
 8017dea:	ebba 0b04 	subs.w	fp, sl, r4
 8017dee:	d00b      	beq.n	8017e08 <_vfiprintf_r+0xc0>
 8017df0:	465b      	mov	r3, fp
 8017df2:	4622      	mov	r2, r4
 8017df4:	4629      	mov	r1, r5
 8017df6:	4630      	mov	r0, r6
 8017df8:	f7ff ff93 	bl	8017d22 <__sfputs_r>
 8017dfc:	3001      	adds	r0, #1
 8017dfe:	f000 80aa 	beq.w	8017f56 <_vfiprintf_r+0x20e>
 8017e02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017e04:	445a      	add	r2, fp
 8017e06:	9209      	str	r2, [sp, #36]	; 0x24
 8017e08:	f89a 3000 	ldrb.w	r3, [sl]
 8017e0c:	2b00      	cmp	r3, #0
 8017e0e:	f000 80a2 	beq.w	8017f56 <_vfiprintf_r+0x20e>
 8017e12:	2300      	movs	r3, #0
 8017e14:	f04f 32ff 	mov.w	r2, #4294967295
 8017e18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017e1c:	f10a 0a01 	add.w	sl, sl, #1
 8017e20:	9304      	str	r3, [sp, #16]
 8017e22:	9307      	str	r3, [sp, #28]
 8017e24:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017e28:	931a      	str	r3, [sp, #104]	; 0x68
 8017e2a:	4654      	mov	r4, sl
 8017e2c:	2205      	movs	r2, #5
 8017e2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017e32:	4858      	ldr	r0, [pc, #352]	; (8017f94 <_vfiprintf_r+0x24c>)
 8017e34:	f7e8 fde4 	bl	8000a00 <memchr>
 8017e38:	9a04      	ldr	r2, [sp, #16]
 8017e3a:	b9d8      	cbnz	r0, 8017e74 <_vfiprintf_r+0x12c>
 8017e3c:	06d1      	lsls	r1, r2, #27
 8017e3e:	bf44      	itt	mi
 8017e40:	2320      	movmi	r3, #32
 8017e42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017e46:	0713      	lsls	r3, r2, #28
 8017e48:	bf44      	itt	mi
 8017e4a:	232b      	movmi	r3, #43	; 0x2b
 8017e4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017e50:	f89a 3000 	ldrb.w	r3, [sl]
 8017e54:	2b2a      	cmp	r3, #42	; 0x2a
 8017e56:	d015      	beq.n	8017e84 <_vfiprintf_r+0x13c>
 8017e58:	9a07      	ldr	r2, [sp, #28]
 8017e5a:	4654      	mov	r4, sl
 8017e5c:	2000      	movs	r0, #0
 8017e5e:	f04f 0c0a 	mov.w	ip, #10
 8017e62:	4621      	mov	r1, r4
 8017e64:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017e68:	3b30      	subs	r3, #48	; 0x30
 8017e6a:	2b09      	cmp	r3, #9
 8017e6c:	d94e      	bls.n	8017f0c <_vfiprintf_r+0x1c4>
 8017e6e:	b1b0      	cbz	r0, 8017e9e <_vfiprintf_r+0x156>
 8017e70:	9207      	str	r2, [sp, #28]
 8017e72:	e014      	b.n	8017e9e <_vfiprintf_r+0x156>
 8017e74:	eba0 0308 	sub.w	r3, r0, r8
 8017e78:	fa09 f303 	lsl.w	r3, r9, r3
 8017e7c:	4313      	orrs	r3, r2
 8017e7e:	9304      	str	r3, [sp, #16]
 8017e80:	46a2      	mov	sl, r4
 8017e82:	e7d2      	b.n	8017e2a <_vfiprintf_r+0xe2>
 8017e84:	9b03      	ldr	r3, [sp, #12]
 8017e86:	1d19      	adds	r1, r3, #4
 8017e88:	681b      	ldr	r3, [r3, #0]
 8017e8a:	9103      	str	r1, [sp, #12]
 8017e8c:	2b00      	cmp	r3, #0
 8017e8e:	bfbb      	ittet	lt
 8017e90:	425b      	neglt	r3, r3
 8017e92:	f042 0202 	orrlt.w	r2, r2, #2
 8017e96:	9307      	strge	r3, [sp, #28]
 8017e98:	9307      	strlt	r3, [sp, #28]
 8017e9a:	bfb8      	it	lt
 8017e9c:	9204      	strlt	r2, [sp, #16]
 8017e9e:	7823      	ldrb	r3, [r4, #0]
 8017ea0:	2b2e      	cmp	r3, #46	; 0x2e
 8017ea2:	d10c      	bne.n	8017ebe <_vfiprintf_r+0x176>
 8017ea4:	7863      	ldrb	r3, [r4, #1]
 8017ea6:	2b2a      	cmp	r3, #42	; 0x2a
 8017ea8:	d135      	bne.n	8017f16 <_vfiprintf_r+0x1ce>
 8017eaa:	9b03      	ldr	r3, [sp, #12]
 8017eac:	1d1a      	adds	r2, r3, #4
 8017eae:	681b      	ldr	r3, [r3, #0]
 8017eb0:	9203      	str	r2, [sp, #12]
 8017eb2:	2b00      	cmp	r3, #0
 8017eb4:	bfb8      	it	lt
 8017eb6:	f04f 33ff 	movlt.w	r3, #4294967295
 8017eba:	3402      	adds	r4, #2
 8017ebc:	9305      	str	r3, [sp, #20]
 8017ebe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8017fa4 <_vfiprintf_r+0x25c>
 8017ec2:	7821      	ldrb	r1, [r4, #0]
 8017ec4:	2203      	movs	r2, #3
 8017ec6:	4650      	mov	r0, sl
 8017ec8:	f7e8 fd9a 	bl	8000a00 <memchr>
 8017ecc:	b140      	cbz	r0, 8017ee0 <_vfiprintf_r+0x198>
 8017ece:	2340      	movs	r3, #64	; 0x40
 8017ed0:	eba0 000a 	sub.w	r0, r0, sl
 8017ed4:	fa03 f000 	lsl.w	r0, r3, r0
 8017ed8:	9b04      	ldr	r3, [sp, #16]
 8017eda:	4303      	orrs	r3, r0
 8017edc:	3401      	adds	r4, #1
 8017ede:	9304      	str	r3, [sp, #16]
 8017ee0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017ee4:	482c      	ldr	r0, [pc, #176]	; (8017f98 <_vfiprintf_r+0x250>)
 8017ee6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017eea:	2206      	movs	r2, #6
 8017eec:	f7e8 fd88 	bl	8000a00 <memchr>
 8017ef0:	2800      	cmp	r0, #0
 8017ef2:	d03f      	beq.n	8017f74 <_vfiprintf_r+0x22c>
 8017ef4:	4b29      	ldr	r3, [pc, #164]	; (8017f9c <_vfiprintf_r+0x254>)
 8017ef6:	bb1b      	cbnz	r3, 8017f40 <_vfiprintf_r+0x1f8>
 8017ef8:	9b03      	ldr	r3, [sp, #12]
 8017efa:	3307      	adds	r3, #7
 8017efc:	f023 0307 	bic.w	r3, r3, #7
 8017f00:	3308      	adds	r3, #8
 8017f02:	9303      	str	r3, [sp, #12]
 8017f04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017f06:	443b      	add	r3, r7
 8017f08:	9309      	str	r3, [sp, #36]	; 0x24
 8017f0a:	e767      	b.n	8017ddc <_vfiprintf_r+0x94>
 8017f0c:	fb0c 3202 	mla	r2, ip, r2, r3
 8017f10:	460c      	mov	r4, r1
 8017f12:	2001      	movs	r0, #1
 8017f14:	e7a5      	b.n	8017e62 <_vfiprintf_r+0x11a>
 8017f16:	2300      	movs	r3, #0
 8017f18:	3401      	adds	r4, #1
 8017f1a:	9305      	str	r3, [sp, #20]
 8017f1c:	4619      	mov	r1, r3
 8017f1e:	f04f 0c0a 	mov.w	ip, #10
 8017f22:	4620      	mov	r0, r4
 8017f24:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017f28:	3a30      	subs	r2, #48	; 0x30
 8017f2a:	2a09      	cmp	r2, #9
 8017f2c:	d903      	bls.n	8017f36 <_vfiprintf_r+0x1ee>
 8017f2e:	2b00      	cmp	r3, #0
 8017f30:	d0c5      	beq.n	8017ebe <_vfiprintf_r+0x176>
 8017f32:	9105      	str	r1, [sp, #20]
 8017f34:	e7c3      	b.n	8017ebe <_vfiprintf_r+0x176>
 8017f36:	fb0c 2101 	mla	r1, ip, r1, r2
 8017f3a:	4604      	mov	r4, r0
 8017f3c:	2301      	movs	r3, #1
 8017f3e:	e7f0      	b.n	8017f22 <_vfiprintf_r+0x1da>
 8017f40:	ab03      	add	r3, sp, #12
 8017f42:	9300      	str	r3, [sp, #0]
 8017f44:	462a      	mov	r2, r5
 8017f46:	4b16      	ldr	r3, [pc, #88]	; (8017fa0 <_vfiprintf_r+0x258>)
 8017f48:	a904      	add	r1, sp, #16
 8017f4a:	4630      	mov	r0, r6
 8017f4c:	f7fc fa18 	bl	8014380 <_printf_float>
 8017f50:	4607      	mov	r7, r0
 8017f52:	1c78      	adds	r0, r7, #1
 8017f54:	d1d6      	bne.n	8017f04 <_vfiprintf_r+0x1bc>
 8017f56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017f58:	07d9      	lsls	r1, r3, #31
 8017f5a:	d405      	bmi.n	8017f68 <_vfiprintf_r+0x220>
 8017f5c:	89ab      	ldrh	r3, [r5, #12]
 8017f5e:	059a      	lsls	r2, r3, #22
 8017f60:	d402      	bmi.n	8017f68 <_vfiprintf_r+0x220>
 8017f62:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017f64:	f000 fab7 	bl	80184d6 <__retarget_lock_release_recursive>
 8017f68:	89ab      	ldrh	r3, [r5, #12]
 8017f6a:	065b      	lsls	r3, r3, #25
 8017f6c:	f53f af12 	bmi.w	8017d94 <_vfiprintf_r+0x4c>
 8017f70:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017f72:	e711      	b.n	8017d98 <_vfiprintf_r+0x50>
 8017f74:	ab03      	add	r3, sp, #12
 8017f76:	9300      	str	r3, [sp, #0]
 8017f78:	462a      	mov	r2, r5
 8017f7a:	4b09      	ldr	r3, [pc, #36]	; (8017fa0 <_vfiprintf_r+0x258>)
 8017f7c:	a904      	add	r1, sp, #16
 8017f7e:	4630      	mov	r0, r6
 8017f80:	f7fc fca2 	bl	80148c8 <_printf_i>
 8017f84:	e7e4      	b.n	8017f50 <_vfiprintf_r+0x208>
 8017f86:	bf00      	nop
 8017f88:	080198d0 	.word	0x080198d0
 8017f8c:	080198f0 	.word	0x080198f0
 8017f90:	080198b0 	.word	0x080198b0
 8017f94:	0801989c 	.word	0x0801989c
 8017f98:	080198a6 	.word	0x080198a6
 8017f9c:	08014381 	.word	0x08014381
 8017fa0:	08017d23 	.word	0x08017d23
 8017fa4:	080198a2 	.word	0x080198a2

08017fa8 <nan>:
 8017fa8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8017fb0 <nan+0x8>
 8017fac:	4770      	bx	lr
 8017fae:	bf00      	nop
 8017fb0:	00000000 	.word	0x00000000
 8017fb4:	7ff80000 	.word	0x7ff80000

08017fb8 <__swbuf_r>:
 8017fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017fba:	460e      	mov	r6, r1
 8017fbc:	4614      	mov	r4, r2
 8017fbe:	4605      	mov	r5, r0
 8017fc0:	b118      	cbz	r0, 8017fca <__swbuf_r+0x12>
 8017fc2:	6983      	ldr	r3, [r0, #24]
 8017fc4:	b90b      	cbnz	r3, 8017fca <__swbuf_r+0x12>
 8017fc6:	f000 f9e7 	bl	8018398 <__sinit>
 8017fca:	4b21      	ldr	r3, [pc, #132]	; (8018050 <__swbuf_r+0x98>)
 8017fcc:	429c      	cmp	r4, r3
 8017fce:	d12b      	bne.n	8018028 <__swbuf_r+0x70>
 8017fd0:	686c      	ldr	r4, [r5, #4]
 8017fd2:	69a3      	ldr	r3, [r4, #24]
 8017fd4:	60a3      	str	r3, [r4, #8]
 8017fd6:	89a3      	ldrh	r3, [r4, #12]
 8017fd8:	071a      	lsls	r2, r3, #28
 8017fda:	d52f      	bpl.n	801803c <__swbuf_r+0x84>
 8017fdc:	6923      	ldr	r3, [r4, #16]
 8017fde:	b36b      	cbz	r3, 801803c <__swbuf_r+0x84>
 8017fe0:	6923      	ldr	r3, [r4, #16]
 8017fe2:	6820      	ldr	r0, [r4, #0]
 8017fe4:	1ac0      	subs	r0, r0, r3
 8017fe6:	6963      	ldr	r3, [r4, #20]
 8017fe8:	b2f6      	uxtb	r6, r6
 8017fea:	4283      	cmp	r3, r0
 8017fec:	4637      	mov	r7, r6
 8017fee:	dc04      	bgt.n	8017ffa <__swbuf_r+0x42>
 8017ff0:	4621      	mov	r1, r4
 8017ff2:	4628      	mov	r0, r5
 8017ff4:	f000 f93c 	bl	8018270 <_fflush_r>
 8017ff8:	bb30      	cbnz	r0, 8018048 <__swbuf_r+0x90>
 8017ffa:	68a3      	ldr	r3, [r4, #8]
 8017ffc:	3b01      	subs	r3, #1
 8017ffe:	60a3      	str	r3, [r4, #8]
 8018000:	6823      	ldr	r3, [r4, #0]
 8018002:	1c5a      	adds	r2, r3, #1
 8018004:	6022      	str	r2, [r4, #0]
 8018006:	701e      	strb	r6, [r3, #0]
 8018008:	6963      	ldr	r3, [r4, #20]
 801800a:	3001      	adds	r0, #1
 801800c:	4283      	cmp	r3, r0
 801800e:	d004      	beq.n	801801a <__swbuf_r+0x62>
 8018010:	89a3      	ldrh	r3, [r4, #12]
 8018012:	07db      	lsls	r3, r3, #31
 8018014:	d506      	bpl.n	8018024 <__swbuf_r+0x6c>
 8018016:	2e0a      	cmp	r6, #10
 8018018:	d104      	bne.n	8018024 <__swbuf_r+0x6c>
 801801a:	4621      	mov	r1, r4
 801801c:	4628      	mov	r0, r5
 801801e:	f000 f927 	bl	8018270 <_fflush_r>
 8018022:	b988      	cbnz	r0, 8018048 <__swbuf_r+0x90>
 8018024:	4638      	mov	r0, r7
 8018026:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018028:	4b0a      	ldr	r3, [pc, #40]	; (8018054 <__swbuf_r+0x9c>)
 801802a:	429c      	cmp	r4, r3
 801802c:	d101      	bne.n	8018032 <__swbuf_r+0x7a>
 801802e:	68ac      	ldr	r4, [r5, #8]
 8018030:	e7cf      	b.n	8017fd2 <__swbuf_r+0x1a>
 8018032:	4b09      	ldr	r3, [pc, #36]	; (8018058 <__swbuf_r+0xa0>)
 8018034:	429c      	cmp	r4, r3
 8018036:	bf08      	it	eq
 8018038:	68ec      	ldreq	r4, [r5, #12]
 801803a:	e7ca      	b.n	8017fd2 <__swbuf_r+0x1a>
 801803c:	4621      	mov	r1, r4
 801803e:	4628      	mov	r0, r5
 8018040:	f000 f81a 	bl	8018078 <__swsetup_r>
 8018044:	2800      	cmp	r0, #0
 8018046:	d0cb      	beq.n	8017fe0 <__swbuf_r+0x28>
 8018048:	f04f 37ff 	mov.w	r7, #4294967295
 801804c:	e7ea      	b.n	8018024 <__swbuf_r+0x6c>
 801804e:	bf00      	nop
 8018050:	080198d0 	.word	0x080198d0
 8018054:	080198f0 	.word	0x080198f0
 8018058:	080198b0 	.word	0x080198b0

0801805c <__ascii_wctomb>:
 801805c:	b149      	cbz	r1, 8018072 <__ascii_wctomb+0x16>
 801805e:	2aff      	cmp	r2, #255	; 0xff
 8018060:	bf85      	ittet	hi
 8018062:	238a      	movhi	r3, #138	; 0x8a
 8018064:	6003      	strhi	r3, [r0, #0]
 8018066:	700a      	strbls	r2, [r1, #0]
 8018068:	f04f 30ff 	movhi.w	r0, #4294967295
 801806c:	bf98      	it	ls
 801806e:	2001      	movls	r0, #1
 8018070:	4770      	bx	lr
 8018072:	4608      	mov	r0, r1
 8018074:	4770      	bx	lr
	...

08018078 <__swsetup_r>:
 8018078:	4b32      	ldr	r3, [pc, #200]	; (8018144 <__swsetup_r+0xcc>)
 801807a:	b570      	push	{r4, r5, r6, lr}
 801807c:	681d      	ldr	r5, [r3, #0]
 801807e:	4606      	mov	r6, r0
 8018080:	460c      	mov	r4, r1
 8018082:	b125      	cbz	r5, 801808e <__swsetup_r+0x16>
 8018084:	69ab      	ldr	r3, [r5, #24]
 8018086:	b913      	cbnz	r3, 801808e <__swsetup_r+0x16>
 8018088:	4628      	mov	r0, r5
 801808a:	f000 f985 	bl	8018398 <__sinit>
 801808e:	4b2e      	ldr	r3, [pc, #184]	; (8018148 <__swsetup_r+0xd0>)
 8018090:	429c      	cmp	r4, r3
 8018092:	d10f      	bne.n	80180b4 <__swsetup_r+0x3c>
 8018094:	686c      	ldr	r4, [r5, #4]
 8018096:	89a3      	ldrh	r3, [r4, #12]
 8018098:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801809c:	0719      	lsls	r1, r3, #28
 801809e:	d42c      	bmi.n	80180fa <__swsetup_r+0x82>
 80180a0:	06dd      	lsls	r5, r3, #27
 80180a2:	d411      	bmi.n	80180c8 <__swsetup_r+0x50>
 80180a4:	2309      	movs	r3, #9
 80180a6:	6033      	str	r3, [r6, #0]
 80180a8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80180ac:	81a3      	strh	r3, [r4, #12]
 80180ae:	f04f 30ff 	mov.w	r0, #4294967295
 80180b2:	e03e      	b.n	8018132 <__swsetup_r+0xba>
 80180b4:	4b25      	ldr	r3, [pc, #148]	; (801814c <__swsetup_r+0xd4>)
 80180b6:	429c      	cmp	r4, r3
 80180b8:	d101      	bne.n	80180be <__swsetup_r+0x46>
 80180ba:	68ac      	ldr	r4, [r5, #8]
 80180bc:	e7eb      	b.n	8018096 <__swsetup_r+0x1e>
 80180be:	4b24      	ldr	r3, [pc, #144]	; (8018150 <__swsetup_r+0xd8>)
 80180c0:	429c      	cmp	r4, r3
 80180c2:	bf08      	it	eq
 80180c4:	68ec      	ldreq	r4, [r5, #12]
 80180c6:	e7e6      	b.n	8018096 <__swsetup_r+0x1e>
 80180c8:	0758      	lsls	r0, r3, #29
 80180ca:	d512      	bpl.n	80180f2 <__swsetup_r+0x7a>
 80180cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80180ce:	b141      	cbz	r1, 80180e2 <__swsetup_r+0x6a>
 80180d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80180d4:	4299      	cmp	r1, r3
 80180d6:	d002      	beq.n	80180de <__swsetup_r+0x66>
 80180d8:	4630      	mov	r0, r6
 80180da:	f7fc f807 	bl	80140ec <_free_r>
 80180de:	2300      	movs	r3, #0
 80180e0:	6363      	str	r3, [r4, #52]	; 0x34
 80180e2:	89a3      	ldrh	r3, [r4, #12]
 80180e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80180e8:	81a3      	strh	r3, [r4, #12]
 80180ea:	2300      	movs	r3, #0
 80180ec:	6063      	str	r3, [r4, #4]
 80180ee:	6923      	ldr	r3, [r4, #16]
 80180f0:	6023      	str	r3, [r4, #0]
 80180f2:	89a3      	ldrh	r3, [r4, #12]
 80180f4:	f043 0308 	orr.w	r3, r3, #8
 80180f8:	81a3      	strh	r3, [r4, #12]
 80180fa:	6923      	ldr	r3, [r4, #16]
 80180fc:	b94b      	cbnz	r3, 8018112 <__swsetup_r+0x9a>
 80180fe:	89a3      	ldrh	r3, [r4, #12]
 8018100:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8018104:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018108:	d003      	beq.n	8018112 <__swsetup_r+0x9a>
 801810a:	4621      	mov	r1, r4
 801810c:	4630      	mov	r0, r6
 801810e:	f000 fa07 	bl	8018520 <__smakebuf_r>
 8018112:	89a0      	ldrh	r0, [r4, #12]
 8018114:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018118:	f010 0301 	ands.w	r3, r0, #1
 801811c:	d00a      	beq.n	8018134 <__swsetup_r+0xbc>
 801811e:	2300      	movs	r3, #0
 8018120:	60a3      	str	r3, [r4, #8]
 8018122:	6963      	ldr	r3, [r4, #20]
 8018124:	425b      	negs	r3, r3
 8018126:	61a3      	str	r3, [r4, #24]
 8018128:	6923      	ldr	r3, [r4, #16]
 801812a:	b943      	cbnz	r3, 801813e <__swsetup_r+0xc6>
 801812c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8018130:	d1ba      	bne.n	80180a8 <__swsetup_r+0x30>
 8018132:	bd70      	pop	{r4, r5, r6, pc}
 8018134:	0781      	lsls	r1, r0, #30
 8018136:	bf58      	it	pl
 8018138:	6963      	ldrpl	r3, [r4, #20]
 801813a:	60a3      	str	r3, [r4, #8]
 801813c:	e7f4      	b.n	8018128 <__swsetup_r+0xb0>
 801813e:	2000      	movs	r0, #0
 8018140:	e7f7      	b.n	8018132 <__swsetup_r+0xba>
 8018142:	bf00      	nop
 8018144:	20001504 	.word	0x20001504
 8018148:	080198d0 	.word	0x080198d0
 801814c:	080198f0 	.word	0x080198f0
 8018150:	080198b0 	.word	0x080198b0

08018154 <abort>:
 8018154:	b508      	push	{r3, lr}
 8018156:	2006      	movs	r0, #6
 8018158:	f000 fa8a 	bl	8018670 <raise>
 801815c:	2001      	movs	r0, #1
 801815e:	f7ef f867 	bl	8007230 <_exit>
	...

08018164 <__sflush_r>:
 8018164:	898a      	ldrh	r2, [r1, #12]
 8018166:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801816a:	4605      	mov	r5, r0
 801816c:	0710      	lsls	r0, r2, #28
 801816e:	460c      	mov	r4, r1
 8018170:	d458      	bmi.n	8018224 <__sflush_r+0xc0>
 8018172:	684b      	ldr	r3, [r1, #4]
 8018174:	2b00      	cmp	r3, #0
 8018176:	dc05      	bgt.n	8018184 <__sflush_r+0x20>
 8018178:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801817a:	2b00      	cmp	r3, #0
 801817c:	dc02      	bgt.n	8018184 <__sflush_r+0x20>
 801817e:	2000      	movs	r0, #0
 8018180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018184:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018186:	2e00      	cmp	r6, #0
 8018188:	d0f9      	beq.n	801817e <__sflush_r+0x1a>
 801818a:	2300      	movs	r3, #0
 801818c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8018190:	682f      	ldr	r7, [r5, #0]
 8018192:	602b      	str	r3, [r5, #0]
 8018194:	d032      	beq.n	80181fc <__sflush_r+0x98>
 8018196:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8018198:	89a3      	ldrh	r3, [r4, #12]
 801819a:	075a      	lsls	r2, r3, #29
 801819c:	d505      	bpl.n	80181aa <__sflush_r+0x46>
 801819e:	6863      	ldr	r3, [r4, #4]
 80181a0:	1ac0      	subs	r0, r0, r3
 80181a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80181a4:	b10b      	cbz	r3, 80181aa <__sflush_r+0x46>
 80181a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80181a8:	1ac0      	subs	r0, r0, r3
 80181aa:	2300      	movs	r3, #0
 80181ac:	4602      	mov	r2, r0
 80181ae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80181b0:	6a21      	ldr	r1, [r4, #32]
 80181b2:	4628      	mov	r0, r5
 80181b4:	47b0      	blx	r6
 80181b6:	1c43      	adds	r3, r0, #1
 80181b8:	89a3      	ldrh	r3, [r4, #12]
 80181ba:	d106      	bne.n	80181ca <__sflush_r+0x66>
 80181bc:	6829      	ldr	r1, [r5, #0]
 80181be:	291d      	cmp	r1, #29
 80181c0:	d82c      	bhi.n	801821c <__sflush_r+0xb8>
 80181c2:	4a2a      	ldr	r2, [pc, #168]	; (801826c <__sflush_r+0x108>)
 80181c4:	40ca      	lsrs	r2, r1
 80181c6:	07d6      	lsls	r6, r2, #31
 80181c8:	d528      	bpl.n	801821c <__sflush_r+0xb8>
 80181ca:	2200      	movs	r2, #0
 80181cc:	6062      	str	r2, [r4, #4]
 80181ce:	04d9      	lsls	r1, r3, #19
 80181d0:	6922      	ldr	r2, [r4, #16]
 80181d2:	6022      	str	r2, [r4, #0]
 80181d4:	d504      	bpl.n	80181e0 <__sflush_r+0x7c>
 80181d6:	1c42      	adds	r2, r0, #1
 80181d8:	d101      	bne.n	80181de <__sflush_r+0x7a>
 80181da:	682b      	ldr	r3, [r5, #0]
 80181dc:	b903      	cbnz	r3, 80181e0 <__sflush_r+0x7c>
 80181de:	6560      	str	r0, [r4, #84]	; 0x54
 80181e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80181e2:	602f      	str	r7, [r5, #0]
 80181e4:	2900      	cmp	r1, #0
 80181e6:	d0ca      	beq.n	801817e <__sflush_r+0x1a>
 80181e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80181ec:	4299      	cmp	r1, r3
 80181ee:	d002      	beq.n	80181f6 <__sflush_r+0x92>
 80181f0:	4628      	mov	r0, r5
 80181f2:	f7fb ff7b 	bl	80140ec <_free_r>
 80181f6:	2000      	movs	r0, #0
 80181f8:	6360      	str	r0, [r4, #52]	; 0x34
 80181fa:	e7c1      	b.n	8018180 <__sflush_r+0x1c>
 80181fc:	6a21      	ldr	r1, [r4, #32]
 80181fe:	2301      	movs	r3, #1
 8018200:	4628      	mov	r0, r5
 8018202:	47b0      	blx	r6
 8018204:	1c41      	adds	r1, r0, #1
 8018206:	d1c7      	bne.n	8018198 <__sflush_r+0x34>
 8018208:	682b      	ldr	r3, [r5, #0]
 801820a:	2b00      	cmp	r3, #0
 801820c:	d0c4      	beq.n	8018198 <__sflush_r+0x34>
 801820e:	2b1d      	cmp	r3, #29
 8018210:	d001      	beq.n	8018216 <__sflush_r+0xb2>
 8018212:	2b16      	cmp	r3, #22
 8018214:	d101      	bne.n	801821a <__sflush_r+0xb6>
 8018216:	602f      	str	r7, [r5, #0]
 8018218:	e7b1      	b.n	801817e <__sflush_r+0x1a>
 801821a:	89a3      	ldrh	r3, [r4, #12]
 801821c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018220:	81a3      	strh	r3, [r4, #12]
 8018222:	e7ad      	b.n	8018180 <__sflush_r+0x1c>
 8018224:	690f      	ldr	r7, [r1, #16]
 8018226:	2f00      	cmp	r7, #0
 8018228:	d0a9      	beq.n	801817e <__sflush_r+0x1a>
 801822a:	0793      	lsls	r3, r2, #30
 801822c:	680e      	ldr	r6, [r1, #0]
 801822e:	bf08      	it	eq
 8018230:	694b      	ldreq	r3, [r1, #20]
 8018232:	600f      	str	r7, [r1, #0]
 8018234:	bf18      	it	ne
 8018236:	2300      	movne	r3, #0
 8018238:	eba6 0807 	sub.w	r8, r6, r7
 801823c:	608b      	str	r3, [r1, #8]
 801823e:	f1b8 0f00 	cmp.w	r8, #0
 8018242:	dd9c      	ble.n	801817e <__sflush_r+0x1a>
 8018244:	6a21      	ldr	r1, [r4, #32]
 8018246:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8018248:	4643      	mov	r3, r8
 801824a:	463a      	mov	r2, r7
 801824c:	4628      	mov	r0, r5
 801824e:	47b0      	blx	r6
 8018250:	2800      	cmp	r0, #0
 8018252:	dc06      	bgt.n	8018262 <__sflush_r+0xfe>
 8018254:	89a3      	ldrh	r3, [r4, #12]
 8018256:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801825a:	81a3      	strh	r3, [r4, #12]
 801825c:	f04f 30ff 	mov.w	r0, #4294967295
 8018260:	e78e      	b.n	8018180 <__sflush_r+0x1c>
 8018262:	4407      	add	r7, r0
 8018264:	eba8 0800 	sub.w	r8, r8, r0
 8018268:	e7e9      	b.n	801823e <__sflush_r+0xda>
 801826a:	bf00      	nop
 801826c:	20400001 	.word	0x20400001

08018270 <_fflush_r>:
 8018270:	b538      	push	{r3, r4, r5, lr}
 8018272:	690b      	ldr	r3, [r1, #16]
 8018274:	4605      	mov	r5, r0
 8018276:	460c      	mov	r4, r1
 8018278:	b913      	cbnz	r3, 8018280 <_fflush_r+0x10>
 801827a:	2500      	movs	r5, #0
 801827c:	4628      	mov	r0, r5
 801827e:	bd38      	pop	{r3, r4, r5, pc}
 8018280:	b118      	cbz	r0, 801828a <_fflush_r+0x1a>
 8018282:	6983      	ldr	r3, [r0, #24]
 8018284:	b90b      	cbnz	r3, 801828a <_fflush_r+0x1a>
 8018286:	f000 f887 	bl	8018398 <__sinit>
 801828a:	4b14      	ldr	r3, [pc, #80]	; (80182dc <_fflush_r+0x6c>)
 801828c:	429c      	cmp	r4, r3
 801828e:	d11b      	bne.n	80182c8 <_fflush_r+0x58>
 8018290:	686c      	ldr	r4, [r5, #4]
 8018292:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018296:	2b00      	cmp	r3, #0
 8018298:	d0ef      	beq.n	801827a <_fflush_r+0xa>
 801829a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801829c:	07d0      	lsls	r0, r2, #31
 801829e:	d404      	bmi.n	80182aa <_fflush_r+0x3a>
 80182a0:	0599      	lsls	r1, r3, #22
 80182a2:	d402      	bmi.n	80182aa <_fflush_r+0x3a>
 80182a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80182a6:	f000 f915 	bl	80184d4 <__retarget_lock_acquire_recursive>
 80182aa:	4628      	mov	r0, r5
 80182ac:	4621      	mov	r1, r4
 80182ae:	f7ff ff59 	bl	8018164 <__sflush_r>
 80182b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80182b4:	07da      	lsls	r2, r3, #31
 80182b6:	4605      	mov	r5, r0
 80182b8:	d4e0      	bmi.n	801827c <_fflush_r+0xc>
 80182ba:	89a3      	ldrh	r3, [r4, #12]
 80182bc:	059b      	lsls	r3, r3, #22
 80182be:	d4dd      	bmi.n	801827c <_fflush_r+0xc>
 80182c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80182c2:	f000 f908 	bl	80184d6 <__retarget_lock_release_recursive>
 80182c6:	e7d9      	b.n	801827c <_fflush_r+0xc>
 80182c8:	4b05      	ldr	r3, [pc, #20]	; (80182e0 <_fflush_r+0x70>)
 80182ca:	429c      	cmp	r4, r3
 80182cc:	d101      	bne.n	80182d2 <_fflush_r+0x62>
 80182ce:	68ac      	ldr	r4, [r5, #8]
 80182d0:	e7df      	b.n	8018292 <_fflush_r+0x22>
 80182d2:	4b04      	ldr	r3, [pc, #16]	; (80182e4 <_fflush_r+0x74>)
 80182d4:	429c      	cmp	r4, r3
 80182d6:	bf08      	it	eq
 80182d8:	68ec      	ldreq	r4, [r5, #12]
 80182da:	e7da      	b.n	8018292 <_fflush_r+0x22>
 80182dc:	080198d0 	.word	0x080198d0
 80182e0:	080198f0 	.word	0x080198f0
 80182e4:	080198b0 	.word	0x080198b0

080182e8 <std>:
 80182e8:	2300      	movs	r3, #0
 80182ea:	b510      	push	{r4, lr}
 80182ec:	4604      	mov	r4, r0
 80182ee:	e9c0 3300 	strd	r3, r3, [r0]
 80182f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80182f6:	6083      	str	r3, [r0, #8]
 80182f8:	8181      	strh	r1, [r0, #12]
 80182fa:	6643      	str	r3, [r0, #100]	; 0x64
 80182fc:	81c2      	strh	r2, [r0, #14]
 80182fe:	6183      	str	r3, [r0, #24]
 8018300:	4619      	mov	r1, r3
 8018302:	2208      	movs	r2, #8
 8018304:	305c      	adds	r0, #92	; 0x5c
 8018306:	f7fb fee9 	bl	80140dc <memset>
 801830a:	4b05      	ldr	r3, [pc, #20]	; (8018320 <std+0x38>)
 801830c:	6263      	str	r3, [r4, #36]	; 0x24
 801830e:	4b05      	ldr	r3, [pc, #20]	; (8018324 <std+0x3c>)
 8018310:	62a3      	str	r3, [r4, #40]	; 0x28
 8018312:	4b05      	ldr	r3, [pc, #20]	; (8018328 <std+0x40>)
 8018314:	62e3      	str	r3, [r4, #44]	; 0x2c
 8018316:	4b05      	ldr	r3, [pc, #20]	; (801832c <std+0x44>)
 8018318:	6224      	str	r4, [r4, #32]
 801831a:	6323      	str	r3, [r4, #48]	; 0x30
 801831c:	bd10      	pop	{r4, pc}
 801831e:	bf00      	nop
 8018320:	080186a9 	.word	0x080186a9
 8018324:	080186cb 	.word	0x080186cb
 8018328:	08018703 	.word	0x08018703
 801832c:	08018727 	.word	0x08018727

08018330 <_cleanup_r>:
 8018330:	4901      	ldr	r1, [pc, #4]	; (8018338 <_cleanup_r+0x8>)
 8018332:	f000 b8af 	b.w	8018494 <_fwalk_reent>
 8018336:	bf00      	nop
 8018338:	08018271 	.word	0x08018271

0801833c <__sfmoreglue>:
 801833c:	b570      	push	{r4, r5, r6, lr}
 801833e:	1e4a      	subs	r2, r1, #1
 8018340:	2568      	movs	r5, #104	; 0x68
 8018342:	4355      	muls	r5, r2
 8018344:	460e      	mov	r6, r1
 8018346:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801834a:	f7fb ff1f 	bl	801418c <_malloc_r>
 801834e:	4604      	mov	r4, r0
 8018350:	b140      	cbz	r0, 8018364 <__sfmoreglue+0x28>
 8018352:	2100      	movs	r1, #0
 8018354:	e9c0 1600 	strd	r1, r6, [r0]
 8018358:	300c      	adds	r0, #12
 801835a:	60a0      	str	r0, [r4, #8]
 801835c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8018360:	f7fb febc 	bl	80140dc <memset>
 8018364:	4620      	mov	r0, r4
 8018366:	bd70      	pop	{r4, r5, r6, pc}

08018368 <__sfp_lock_acquire>:
 8018368:	4801      	ldr	r0, [pc, #4]	; (8018370 <__sfp_lock_acquire+0x8>)
 801836a:	f000 b8b3 	b.w	80184d4 <__retarget_lock_acquire_recursive>
 801836e:	bf00      	nop
 8018370:	2000661c 	.word	0x2000661c

08018374 <__sfp_lock_release>:
 8018374:	4801      	ldr	r0, [pc, #4]	; (801837c <__sfp_lock_release+0x8>)
 8018376:	f000 b8ae 	b.w	80184d6 <__retarget_lock_release_recursive>
 801837a:	bf00      	nop
 801837c:	2000661c 	.word	0x2000661c

08018380 <__sinit_lock_acquire>:
 8018380:	4801      	ldr	r0, [pc, #4]	; (8018388 <__sinit_lock_acquire+0x8>)
 8018382:	f000 b8a7 	b.w	80184d4 <__retarget_lock_acquire_recursive>
 8018386:	bf00      	nop
 8018388:	20006617 	.word	0x20006617

0801838c <__sinit_lock_release>:
 801838c:	4801      	ldr	r0, [pc, #4]	; (8018394 <__sinit_lock_release+0x8>)
 801838e:	f000 b8a2 	b.w	80184d6 <__retarget_lock_release_recursive>
 8018392:	bf00      	nop
 8018394:	20006617 	.word	0x20006617

08018398 <__sinit>:
 8018398:	b510      	push	{r4, lr}
 801839a:	4604      	mov	r4, r0
 801839c:	f7ff fff0 	bl	8018380 <__sinit_lock_acquire>
 80183a0:	69a3      	ldr	r3, [r4, #24]
 80183a2:	b11b      	cbz	r3, 80183ac <__sinit+0x14>
 80183a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80183a8:	f7ff bff0 	b.w	801838c <__sinit_lock_release>
 80183ac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80183b0:	6523      	str	r3, [r4, #80]	; 0x50
 80183b2:	4b13      	ldr	r3, [pc, #76]	; (8018400 <__sinit+0x68>)
 80183b4:	4a13      	ldr	r2, [pc, #76]	; (8018404 <__sinit+0x6c>)
 80183b6:	681b      	ldr	r3, [r3, #0]
 80183b8:	62a2      	str	r2, [r4, #40]	; 0x28
 80183ba:	42a3      	cmp	r3, r4
 80183bc:	bf04      	itt	eq
 80183be:	2301      	moveq	r3, #1
 80183c0:	61a3      	streq	r3, [r4, #24]
 80183c2:	4620      	mov	r0, r4
 80183c4:	f000 f820 	bl	8018408 <__sfp>
 80183c8:	6060      	str	r0, [r4, #4]
 80183ca:	4620      	mov	r0, r4
 80183cc:	f000 f81c 	bl	8018408 <__sfp>
 80183d0:	60a0      	str	r0, [r4, #8]
 80183d2:	4620      	mov	r0, r4
 80183d4:	f000 f818 	bl	8018408 <__sfp>
 80183d8:	2200      	movs	r2, #0
 80183da:	60e0      	str	r0, [r4, #12]
 80183dc:	2104      	movs	r1, #4
 80183de:	6860      	ldr	r0, [r4, #4]
 80183e0:	f7ff ff82 	bl	80182e8 <std>
 80183e4:	68a0      	ldr	r0, [r4, #8]
 80183e6:	2201      	movs	r2, #1
 80183e8:	2109      	movs	r1, #9
 80183ea:	f7ff ff7d 	bl	80182e8 <std>
 80183ee:	68e0      	ldr	r0, [r4, #12]
 80183f0:	2202      	movs	r2, #2
 80183f2:	2112      	movs	r1, #18
 80183f4:	f7ff ff78 	bl	80182e8 <std>
 80183f8:	2301      	movs	r3, #1
 80183fa:	61a3      	str	r3, [r4, #24]
 80183fc:	e7d2      	b.n	80183a4 <__sinit+0xc>
 80183fe:	bf00      	nop
 8018400:	080193e0 	.word	0x080193e0
 8018404:	08018331 	.word	0x08018331

08018408 <__sfp>:
 8018408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801840a:	4607      	mov	r7, r0
 801840c:	f7ff ffac 	bl	8018368 <__sfp_lock_acquire>
 8018410:	4b1e      	ldr	r3, [pc, #120]	; (801848c <__sfp+0x84>)
 8018412:	681e      	ldr	r6, [r3, #0]
 8018414:	69b3      	ldr	r3, [r6, #24]
 8018416:	b913      	cbnz	r3, 801841e <__sfp+0x16>
 8018418:	4630      	mov	r0, r6
 801841a:	f7ff ffbd 	bl	8018398 <__sinit>
 801841e:	3648      	adds	r6, #72	; 0x48
 8018420:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8018424:	3b01      	subs	r3, #1
 8018426:	d503      	bpl.n	8018430 <__sfp+0x28>
 8018428:	6833      	ldr	r3, [r6, #0]
 801842a:	b30b      	cbz	r3, 8018470 <__sfp+0x68>
 801842c:	6836      	ldr	r6, [r6, #0]
 801842e:	e7f7      	b.n	8018420 <__sfp+0x18>
 8018430:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8018434:	b9d5      	cbnz	r5, 801846c <__sfp+0x64>
 8018436:	4b16      	ldr	r3, [pc, #88]	; (8018490 <__sfp+0x88>)
 8018438:	60e3      	str	r3, [r4, #12]
 801843a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801843e:	6665      	str	r5, [r4, #100]	; 0x64
 8018440:	f000 f847 	bl	80184d2 <__retarget_lock_init_recursive>
 8018444:	f7ff ff96 	bl	8018374 <__sfp_lock_release>
 8018448:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801844c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8018450:	6025      	str	r5, [r4, #0]
 8018452:	61a5      	str	r5, [r4, #24]
 8018454:	2208      	movs	r2, #8
 8018456:	4629      	mov	r1, r5
 8018458:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801845c:	f7fb fe3e 	bl	80140dc <memset>
 8018460:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8018464:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8018468:	4620      	mov	r0, r4
 801846a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801846c:	3468      	adds	r4, #104	; 0x68
 801846e:	e7d9      	b.n	8018424 <__sfp+0x1c>
 8018470:	2104      	movs	r1, #4
 8018472:	4638      	mov	r0, r7
 8018474:	f7ff ff62 	bl	801833c <__sfmoreglue>
 8018478:	4604      	mov	r4, r0
 801847a:	6030      	str	r0, [r6, #0]
 801847c:	2800      	cmp	r0, #0
 801847e:	d1d5      	bne.n	801842c <__sfp+0x24>
 8018480:	f7ff ff78 	bl	8018374 <__sfp_lock_release>
 8018484:	230c      	movs	r3, #12
 8018486:	603b      	str	r3, [r7, #0]
 8018488:	e7ee      	b.n	8018468 <__sfp+0x60>
 801848a:	bf00      	nop
 801848c:	080193e0 	.word	0x080193e0
 8018490:	ffff0001 	.word	0xffff0001

08018494 <_fwalk_reent>:
 8018494:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018498:	4606      	mov	r6, r0
 801849a:	4688      	mov	r8, r1
 801849c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80184a0:	2700      	movs	r7, #0
 80184a2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80184a6:	f1b9 0901 	subs.w	r9, r9, #1
 80184aa:	d505      	bpl.n	80184b8 <_fwalk_reent+0x24>
 80184ac:	6824      	ldr	r4, [r4, #0]
 80184ae:	2c00      	cmp	r4, #0
 80184b0:	d1f7      	bne.n	80184a2 <_fwalk_reent+0xe>
 80184b2:	4638      	mov	r0, r7
 80184b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80184b8:	89ab      	ldrh	r3, [r5, #12]
 80184ba:	2b01      	cmp	r3, #1
 80184bc:	d907      	bls.n	80184ce <_fwalk_reent+0x3a>
 80184be:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80184c2:	3301      	adds	r3, #1
 80184c4:	d003      	beq.n	80184ce <_fwalk_reent+0x3a>
 80184c6:	4629      	mov	r1, r5
 80184c8:	4630      	mov	r0, r6
 80184ca:	47c0      	blx	r8
 80184cc:	4307      	orrs	r7, r0
 80184ce:	3568      	adds	r5, #104	; 0x68
 80184d0:	e7e9      	b.n	80184a6 <_fwalk_reent+0x12>

080184d2 <__retarget_lock_init_recursive>:
 80184d2:	4770      	bx	lr

080184d4 <__retarget_lock_acquire_recursive>:
 80184d4:	4770      	bx	lr

080184d6 <__retarget_lock_release_recursive>:
 80184d6:	4770      	bx	lr

080184d8 <__swhatbuf_r>:
 80184d8:	b570      	push	{r4, r5, r6, lr}
 80184da:	460e      	mov	r6, r1
 80184dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80184e0:	2900      	cmp	r1, #0
 80184e2:	b096      	sub	sp, #88	; 0x58
 80184e4:	4614      	mov	r4, r2
 80184e6:	461d      	mov	r5, r3
 80184e8:	da07      	bge.n	80184fa <__swhatbuf_r+0x22>
 80184ea:	2300      	movs	r3, #0
 80184ec:	602b      	str	r3, [r5, #0]
 80184ee:	89b3      	ldrh	r3, [r6, #12]
 80184f0:	061a      	lsls	r2, r3, #24
 80184f2:	d410      	bmi.n	8018516 <__swhatbuf_r+0x3e>
 80184f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80184f8:	e00e      	b.n	8018518 <__swhatbuf_r+0x40>
 80184fa:	466a      	mov	r2, sp
 80184fc:	f000 f93a 	bl	8018774 <_fstat_r>
 8018500:	2800      	cmp	r0, #0
 8018502:	dbf2      	blt.n	80184ea <__swhatbuf_r+0x12>
 8018504:	9a01      	ldr	r2, [sp, #4]
 8018506:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801850a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801850e:	425a      	negs	r2, r3
 8018510:	415a      	adcs	r2, r3
 8018512:	602a      	str	r2, [r5, #0]
 8018514:	e7ee      	b.n	80184f4 <__swhatbuf_r+0x1c>
 8018516:	2340      	movs	r3, #64	; 0x40
 8018518:	2000      	movs	r0, #0
 801851a:	6023      	str	r3, [r4, #0]
 801851c:	b016      	add	sp, #88	; 0x58
 801851e:	bd70      	pop	{r4, r5, r6, pc}

08018520 <__smakebuf_r>:
 8018520:	898b      	ldrh	r3, [r1, #12]
 8018522:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018524:	079d      	lsls	r5, r3, #30
 8018526:	4606      	mov	r6, r0
 8018528:	460c      	mov	r4, r1
 801852a:	d507      	bpl.n	801853c <__smakebuf_r+0x1c>
 801852c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8018530:	6023      	str	r3, [r4, #0]
 8018532:	6123      	str	r3, [r4, #16]
 8018534:	2301      	movs	r3, #1
 8018536:	6163      	str	r3, [r4, #20]
 8018538:	b002      	add	sp, #8
 801853a:	bd70      	pop	{r4, r5, r6, pc}
 801853c:	ab01      	add	r3, sp, #4
 801853e:	466a      	mov	r2, sp
 8018540:	f7ff ffca 	bl	80184d8 <__swhatbuf_r>
 8018544:	9900      	ldr	r1, [sp, #0]
 8018546:	4605      	mov	r5, r0
 8018548:	4630      	mov	r0, r6
 801854a:	f7fb fe1f 	bl	801418c <_malloc_r>
 801854e:	b948      	cbnz	r0, 8018564 <__smakebuf_r+0x44>
 8018550:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018554:	059a      	lsls	r2, r3, #22
 8018556:	d4ef      	bmi.n	8018538 <__smakebuf_r+0x18>
 8018558:	f023 0303 	bic.w	r3, r3, #3
 801855c:	f043 0302 	orr.w	r3, r3, #2
 8018560:	81a3      	strh	r3, [r4, #12]
 8018562:	e7e3      	b.n	801852c <__smakebuf_r+0xc>
 8018564:	4b0d      	ldr	r3, [pc, #52]	; (801859c <__smakebuf_r+0x7c>)
 8018566:	62b3      	str	r3, [r6, #40]	; 0x28
 8018568:	89a3      	ldrh	r3, [r4, #12]
 801856a:	6020      	str	r0, [r4, #0]
 801856c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018570:	81a3      	strh	r3, [r4, #12]
 8018572:	9b00      	ldr	r3, [sp, #0]
 8018574:	6163      	str	r3, [r4, #20]
 8018576:	9b01      	ldr	r3, [sp, #4]
 8018578:	6120      	str	r0, [r4, #16]
 801857a:	b15b      	cbz	r3, 8018594 <__smakebuf_r+0x74>
 801857c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018580:	4630      	mov	r0, r6
 8018582:	f000 f909 	bl	8018798 <_isatty_r>
 8018586:	b128      	cbz	r0, 8018594 <__smakebuf_r+0x74>
 8018588:	89a3      	ldrh	r3, [r4, #12]
 801858a:	f023 0303 	bic.w	r3, r3, #3
 801858e:	f043 0301 	orr.w	r3, r3, #1
 8018592:	81a3      	strh	r3, [r4, #12]
 8018594:	89a0      	ldrh	r0, [r4, #12]
 8018596:	4305      	orrs	r5, r0
 8018598:	81a5      	strh	r5, [r4, #12]
 801859a:	e7cd      	b.n	8018538 <__smakebuf_r+0x18>
 801859c:	08018331 	.word	0x08018331

080185a0 <memmove>:
 80185a0:	4288      	cmp	r0, r1
 80185a2:	b510      	push	{r4, lr}
 80185a4:	eb01 0402 	add.w	r4, r1, r2
 80185a8:	d902      	bls.n	80185b0 <memmove+0x10>
 80185aa:	4284      	cmp	r4, r0
 80185ac:	4623      	mov	r3, r4
 80185ae:	d807      	bhi.n	80185c0 <memmove+0x20>
 80185b0:	1e43      	subs	r3, r0, #1
 80185b2:	42a1      	cmp	r1, r4
 80185b4:	d008      	beq.n	80185c8 <memmove+0x28>
 80185b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80185ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80185be:	e7f8      	b.n	80185b2 <memmove+0x12>
 80185c0:	4402      	add	r2, r0
 80185c2:	4601      	mov	r1, r0
 80185c4:	428a      	cmp	r2, r1
 80185c6:	d100      	bne.n	80185ca <memmove+0x2a>
 80185c8:	bd10      	pop	{r4, pc}
 80185ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80185ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80185d2:	e7f7      	b.n	80185c4 <memmove+0x24>

080185d4 <_realloc_r>:
 80185d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80185d6:	4607      	mov	r7, r0
 80185d8:	4614      	mov	r4, r2
 80185da:	460e      	mov	r6, r1
 80185dc:	b921      	cbnz	r1, 80185e8 <_realloc_r+0x14>
 80185de:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80185e2:	4611      	mov	r1, r2
 80185e4:	f7fb bdd2 	b.w	801418c <_malloc_r>
 80185e8:	b922      	cbnz	r2, 80185f4 <_realloc_r+0x20>
 80185ea:	f7fb fd7f 	bl	80140ec <_free_r>
 80185ee:	4625      	mov	r5, r4
 80185f0:	4628      	mov	r0, r5
 80185f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80185f4:	f000 f8f2 	bl	80187dc <_malloc_usable_size_r>
 80185f8:	42a0      	cmp	r0, r4
 80185fa:	d20f      	bcs.n	801861c <_realloc_r+0x48>
 80185fc:	4621      	mov	r1, r4
 80185fe:	4638      	mov	r0, r7
 8018600:	f7fb fdc4 	bl	801418c <_malloc_r>
 8018604:	4605      	mov	r5, r0
 8018606:	2800      	cmp	r0, #0
 8018608:	d0f2      	beq.n	80185f0 <_realloc_r+0x1c>
 801860a:	4631      	mov	r1, r6
 801860c:	4622      	mov	r2, r4
 801860e:	f7fb fd57 	bl	80140c0 <memcpy>
 8018612:	4631      	mov	r1, r6
 8018614:	4638      	mov	r0, r7
 8018616:	f7fb fd69 	bl	80140ec <_free_r>
 801861a:	e7e9      	b.n	80185f0 <_realloc_r+0x1c>
 801861c:	4635      	mov	r5, r6
 801861e:	e7e7      	b.n	80185f0 <_realloc_r+0x1c>

08018620 <_raise_r>:
 8018620:	291f      	cmp	r1, #31
 8018622:	b538      	push	{r3, r4, r5, lr}
 8018624:	4604      	mov	r4, r0
 8018626:	460d      	mov	r5, r1
 8018628:	d904      	bls.n	8018634 <_raise_r+0x14>
 801862a:	2316      	movs	r3, #22
 801862c:	6003      	str	r3, [r0, #0]
 801862e:	f04f 30ff 	mov.w	r0, #4294967295
 8018632:	bd38      	pop	{r3, r4, r5, pc}
 8018634:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8018636:	b112      	cbz	r2, 801863e <_raise_r+0x1e>
 8018638:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801863c:	b94b      	cbnz	r3, 8018652 <_raise_r+0x32>
 801863e:	4620      	mov	r0, r4
 8018640:	f000 f830 	bl	80186a4 <_getpid_r>
 8018644:	462a      	mov	r2, r5
 8018646:	4601      	mov	r1, r0
 8018648:	4620      	mov	r0, r4
 801864a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801864e:	f000 b817 	b.w	8018680 <_kill_r>
 8018652:	2b01      	cmp	r3, #1
 8018654:	d00a      	beq.n	801866c <_raise_r+0x4c>
 8018656:	1c59      	adds	r1, r3, #1
 8018658:	d103      	bne.n	8018662 <_raise_r+0x42>
 801865a:	2316      	movs	r3, #22
 801865c:	6003      	str	r3, [r0, #0]
 801865e:	2001      	movs	r0, #1
 8018660:	e7e7      	b.n	8018632 <_raise_r+0x12>
 8018662:	2400      	movs	r4, #0
 8018664:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8018668:	4628      	mov	r0, r5
 801866a:	4798      	blx	r3
 801866c:	2000      	movs	r0, #0
 801866e:	e7e0      	b.n	8018632 <_raise_r+0x12>

08018670 <raise>:
 8018670:	4b02      	ldr	r3, [pc, #8]	; (801867c <raise+0xc>)
 8018672:	4601      	mov	r1, r0
 8018674:	6818      	ldr	r0, [r3, #0]
 8018676:	f7ff bfd3 	b.w	8018620 <_raise_r>
 801867a:	bf00      	nop
 801867c:	20001504 	.word	0x20001504

08018680 <_kill_r>:
 8018680:	b538      	push	{r3, r4, r5, lr}
 8018682:	4d07      	ldr	r5, [pc, #28]	; (80186a0 <_kill_r+0x20>)
 8018684:	2300      	movs	r3, #0
 8018686:	4604      	mov	r4, r0
 8018688:	4608      	mov	r0, r1
 801868a:	4611      	mov	r1, r2
 801868c:	602b      	str	r3, [r5, #0]
 801868e:	f7ee fdbf 	bl	8007210 <_kill>
 8018692:	1c43      	adds	r3, r0, #1
 8018694:	d102      	bne.n	801869c <_kill_r+0x1c>
 8018696:	682b      	ldr	r3, [r5, #0]
 8018698:	b103      	cbz	r3, 801869c <_kill_r+0x1c>
 801869a:	6023      	str	r3, [r4, #0]
 801869c:	bd38      	pop	{r3, r4, r5, pc}
 801869e:	bf00      	nop
 80186a0:	20006610 	.word	0x20006610

080186a4 <_getpid_r>:
 80186a4:	f7ee bdac 	b.w	8007200 <_getpid>

080186a8 <__sread>:
 80186a8:	b510      	push	{r4, lr}
 80186aa:	460c      	mov	r4, r1
 80186ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80186b0:	f000 f89c 	bl	80187ec <_read_r>
 80186b4:	2800      	cmp	r0, #0
 80186b6:	bfab      	itete	ge
 80186b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80186ba:	89a3      	ldrhlt	r3, [r4, #12]
 80186bc:	181b      	addge	r3, r3, r0
 80186be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80186c2:	bfac      	ite	ge
 80186c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80186c6:	81a3      	strhlt	r3, [r4, #12]
 80186c8:	bd10      	pop	{r4, pc}

080186ca <__swrite>:
 80186ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80186ce:	461f      	mov	r7, r3
 80186d0:	898b      	ldrh	r3, [r1, #12]
 80186d2:	05db      	lsls	r3, r3, #23
 80186d4:	4605      	mov	r5, r0
 80186d6:	460c      	mov	r4, r1
 80186d8:	4616      	mov	r6, r2
 80186da:	d505      	bpl.n	80186e8 <__swrite+0x1e>
 80186dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80186e0:	2302      	movs	r3, #2
 80186e2:	2200      	movs	r2, #0
 80186e4:	f000 f868 	bl	80187b8 <_lseek_r>
 80186e8:	89a3      	ldrh	r3, [r4, #12]
 80186ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80186ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80186f2:	81a3      	strh	r3, [r4, #12]
 80186f4:	4632      	mov	r2, r6
 80186f6:	463b      	mov	r3, r7
 80186f8:	4628      	mov	r0, r5
 80186fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80186fe:	f000 b817 	b.w	8018730 <_write_r>

08018702 <__sseek>:
 8018702:	b510      	push	{r4, lr}
 8018704:	460c      	mov	r4, r1
 8018706:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801870a:	f000 f855 	bl	80187b8 <_lseek_r>
 801870e:	1c43      	adds	r3, r0, #1
 8018710:	89a3      	ldrh	r3, [r4, #12]
 8018712:	bf15      	itete	ne
 8018714:	6560      	strne	r0, [r4, #84]	; 0x54
 8018716:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801871a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801871e:	81a3      	strheq	r3, [r4, #12]
 8018720:	bf18      	it	ne
 8018722:	81a3      	strhne	r3, [r4, #12]
 8018724:	bd10      	pop	{r4, pc}

08018726 <__sclose>:
 8018726:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801872a:	f000 b813 	b.w	8018754 <_close_r>
	...

08018730 <_write_r>:
 8018730:	b538      	push	{r3, r4, r5, lr}
 8018732:	4d07      	ldr	r5, [pc, #28]	; (8018750 <_write_r+0x20>)
 8018734:	4604      	mov	r4, r0
 8018736:	4608      	mov	r0, r1
 8018738:	4611      	mov	r1, r2
 801873a:	2200      	movs	r2, #0
 801873c:	602a      	str	r2, [r5, #0]
 801873e:	461a      	mov	r2, r3
 8018740:	f7ee fd9d 	bl	800727e <_write>
 8018744:	1c43      	adds	r3, r0, #1
 8018746:	d102      	bne.n	801874e <_write_r+0x1e>
 8018748:	682b      	ldr	r3, [r5, #0]
 801874a:	b103      	cbz	r3, 801874e <_write_r+0x1e>
 801874c:	6023      	str	r3, [r4, #0]
 801874e:	bd38      	pop	{r3, r4, r5, pc}
 8018750:	20006610 	.word	0x20006610

08018754 <_close_r>:
 8018754:	b538      	push	{r3, r4, r5, lr}
 8018756:	4d06      	ldr	r5, [pc, #24]	; (8018770 <_close_r+0x1c>)
 8018758:	2300      	movs	r3, #0
 801875a:	4604      	mov	r4, r0
 801875c:	4608      	mov	r0, r1
 801875e:	602b      	str	r3, [r5, #0]
 8018760:	f7ee fda9 	bl	80072b6 <_close>
 8018764:	1c43      	adds	r3, r0, #1
 8018766:	d102      	bne.n	801876e <_close_r+0x1a>
 8018768:	682b      	ldr	r3, [r5, #0]
 801876a:	b103      	cbz	r3, 801876e <_close_r+0x1a>
 801876c:	6023      	str	r3, [r4, #0]
 801876e:	bd38      	pop	{r3, r4, r5, pc}
 8018770:	20006610 	.word	0x20006610

08018774 <_fstat_r>:
 8018774:	b538      	push	{r3, r4, r5, lr}
 8018776:	4d07      	ldr	r5, [pc, #28]	; (8018794 <_fstat_r+0x20>)
 8018778:	2300      	movs	r3, #0
 801877a:	4604      	mov	r4, r0
 801877c:	4608      	mov	r0, r1
 801877e:	4611      	mov	r1, r2
 8018780:	602b      	str	r3, [r5, #0]
 8018782:	f7ee fda4 	bl	80072ce <_fstat>
 8018786:	1c43      	adds	r3, r0, #1
 8018788:	d102      	bne.n	8018790 <_fstat_r+0x1c>
 801878a:	682b      	ldr	r3, [r5, #0]
 801878c:	b103      	cbz	r3, 8018790 <_fstat_r+0x1c>
 801878e:	6023      	str	r3, [r4, #0]
 8018790:	bd38      	pop	{r3, r4, r5, pc}
 8018792:	bf00      	nop
 8018794:	20006610 	.word	0x20006610

08018798 <_isatty_r>:
 8018798:	b538      	push	{r3, r4, r5, lr}
 801879a:	4d06      	ldr	r5, [pc, #24]	; (80187b4 <_isatty_r+0x1c>)
 801879c:	2300      	movs	r3, #0
 801879e:	4604      	mov	r4, r0
 80187a0:	4608      	mov	r0, r1
 80187a2:	602b      	str	r3, [r5, #0]
 80187a4:	f7ee fda3 	bl	80072ee <_isatty>
 80187a8:	1c43      	adds	r3, r0, #1
 80187aa:	d102      	bne.n	80187b2 <_isatty_r+0x1a>
 80187ac:	682b      	ldr	r3, [r5, #0]
 80187ae:	b103      	cbz	r3, 80187b2 <_isatty_r+0x1a>
 80187b0:	6023      	str	r3, [r4, #0]
 80187b2:	bd38      	pop	{r3, r4, r5, pc}
 80187b4:	20006610 	.word	0x20006610

080187b8 <_lseek_r>:
 80187b8:	b538      	push	{r3, r4, r5, lr}
 80187ba:	4d07      	ldr	r5, [pc, #28]	; (80187d8 <_lseek_r+0x20>)
 80187bc:	4604      	mov	r4, r0
 80187be:	4608      	mov	r0, r1
 80187c0:	4611      	mov	r1, r2
 80187c2:	2200      	movs	r2, #0
 80187c4:	602a      	str	r2, [r5, #0]
 80187c6:	461a      	mov	r2, r3
 80187c8:	f7ee fd9c 	bl	8007304 <_lseek>
 80187cc:	1c43      	adds	r3, r0, #1
 80187ce:	d102      	bne.n	80187d6 <_lseek_r+0x1e>
 80187d0:	682b      	ldr	r3, [r5, #0]
 80187d2:	b103      	cbz	r3, 80187d6 <_lseek_r+0x1e>
 80187d4:	6023      	str	r3, [r4, #0]
 80187d6:	bd38      	pop	{r3, r4, r5, pc}
 80187d8:	20006610 	.word	0x20006610

080187dc <_malloc_usable_size_r>:
 80187dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80187e0:	1f18      	subs	r0, r3, #4
 80187e2:	2b00      	cmp	r3, #0
 80187e4:	bfbc      	itt	lt
 80187e6:	580b      	ldrlt	r3, [r1, r0]
 80187e8:	18c0      	addlt	r0, r0, r3
 80187ea:	4770      	bx	lr

080187ec <_read_r>:
 80187ec:	b538      	push	{r3, r4, r5, lr}
 80187ee:	4d07      	ldr	r5, [pc, #28]	; (801880c <_read_r+0x20>)
 80187f0:	4604      	mov	r4, r0
 80187f2:	4608      	mov	r0, r1
 80187f4:	4611      	mov	r1, r2
 80187f6:	2200      	movs	r2, #0
 80187f8:	602a      	str	r2, [r5, #0]
 80187fa:	461a      	mov	r2, r3
 80187fc:	f7ee fd22 	bl	8007244 <_read>
 8018800:	1c43      	adds	r3, r0, #1
 8018802:	d102      	bne.n	801880a <_read_r+0x1e>
 8018804:	682b      	ldr	r3, [r5, #0]
 8018806:	b103      	cbz	r3, 801880a <_read_r+0x1e>
 8018808:	6023      	str	r3, [r4, #0]
 801880a:	bd38      	pop	{r3, r4, r5, pc}
 801880c:	20006610 	.word	0x20006610

08018810 <_init>:
 8018810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018812:	bf00      	nop
 8018814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018816:	bc08      	pop	{r3}
 8018818:	469e      	mov	lr, r3
 801881a:	4770      	bx	lr

0801881c <_fini>:
 801881c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801881e:	bf00      	nop
 8018820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018822:	bc08      	pop	{r3}
 8018824:	469e      	mov	lr, r3
 8018826:	4770      	bx	lr
